create or replace PACKAGE bsis_att_tapi_pck
IS
-- Table API package for table bsis_attributes
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:40:57)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'BSIS_ATT_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'BSIS_ATTRIBUTES';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION att_select_row( i_att_ID   IN  bsis_attributes.ID%TYPE
                       , o_rt_att   OUT bsis_attributes%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION att_select_row_upd( i_att_ID   IN  bsis_attributes.ID%TYPE
                           , o_rt_att   OUT bsis_attributes%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE att_lock_row( i_att_ID   IN  bsis_attributes.ID%TYPE )
;

PROCEDURE att_lock_row_nowait( i_att_ID   IN  bsis_attributes.ID%TYPE )
;

PROCEDURE att_insert_row ( io_rt_att  IN OUT bsis_attributes%ROWTYPE )
;

FUNCTION att_update_row( i_att_ID   IN     bsis_attributes.ID%TYPE
                       , io_rt_att  IN OUT bsis_attributes%ROWTYPE )
RETURN NUMBER
;

FUNCTION att_delete_row( i_att_ID   IN  bsis_attributes.ID%TYPE )
RETURN BOOLEAN
;


END bsis_att_tapi_pck;
/




package body bsis_att_tapi_pck
is




function att_select_row( i_att_id   in  bsis_attributes.id%type
                       , o_rt_att   out bsis_attributes%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.att_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_att ( i_att_id   in  bsis_attributes.id%type )
      is 
           select *
             from bsis_attributes att
            where att.id = i_att_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_att( i_att_id => i_att_id );
         fetch c_att into o_rt_att;
         l_found := c_att%found;
         close c_att;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_att%isopen
         then
            close c_att;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end att_select_row;

function att_select_row_upd( i_att_id   in  bsis_attributes.id%type
                           , o_rt_att   out bsis_attributes%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.att_select_row_upd';
   l_found                boolean      := false;

   cursor c_att ( i_att_id   in  bsis_attributes.id%type )
   is
           select *
             from bsis_attributes att
            where att.id = i_att_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_att( i_att_id => i_att_id );
   fetch c_att into o_rt_att;
   l_found := c_att%found;
   close c_att;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_att%isopen
      then
         close c_att;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end att_select_row_upd;

procedure att_lock_row( i_att_id   in  bsis_attributes.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.att_lock_row';
begin
  declare
     cursor c_att ( i_att_id   in  bsis_attributes.id%type )
     is
             select ''
               from bsis_attributes att
              where att.id = i_att_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_att_id is not null
         then
            begin
                
                att_lock_row_nowait( i_att_id => i_att_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_att( i_att_id => i_att_id );
                  close c_att;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_att%isopen
         then
            close c_att;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end att_lock_row;

procedure att_lock_row_nowait( i_att_id   in  bsis_attributes.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.att_lock_row_nowait';
begin
   declare
      cursor c_att ( i_att_id   in  bsis_attributes.id%type )
      is
              select ''
                from bsis_attributes att
               where att.id = i_att_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_att_id is not null
         then
            
            open c_att( i_att_id => i_att_id );

            close c_att;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_att%isopen
        then
           close c_att;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_att_id||'"' );
   end;                                                          
end att_lock_row_nowait;

function att_perform_update( i_att_id   in     bsis_attributes.id%type
                           , io_rt_att  in out bsis_attributes%rowtype )
return number
;

function att_perform_delete( i_att_id   in  bsis_attributes.id%type )
return boolean
;

procedure att_insert_row ( io_rt_att  in out bsis_attributes%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.att_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into bsis_attributes( id
                                , element
                                , attribute_name
                                , merge_strategy
                                , custom_procedure
                                , priority_message_type
                                , schema_validation )
              values ( io_rt_att.id
                     , io_rt_att.element
                     , io_rt_att.attribute_name
                     , io_rt_att.merge_strategy
                     , io_rt_att.custom_procedure
                     , io_rt_att.priority_message_type
                     , io_rt_att.schema_validation )
           returning id
                   , element
                   , attribute_name
                   , merge_strategy
                   , custom_procedure
                   , priority_message_type
                   , schema_validation
                into io_rt_att.id
                   , io_rt_att.element
                   , io_rt_att.attribute_name
                   , io_rt_att.merge_strategy
                   , io_rt_att.custom_procedure
                   , io_rt_att.priority_message_type
                   , io_rt_att.schema_validation;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_att.id||'"'
                                                             ||', ELEMENT = "'||io_rt_att.element||'"'
                                                             ||', ATTRIBUTE_NAME = "'||io_rt_att.attribute_name||'"'
                                                             ||', MERGE_STRATEGY = "'||io_rt_att.merge_strategy||'"'
                                                             ||', CUSTOM_PROCEDURE = "'||io_rt_att.custom_procedure||'"'
                                                             ||', PRIORITY_MESSAGE_TYPE = "'||io_rt_att.priority_message_type||'"'
                                                             ||', SCHEMA_VALIDATION = "'||io_rt_att.schema_validation||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end att_insert_row;

function att_perform_update( i_att_id   in     bsis_attributes.id%type
                           , io_rt_att  in out bsis_attributes%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.att_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update bsis_attributes
            set id = io_rt_att.id
              , element = io_rt_att.element
              , attribute_name = io_rt_att.attribute_name
              , merge_strategy = io_rt_att.merge_strategy
              , custom_procedure = io_rt_att.custom_procedure
              , priority_message_type = io_rt_att.priority_message_type
              , schema_validation = io_rt_att.schema_validation
          where id = i_att_id
      returning id
              , element
              , attribute_name
              , merge_strategy
              , custom_procedure
              , priority_message_type
              , schema_validation
           into io_rt_att.id
              , io_rt_att.element
              , io_rt_att.attribute_name
              , io_rt_att.merge_strategy
              , io_rt_att.custom_procedure
              , io_rt_att.priority_message_type
              , io_rt_att.schema_validation;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_att.id||'"'
                                                             ||', ELEMENT = "'||io_rt_att.element||'"'
                                                             ||', ATTRIBUTE_NAME = "'||io_rt_att.attribute_name||'"'
                                                             ||', MERGE_STRATEGY = "'||io_rt_att.merge_strategy||'"'
                                                             ||', CUSTOM_PROCEDURE = "'||io_rt_att.custom_procedure||'"'
                                                             ||', PRIORITY_MESSAGE_TYPE = "'||io_rt_att.priority_message_type||'"'
                                                             ||', SCHEMA_VALIDATION = "'||io_rt_att.schema_validation||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end att_perform_update;

function att_perform_delete( i_att_id   in  bsis_attributes.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.att_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from bsis_attributes
          where id = i_att_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_att_id||'"' );
   end;                                                          
end att_perform_delete;

function att_update_row( i_att_id   in     bsis_attributes.id%type
                       , io_rt_att  in out bsis_attributes%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.att_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         att_lock_row( i_att_id   =>  i_att_id );

         
         l_rowcount := 
            att_perform_update( i_att_id   =>  i_att_id
                              , io_rt_att  => io_rt_att );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_att.id||'"'
                                                          ||', ELEMENT = "'||io_rt_att.element||'"'
                                                          ||', ATTRIBUTE_NAME = "'||io_rt_att.attribute_name||'"'
                                                          ||', MERGE_STRATEGY = "'||io_rt_att.merge_strategy||'"'
                                                          ||', CUSTOM_PROCEDURE = "'||io_rt_att.custom_procedure||'"'
                                                          ||', PRIORITY_MESSAGE_TYPE = "'||io_rt_att.priority_message_type||'"'
                                                          ||', SCHEMA_VALIDATION = "'||io_rt_att.schema_validation||'"'                                                           , 1, 4000));
   end;                                                          
end att_update_row;

function att_delete_row( i_att_id   in  bsis_attributes.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.att_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         att_lock_row( i_att_id   =>  i_att_id );

         
         l_deleted := att_perform_delete( i_att_id   =>  i_att_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_att_id||'"' );
   end;                                                          
end att_delete_row;


end bsis_att_tapi_pck;
/