create or replace PACKAGE bsis_scr_tapi_pck
IS
-- Table API package for table bsis_subscription_content_ftrs
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:40:58)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'BSIS_SCR_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'BSIS_SUBSCRIPTION_CONTENT_FTRS';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION scr_select_row( i_scr_ID   IN  bsis_subscription_content_ftrs.ID%TYPE
                       , o_rt_scr   OUT bsis_subscription_content_ftrs%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION scr_select_row_uk1( i_scr_SSR_ID   IN  bsis_subscription_content_ftrs.SSR_ID%TYPE
                           , i_scr_FILTER_ELEMENT   IN  bsis_subscription_content_ftrs.FILTER_ELEMENT%TYPE
                           , i_scr_FILTER_XPATH   IN  bsis_subscription_content_ftrs.FILTER_XPATH%TYPE
                           , o_rt_scr  OUT bsis_subscription_content_ftrs%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION scr_select_row_upd( i_scr_ID   IN  bsis_subscription_content_ftrs.ID%TYPE
                           , o_rt_scr   OUT bsis_subscription_content_ftrs%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION scr_select_row_upd_uk1( i_scr_SSR_ID   IN  bsis_subscription_content_ftrs.SSR_ID%TYPE
                               , i_scr_FILTER_ELEMENT   IN  bsis_subscription_content_ftrs.FILTER_ELEMENT%TYPE
                               , i_scr_FILTER_XPATH   IN  bsis_subscription_content_ftrs.FILTER_XPATH%TYPE
                               , o_rt_scr  OUT bsis_subscription_content_ftrs%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE scr_lock_row( i_scr_ID   IN  bsis_subscription_content_ftrs.ID%TYPE )
;

PROCEDURE scr_lock_row_nowait( i_scr_ID   IN  bsis_subscription_content_ftrs.ID%TYPE )
;

PROCEDURE scr_insert_row ( io_rt_scr  IN OUT bsis_subscription_content_ftrs%ROWTYPE )
;

FUNCTION scr_update_row( i_scr_ID   IN     bsis_subscription_content_ftrs.ID%TYPE
                       , io_rt_scr  IN OUT bsis_subscription_content_ftrs%ROWTYPE )
RETURN NUMBER
;

FUNCTION scr_delete_row( i_scr_ID   IN  bsis_subscription_content_ftrs.ID%TYPE )
RETURN BOOLEAN
;

FUNCTION scr_seq1_nextval
RETURN bsis_subscription_content_ftrs.ID%TYPE
;


END bsis_scr_tapi_pck;
/




package body bsis_scr_tapi_pck
is




function scr_select_row( i_scr_id   in  bsis_subscription_content_ftrs.id%type
                       , o_rt_scr   out bsis_subscription_content_ftrs%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.scr_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_scr ( i_scr_id   in  bsis_subscription_content_ftrs.id%type )
      is 
           select *
             from bsis_subscription_content_ftrs scr
            where scr.id = i_scr_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_scr( i_scr_id => i_scr_id );
         fetch c_scr into o_rt_scr;
         l_found := c_scr%found;
         close c_scr;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_scr%isopen
         then
            close c_scr;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end scr_select_row;

function scr_select_row_uk1( i_scr_ssr_id   in  bsis_subscription_content_ftrs.ssr_id%type
                           , i_scr_filter_element   in  bsis_subscription_content_ftrs.filter_element%type
                           , i_scr_filter_xpath   in  bsis_subscription_content_ftrs.filter_xpath%type
                           , o_rt_scr  out bsis_subscription_content_ftrs%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.scr_select_row_uk1';
   l_found                boolean      := false;
begin
   declare
      cursor c_scr ( i_scr_ssr_id   in  bsis_subscription_content_ftrs.ssr_id%type
                   , i_scr_filter_element   in  bsis_subscription_content_ftrs.filter_element%type
                   , i_scr_filter_xpath   in  bsis_subscription_content_ftrs.filter_xpath%type )
      is
         select *
           from bsis_subscription_content_ftrs scr
          where scr.ssr_id = i_scr_ssr_id 
            and ( scr.filter_element = i_scr_filter_element or (scr.filter_element is null  and i_scr_filter_element is null  ))
            and ( scr.filter_xpath = i_scr_filter_xpath or (scr.filter_xpath is null  and i_scr_filter_xpath is null  ));
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_scr(i_scr_ssr_id => i_scr_ssr_id, i_scr_filter_element => i_scr_filter_element, i_scr_filter_xpath => i_scr_filter_xpath);
         fetch c_scr into o_rt_scr;
         l_found := c_scr%found;
         close c_scr;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_scr%isopen
      then
         close c_scr;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end scr_select_row_uk1;

function scr_select_row_upd( i_scr_id   in  bsis_subscription_content_ftrs.id%type
                           , o_rt_scr   out bsis_subscription_content_ftrs%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.scr_select_row_upd';
   l_found                boolean      := false;

   cursor c_scr ( i_scr_id   in  bsis_subscription_content_ftrs.id%type )
   is
           select *
             from bsis_subscription_content_ftrs scr
            where scr.id = i_scr_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_scr( i_scr_id => i_scr_id );
   fetch c_scr into o_rt_scr;
   l_found := c_scr%found;
   close c_scr;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_scr%isopen
      then
         close c_scr;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end scr_select_row_upd;

function scr_select_row_upd_uk1( i_scr_ssr_id   in  bsis_subscription_content_ftrs.ssr_id%type
                               , i_scr_filter_element   in  bsis_subscription_content_ftrs.filter_element%type
                               , i_scr_filter_xpath   in  bsis_subscription_content_ftrs.filter_xpath%type
                               , o_rt_scr  out bsis_subscription_content_ftrs%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.scr_select_row_upd_uk1';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := scr_select_row_uk1( i_scr_ssr_id   =>  i_scr_ssr_id
                                   , i_scr_filter_element   =>  i_scr_filter_element
                                   , i_scr_filter_xpath   =>  i_scr_filter_xpath
                                   , o_rt_scr => o_rt_scr );
      if l_found
      then
         
         l_found := scr_select_row_upd( i_scr_id => o_rt_scr.id
                                      , o_rt_scr => o_rt_scr );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end scr_select_row_upd_uk1;

procedure scr_lock_row( i_scr_id   in  bsis_subscription_content_ftrs.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.scr_lock_row';
begin
  declare
     cursor c_scr ( i_scr_id   in  bsis_subscription_content_ftrs.id%type )
     is
             select ''
               from bsis_subscription_content_ftrs scr
              where scr.id = i_scr_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_scr_id is not null
         then
            begin
                
                scr_lock_row_nowait( i_scr_id => i_scr_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_scr( i_scr_id => i_scr_id );
                  close c_scr;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_scr%isopen
         then
            close c_scr;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end scr_lock_row;

procedure scr_lock_row_nowait( i_scr_id   in  bsis_subscription_content_ftrs.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.scr_lock_row_nowait';
begin
   declare
      cursor c_scr ( i_scr_id   in  bsis_subscription_content_ftrs.id%type )
      is
              select ''
                from bsis_subscription_content_ftrs scr
               where scr.id = i_scr_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_scr_id is not null
         then
            
            open c_scr( i_scr_id => i_scr_id );

            close c_scr;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_scr%isopen
        then
           close c_scr;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_scr_id||'"' );
   end;                                                          
end scr_lock_row_nowait;

function scr_perform_update( i_scr_id   in     bsis_subscription_content_ftrs.id%type
                           , io_rt_scr  in out bsis_subscription_content_ftrs%rowtype )
return number
;

function scr_perform_delete( i_scr_id   in  bsis_subscription_content_ftrs.id%type )
return boolean
;

procedure scr_insert_row ( io_rt_scr  in out bsis_subscription_content_ftrs%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.scr_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into bsis_subscription_content_ftrs( id
                                , ssr_id
                                , filter_element
                                , filter_xpath )
              values ( io_rt_scr.id
                     , io_rt_scr.ssr_id
                     , io_rt_scr.filter_element
                     , io_rt_scr.filter_xpath )
           returning id
                   , ssr_id
                   , filter_element
                   , filter_xpath
                into io_rt_scr.id
                   , io_rt_scr.ssr_id
                   , io_rt_scr.filter_element
                   , io_rt_scr.filter_xpath;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_scr.id||'"'
                                                             ||', SSR_ID = "'||io_rt_scr.ssr_id||'"'
                                                             ||', FILTER_ELEMENT = "'||io_rt_scr.filter_element||'"'
                                                             ||', FILTER_XPATH = "'||io_rt_scr.filter_xpath||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end scr_insert_row;

function scr_perform_update( i_scr_id   in     bsis_subscription_content_ftrs.id%type
                           , io_rt_scr  in out bsis_subscription_content_ftrs%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.scr_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update bsis_subscription_content_ftrs
            set id = io_rt_scr.id
              , ssr_id = io_rt_scr.ssr_id
              , filter_element = io_rt_scr.filter_element
              , filter_xpath = io_rt_scr.filter_xpath
          where id = i_scr_id
      returning id
              , ssr_id
              , filter_element
              , filter_xpath
           into io_rt_scr.id
              , io_rt_scr.ssr_id
              , io_rt_scr.filter_element
              , io_rt_scr.filter_xpath;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_scr.id||'"'
                                                             ||', SSR_ID = "'||io_rt_scr.ssr_id||'"'
                                                             ||', FILTER_ELEMENT = "'||io_rt_scr.filter_element||'"'
                                                             ||', FILTER_XPATH = "'||io_rt_scr.filter_xpath||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end scr_perform_update;

function scr_perform_delete( i_scr_id   in  bsis_subscription_content_ftrs.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.scr_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from bsis_subscription_content_ftrs
          where id = i_scr_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_scr_id||'"' );
   end;                                                          
end scr_perform_delete;

function scr_update_row( i_scr_id   in     bsis_subscription_content_ftrs.id%type
                       , io_rt_scr  in out bsis_subscription_content_ftrs%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.scr_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         scr_lock_row( i_scr_id   =>  i_scr_id );

         
         l_rowcount := 
            scr_perform_update( i_scr_id   =>  i_scr_id
                              , io_rt_scr  => io_rt_scr );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_scr.id||'"'
                                                          ||', SSR_ID = "'||io_rt_scr.ssr_id||'"'
                                                          ||', FILTER_ELEMENT = "'||io_rt_scr.filter_element||'"'
                                                          ||', FILTER_XPATH = "'||io_rt_scr.filter_xpath||'"'                                                           , 1, 4000));
   end;                                                          
end scr_update_row;

function scr_delete_row( i_scr_id   in  bsis_subscription_content_ftrs.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.scr_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         scr_lock_row( i_scr_id   =>  i_scr_id );

         
         l_deleted := scr_perform_delete( i_scr_id   =>  i_scr_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_scr_id||'"' );
   end;                                                          
end scr_delete_row;

function scr_seq1_nextval
return bsis_subscription_content_ftrs.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.scr_seq1_nextval';
   l_scr_id  bsis_subscription_content_ftrs.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select bsis_scr_seq1.nextval 
           into l_scr_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_scr_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end scr_seq1_nextval;


end bsis_scr_tapi_pck;
/