create or replace PACKAGE bsis_sbe_tapi_pck
IS
-- Table API package for table bsis_subscriber_buffer_msgs
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:40:58)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'BSIS_SBE_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'BSIS_SUBSCRIBER_BUFFER_MSGS';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION sbe_select_row( i_sbe_ID   IN  bsis_subscriber_buffer_msgs.ID%TYPE
                       , o_rt_sbe   OUT bsis_subscriber_buffer_msgs%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION sbe_select_row_upd( i_sbe_ID   IN  bsis_subscriber_buffer_msgs.ID%TYPE
                           , o_rt_sbe   OUT bsis_subscriber_buffer_msgs%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE sbe_lock_row( i_sbe_ID   IN  bsis_subscriber_buffer_msgs.ID%TYPE )
;

PROCEDURE sbe_lock_row_nowait( i_sbe_ID   IN  bsis_subscriber_buffer_msgs.ID%TYPE )
;

PROCEDURE sbe_insert_row ( io_rt_sbe  IN OUT bsis_subscriber_buffer_msgs%ROWTYPE )
;

FUNCTION sbe_update_row( i_sbe_ID   IN     bsis_subscriber_buffer_msgs.ID%TYPE
                       , io_rt_sbe  IN OUT bsis_subscriber_buffer_msgs%ROWTYPE )
RETURN NUMBER
;

FUNCTION sbe_delete_row( i_sbe_ID   IN  bsis_subscriber_buffer_msgs.ID%TYPE )
RETURN BOOLEAN
;

FUNCTION sbe_seq1_nextval
RETURN bsis_subscriber_buffer_msgs.ID%TYPE
;


END bsis_sbe_tapi_pck;
/




package body bsis_sbe_tapi_pck
is




function sbe_select_row( i_sbe_id   in  bsis_subscriber_buffer_msgs.id%type
                       , o_rt_sbe   out bsis_subscriber_buffer_msgs%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sbe_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_sbe ( i_sbe_id   in  bsis_subscriber_buffer_msgs.id%type )
      is 
           select *
             from bsis_subscriber_buffer_msgs sbe
            where sbe.id = i_sbe_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_sbe( i_sbe_id => i_sbe_id );
         fetch c_sbe into o_rt_sbe;
         l_found := c_sbe%found;
         close c_sbe;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_sbe%isopen
         then
            close c_sbe;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end sbe_select_row;

function sbe_select_row_upd( i_sbe_id   in  bsis_subscriber_buffer_msgs.id%type
                           , o_rt_sbe   out bsis_subscriber_buffer_msgs%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sbe_select_row_upd';
   l_found                boolean      := false;

   cursor c_sbe ( i_sbe_id   in  bsis_subscriber_buffer_msgs.id%type )
   is
           select *
             from bsis_subscriber_buffer_msgs sbe
            where sbe.id = i_sbe_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_sbe( i_sbe_id => i_sbe_id );
   fetch c_sbe into o_rt_sbe;
   l_found := c_sbe%found;
   close c_sbe;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_sbe%isopen
      then
         close c_sbe;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end sbe_select_row_upd;

procedure sbe_lock_row( i_sbe_id   in  bsis_subscriber_buffer_msgs.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sbe_lock_row';
begin
  declare
     cursor c_sbe ( i_sbe_id   in  bsis_subscriber_buffer_msgs.id%type )
     is
             select ''
               from bsis_subscriber_buffer_msgs sbe
              where sbe.id = i_sbe_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_sbe_id is not null
         then
            begin
                
                sbe_lock_row_nowait( i_sbe_id => i_sbe_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_sbe( i_sbe_id => i_sbe_id );
                  close c_sbe;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_sbe%isopen
         then
            close c_sbe;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end sbe_lock_row;

procedure sbe_lock_row_nowait( i_sbe_id   in  bsis_subscriber_buffer_msgs.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sbe_lock_row_nowait';
begin
   declare
      cursor c_sbe ( i_sbe_id   in  bsis_subscriber_buffer_msgs.id%type )
      is
              select ''
                from bsis_subscriber_buffer_msgs sbe
               where sbe.id = i_sbe_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_sbe_id is not null
         then
            
            open c_sbe( i_sbe_id => i_sbe_id );

            close c_sbe;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_sbe%isopen
        then
           close c_sbe;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_sbe_id||'"' );
   end;                                                          
end sbe_lock_row_nowait;

function sbe_perform_update( i_sbe_id   in     bsis_subscriber_buffer_msgs.id%type
                           , io_rt_sbe  in out bsis_subscriber_buffer_msgs%rowtype )
return number
;

function sbe_perform_delete( i_sbe_id   in  bsis_subscriber_buffer_msgs.id%type )
return boolean
;

procedure sbe_insert_row ( io_rt_sbe  in out bsis_subscriber_buffer_msgs%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sbe_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into bsis_subscriber_buffer_msgs( id
                                , ssr_id
                                , created_on
                                , message
                                , type
                                , status
                                , send_attempts
                                , last_send_attempt )
              values ( io_rt_sbe.id
                     , io_rt_sbe.ssr_id
                     , io_rt_sbe.created_on
                     , io_rt_sbe.message
                     , io_rt_sbe.type
                     , io_rt_sbe.status
                     , io_rt_sbe.send_attempts
                     , io_rt_sbe.last_send_attempt )
           returning id
                   , ssr_id
                   , created_on
                   , type
                   , status
                   , send_attempts
                   , last_send_attempt
                into io_rt_sbe.id
                   , io_rt_sbe.ssr_id
                   , io_rt_sbe.created_on

                   , io_rt_sbe.type
                   , io_rt_sbe.status
                   , io_rt_sbe.send_attempts
                   , io_rt_sbe.last_send_attempt;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_sbe.id||'"'
                                                             ||', SSR_ID = "'||io_rt_sbe.ssr_id||'"'
                                                             ||', CREATED_ON = "'||io_rt_sbe.created_on||'"'

                                                             ||', TYPE = "'||io_rt_sbe.type||'"'
                                                             ||', STATUS = "'||io_rt_sbe.status||'"'
                                                             ||', SEND_ATTEMPTS = "'||io_rt_sbe.send_attempts||'"'
                                                             ||', LAST_SEND_ATTEMPT = "'||io_rt_sbe.last_send_attempt||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end sbe_insert_row;

function sbe_perform_update( i_sbe_id   in     bsis_subscriber_buffer_msgs.id%type
                           , io_rt_sbe  in out bsis_subscriber_buffer_msgs%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sbe_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update bsis_subscriber_buffer_msgs
            set id = io_rt_sbe.id
              , ssr_id = io_rt_sbe.ssr_id
              , created_on = io_rt_sbe.created_on
              , message = io_rt_sbe.message
              , type = io_rt_sbe.type
              , status = io_rt_sbe.status
              , send_attempts = io_rt_sbe.send_attempts
              , last_send_attempt = io_rt_sbe.last_send_attempt
          where id = i_sbe_id
      returning id
              , ssr_id
              , created_on
              , type
              , status
              , send_attempts
              , last_send_attempt
           into io_rt_sbe.id
              , io_rt_sbe.ssr_id
              , io_rt_sbe.created_on

              , io_rt_sbe.type
              , io_rt_sbe.status
              , io_rt_sbe.send_attempts
              , io_rt_sbe.last_send_attempt;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_sbe.id||'"'
                                                             ||', SSR_ID = "'||io_rt_sbe.ssr_id||'"'
                                                             ||', CREATED_ON = "'||io_rt_sbe.created_on||'"'

                                                             ||', TYPE = "'||io_rt_sbe.type||'"'
                                                             ||', STATUS = "'||io_rt_sbe.status||'"'
                                                             ||', SEND_ATTEMPTS = "'||io_rt_sbe.send_attempts||'"'
                                                             ||', LAST_SEND_ATTEMPT = "'||io_rt_sbe.last_send_attempt||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end sbe_perform_update;

function sbe_perform_delete( i_sbe_id   in  bsis_subscriber_buffer_msgs.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sbe_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from bsis_subscriber_buffer_msgs
          where id = i_sbe_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_sbe_id||'"' );
   end;                                                          
end sbe_perform_delete;

function sbe_update_row( i_sbe_id   in     bsis_subscriber_buffer_msgs.id%type
                       , io_rt_sbe  in out bsis_subscriber_buffer_msgs%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sbe_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         sbe_lock_row( i_sbe_id   =>  i_sbe_id );

         
         l_rowcount := 
            sbe_perform_update( i_sbe_id   =>  i_sbe_id
                              , io_rt_sbe  => io_rt_sbe );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_sbe.id||'"'
                                                          ||', SSR_ID = "'||io_rt_sbe.ssr_id||'"'
                                                          ||', CREATED_ON = "'||io_rt_sbe.created_on||'"'

                                                          ||', TYPE = "'||io_rt_sbe.type||'"'
                                                          ||', STATUS = "'||io_rt_sbe.status||'"'
                                                          ||', SEND_ATTEMPTS = "'||io_rt_sbe.send_attempts||'"'
                                                          ||', LAST_SEND_ATTEMPT = "'||io_rt_sbe.last_send_attempt||'"'                                                           , 1, 4000));
   end;                                                          
end sbe_update_row;

function sbe_delete_row( i_sbe_id   in  bsis_subscriber_buffer_msgs.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sbe_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         sbe_lock_row( i_sbe_id   =>  i_sbe_id );

         
         l_deleted := sbe_perform_delete( i_sbe_id   =>  i_sbe_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_sbe_id||'"' );
   end;                                                          
end sbe_delete_row;

function sbe_seq1_nextval
return bsis_subscriber_buffer_msgs.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sbe_seq1_nextval';
   l_sbe_id  bsis_subscriber_buffer_msgs.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select bsis_sbe_seq1.nextval 
           into l_sbe_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_sbe_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end sbe_seq1_nextval;


end bsis_sbe_tapi_pck;
/