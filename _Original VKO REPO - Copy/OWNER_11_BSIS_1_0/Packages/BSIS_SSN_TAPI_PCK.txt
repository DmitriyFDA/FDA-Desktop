create or replace PACKAGE bsis_ssn_tapi_pck
IS
-- Table API package for table bsis_subscriptions
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:40:58)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'BSIS_SSN_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'BSIS_SUBSCRIPTIONS';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION ssn_select_row( i_ssn_ID   IN  bsis_subscriptions.ID%TYPE
                       , o_rt_ssn   OUT bsis_subscriptions%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION ssn_select_row_uk1( i_ssn_BDA_ID   IN  bsis_subscriptions.BDA_ID%TYPE
                           , i_ssn_SSR_ID   IN  bsis_subscriptions.SSR_ID%TYPE
                           , o_rt_ssn  OUT bsis_subscriptions%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION ssn_select_row_upd( i_ssn_ID   IN  bsis_subscriptions.ID%TYPE
                           , o_rt_ssn   OUT bsis_subscriptions%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION ssn_select_row_upd_uk1( i_ssn_BDA_ID   IN  bsis_subscriptions.BDA_ID%TYPE
                               , i_ssn_SSR_ID   IN  bsis_subscriptions.SSR_ID%TYPE
                               , o_rt_ssn  OUT bsis_subscriptions%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE ssn_lock_row( i_ssn_ID   IN  bsis_subscriptions.ID%TYPE )
;

PROCEDURE ssn_lock_row_nowait( i_ssn_ID   IN  bsis_subscriptions.ID%TYPE )
;

PROCEDURE ssn_insert_row ( io_rt_ssn  IN OUT bsis_subscriptions%ROWTYPE )
;

FUNCTION ssn_update_row( i_ssn_ID   IN     bsis_subscriptions.ID%TYPE
                       , io_rt_ssn  IN OUT bsis_subscriptions%ROWTYPE )
RETURN NUMBER
;

FUNCTION ssn_delete_row( i_ssn_ID   IN  bsis_subscriptions.ID%TYPE )
RETURN BOOLEAN
;

FUNCTION ssn_seq1_nextval
RETURN bsis_subscriptions.ID%TYPE
;


END bsis_ssn_tapi_pck;
/




package body bsis_ssn_tapi_pck
is




function ssn_select_row( i_ssn_id   in  bsis_subscriptions.id%type
                       , o_rt_ssn   out bsis_subscriptions%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ssn_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_ssn ( i_ssn_id   in  bsis_subscriptions.id%type )
      is 
           select *
             from bsis_subscriptions ssn
            where ssn.id = i_ssn_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_ssn( i_ssn_id => i_ssn_id );
         fetch c_ssn into o_rt_ssn;
         l_found := c_ssn%found;
         close c_ssn;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_ssn%isopen
         then
            close c_ssn;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end ssn_select_row;

function ssn_select_row_uk1( i_ssn_bda_id   in  bsis_subscriptions.bda_id%type
                           , i_ssn_ssr_id   in  bsis_subscriptions.ssr_id%type
                           , o_rt_ssn  out bsis_subscriptions%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ssn_select_row_uk1';
   l_found                boolean      := false;
begin
   declare
      cursor c_ssn ( i_ssn_bda_id   in  bsis_subscriptions.bda_id%type
                   , i_ssn_ssr_id   in  bsis_subscriptions.ssr_id%type )
      is
         select *
           from bsis_subscriptions ssn
          where ssn.bda_id = i_ssn_bda_id 
            and ssn.ssr_id = i_ssn_ssr_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_ssn(i_ssn_bda_id => i_ssn_bda_id, i_ssn_ssr_id => i_ssn_ssr_id);
         fetch c_ssn into o_rt_ssn;
         l_found := c_ssn%found;
         close c_ssn;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_ssn%isopen
      then
         close c_ssn;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end ssn_select_row_uk1;

function ssn_select_row_upd( i_ssn_id   in  bsis_subscriptions.id%type
                           , o_rt_ssn   out bsis_subscriptions%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ssn_select_row_upd';
   l_found                boolean      := false;

   cursor c_ssn ( i_ssn_id   in  bsis_subscriptions.id%type )
   is
           select *
             from bsis_subscriptions ssn
            where ssn.id = i_ssn_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_ssn( i_ssn_id => i_ssn_id );
   fetch c_ssn into o_rt_ssn;
   l_found := c_ssn%found;
   close c_ssn;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_ssn%isopen
      then
         close c_ssn;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end ssn_select_row_upd;

function ssn_select_row_upd_uk1( i_ssn_bda_id   in  bsis_subscriptions.bda_id%type
                               , i_ssn_ssr_id   in  bsis_subscriptions.ssr_id%type
                               , o_rt_ssn  out bsis_subscriptions%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ssn_select_row_upd_uk1';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := ssn_select_row_uk1( i_ssn_bda_id   =>  i_ssn_bda_id
                                   , i_ssn_ssr_id   =>  i_ssn_ssr_id
                                   , o_rt_ssn => o_rt_ssn );
      if l_found
      then
         
         l_found := ssn_select_row_upd( i_ssn_id => o_rt_ssn.id
                                      , o_rt_ssn => o_rt_ssn );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end ssn_select_row_upd_uk1;

procedure ssn_lock_row( i_ssn_id   in  bsis_subscriptions.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ssn_lock_row';
begin
  declare
     cursor c_ssn ( i_ssn_id   in  bsis_subscriptions.id%type )
     is
             select ''
               from bsis_subscriptions ssn
              where ssn.id = i_ssn_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_ssn_id is not null
         then
            begin
                
                ssn_lock_row_nowait( i_ssn_id => i_ssn_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_ssn( i_ssn_id => i_ssn_id );
                  close c_ssn;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_ssn%isopen
         then
            close c_ssn;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end ssn_lock_row;

procedure ssn_lock_row_nowait( i_ssn_id   in  bsis_subscriptions.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ssn_lock_row_nowait';
begin
   declare
      cursor c_ssn ( i_ssn_id   in  bsis_subscriptions.id%type )
      is
              select ''
                from bsis_subscriptions ssn
               where ssn.id = i_ssn_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_ssn_id is not null
         then
            
            open c_ssn( i_ssn_id => i_ssn_id );

            close c_ssn;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_ssn%isopen
        then
           close c_ssn;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_ssn_id||'"' );
   end;                                                          
end ssn_lock_row_nowait;

function ssn_perform_update( i_ssn_id   in     bsis_subscriptions.id%type
                           , io_rt_ssn  in out bsis_subscriptions%rowtype )
return number
;

function ssn_perform_delete( i_ssn_id   in  bsis_subscriptions.id%type )
return boolean
;

procedure ssn_insert_row ( io_rt_ssn  in out bsis_subscriptions%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ssn_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into bsis_subscriptions( id
                                , bda_id
                                , ssr_id
                                , created_on
                                , last_updated_on
                                , ssn_lpc
                                , ssn_lpc_extension )
              values ( io_rt_ssn.id
                     , io_rt_ssn.bda_id
                     , io_rt_ssn.ssr_id
                     , io_rt_ssn.created_on
                     , io_rt_ssn.last_updated_on
                     , io_rt_ssn.ssn_lpc
                     , io_rt_ssn.ssn_lpc_extension )
           returning id
                   , bda_id
                   , ssr_id
                   , created_on
                   , last_updated_on
                   , ssn_lpc
                   , ssn_lpc_extension
                into io_rt_ssn.id
                   , io_rt_ssn.bda_id
                   , io_rt_ssn.ssr_id
                   , io_rt_ssn.created_on
                   , io_rt_ssn.last_updated_on
                   , io_rt_ssn.ssn_lpc
                   , io_rt_ssn.ssn_lpc_extension;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_ssn.id||'"'
                                                             ||', BDA_ID = "'||io_rt_ssn.bda_id||'"'
                                                             ||', SSR_ID = "'||io_rt_ssn.ssr_id||'"'
                                                             ||', CREATED_ON = "'||io_rt_ssn.created_on||'"'
                                                             ||', LAST_UPDATED_ON = "'||io_rt_ssn.last_updated_on||'"'
                                                             ||', SSN_LPC = "'||io_rt_ssn.ssn_lpc||'"'
                                                             ||', SSN_LPC_EXTENSION = "'||io_rt_ssn.ssn_lpc_extension||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end ssn_insert_row;

function ssn_perform_update( i_ssn_id   in     bsis_subscriptions.id%type
                           , io_rt_ssn  in out bsis_subscriptions%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ssn_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update bsis_subscriptions
            set id = io_rt_ssn.id
              , bda_id = io_rt_ssn.bda_id
              , ssr_id = io_rt_ssn.ssr_id
              , created_on = io_rt_ssn.created_on
              , last_updated_on = io_rt_ssn.last_updated_on
              , ssn_lpc = io_rt_ssn.ssn_lpc
              , ssn_lpc_extension = io_rt_ssn.ssn_lpc_extension
          where id = i_ssn_id
      returning id
              , bda_id
              , ssr_id
              , created_on
              , last_updated_on
              , ssn_lpc
              , ssn_lpc_extension
           into io_rt_ssn.id
              , io_rt_ssn.bda_id
              , io_rt_ssn.ssr_id
              , io_rt_ssn.created_on
              , io_rt_ssn.last_updated_on
              , io_rt_ssn.ssn_lpc
              , io_rt_ssn.ssn_lpc_extension;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_ssn.id||'"'
                                                             ||', BDA_ID = "'||io_rt_ssn.bda_id||'"'
                                                             ||', SSR_ID = "'||io_rt_ssn.ssr_id||'"'
                                                             ||', CREATED_ON = "'||io_rt_ssn.created_on||'"'
                                                             ||', LAST_UPDATED_ON = "'||io_rt_ssn.last_updated_on||'"'
                                                             ||', SSN_LPC = "'||io_rt_ssn.ssn_lpc||'"'
                                                             ||', SSN_LPC_EXTENSION = "'||io_rt_ssn.ssn_lpc_extension||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end ssn_perform_update;

function ssn_perform_delete( i_ssn_id   in  bsis_subscriptions.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ssn_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from bsis_subscriptions
          where id = i_ssn_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_ssn_id||'"' );
   end;                                                          
end ssn_perform_delete;

function ssn_update_row( i_ssn_id   in     bsis_subscriptions.id%type
                       , io_rt_ssn  in out bsis_subscriptions%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ssn_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         ssn_lock_row( i_ssn_id   =>  i_ssn_id );

         
         l_rowcount := 
            ssn_perform_update( i_ssn_id   =>  i_ssn_id
                              , io_rt_ssn  => io_rt_ssn );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_ssn.id||'"'
                                                          ||', BDA_ID = "'||io_rt_ssn.bda_id||'"'
                                                          ||', SSR_ID = "'||io_rt_ssn.ssr_id||'"'
                                                          ||', CREATED_ON = "'||io_rt_ssn.created_on||'"'
                                                          ||', LAST_UPDATED_ON = "'||io_rt_ssn.last_updated_on||'"'
                                                          ||', SSN_LPC = "'||io_rt_ssn.ssn_lpc||'"'
                                                          ||', SSN_LPC_EXTENSION = "'||io_rt_ssn.ssn_lpc_extension||'"'                                                           , 1, 4000));
   end;                                                          
end ssn_update_row;

function ssn_delete_row( i_ssn_id   in  bsis_subscriptions.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ssn_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         ssn_lock_row( i_ssn_id   =>  i_ssn_id );

         
         l_deleted := ssn_perform_delete( i_ssn_id   =>  i_ssn_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_ssn_id||'"' );
   end;                                                          
end ssn_delete_row;

function ssn_seq1_nextval
return bsis_subscriptions.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ssn_seq1_nextval';
   l_ssn_id  bsis_subscriptions.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select bsis_ssn_seq1.nextval 
           into l_ssn_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_ssn_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end ssn_seq1_nextval;


end bsis_ssn_tapi_pck;
/