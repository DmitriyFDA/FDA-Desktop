create or replace PACKAGE bsis_sce_tapi_pck
IS
-- Table API package for table bsis_subscription_change_ftrs
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:40:58)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'BSIS_SCE_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'BSIS_SUBSCRIPTION_CHANGE_FTRS';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION sce_select_row( i_sce_ID   IN  bsis_subscription_change_ftrs.ID%TYPE
                       , o_rt_sce   OUT bsis_subscription_change_ftrs%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION sce_select_row_upd( i_sce_ID   IN  bsis_subscription_change_ftrs.ID%TYPE
                           , o_rt_sce   OUT bsis_subscription_change_ftrs%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE sce_lock_row( i_sce_ID   IN  bsis_subscription_change_ftrs.ID%TYPE )
;

PROCEDURE sce_lock_row_nowait( i_sce_ID   IN  bsis_subscription_change_ftrs.ID%TYPE )
;

PROCEDURE sce_insert_row ( io_rt_sce  IN OUT bsis_subscription_change_ftrs%ROWTYPE )
;

FUNCTION sce_update_row( i_sce_ID   IN     bsis_subscription_change_ftrs.ID%TYPE
                       , io_rt_sce  IN OUT bsis_subscription_change_ftrs%ROWTYPE )
RETURN NUMBER
;

FUNCTION sce_delete_row( i_sce_ID   IN  bsis_subscription_change_ftrs.ID%TYPE )
RETURN BOOLEAN
;

FUNCTION sce_seq1_nextval
RETURN bsis_subscription_change_ftrs.ID%TYPE
;


END bsis_sce_tapi_pck;
/




package body bsis_sce_tapi_pck
is




function sce_select_row( i_sce_id   in  bsis_subscription_change_ftrs.id%type
                       , o_rt_sce   out bsis_subscription_change_ftrs%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sce_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_sce ( i_sce_id   in  bsis_subscription_change_ftrs.id%type )
      is 
           select *
             from bsis_subscription_change_ftrs sce
            where sce.id = i_sce_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_sce( i_sce_id => i_sce_id );
         fetch c_sce into o_rt_sce;
         l_found := c_sce%found;
         close c_sce;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_sce%isopen
         then
            close c_sce;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end sce_select_row;

function sce_select_row_upd( i_sce_id   in  bsis_subscription_change_ftrs.id%type
                           , o_rt_sce   out bsis_subscription_change_ftrs%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sce_select_row_upd';
   l_found                boolean      := false;

   cursor c_sce ( i_sce_id   in  bsis_subscription_change_ftrs.id%type )
   is
           select *
             from bsis_subscription_change_ftrs sce
            where sce.id = i_sce_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_sce( i_sce_id => i_sce_id );
   fetch c_sce into o_rt_sce;
   l_found := c_sce%found;
   close c_sce;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_sce%isopen
      then
         close c_sce;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end sce_select_row_upd;

procedure sce_lock_row( i_sce_id   in  bsis_subscription_change_ftrs.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sce_lock_row';
begin
  declare
     cursor c_sce ( i_sce_id   in  bsis_subscription_change_ftrs.id%type )
     is
             select ''
               from bsis_subscription_change_ftrs sce
              where sce.id = i_sce_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_sce_id is not null
         then
            begin
                
                sce_lock_row_nowait( i_sce_id => i_sce_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_sce( i_sce_id => i_sce_id );
                  close c_sce;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_sce%isopen
         then
            close c_sce;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end sce_lock_row;

procedure sce_lock_row_nowait( i_sce_id   in  bsis_subscription_change_ftrs.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sce_lock_row_nowait';
begin
   declare
      cursor c_sce ( i_sce_id   in  bsis_subscription_change_ftrs.id%type )
      is
              select ''
                from bsis_subscription_change_ftrs sce
               where sce.id = i_sce_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_sce_id is not null
         then
            
            open c_sce( i_sce_id => i_sce_id );

            close c_sce;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_sce%isopen
        then
           close c_sce;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_sce_id||'"' );
   end;                                                          
end sce_lock_row_nowait;

function sce_perform_update( i_sce_id   in     bsis_subscription_change_ftrs.id%type
                           , io_rt_sce  in out bsis_subscription_change_ftrs%rowtype )
return number
;

function sce_perform_delete( i_sce_id   in  bsis_subscription_change_ftrs.id%type )
return boolean
;

procedure sce_insert_row ( io_rt_sce  in out bsis_subscription_change_ftrs%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sce_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into bsis_subscription_change_ftrs( id
                                , ssr_id
                                , att_id )
              values ( io_rt_sce.id
                     , io_rt_sce.ssr_id
                     , io_rt_sce.att_id )
           returning id
                   , ssr_id
                   , att_id
                into io_rt_sce.id
                   , io_rt_sce.ssr_id
                   , io_rt_sce.att_id;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_sce.id||'"'
                                                             ||', SSR_ID = "'||io_rt_sce.ssr_id||'"'
                                                             ||', ATT_ID = "'||io_rt_sce.att_id||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end sce_insert_row;

function sce_perform_update( i_sce_id   in     bsis_subscription_change_ftrs.id%type
                           , io_rt_sce  in out bsis_subscription_change_ftrs%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sce_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update bsis_subscription_change_ftrs
            set id = io_rt_sce.id
              , ssr_id = io_rt_sce.ssr_id
              , att_id = io_rt_sce.att_id
          where id = i_sce_id
      returning id
              , ssr_id
              , att_id
           into io_rt_sce.id
              , io_rt_sce.ssr_id
              , io_rt_sce.att_id;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_sce.id||'"'
                                                             ||', SSR_ID = "'||io_rt_sce.ssr_id||'"'
                                                             ||', ATT_ID = "'||io_rt_sce.att_id||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end sce_perform_update;

function sce_perform_delete( i_sce_id   in  bsis_subscription_change_ftrs.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sce_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from bsis_subscription_change_ftrs
          where id = i_sce_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_sce_id||'"' );
   end;                                                          
end sce_perform_delete;

function sce_update_row( i_sce_id   in     bsis_subscription_change_ftrs.id%type
                       , io_rt_sce  in out bsis_subscription_change_ftrs%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sce_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         sce_lock_row( i_sce_id   =>  i_sce_id );

         
         l_rowcount := 
            sce_perform_update( i_sce_id   =>  i_sce_id
                              , io_rt_sce  => io_rt_sce );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_sce.id||'"'
                                                          ||', SSR_ID = "'||io_rt_sce.ssr_id||'"'
                                                          ||', ATT_ID = "'||io_rt_sce.att_id||'"'                                                           , 1, 4000));
   end;                                                          
end sce_update_row;

function sce_delete_row( i_sce_id   in  bsis_subscription_change_ftrs.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sce_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         sce_lock_row( i_sce_id   =>  i_sce_id );

         
         l_deleted := sce_perform_delete( i_sce_id   =>  i_sce_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_sce_id||'"' );
   end;                                                          
end sce_delete_row;

function sce_seq1_nextval
return bsis_subscription_change_ftrs.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sce_seq1_nextval';
   l_sce_id  bsis_subscription_change_ftrs.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select bsis_sce_seq1.nextval 
           into l_sce_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_sce_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end sce_seq1_nextval;


end bsis_sce_tapi_pck;
/
