create or replace PACKAGE bsis_sfe_tapi_pck
IS
-- Table API package for table bsis_subscription_ftr_values
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:40:59)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'BSIS_SFE_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'BSIS_SUBSCRIPTION_FTR_VALUES';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION sfe_select_row( i_sfe_ID   IN  bsis_subscription_ftr_values.ID%TYPE
                       , o_rt_sfe   OUT bsis_subscription_ftr_values%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION sfe_select_row_uk1( i_sfe_SCR_ID   IN  bsis_subscription_ftr_values.SCR_ID%TYPE
                           , i_sfe_FILTER_VALUE   IN  bsis_subscription_ftr_values.FILTER_VALUE%TYPE
                           , o_rt_sfe  OUT bsis_subscription_ftr_values%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION sfe_select_row_upd( i_sfe_ID   IN  bsis_subscription_ftr_values.ID%TYPE
                           , o_rt_sfe   OUT bsis_subscription_ftr_values%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION sfe_select_row_upd_uk1( i_sfe_SCR_ID   IN  bsis_subscription_ftr_values.SCR_ID%TYPE
                               , i_sfe_FILTER_VALUE   IN  bsis_subscription_ftr_values.FILTER_VALUE%TYPE
                               , o_rt_sfe  OUT bsis_subscription_ftr_values%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE sfe_lock_row( i_sfe_ID   IN  bsis_subscription_ftr_values.ID%TYPE )
;

PROCEDURE sfe_lock_row_nowait( i_sfe_ID   IN  bsis_subscription_ftr_values.ID%TYPE )
;

PROCEDURE sfe_insert_row ( io_rt_sfe  IN OUT bsis_subscription_ftr_values%ROWTYPE )
;

FUNCTION sfe_update_row( i_sfe_ID   IN     bsis_subscription_ftr_values.ID%TYPE
                       , io_rt_sfe  IN OUT bsis_subscription_ftr_values%ROWTYPE )
RETURN NUMBER
;

FUNCTION sfe_delete_row( i_sfe_ID   IN  bsis_subscription_ftr_values.ID%TYPE )
RETURN BOOLEAN
;

FUNCTION sfe_seq1_nextval
RETURN bsis_subscription_ftr_values.ID%TYPE
;


END bsis_sfe_tapi_pck;
/




package body bsis_sfe_tapi_pck
is




function sfe_select_row( i_sfe_id   in  bsis_subscription_ftr_values.id%type
                       , o_rt_sfe   out bsis_subscription_ftr_values%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sfe_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_sfe ( i_sfe_id   in  bsis_subscription_ftr_values.id%type )
      is 
           select *
             from bsis_subscription_ftr_values sfe
            where sfe.id = i_sfe_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_sfe( i_sfe_id => i_sfe_id );
         fetch c_sfe into o_rt_sfe;
         l_found := c_sfe%found;
         close c_sfe;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_sfe%isopen
         then
            close c_sfe;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end sfe_select_row;

function sfe_select_row_uk1( i_sfe_scr_id   in  bsis_subscription_ftr_values.scr_id%type
                           , i_sfe_filter_value   in  bsis_subscription_ftr_values.filter_value%type
                           , o_rt_sfe  out bsis_subscription_ftr_values%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sfe_select_row_uk1';
   l_found                boolean      := false;
begin
   declare
      cursor c_sfe ( i_sfe_scr_id   in  bsis_subscription_ftr_values.scr_id%type
                   , i_sfe_filter_value   in  bsis_subscription_ftr_values.filter_value%type )
      is
         select *
           from bsis_subscription_ftr_values sfe
          where sfe.scr_id = i_sfe_scr_id 
            and ( sfe.filter_value = i_sfe_filter_value or (sfe.filter_value is null  and i_sfe_filter_value is null  ));
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_sfe(i_sfe_scr_id => i_sfe_scr_id, i_sfe_filter_value => i_sfe_filter_value);
         fetch c_sfe into o_rt_sfe;
         l_found := c_sfe%found;
         close c_sfe;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_sfe%isopen
      then
         close c_sfe;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end sfe_select_row_uk1;

function sfe_select_row_upd( i_sfe_id   in  bsis_subscription_ftr_values.id%type
                           , o_rt_sfe   out bsis_subscription_ftr_values%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sfe_select_row_upd';
   l_found                boolean      := false;

   cursor c_sfe ( i_sfe_id   in  bsis_subscription_ftr_values.id%type )
   is
           select *
             from bsis_subscription_ftr_values sfe
            where sfe.id = i_sfe_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_sfe( i_sfe_id => i_sfe_id );
   fetch c_sfe into o_rt_sfe;
   l_found := c_sfe%found;
   close c_sfe;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_sfe%isopen
      then
         close c_sfe;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end sfe_select_row_upd;

function sfe_select_row_upd_uk1( i_sfe_scr_id   in  bsis_subscription_ftr_values.scr_id%type
                               , i_sfe_filter_value   in  bsis_subscription_ftr_values.filter_value%type
                               , o_rt_sfe  out bsis_subscription_ftr_values%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sfe_select_row_upd_uk1';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := sfe_select_row_uk1( i_sfe_scr_id   =>  i_sfe_scr_id
                                   , i_sfe_filter_value   =>  i_sfe_filter_value
                                   , o_rt_sfe => o_rt_sfe );
      if l_found
      then
         
         l_found := sfe_select_row_upd( i_sfe_id => o_rt_sfe.id
                                      , o_rt_sfe => o_rt_sfe );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end sfe_select_row_upd_uk1;

procedure sfe_lock_row( i_sfe_id   in  bsis_subscription_ftr_values.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sfe_lock_row';
begin
  declare
     cursor c_sfe ( i_sfe_id   in  bsis_subscription_ftr_values.id%type )
     is
             select ''
               from bsis_subscription_ftr_values sfe
              where sfe.id = i_sfe_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_sfe_id is not null
         then
            begin
                
                sfe_lock_row_nowait( i_sfe_id => i_sfe_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_sfe( i_sfe_id => i_sfe_id );
                  close c_sfe;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_sfe%isopen
         then
            close c_sfe;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end sfe_lock_row;

procedure sfe_lock_row_nowait( i_sfe_id   in  bsis_subscription_ftr_values.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sfe_lock_row_nowait';
begin
   declare
      cursor c_sfe ( i_sfe_id   in  bsis_subscription_ftr_values.id%type )
      is
              select ''
                from bsis_subscription_ftr_values sfe
               where sfe.id = i_sfe_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_sfe_id is not null
         then
            
            open c_sfe( i_sfe_id => i_sfe_id );

            close c_sfe;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_sfe%isopen
        then
           close c_sfe;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_sfe_id||'"' );
   end;                                                          
end sfe_lock_row_nowait;

function sfe_perform_update( i_sfe_id   in     bsis_subscription_ftr_values.id%type
                           , io_rt_sfe  in out bsis_subscription_ftr_values%rowtype )
return number
;

function sfe_perform_delete( i_sfe_id   in  bsis_subscription_ftr_values.id%type )
return boolean
;

procedure sfe_insert_row ( io_rt_sfe  in out bsis_subscription_ftr_values%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sfe_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into bsis_subscription_ftr_values( id
                                , scr_id
                                , source
                                , filter_value )
              values ( io_rt_sfe.id
                     , io_rt_sfe.scr_id
                     , io_rt_sfe.source
                     , io_rt_sfe.filter_value )
           returning id
                   , scr_id
                   , source
                   , filter_value
                into io_rt_sfe.id
                   , io_rt_sfe.scr_id
                   , io_rt_sfe.source
                   , io_rt_sfe.filter_value;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_sfe.id||'"'
                                                             ||', SCR_ID = "'||io_rt_sfe.scr_id||'"'
                                                             ||', SOURCE = "'||io_rt_sfe.source||'"'
                                                             ||', FILTER_VALUE = "'||io_rt_sfe.filter_value||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end sfe_insert_row;

function sfe_perform_update( i_sfe_id   in     bsis_subscription_ftr_values.id%type
                           , io_rt_sfe  in out bsis_subscription_ftr_values%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sfe_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update bsis_subscription_ftr_values
            set id = io_rt_sfe.id
              , scr_id = io_rt_sfe.scr_id
              , source = io_rt_sfe.source
              , filter_value = io_rt_sfe.filter_value
          where id = i_sfe_id
      returning id
              , scr_id
              , source
              , filter_value
           into io_rt_sfe.id
              , io_rt_sfe.scr_id
              , io_rt_sfe.source
              , io_rt_sfe.filter_value;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_sfe.id||'"'
                                                             ||', SCR_ID = "'||io_rt_sfe.scr_id||'"'
                                                             ||', SOURCE = "'||io_rt_sfe.source||'"'
                                                             ||', FILTER_VALUE = "'||io_rt_sfe.filter_value||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end sfe_perform_update;

function sfe_perform_delete( i_sfe_id   in  bsis_subscription_ftr_values.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sfe_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from bsis_subscription_ftr_values
          where id = i_sfe_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_sfe_id||'"' );
   end;                                                          
end sfe_perform_delete;

function sfe_update_row( i_sfe_id   in     bsis_subscription_ftr_values.id%type
                       , io_rt_sfe  in out bsis_subscription_ftr_values%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sfe_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         sfe_lock_row( i_sfe_id   =>  i_sfe_id );

         
         l_rowcount := 
            sfe_perform_update( i_sfe_id   =>  i_sfe_id
                              , io_rt_sfe  => io_rt_sfe );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_sfe.id||'"'
                                                          ||', SCR_ID = "'||io_rt_sfe.scr_id||'"'
                                                          ||', SOURCE = "'||io_rt_sfe.source||'"'
                                                          ||', FILTER_VALUE = "'||io_rt_sfe.filter_value||'"'                                                           , 1, 4000));
   end;                                                          
end sfe_update_row;

function sfe_delete_row( i_sfe_id   in  bsis_subscription_ftr_values.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sfe_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         sfe_lock_row( i_sfe_id   =>  i_sfe_id );

         
         l_deleted := sfe_perform_delete( i_sfe_id   =>  i_sfe_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_sfe_id||'"' );
   end;                                                          
end sfe_delete_row;

function sfe_seq1_nextval
return bsis_subscription_ftr_values.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sfe_seq1_nextval';
   l_sfe_id  bsis_subscription_ftr_values.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select bsis_sfe_seq1.nextval 
           into l_sfe_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_sfe_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end sfe_seq1_nextval;


end bsis_sfe_tapi_pck;
/