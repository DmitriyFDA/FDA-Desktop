create or replace PACKAGE bsis_ssr_tapi_pck
IS
-- Table API package for table bsis_subscribers
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:40:58)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'BSIS_SSR_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'BSIS_SUBSCRIBERS';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION ssr_select_row( i_ssr_ID   IN  bsis_subscribers.ID%TYPE
                       , o_rt_ssr   OUT bsis_subscribers%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION ssr_select_row_uk1( i_ssr_IDENTIFIER   IN  bsis_subscribers.IDENTIFIER%TYPE
                           , o_rt_ssr  OUT bsis_subscribers%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION ssr_select_row_upd( i_ssr_ID   IN  bsis_subscribers.ID%TYPE
                           , o_rt_ssr   OUT bsis_subscribers%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION ssr_select_row_upd_uk1( i_ssr_IDENTIFIER   IN  bsis_subscribers.IDENTIFIER%TYPE
                               , o_rt_ssr  OUT bsis_subscribers%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE ssr_lock_row( i_ssr_ID   IN  bsis_subscribers.ID%TYPE )
;

PROCEDURE ssr_lock_row_nowait( i_ssr_ID   IN  bsis_subscribers.ID%TYPE )
;

PROCEDURE ssr_insert_row ( io_rt_ssr  IN OUT bsis_subscribers%ROWTYPE )
;

FUNCTION ssr_update_row( i_ssr_ID   IN     bsis_subscribers.ID%TYPE
                       , io_rt_ssr  IN OUT bsis_subscribers%ROWTYPE )
RETURN NUMBER
;

FUNCTION ssr_delete_row( i_ssr_ID   IN  bsis_subscribers.ID%TYPE )
RETURN BOOLEAN
;


END bsis_ssr_tapi_pck;
/




package body bsis_ssr_tapi_pck
is




function ssr_select_row( i_ssr_id   in  bsis_subscribers.id%type
                       , o_rt_ssr   out bsis_subscribers%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ssr_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_ssr ( i_ssr_id   in  bsis_subscribers.id%type )
      is 
           select *
             from bsis_subscribers ssr
            where ssr.id = i_ssr_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_ssr( i_ssr_id => i_ssr_id );
         fetch c_ssr into o_rt_ssr;
         l_found := c_ssr%found;
         close c_ssr;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_ssr%isopen
         then
            close c_ssr;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end ssr_select_row;

function ssr_select_row_uk1( i_ssr_identifier   in  bsis_subscribers.identifier%type
                           , o_rt_ssr  out bsis_subscribers%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ssr_select_row_uk1';
   l_found                boolean      := false;
begin
   declare
      cursor c_ssr ( i_ssr_identifier   in  bsis_subscribers.identifier%type )
      is
         select *
           from bsis_subscribers ssr
          where ssr.identifier = i_ssr_identifier ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_ssr(i_ssr_identifier => i_ssr_identifier);
         fetch c_ssr into o_rt_ssr;
         l_found := c_ssr%found;
         close c_ssr;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_ssr%isopen
      then
         close c_ssr;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end ssr_select_row_uk1;

function ssr_select_row_upd( i_ssr_id   in  bsis_subscribers.id%type
                           , o_rt_ssr   out bsis_subscribers%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ssr_select_row_upd';
   l_found                boolean      := false;

   cursor c_ssr ( i_ssr_id   in  bsis_subscribers.id%type )
   is
           select *
             from bsis_subscribers ssr
            where ssr.id = i_ssr_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_ssr( i_ssr_id => i_ssr_id );
   fetch c_ssr into o_rt_ssr;
   l_found := c_ssr%found;
   close c_ssr;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_ssr%isopen
      then
         close c_ssr;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end ssr_select_row_upd;

function ssr_select_row_upd_uk1( i_ssr_identifier   in  bsis_subscribers.identifier%type
                               , o_rt_ssr  out bsis_subscribers%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ssr_select_row_upd_uk1';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := ssr_select_row_uk1( i_ssr_identifier   =>  i_ssr_identifier
                                   , o_rt_ssr => o_rt_ssr );
      if l_found
      then
         
         l_found := ssr_select_row_upd( i_ssr_id => o_rt_ssr.id
                                      , o_rt_ssr => o_rt_ssr );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end ssr_select_row_upd_uk1;

procedure ssr_lock_row( i_ssr_id   in  bsis_subscribers.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ssr_lock_row';
begin
  declare
     cursor c_ssr ( i_ssr_id   in  bsis_subscribers.id%type )
     is
             select ''
               from bsis_subscribers ssr
              where ssr.id = i_ssr_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_ssr_id is not null
         then
            begin
                
                ssr_lock_row_nowait( i_ssr_id => i_ssr_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_ssr( i_ssr_id => i_ssr_id );
                  close c_ssr;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_ssr%isopen
         then
            close c_ssr;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end ssr_lock_row;

procedure ssr_lock_row_nowait( i_ssr_id   in  bsis_subscribers.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ssr_lock_row_nowait';
begin
   declare
      cursor c_ssr ( i_ssr_id   in  bsis_subscribers.id%type )
      is
              select ''
                from bsis_subscribers ssr
               where ssr.id = i_ssr_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_ssr_id is not null
         then
            
            open c_ssr( i_ssr_id => i_ssr_id );

            close c_ssr;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_ssr%isopen
        then
           close c_ssr;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_ssr_id||'"' );
   end;                                                          
end ssr_lock_row_nowait;

function ssr_perform_update( i_ssr_id   in     bsis_subscribers.id%type
                           , io_rt_ssr  in out bsis_subscribers%rowtype )
return number
;

function ssr_perform_delete( i_ssr_id   in  bsis_subscribers.id%type )
return boolean
;

procedure ssr_insert_row ( io_rt_ssr  in out bsis_subscribers%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ssr_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into bsis_subscribers( id
                                , identifier
                                , sse_all_bags
                                , buffer_messages
                                , buffer_period
                                , automatic_redelivery
                                , redelivery_period
                                , latest_bagresponse_seq
                                , max_bagresponse_seq
                                , ack )
              values ( io_rt_ssr.id
                     , io_rt_ssr.identifier
                     , io_rt_ssr.sse_all_bags
                     , io_rt_ssr.buffer_messages
                     , io_rt_ssr.buffer_period
                     , io_rt_ssr.automatic_redelivery
                     , io_rt_ssr.redelivery_period
                     , io_rt_ssr.latest_bagresponse_seq
                     , io_rt_ssr.max_bagresponse_seq
                     , io_rt_ssr.ack )
           returning id
                   , identifier
                   , sse_all_bags
                   , buffer_messages
                   , buffer_period
                   , automatic_redelivery
                   , redelivery_period
                   , latest_bagresponse_seq
                   , max_bagresponse_seq
                   , ack
                into io_rt_ssr.id
                   , io_rt_ssr.identifier
                   , io_rt_ssr.sse_all_bags
                   , io_rt_ssr.buffer_messages
                   , io_rt_ssr.buffer_period
                   , io_rt_ssr.automatic_redelivery
                   , io_rt_ssr.redelivery_period
                   , io_rt_ssr.latest_bagresponse_seq
                   , io_rt_ssr.max_bagresponse_seq
                   , io_rt_ssr.ack;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_ssr.id||'"'
                                                             ||', IDENTIFIER = "'||io_rt_ssr.identifier||'"'
                                                             ||', SSE_ALL_BAGS = "'||io_rt_ssr.sse_all_bags||'"'
                                                             ||', BUFFER_MESSAGES = "'||io_rt_ssr.buffer_messages||'"'
                                                             ||', BUFFER_PERIOD = "'||io_rt_ssr.buffer_period||'"'
                                                             ||', AUTOMATIC_REDELIVERY = "'||io_rt_ssr.automatic_redelivery||'"'
                                                             ||', REDELIVERY_PERIOD = "'||io_rt_ssr.redelivery_period||'"'
                                                             ||', LATEST_BAGRESPONSE_SEQ = "'||io_rt_ssr.latest_bagresponse_seq||'"'
                                                             ||', MAX_BAGRESPONSE_SEQ = "'||io_rt_ssr.max_bagresponse_seq||'"'
                                                             ||', ACK = "'||io_rt_ssr.ack||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end ssr_insert_row;

function ssr_perform_update( i_ssr_id   in     bsis_subscribers.id%type
                           , io_rt_ssr  in out bsis_subscribers%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ssr_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update bsis_subscribers
            set id = io_rt_ssr.id
              , identifier = io_rt_ssr.identifier
              , sse_all_bags = io_rt_ssr.sse_all_bags
              , buffer_messages = io_rt_ssr.buffer_messages
              , buffer_period = io_rt_ssr.buffer_period
              , automatic_redelivery = io_rt_ssr.automatic_redelivery
              , redelivery_period = io_rt_ssr.redelivery_period
              , latest_bagresponse_seq = io_rt_ssr.latest_bagresponse_seq
              , max_bagresponse_seq = io_rt_ssr.max_bagresponse_seq
              , ack = io_rt_ssr.ack
          where id = i_ssr_id
      returning id
              , identifier
              , sse_all_bags
              , buffer_messages
              , buffer_period
              , automatic_redelivery
              , redelivery_period
              , latest_bagresponse_seq
              , max_bagresponse_seq
              , ack
           into io_rt_ssr.id
              , io_rt_ssr.identifier
              , io_rt_ssr.sse_all_bags
              , io_rt_ssr.buffer_messages
              , io_rt_ssr.buffer_period
              , io_rt_ssr.automatic_redelivery
              , io_rt_ssr.redelivery_period
              , io_rt_ssr.latest_bagresponse_seq
              , io_rt_ssr.max_bagresponse_seq
              , io_rt_ssr.ack;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_ssr.id||'"'
                                                             ||', IDENTIFIER = "'||io_rt_ssr.identifier||'"'
                                                             ||', SSE_ALL_BAGS = "'||io_rt_ssr.sse_all_bags||'"'
                                                             ||', BUFFER_MESSAGES = "'||io_rt_ssr.buffer_messages||'"'
                                                             ||', BUFFER_PERIOD = "'||io_rt_ssr.buffer_period||'"'
                                                             ||', AUTOMATIC_REDELIVERY = "'||io_rt_ssr.automatic_redelivery||'"'
                                                             ||', REDELIVERY_PERIOD = "'||io_rt_ssr.redelivery_period||'"'
                                                             ||', LATEST_BAGRESPONSE_SEQ = "'||io_rt_ssr.latest_bagresponse_seq||'"'
                                                             ||', MAX_BAGRESPONSE_SEQ = "'||io_rt_ssr.max_bagresponse_seq||'"'
                                                             ||', ACK = "'||io_rt_ssr.ack||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end ssr_perform_update;

function ssr_perform_delete( i_ssr_id   in  bsis_subscribers.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ssr_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from bsis_subscribers
          where id = i_ssr_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_ssr_id||'"' );
   end;                                                          
end ssr_perform_delete;

function ssr_update_row( i_ssr_id   in     bsis_subscribers.id%type
                       , io_rt_ssr  in out bsis_subscribers%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ssr_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         ssr_lock_row( i_ssr_id   =>  i_ssr_id );

         
         l_rowcount := 
            ssr_perform_update( i_ssr_id   =>  i_ssr_id
                              , io_rt_ssr  => io_rt_ssr );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_ssr.id||'"'
                                                          ||', IDENTIFIER = "'||io_rt_ssr.identifier||'"'
                                                          ||', SSE_ALL_BAGS = "'||io_rt_ssr.sse_all_bags||'"'
                                                          ||', BUFFER_MESSAGES = "'||io_rt_ssr.buffer_messages||'"'
                                                          ||', BUFFER_PERIOD = "'||io_rt_ssr.buffer_period||'"'
                                                          ||', AUTOMATIC_REDELIVERY = "'||io_rt_ssr.automatic_redelivery||'"'
                                                          ||', REDELIVERY_PERIOD = "'||io_rt_ssr.redelivery_period||'"'
                                                          ||', LATEST_BAGRESPONSE_SEQ = "'||io_rt_ssr.latest_bagresponse_seq||'"'
                                                          ||', MAX_BAGRESPONSE_SEQ = "'||io_rt_ssr.max_bagresponse_seq||'"'
                                                          ||', ACK = "'||io_rt_ssr.ack||'"'                                                           , 1, 4000));
   end;                                                          
end ssr_update_row;

function ssr_delete_row( i_ssr_id   in  bsis_subscribers.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ssr_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         ssr_lock_row( i_ssr_id   =>  i_ssr_id );

         
         l_deleted := ssr_perform_delete( i_ssr_id   =>  i_ssr_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_ssr_id||'"' );
   end;                                                          
end ssr_delete_row;


end bsis_ssr_tapi_pck;
/