create or replace PACKAGE acl_aet_tapi_pck
IS
-- Table API package for table acl_application_elements
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:40:56)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'ACL_AET_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'ACL_APPLICATION_ELEMENTS';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION aet_select_row( i_aet_ID   IN  acl_application_elements.ID%TYPE
                       , o_rt_aet   OUT acl_application_elements%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION aet_select_row_uk1( i_aet_NAME   IN  acl_application_elements.NAME%TYPE
                           , o_rt_aet  OUT acl_application_elements%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION aet_select_row_uk2( i_aet_ID_CUST   IN  acl_application_elements.ID_CUST%TYPE
                           , o_rt_aet  OUT acl_application_elements%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION aet_select_row_uk3( i_aet_DESCRIPTION   IN  acl_application_elements.DESCRIPTION%TYPE
                           , o_rt_aet  OUT acl_application_elements%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION aet_select_row_upd( i_aet_ID   IN  acl_application_elements.ID%TYPE
                           , o_rt_aet   OUT acl_application_elements%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION aet_select_row_upd_uk1( i_aet_NAME   IN  acl_application_elements.NAME%TYPE
                               , o_rt_aet  OUT acl_application_elements%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION aet_select_row_upd_uk2( i_aet_ID_CUST   IN  acl_application_elements.ID_CUST%TYPE
                               , o_rt_aet  OUT acl_application_elements%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION aet_select_row_upd_uk3( i_aet_DESCRIPTION   IN  acl_application_elements.DESCRIPTION%TYPE
                               , o_rt_aet  OUT acl_application_elements%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE aet_lock_row( i_aet_ID   IN  acl_application_elements.ID%TYPE )
;

PROCEDURE aet_lock_row_nowait( i_aet_ID   IN  acl_application_elements.ID%TYPE )
;


END acl_aet_tapi_pck;
/



package body acl_aet_tapi_pck
is




function aet_select_row( i_aet_id   in  acl_application_elements.id%type
                       , o_rt_aet   out acl_application_elements%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.aet_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_aet ( i_aet_id   in  acl_application_elements.id%type )
      is 
           select *
             from acl_application_elements aet
            where aet.id = i_aet_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_aet( i_aet_id => i_aet_id );
         fetch c_aet into o_rt_aet;
         l_found := c_aet%found;
         close c_aet;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_aet%isopen
         then
            close c_aet;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end aet_select_row;

function aet_select_row_uk1( i_aet_name   in  acl_application_elements.name%type
                           , o_rt_aet  out acl_application_elements%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.aet_select_row_uk1';
   l_found                boolean      := false;
begin
   declare
      cursor c_aet ( i_aet_name   in  acl_application_elements.name%type )
      is
         select *
           from acl_application_elements aet
          where aet.name = i_aet_name ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_aet(i_aet_name => i_aet_name);
         fetch c_aet into o_rt_aet;
         l_found := c_aet%found;
         close c_aet;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_aet%isopen
      then
         close c_aet;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end aet_select_row_uk1;

function aet_select_row_uk2( i_aet_id_cust   in  acl_application_elements.id_cust%type
                           , o_rt_aet  out acl_application_elements%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.aet_select_row_uk2';
   l_found                boolean      := false;
begin
   declare
      cursor c_aet ( i_aet_id_cust   in  acl_application_elements.id_cust%type )
      is
         select *
           from acl_application_elements aet
          where aet.id_cust = i_aet_id_cust ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_aet(i_aet_id_cust => i_aet_id_cust);
         fetch c_aet into o_rt_aet;
         l_found := c_aet%found;
         close c_aet;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_aet%isopen
      then
         close c_aet;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end aet_select_row_uk2;

function aet_select_row_uk3( i_aet_description   in  acl_application_elements.description%type
                           , o_rt_aet  out acl_application_elements%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.aet_select_row_uk3';
   l_found                boolean      := false;
begin
   declare
      cursor c_aet ( i_aet_description   in  acl_application_elements.description%type )
      is
         select *
           from acl_application_elements aet
          where aet.description = i_aet_description ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_aet(i_aet_description => i_aet_description);
         fetch c_aet into o_rt_aet;
         l_found := c_aet%found;
         close c_aet;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_aet%isopen
      then
         close c_aet;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end aet_select_row_uk3;

function aet_select_row_upd( i_aet_id   in  acl_application_elements.id%type
                           , o_rt_aet   out acl_application_elements%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.aet_select_row_upd';
   l_found                boolean      := false;

   cursor c_aet ( i_aet_id   in  acl_application_elements.id%type )
   is
           select *
             from acl_application_elements aet
            where aet.id = i_aet_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_aet( i_aet_id => i_aet_id );
   fetch c_aet into o_rt_aet;
   l_found := c_aet%found;
   close c_aet;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_aet%isopen
      then
         close c_aet;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end aet_select_row_upd;

function aet_select_row_upd_uk1( i_aet_name   in  acl_application_elements.name%type
                               , o_rt_aet  out acl_application_elements%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.aet_select_row_upd_uk1';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := aet_select_row_uk1( i_aet_name   =>  i_aet_name
                                   , o_rt_aet => o_rt_aet );
      if l_found
      then
         
         l_found := aet_select_row_upd( i_aet_id => o_rt_aet.id
                                      , o_rt_aet => o_rt_aet );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end aet_select_row_upd_uk1;

function aet_select_row_upd_uk2( i_aet_id_cust   in  acl_application_elements.id_cust%type
                               , o_rt_aet  out acl_application_elements%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.aet_select_row_upd_uk2';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := aet_select_row_uk2( i_aet_id_cust   =>  i_aet_id_cust
                                   , o_rt_aet => o_rt_aet );
      if l_found
      then
         
         l_found := aet_select_row_upd( i_aet_id => o_rt_aet.id
                                      , o_rt_aet => o_rt_aet );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end aet_select_row_upd_uk2;

function aet_select_row_upd_uk3( i_aet_description   in  acl_application_elements.description%type
                               , o_rt_aet  out acl_application_elements%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.aet_select_row_upd_uk3';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := aet_select_row_uk3( i_aet_description   =>  i_aet_description
                                   , o_rt_aet => o_rt_aet );
      if l_found
      then
         
         l_found := aet_select_row_upd( i_aet_id => o_rt_aet.id
                                      , o_rt_aet => o_rt_aet );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end aet_select_row_upd_uk3;

procedure aet_lock_row( i_aet_id   in  acl_application_elements.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.aet_lock_row';
begin
  declare
     cursor c_aet ( i_aet_id   in  acl_application_elements.id%type )
     is
             select ''
               from acl_application_elements aet
              where aet.id = i_aet_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_aet_id is not null
         then
            begin
                
                aet_lock_row_nowait( i_aet_id => i_aet_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_aet( i_aet_id => i_aet_id );
                  close c_aet;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_aet%isopen
         then
            close c_aet;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end aet_lock_row;

procedure aet_lock_row_nowait( i_aet_id   in  acl_application_elements.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.aet_lock_row_nowait';
begin
   declare
      cursor c_aet ( i_aet_id   in  acl_application_elements.id%type )
      is
              select ''
                from acl_application_elements aet
               where aet.id = i_aet_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_aet_id is not null
         then
            
            open c_aet( i_aet_id => i_aet_id );

            close c_aet;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_aet%isopen
        then
           close c_aet;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_aet_id||'"' );
   end;                                                          
end aet_lock_row_nowait;


end acl_aet_tapi_pck;
/