create or replace PACKAGE bsis_bds_tapi_pck
IS
-- Table API package for table bsis_baggage_data_att_source
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:40:58)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'BSIS_BDS_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'BSIS_BAGGAGE_DATA_ATT_SOURCE';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION bds_select_row( i_bds_ID   IN  bsis_baggage_data_att_source.ID%TYPE
                       , o_rt_bds   OUT bsis_baggage_data_att_source%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION bds_select_row_upd( i_bds_ID   IN  bsis_baggage_data_att_source.ID%TYPE
                           , o_rt_bds   OUT bsis_baggage_data_att_source%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE bds_lock_row( i_bds_ID   IN  bsis_baggage_data_att_source.ID%TYPE )
;

PROCEDURE bds_lock_row_nowait( i_bds_ID   IN  bsis_baggage_data_att_source.ID%TYPE )
;

PROCEDURE bds_insert_row ( io_rt_bds  IN OUT bsis_baggage_data_att_source%ROWTYPE )
;

FUNCTION bds_update_row( i_bds_ID   IN     bsis_baggage_data_att_source.ID%TYPE
                       , io_rt_bds  IN OUT bsis_baggage_data_att_source%ROWTYPE )
RETURN NUMBER
;

FUNCTION bds_delete_row( i_bds_ID   IN  bsis_baggage_data_att_source.ID%TYPE )
RETURN BOOLEAN
;

FUNCTION bds_seq1_nextval
RETURN bsis_baggage_data_att_source.ID%TYPE
;


END bsis_bds_tapi_pck;
/




package body bsis_bds_tapi_pck
is




function bds_select_row( i_bds_id   in  bsis_baggage_data_att_source.id%type
                       , o_rt_bds   out bsis_baggage_data_att_source%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.bds_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_bds ( i_bds_id   in  bsis_baggage_data_att_source.id%type )
      is 
           select *
             from bsis_baggage_data_att_source bds
            where bds.id = i_bds_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_bds( i_bds_id => i_bds_id );
         fetch c_bds into o_rt_bds;
         l_found := c_bds%found;
         close c_bds;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_bds%isopen
         then
            close c_bds;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end bds_select_row;

function bds_select_row_upd( i_bds_id   in  bsis_baggage_data_att_source.id%type
                           , o_rt_bds   out bsis_baggage_data_att_source%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.bds_select_row_upd';
   l_found                boolean      := false;

   cursor c_bds ( i_bds_id   in  bsis_baggage_data_att_source.id%type )
   is
           select *
             from bsis_baggage_data_att_source bds
            where bds.id = i_bds_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_bds( i_bds_id => i_bds_id );
   fetch c_bds into o_rt_bds;
   l_found := c_bds%found;
   close c_bds;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_bds%isopen
      then
         close c_bds;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end bds_select_row_upd;

procedure bds_lock_row( i_bds_id   in  bsis_baggage_data_att_source.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.bds_lock_row';
begin
  declare
     cursor c_bds ( i_bds_id   in  bsis_baggage_data_att_source.id%type )
     is
             select ''
               from bsis_baggage_data_att_source bds
              where bds.id = i_bds_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_bds_id is not null
         then
            begin
                
                bds_lock_row_nowait( i_bds_id => i_bds_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_bds( i_bds_id => i_bds_id );
                  close c_bds;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_bds%isopen
         then
            close c_bds;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end bds_lock_row;

procedure bds_lock_row_nowait( i_bds_id   in  bsis_baggage_data_att_source.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.bds_lock_row_nowait';
begin
   declare
      cursor c_bds ( i_bds_id   in  bsis_baggage_data_att_source.id%type )
      is
              select ''
                from bsis_baggage_data_att_source bds
               where bds.id = i_bds_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_bds_id is not null
         then
            
            open c_bds( i_bds_id => i_bds_id );

            close c_bds;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_bds%isopen
        then
           close c_bds;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_bds_id||'"' );
   end;                                                          
end bds_lock_row_nowait;

function bds_perform_update( i_bds_id   in     bsis_baggage_data_att_source.id%type
                           , io_rt_bds  in out bsis_baggage_data_att_source%rowtype )
return number
;

function bds_perform_delete( i_bds_id   in  bsis_baggage_data_att_source.id%type )
return boolean
;

procedure bds_insert_row ( io_rt_bds  in out bsis_baggage_data_att_source%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.bds_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into bsis_baggage_data_att_source( id
                                , bda_id
                                , att_id
                                , latest_message_type )
              values ( io_rt_bds.id
                     , io_rt_bds.bda_id
                     , io_rt_bds.att_id
                     , io_rt_bds.latest_message_type )
           returning id
                   , bda_id
                   , att_id
                   , latest_message_type
                into io_rt_bds.id
                   , io_rt_bds.bda_id
                   , io_rt_bds.att_id
                   , io_rt_bds.latest_message_type;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_bds.id||'"'
                                                             ||', BDA_ID = "'||io_rt_bds.bda_id||'"'
                                                             ||', ATT_ID = "'||io_rt_bds.att_id||'"'
                                                             ||', LATEST_MESSAGE_TYPE = "'||io_rt_bds.latest_message_type||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end bds_insert_row;

function bds_perform_update( i_bds_id   in     bsis_baggage_data_att_source.id%type
                           , io_rt_bds  in out bsis_baggage_data_att_source%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.bds_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update bsis_baggage_data_att_source
            set id = io_rt_bds.id
              , bda_id = io_rt_bds.bda_id
              , att_id = io_rt_bds.att_id
              , latest_message_type = io_rt_bds.latest_message_type
          where id = i_bds_id
      returning id
              , bda_id
              , att_id
              , latest_message_type
           into io_rt_bds.id
              , io_rt_bds.bda_id
              , io_rt_bds.att_id
              , io_rt_bds.latest_message_type;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_bds.id||'"'
                                                             ||', BDA_ID = "'||io_rt_bds.bda_id||'"'
                                                             ||', ATT_ID = "'||io_rt_bds.att_id||'"'
                                                             ||', LATEST_MESSAGE_TYPE = "'||io_rt_bds.latest_message_type||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end bds_perform_update;

function bds_perform_delete( i_bds_id   in  bsis_baggage_data_att_source.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.bds_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from bsis_baggage_data_att_source
          where id = i_bds_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_bds_id||'"' );
   end;                                                          
end bds_perform_delete;

function bds_update_row( i_bds_id   in     bsis_baggage_data_att_source.id%type
                       , io_rt_bds  in out bsis_baggage_data_att_source%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.bds_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         bds_lock_row( i_bds_id   =>  i_bds_id );

         
         l_rowcount := 
            bds_perform_update( i_bds_id   =>  i_bds_id
                              , io_rt_bds  => io_rt_bds );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_bds.id||'"'
                                                          ||', BDA_ID = "'||io_rt_bds.bda_id||'"'
                                                          ||', ATT_ID = "'||io_rt_bds.att_id||'"'
                                                          ||', LATEST_MESSAGE_TYPE = "'||io_rt_bds.latest_message_type||'"'                                                           , 1, 4000));
   end;                                                          
end bds_update_row;

function bds_delete_row( i_bds_id   in  bsis_baggage_data_att_source.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.bds_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         bds_lock_row( i_bds_id   =>  i_bds_id );

         
         l_deleted := bds_perform_delete( i_bds_id   =>  i_bds_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_bds_id||'"' );
   end;                                                          
end bds_delete_row;

function bds_seq1_nextval
return bsis_baggage_data_att_source.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.bds_seq1_nextval';
   l_bds_id  bsis_baggage_data_att_source.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select bsis_bds_seq1.nextval 
           into l_bds_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_bds_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end bds_seq1_nextval;


end bsis_bds_tapi_pck;
/