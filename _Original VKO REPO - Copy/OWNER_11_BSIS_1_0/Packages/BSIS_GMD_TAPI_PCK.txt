create or replace PACKAGE bsis_gmd_tapi_pck
IS
-- Table API package for table bsis_generic_mapping_defs
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:40:58)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'BSIS_GMD_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'BSIS_GENERIC_MAPPING_DEFS';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION gmd_select_row( i_gmd_ID   IN  bsis_generic_mapping_defs.ID%TYPE
                       , o_rt_gmd   OUT bsis_generic_mapping_defs%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION gmd_select_row_upd( i_gmd_ID   IN  bsis_generic_mapping_defs.ID%TYPE
                           , o_rt_gmd   OUT bsis_generic_mapping_defs%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE gmd_lock_row( i_gmd_ID   IN  bsis_generic_mapping_defs.ID%TYPE )
;

PROCEDURE gmd_lock_row_nowait( i_gmd_ID   IN  bsis_generic_mapping_defs.ID%TYPE )
;

PROCEDURE gmd_insert_row ( io_rt_gmd  IN OUT bsis_generic_mapping_defs%ROWTYPE )
;

FUNCTION gmd_update_row( i_gmd_ID   IN     bsis_generic_mapping_defs.ID%TYPE
                       , io_rt_gmd  IN OUT bsis_generic_mapping_defs%ROWTYPE )
RETURN NUMBER
;

FUNCTION gmd_delete_row( i_gmd_ID   IN  bsis_generic_mapping_defs.ID%TYPE )
RETURN BOOLEAN
;

FUNCTION gmd_seq1_nextval
RETURN bsis_generic_mapping_defs.ID%TYPE
;


END bsis_gmd_tapi_pck;
/




package body bsis_gmd_tapi_pck
is




function gmd_select_row( i_gmd_id   in  bsis_generic_mapping_defs.id%type
                       , o_rt_gmd   out bsis_generic_mapping_defs%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.gmd_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_gmd ( i_gmd_id   in  bsis_generic_mapping_defs.id%type )
      is 
           select *
             from bsis_generic_mapping_defs gmd
            where gmd.id = i_gmd_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_gmd( i_gmd_id => i_gmd_id );
         fetch c_gmd into o_rt_gmd;
         l_found := c_gmd%found;
         close c_gmd;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_gmd%isopen
         then
            close c_gmd;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end gmd_select_row;

function gmd_select_row_upd( i_gmd_id   in  bsis_generic_mapping_defs.id%type
                           , o_rt_gmd   out bsis_generic_mapping_defs%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.gmd_select_row_upd';
   l_found                boolean      := false;

   cursor c_gmd ( i_gmd_id   in  bsis_generic_mapping_defs.id%type )
   is
           select *
             from bsis_generic_mapping_defs gmd
            where gmd.id = i_gmd_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_gmd( i_gmd_id => i_gmd_id );
   fetch c_gmd into o_rt_gmd;
   l_found := c_gmd%found;
   close c_gmd;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_gmd%isopen
      then
         close c_gmd;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end gmd_select_row_upd;

procedure gmd_lock_row( i_gmd_id   in  bsis_generic_mapping_defs.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.gmd_lock_row';
begin
  declare
     cursor c_gmd ( i_gmd_id   in  bsis_generic_mapping_defs.id%type )
     is
             select ''
               from bsis_generic_mapping_defs gmd
              where gmd.id = i_gmd_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_gmd_id is not null
         then
            begin
                
                gmd_lock_row_nowait( i_gmd_id => i_gmd_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_gmd( i_gmd_id => i_gmd_id );
                  close c_gmd;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_gmd%isopen
         then
            close c_gmd;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end gmd_lock_row;

procedure gmd_lock_row_nowait( i_gmd_id   in  bsis_generic_mapping_defs.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.gmd_lock_row_nowait';
begin
   declare
      cursor c_gmd ( i_gmd_id   in  bsis_generic_mapping_defs.id%type )
      is
              select ''
                from bsis_generic_mapping_defs gmd
               where gmd.id = i_gmd_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_gmd_id is not null
         then
            
            open c_gmd( i_gmd_id => i_gmd_id );

            close c_gmd;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_gmd%isopen
        then
           close c_gmd;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_gmd_id||'"' );
   end;                                                          
end gmd_lock_row_nowait;

function gmd_perform_update( i_gmd_id   in     bsis_generic_mapping_defs.id%type
                           , io_rt_gmd  in out bsis_generic_mapping_defs%rowtype )
return number
;

function gmd_perform_delete( i_gmd_id   in  bsis_generic_mapping_defs.id%type )
return boolean
;

procedure gmd_insert_row ( io_rt_gmd  in out bsis_generic_mapping_defs%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.gmd_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into bsis_generic_mapping_defs( id
                                , type
                                , source
                                , key
                                , value )
              values ( io_rt_gmd.id
                     , io_rt_gmd.type
                     , io_rt_gmd.source
                     , io_rt_gmd.key
                     , io_rt_gmd.value )
           returning id
                   , type
                   , source
                   , key
                   , value
                into io_rt_gmd.id
                   , io_rt_gmd.type
                   , io_rt_gmd.source
                   , io_rt_gmd.key
                   , io_rt_gmd.value;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_gmd.id||'"'
                                                             ||', TYPE = "'||io_rt_gmd.type||'"'
                                                             ||', SOURCE = "'||io_rt_gmd.source||'"'
                                                             ||', KEY = "'||io_rt_gmd.key||'"'
                                                             ||', VALUE = "'||io_rt_gmd.value||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end gmd_insert_row;

function gmd_perform_update( i_gmd_id   in     bsis_generic_mapping_defs.id%type
                           , io_rt_gmd  in out bsis_generic_mapping_defs%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.gmd_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update bsis_generic_mapping_defs
            set id = io_rt_gmd.id
              , type = io_rt_gmd.type
              , source = io_rt_gmd.source
              , key = io_rt_gmd.key
              , value = io_rt_gmd.value
          where id = i_gmd_id
      returning id
              , type
              , source
              , key
              , value
           into io_rt_gmd.id
              , io_rt_gmd.type
              , io_rt_gmd.source
              , io_rt_gmd.key
              , io_rt_gmd.value;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_gmd.id||'"'
                                                             ||', TYPE = "'||io_rt_gmd.type||'"'
                                                             ||', SOURCE = "'||io_rt_gmd.source||'"'
                                                             ||', KEY = "'||io_rt_gmd.key||'"'
                                                             ||', VALUE = "'||io_rt_gmd.value||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end gmd_perform_update;

function gmd_perform_delete( i_gmd_id   in  bsis_generic_mapping_defs.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.gmd_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from bsis_generic_mapping_defs
          where id = i_gmd_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_gmd_id||'"' );
   end;                                                          
end gmd_perform_delete;

function gmd_update_row( i_gmd_id   in     bsis_generic_mapping_defs.id%type
                       , io_rt_gmd  in out bsis_generic_mapping_defs%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.gmd_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         gmd_lock_row( i_gmd_id   =>  i_gmd_id );

         
         l_rowcount := 
            gmd_perform_update( i_gmd_id   =>  i_gmd_id
                              , io_rt_gmd  => io_rt_gmd );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_gmd.id||'"'
                                                          ||', TYPE = "'||io_rt_gmd.type||'"'
                                                          ||', SOURCE = "'||io_rt_gmd.source||'"'
                                                          ||', KEY = "'||io_rt_gmd.key||'"'
                                                          ||', VALUE = "'||io_rt_gmd.value||'"'                                                           , 1, 4000));
   end;                                                          
end gmd_update_row;

function gmd_delete_row( i_gmd_id   in  bsis_generic_mapping_defs.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.gmd_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         gmd_lock_row( i_gmd_id   =>  i_gmd_id );

         
         l_deleted := gmd_perform_delete( i_gmd_id   =>  i_gmd_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_gmd_id||'"' );
   end;                                                          
end gmd_delete_row;

function gmd_seq1_nextval
return bsis_generic_mapping_defs.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.gmd_seq1_nextval';
   l_gmd_id  bsis_generic_mapping_defs.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select bsis_gmd_seq1.nextval 
           into l_gmd_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_gmd_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end gmd_seq1_nextval;


end bsis_gmd_tapi_pck;
/