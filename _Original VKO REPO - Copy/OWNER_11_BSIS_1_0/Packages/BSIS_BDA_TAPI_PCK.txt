create or replace PACKAGE bsis_bda_tapi_pck
IS
-- Table API package for table bsis_baggage_data
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:40:58)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'BSIS_BDA_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'BSIS_BAGGAGE_DATA';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION bda_select_row( i_bda_ID   IN  bsis_baggage_data.ID%TYPE
                       , o_rt_bda   OUT bsis_baggage_data%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION bda_select_row_upd( i_bda_ID   IN  bsis_baggage_data.ID%TYPE
                           , o_rt_bda   OUT bsis_baggage_data%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE bda_lock_row( i_bda_ID   IN  bsis_baggage_data.ID%TYPE )
;

PROCEDURE bda_lock_row_nowait( i_bda_ID   IN  bsis_baggage_data.ID%TYPE )
;

PROCEDURE bda_insert_row ( io_rt_bda  IN OUT bsis_baggage_data%ROWTYPE )
;

FUNCTION bda_update_row( i_bda_ID   IN     bsis_baggage_data.ID%TYPE
                       , io_rt_bda  IN OUT bsis_baggage_data%ROWTYPE )
RETURN NUMBER
;

FUNCTION bda_delete_row( i_bda_ID   IN  bsis_baggage_data.ID%TYPE )
RETURN BOOLEAN
;

FUNCTION bda_seq1_nextval
RETURN bsis_baggage_data.ID%TYPE
;


END bsis_bda_tapi_pck;
/




package body bsis_bda_tapi_pck
is




function bda_select_row( i_bda_id   in  bsis_baggage_data.id%type
                       , o_rt_bda   out bsis_baggage_data%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.bda_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_bda ( i_bda_id   in  bsis_baggage_data.id%type )
      is 
           select *
             from bsis_baggage_data bda
            where bda.id = i_bda_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_bda( i_bda_id => i_bda_id );
         fetch c_bda into o_rt_bda;
         l_found := c_bda%found;
         close c_bda;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_bda%isopen
         then
            close c_bda;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end bda_select_row;

function bda_select_row_upd( i_bda_id   in  bsis_baggage_data.id%type
                           , o_rt_bda   out bsis_baggage_data%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.bda_select_row_upd';
   l_found                boolean      := false;

   cursor c_bda ( i_bda_id   in  bsis_baggage_data.id%type )
   is
           select *
             from bsis_baggage_data bda
            where bda.id = i_bda_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_bda( i_bda_id => i_bda_id );
   fetch c_bda into o_rt_bda;
   l_found := c_bda%found;
   close c_bda;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_bda%isopen
      then
         close c_bda;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end bda_select_row_upd;

procedure bda_lock_row( i_bda_id   in  bsis_baggage_data.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.bda_lock_row';
begin
  declare
     cursor c_bda ( i_bda_id   in  bsis_baggage_data.id%type )
     is
             select ''
               from bsis_baggage_data bda
              where bda.id = i_bda_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_bda_id is not null
         then
            begin
                
                bda_lock_row_nowait( i_bda_id => i_bda_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_bda( i_bda_id => i_bda_id );
                  close c_bda;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_bda%isopen
         then
            close c_bda;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end bda_lock_row;

procedure bda_lock_row_nowait( i_bda_id   in  bsis_baggage_data.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.bda_lock_row_nowait';
begin
   declare
      cursor c_bda ( i_bda_id   in  bsis_baggage_data.id%type )
      is
              select ''
                from bsis_baggage_data bda
               where bda.id = i_bda_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_bda_id is not null
         then
            
            open c_bda( i_bda_id => i_bda_id );

            close c_bda;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_bda%isopen
        then
           close c_bda;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_bda_id||'"' );
   end;                                                          
end bda_lock_row_nowait;

function bda_perform_update( i_bda_id   in     bsis_baggage_data.id%type
                           , io_rt_bda  in out bsis_baggage_data%rowtype )
return number
;

function bda_perform_delete( i_bda_id   in  bsis_baggage_data.id%type )
return boolean
;

procedure bda_insert_row ( io_rt_bda  in out bsis_baggage_data%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.bda_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into bsis_baggage_data( id
                                , lpckey
                                , lpc
                                , lpc_extension
                                , bid
                                , bid_extension
                                , pid
                                , flight
                                , pnr
                                , checkinsequencenr
                                , vendor_string
                                , created_on
                                , last_updated_on
                                , deleted_ind
                                , src_data_src
                                , src_data
                                , last_src_data_upd
                                , last_src_data_upd_bsm
                                , sve_data
                                , last_sve_data_upd
                                , baggagesource_ind
                                , bagload_deliv_ind )
              values ( io_rt_bda.id
                     , io_rt_bda.lpckey
                     , io_rt_bda.lpc
                     , io_rt_bda.lpc_extension
                     , io_rt_bda.bid
                     , io_rt_bda.bid_extension
                     , io_rt_bda.pid
                     , io_rt_bda.flight
                     , io_rt_bda.pnr
                     , io_rt_bda.checkinsequencenr
                     , io_rt_bda.vendor_string
                     , io_rt_bda.created_on
                     , io_rt_bda.last_updated_on
                     , io_rt_bda.deleted_ind
                     , io_rt_bda.src_data_src
                     , io_rt_bda.src_data
                     , io_rt_bda.last_src_data_upd
                     , io_rt_bda.last_src_data_upd_bsm
                     , io_rt_bda.sve_data
                     , io_rt_bda.last_sve_data_upd
                     , io_rt_bda.baggagesource_ind
                     , io_rt_bda.bagload_deliv_ind )
           returning id
                   , lpckey
                   , lpc
                   , lpc_extension
                   , bid
                   , bid_extension
                   , pid
                   , flight
                   , pnr
                   , checkinsequencenr
                   , vendor_string
                   , created_on
                   , last_updated_on
                   , deleted_ind
                   , src_data_src
                   , last_src_data_upd
                   , last_src_data_upd_bsm
                   , last_sve_data_upd
                   , baggagesource_ind
                   , bagload_deliv_ind
                into io_rt_bda.id
                   , io_rt_bda.lpckey
                   , io_rt_bda.lpc
                   , io_rt_bda.lpc_extension
                   , io_rt_bda.bid
                   , io_rt_bda.bid_extension
                   , io_rt_bda.pid
                   , io_rt_bda.flight
                   , io_rt_bda.pnr
                   , io_rt_bda.checkinsequencenr
                   , io_rt_bda.vendor_string
                   , io_rt_bda.created_on
                   , io_rt_bda.last_updated_on
                   , io_rt_bda.deleted_ind
                   , io_rt_bda.src_data_src

                   , io_rt_bda.last_src_data_upd
                   , io_rt_bda.last_src_data_upd_bsm

                   , io_rt_bda.last_sve_data_upd
                   , io_rt_bda.baggagesource_ind
                   , io_rt_bda.bagload_deliv_ind;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_bda.id||'"'
                                                             ||', LPCKEY = "'||io_rt_bda.lpckey||'"'
                                                             ||', LPC = "'||io_rt_bda.lpc||'"'
                                                             ||', LPC_EXTENSION = "'||io_rt_bda.lpc_extension||'"'
                                                             ||', BID = "'||io_rt_bda.bid||'"'
                                                             ||', BID_EXTENSION = "'||io_rt_bda.bid_extension||'"'
                                                             ||', PID = "'||io_rt_bda.pid||'"'
                                                             ||', FLIGHT = "'||io_rt_bda.flight||'"'
                                                             ||', PNR = "'||io_rt_bda.pnr||'"'
                                                             ||', CHECKINSEQUENCENR = "'||io_rt_bda.checkinsequencenr||'"'
                                                             ||', VENDOR_STRING = "'||io_rt_bda.vendor_string||'"'
                                                             ||', CREATED_ON = "'||io_rt_bda.created_on||'"'
                                                             ||', LAST_UPDATED_ON = "'||io_rt_bda.last_updated_on||'"'
                                                             ||', DELETED_IND = "'||io_rt_bda.deleted_ind||'"'
                                                             ||', SRC_DATA_SRC = "'||io_rt_bda.src_data_src||'"'

                                                             ||', LAST_SRC_DATA_UPD = "'||io_rt_bda.last_src_data_upd||'"'
                                                             ||', LAST_SRC_DATA_UPD_BSM = "'||io_rt_bda.last_src_data_upd_bsm||'"'

                                                             ||', LAST_SVE_DATA_UPD = "'||io_rt_bda.last_sve_data_upd||'"'
                                                             ||', BAGGAGESOURCE_IND = "'||io_rt_bda.baggagesource_ind||'"'
                                                             ||', BAGLOAD_DELIV_IND = "'||io_rt_bda.bagload_deliv_ind||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end bda_insert_row;

function bda_perform_update( i_bda_id   in     bsis_baggage_data.id%type
                           , io_rt_bda  in out bsis_baggage_data%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.bda_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update bsis_baggage_data
            set id = io_rt_bda.id
              , lpckey = io_rt_bda.lpckey
              , lpc = io_rt_bda.lpc
              , lpc_extension = io_rt_bda.lpc_extension
              , bid = io_rt_bda.bid
              , bid_extension = io_rt_bda.bid_extension
              , pid = io_rt_bda.pid
              , flight = io_rt_bda.flight
              , pnr = io_rt_bda.pnr
              , checkinsequencenr = io_rt_bda.checkinsequencenr
              , vendor_string = io_rt_bda.vendor_string
              , created_on = io_rt_bda.created_on
              , last_updated_on = io_rt_bda.last_updated_on
              , deleted_ind = io_rt_bda.deleted_ind
              , src_data_src = io_rt_bda.src_data_src
              , src_data = io_rt_bda.src_data
              , last_src_data_upd = io_rt_bda.last_src_data_upd
              , last_src_data_upd_bsm = io_rt_bda.last_src_data_upd_bsm
              , sve_data = io_rt_bda.sve_data
              , last_sve_data_upd = io_rt_bda.last_sve_data_upd
              , baggagesource_ind = io_rt_bda.baggagesource_ind
              , bagload_deliv_ind = io_rt_bda.bagload_deliv_ind
          where id = i_bda_id
      returning id
              , lpckey
              , lpc
              , lpc_extension
              , bid
              , bid_extension
              , pid
              , flight
              , pnr
              , checkinsequencenr
              , vendor_string
              , created_on
              , last_updated_on
              , deleted_ind
              , src_data_src
              , last_src_data_upd
              , last_src_data_upd_bsm
              , last_sve_data_upd
              , baggagesource_ind
              , bagload_deliv_ind
           into io_rt_bda.id
              , io_rt_bda.lpckey
              , io_rt_bda.lpc
              , io_rt_bda.lpc_extension
              , io_rt_bda.bid
              , io_rt_bda.bid_extension
              , io_rt_bda.pid
              , io_rt_bda.flight
              , io_rt_bda.pnr
              , io_rt_bda.checkinsequencenr
              , io_rt_bda.vendor_string
              , io_rt_bda.created_on
              , io_rt_bda.last_updated_on
              , io_rt_bda.deleted_ind
              , io_rt_bda.src_data_src

              , io_rt_bda.last_src_data_upd
              , io_rt_bda.last_src_data_upd_bsm

              , io_rt_bda.last_sve_data_upd
              , io_rt_bda.baggagesource_ind
              , io_rt_bda.bagload_deliv_ind;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_bda.id||'"'
                                                             ||', LPCKEY = "'||io_rt_bda.lpckey||'"'
                                                             ||', LPC = "'||io_rt_bda.lpc||'"'
                                                             ||', LPC_EXTENSION = "'||io_rt_bda.lpc_extension||'"'
                                                             ||', BID = "'||io_rt_bda.bid||'"'
                                                             ||', BID_EXTENSION = "'||io_rt_bda.bid_extension||'"'
                                                             ||', PID = "'||io_rt_bda.pid||'"'
                                                             ||', FLIGHT = "'||io_rt_bda.flight||'"'
                                                             ||', PNR = "'||io_rt_bda.pnr||'"'
                                                             ||', CHECKINSEQUENCENR = "'||io_rt_bda.checkinsequencenr||'"'
                                                             ||', VENDOR_STRING = "'||io_rt_bda.vendor_string||'"'
                                                             ||', CREATED_ON = "'||io_rt_bda.created_on||'"'
                                                             ||', LAST_UPDATED_ON = "'||io_rt_bda.last_updated_on||'"'
                                                             ||', DELETED_IND = "'||io_rt_bda.deleted_ind||'"'
                                                             ||', SRC_DATA_SRC = "'||io_rt_bda.src_data_src||'"'

                                                             ||', LAST_SRC_DATA_UPD = "'||io_rt_bda.last_src_data_upd||'"'
                                                             ||', LAST_SRC_DATA_UPD_BSM = "'||io_rt_bda.last_src_data_upd_bsm||'"'

                                                             ||', LAST_SVE_DATA_UPD = "'||io_rt_bda.last_sve_data_upd||'"'
                                                             ||', BAGGAGESOURCE_IND = "'||io_rt_bda.baggagesource_ind||'"'
                                                             ||', BAGLOAD_DELIV_IND = "'||io_rt_bda.bagload_deliv_ind||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end bda_perform_update;

function bda_perform_delete( i_bda_id   in  bsis_baggage_data.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.bda_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from bsis_baggage_data
          where id = i_bda_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_bda_id||'"' );
   end;                                                          
end bda_perform_delete;

function bda_update_row( i_bda_id   in     bsis_baggage_data.id%type
                       , io_rt_bda  in out bsis_baggage_data%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.bda_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         bda_lock_row( i_bda_id   =>  i_bda_id );

         
         l_rowcount := 
            bda_perform_update( i_bda_id   =>  i_bda_id
                              , io_rt_bda  => io_rt_bda );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_bda.id||'"'
                                                          ||', LPCKEY = "'||io_rt_bda.lpckey||'"'
                                                          ||', LPC = "'||io_rt_bda.lpc||'"'
                                                          ||', LPC_EXTENSION = "'||io_rt_bda.lpc_extension||'"'
                                                          ||', BID = "'||io_rt_bda.bid||'"'
                                                          ||', BID_EXTENSION = "'||io_rt_bda.bid_extension||'"'
                                                          ||', PID = "'||io_rt_bda.pid||'"'
                                                          ||', FLIGHT = "'||io_rt_bda.flight||'"'
                                                          ||', PNR = "'||io_rt_bda.pnr||'"'
                                                          ||', CHECKINSEQUENCENR = "'||io_rt_bda.checkinsequencenr||'"'
                                                          ||', VENDOR_STRING = "'||io_rt_bda.vendor_string||'"'
                                                          ||', CREATED_ON = "'||io_rt_bda.created_on||'"'
                                                          ||', LAST_UPDATED_ON = "'||io_rt_bda.last_updated_on||'"'
                                                          ||', DELETED_IND = "'||io_rt_bda.deleted_ind||'"'
                                                          ||', SRC_DATA_SRC = "'||io_rt_bda.src_data_src||'"'

                                                          ||', LAST_SRC_DATA_UPD = "'||io_rt_bda.last_src_data_upd||'"'
                                                          ||', LAST_SRC_DATA_UPD_BSM = "'||io_rt_bda.last_src_data_upd_bsm||'"'

                                                          ||', LAST_SVE_DATA_UPD = "'||io_rt_bda.last_sve_data_upd||'"'
                                                          ||', BAGGAGESOURCE_IND = "'||io_rt_bda.baggagesource_ind||'"'
                                                          ||', BAGLOAD_DELIV_IND = "'||io_rt_bda.bagload_deliv_ind||'"'                                                           , 1, 4000));
   end;                                                          
end bda_update_row;

function bda_delete_row( i_bda_id   in  bsis_baggage_data.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.bda_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         bda_lock_row( i_bda_id   =>  i_bda_id );

         
         l_deleted := bda_perform_delete( i_bda_id   =>  i_bda_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_bda_id||'"' );
   end;                                                          
end bda_delete_row;

function bda_seq1_nextval
return bsis_baggage_data.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.bda_seq1_nextval';
   l_bda_id  bsis_baggage_data.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select bsis_bda_seq1.nextval 
           into l_bda_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_bda_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end bda_seq1_nextval;


end bsis_bda_tapi_pck;
/