create or replace PACKAGE bsis_gde_tapi_pck
IS
-- Table API package for table bsis_guaranteed_delivery
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:40:58)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'BSIS_GDE_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'BSIS_GUARANTEED_DELIVERY';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION gde_select_row( i_gde_ID   IN  bsis_guaranteed_delivery.ID%TYPE
                       , o_rt_gde   OUT bsis_guaranteed_delivery%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION gde_select_row_upd( i_gde_ID   IN  bsis_guaranteed_delivery.ID%TYPE
                           , o_rt_gde   OUT bsis_guaranteed_delivery%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE gde_lock_row( i_gde_ID   IN  bsis_guaranteed_delivery.ID%TYPE )
;

PROCEDURE gde_lock_row_nowait( i_gde_ID   IN  bsis_guaranteed_delivery.ID%TYPE )
;

PROCEDURE gde_insert_row ( io_rt_gde  IN OUT bsis_guaranteed_delivery%ROWTYPE )
;

FUNCTION gde_update_row( i_gde_ID   IN     bsis_guaranteed_delivery.ID%TYPE
                       , io_rt_gde  IN OUT bsis_guaranteed_delivery%ROWTYPE )
RETURN NUMBER
;

FUNCTION gde_delete_row( i_gde_ID   IN  bsis_guaranteed_delivery.ID%TYPE )
RETURN BOOLEAN
;

FUNCTION gde_seq1_nextval
RETURN bsis_guaranteed_delivery.ID%TYPE
;


END bsis_gde_tapi_pck;
/




package body bsis_gde_tapi_pck
is




function gde_select_row( i_gde_id   in  bsis_guaranteed_delivery.id%type
                       , o_rt_gde   out bsis_guaranteed_delivery%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.gde_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_gde ( i_gde_id   in  bsis_guaranteed_delivery.id%type )
      is 
           select *
             from bsis_guaranteed_delivery gde
            where gde.id = i_gde_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_gde( i_gde_id => i_gde_id );
         fetch c_gde into o_rt_gde;
         l_found := c_gde%found;
         close c_gde;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_gde%isopen
         then
            close c_gde;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end gde_select_row;

function gde_select_row_upd( i_gde_id   in  bsis_guaranteed_delivery.id%type
                           , o_rt_gde   out bsis_guaranteed_delivery%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.gde_select_row_upd';
   l_found                boolean      := false;

   cursor c_gde ( i_gde_id   in  bsis_guaranteed_delivery.id%type )
   is
           select *
             from bsis_guaranteed_delivery gde
            where gde.id = i_gde_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_gde( i_gde_id => i_gde_id );
   fetch c_gde into o_rt_gde;
   l_found := c_gde%found;
   close c_gde;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_gde%isopen
      then
         close c_gde;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end gde_select_row_upd;

procedure gde_lock_row( i_gde_id   in  bsis_guaranteed_delivery.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.gde_lock_row';
begin
  declare
     cursor c_gde ( i_gde_id   in  bsis_guaranteed_delivery.id%type )
     is
             select ''
               from bsis_guaranteed_delivery gde
              where gde.id = i_gde_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_gde_id is not null
         then
            begin
                
                gde_lock_row_nowait( i_gde_id => i_gde_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_gde( i_gde_id => i_gde_id );
                  close c_gde;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_gde%isopen
         then
            close c_gde;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end gde_lock_row;

procedure gde_lock_row_nowait( i_gde_id   in  bsis_guaranteed_delivery.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.gde_lock_row_nowait';
begin
   declare
      cursor c_gde ( i_gde_id   in  bsis_guaranteed_delivery.id%type )
      is
              select ''
                from bsis_guaranteed_delivery gde
               where gde.id = i_gde_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_gde_id is not null
         then
            
            open c_gde( i_gde_id => i_gde_id );

            close c_gde;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_gde%isopen
        then
           close c_gde;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_gde_id||'"' );
   end;                                                          
end gde_lock_row_nowait;

function gde_perform_update( i_gde_id   in     bsis_guaranteed_delivery.id%type
                           , io_rt_gde  in out bsis_guaranteed_delivery%rowtype )
return number
;

function gde_perform_delete( i_gde_id   in  bsis_guaranteed_delivery.id%type )
return boolean
;

procedure gde_insert_row ( io_rt_gde  in out bsis_guaranteed_delivery%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.gde_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into bsis_guaranteed_delivery( id
                                , type
                                , message
                                , status
                                , send_attempts
                                , last_send_attempt )
              values ( io_rt_gde.id
                     , io_rt_gde.type
                     , io_rt_gde.message
                     , io_rt_gde.status
                     , io_rt_gde.send_attempts
                     , io_rt_gde.last_send_attempt )
           returning id
                   , type
                   , status
                   , send_attempts
                   , last_send_attempt
                into io_rt_gde.id
                   , io_rt_gde.type

                   , io_rt_gde.status
                   , io_rt_gde.send_attempts
                   , io_rt_gde.last_send_attempt;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_gde.id||'"'
                                                             ||', TYPE = "'||io_rt_gde.type||'"'

                                                             ||', STATUS = "'||io_rt_gde.status||'"'
                                                             ||', SEND_ATTEMPTS = "'||io_rt_gde.send_attempts||'"'
                                                             ||', LAST_SEND_ATTEMPT = "'||io_rt_gde.last_send_attempt||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end gde_insert_row;

function gde_perform_update( i_gde_id   in     bsis_guaranteed_delivery.id%type
                           , io_rt_gde  in out bsis_guaranteed_delivery%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.gde_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update bsis_guaranteed_delivery
            set id = io_rt_gde.id
              , type = io_rt_gde.type
              , message = io_rt_gde.message
              , status = io_rt_gde.status
              , send_attempts = io_rt_gde.send_attempts
              , last_send_attempt = io_rt_gde.last_send_attempt
          where id = i_gde_id
      returning id
              , type
              , status
              , send_attempts
              , last_send_attempt
           into io_rt_gde.id
              , io_rt_gde.type

              , io_rt_gde.status
              , io_rt_gde.send_attempts
              , io_rt_gde.last_send_attempt;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_gde.id||'"'
                                                             ||', TYPE = "'||io_rt_gde.type||'"'

                                                             ||', STATUS = "'||io_rt_gde.status||'"'
                                                             ||', SEND_ATTEMPTS = "'||io_rt_gde.send_attempts||'"'
                                                             ||', LAST_SEND_ATTEMPT = "'||io_rt_gde.last_send_attempt||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end gde_perform_update;

function gde_perform_delete( i_gde_id   in  bsis_guaranteed_delivery.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.gde_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from bsis_guaranteed_delivery
          where id = i_gde_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_gde_id||'"' );
   end;                                                          
end gde_perform_delete;

function gde_update_row( i_gde_id   in     bsis_guaranteed_delivery.id%type
                       , io_rt_gde  in out bsis_guaranteed_delivery%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.gde_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         gde_lock_row( i_gde_id   =>  i_gde_id );

         
         l_rowcount := 
            gde_perform_update( i_gde_id   =>  i_gde_id
                              , io_rt_gde  => io_rt_gde );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_gde.id||'"'
                                                          ||', TYPE = "'||io_rt_gde.type||'"'

                                                          ||', STATUS = "'||io_rt_gde.status||'"'
                                                          ||', SEND_ATTEMPTS = "'||io_rt_gde.send_attempts||'"'
                                                          ||', LAST_SEND_ATTEMPT = "'||io_rt_gde.last_send_attempt||'"'                                                           , 1, 4000));
   end;                                                          
end gde_update_row;

function gde_delete_row( i_gde_id   in  bsis_guaranteed_delivery.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.gde_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         gde_lock_row( i_gde_id   =>  i_gde_id );

         
         l_deleted := gde_perform_delete( i_gde_id   =>  i_gde_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_gde_id||'"' );
   end;                                                          
end gde_delete_row;

function gde_seq1_nextval
return bsis_guaranteed_delivery.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.gde_seq1_nextval';
   l_gde_id  bsis_guaranteed_delivery.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select bsis_gde_seq1.nextval 
           into l_gde_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_gde_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end gde_seq1_nextval;


end bsis_gde_tapi_pck;
/