create or replace PACKAGE LM_LIFESIGN IS

TYPE G_IT_AREA_ID_CUST IS TABLE OF LM_SYSTEM_COMPONENTS.ID_CUST%TYPE INDEX BY BINARY_INTEGER;

G_CON_PACKAGE CONSTANT LM_CONSTANT.ST_PROC_NAME := 'LM_LIFESIGN';

/* LSN_001: Handle a request for a lifesign */
PROCEDURE HDL_REQUEST_FOR_LIFESIGN;
/* LSN_002: Handle a response for a lifesign */
PROCEDURE HDL_RESPONSE_FOR_LIFESIGN;
/* LSN_003: Request a lifesign from on other party. */
PROCEDURE SEND_REQUEST_FOR_LIFESIGN
 (I_LPY_ID IN LM_LIFESIGN_PARTIES.ID%TYPE
 ,I_PTY_ID_CUST IN LM_PARTIES.ID_CUST%TYPE
 ,I_INSTANCE_ID IN LM_PARTIES.INSTANCE_ID%TYPE
 );
/* LSN_004: guard for the responses of the LifeSign */
PROCEDURE GUARD_OUTGOING_LIFESIGN
  (I_LSN_PARTY   IN LM_PARTIES.ID_CUST%TYPE
  ,I_INSTANCE_ID IN LM_PARTIES.INSTANCE_ID%TYPE DEFAULT NULL
  );
/* LSN_005: Reads attributes from LifeSignRequest message */
PROCEDURE GET_LSNREQ_MESSAGE_ATTRIBUTES
 (I_IT_REG IN Lm_Interface.G_IT_IMA
 ,O_EVENT_TIME OUT LM_PACKAGE_EVENTS.EVENT_TIME%TYPE
 ,O_SOURCE_PROCESS_ID OUT LM_PARTIES.ID_CUST%TYPE
 ,O_TARGET_PROCESS_ID OUT LM_PARTIES.ID_CUST%TYPE
 ,O_SEQUENCE_MSG OUT LM_LIFESIGN_REQ_RECEIVED.SEQUENCE%TYPE
 ,O_IT_AREA_ID_CUST OUT Lm_LifeSign.G_IT_AREA_ID_CUST
 ,O_INSTANCE_ID       OUT lm_parties.instance_id%TYPE
 );
/* LSN_006: Reads attributes from LifeSignResponse message */
PROCEDURE GET_LSNRESP_MESSAGE_ATTRIBUTES
 (I_IT_REG IN Lm_Interface.G_IT_IMA
 ,O_EVENT_TIME OUT LM_PACKAGE_EVENTS.EVENT_TIME%TYPE
 ,O_SOURCE_PROCESS_ID OUT LM_PARTIES.ID_CUST%TYPE
 ,O_TARGET_PROCESS_ID OUT LM_PARTIES.ID_CUST%TYPE
 ,O_SIGNATURE OUT LM_LIFESIGN_REQ_SENT.SEQUENCE%TYPE
 ,O_INSTANCE_ID OUT LM_PARTIES.INSTANCE_ID%TYPE
 );
/* LSN_007: Get the LifeSign Party  row */
PROCEDURE GET_LIFESIGN_PARTY
 (I_PTY_ID_CUST IN LM_PARTIES.ID_CUST%TYPE
 ,I_INSTANCE_ID IN LM_PARTIES.INSTANCE_ID%TYPE
 ,O_RT_LPY OUT LM_LIFESIGN_PARTIES%ROWTYPE
 );
/* LSN_008: Record a LIFESIGN PARTY's healthiness */
PROCEDURE RECORD_LPY_HEALTHINESS
 (I_LPY_ID IN LM_LIFESIGN_PARTIES.ID%TYPE
 ,I_EVENT_TIME IN LM_LIFESIGN_PARTY_STATUSES.TIMESTAMP_HEALTHY%TYPE
 );
/* LSN_009: Return the message sequence to use in the LifeSignRequest */
FUNCTION GET_NEXT_LSN_SENT_SEQ
 (I_LPY_ID IN LM_LIFESIGN_PARTIES.ID%TYPE
 )
 RETURN LM_LIFESIGN_REQ_SENT.SEQUENCE%TYPE;
/* LSN_010 Determine healthyness of communication with a lifesign party */
FUNCTION DETERMINE_LPY_HEALTHINESS
 (I_LPY_ID IN LM_LIFESIGN_PARTIES.ID%TYPE
 )
 RETURN BOOLEAN;
/* LSN_011 Determine healthyness of communication with a lifesign party */
FUNCTION DETERMINE_LPY_HEALTHINESS_YN
 (I_LPY_ID IN LM_LIFESIGN_PARTIES.ID%TYPE
 )
 RETURN VARCHAR2;
/* LSN_012 Determine healthyness of an area */
FUNCTION determine_area_healthiness
 (i_area_id_cust     IN lm_system_components.id_cust%TYPE
  )
 RETURN BOOLEAN;
/* LSN_013: Monitor the outgoing lifesigns */
PROCEDURE MONITOR
 (i_lpy_id IN lm_lifesign_parties.id%TYPE);
  
RETURN BOOLEAN;
/* LSN_015: Check if a party exists */
FUNCTION check_party
 (i_pty_id_cust     IN lm_parties.id_cust%TYPE
 ,i_pty_instance_id IN lm_parties.instance_id%TYPE)
RETURN lm_parties.id%TYPE;

END LM_LIFESIGN;
/




package body lm_lifesign is

g_nr_missed_lifesigns integer := 0;


























procedure hdl_request_for_lifesign
is
   



















   l_con_proc_name constant lm_constant.st_proc_name := g_con_package || '.hdl_request_for_lifesign';

   
   cursor c_areas
      (i_id_cust in lm_areas_v.id_cust%type
       )
   is
   select *
   from   lm_areas_v
   where  id_cust = i_id_cust;

   l_scs_found          number;
   l_message            xmltype;
   l_it_lifesignrequest lm_interface.g_it_ima := lm_interface.g_it_message_content;
   l_pty_id             lm_parties.id%type;
   l_rt_lpy             lm_lifesign_parties%rowtype;
   l_rt_lrd             lm_lifesign_req_received%rowtype;
   l_ims_id             lm_ifc_messages.id%type;
   l_rt_scs             lm_system_component_statuses%rowtype;
   l_it_area_id_cust    lm_lifesign.g_it_area_id_cust;
   l_source_process_id  lm_parties.id_cust%type;
   l_target_process_id  lm_parties.id_cust%type;
   l_instance_id        lm_parties.instance_id%type;
   rec_areas            c_areas%rowtype;

begin
   viu_module.enter_module( i_module      => l_con_proc_name );
   
   l_rt_lrd.event_time_response := lm_common.default_timestamp;

   
   lm_lifesign.get_lsnreq_message_attributes( i_it_reg                 => l_it_lifesignrequest
                                            , o_event_time             => l_rt_lrd.event_time
                                            , o_source_process_id      => l_source_process_id
                                            , o_target_process_id      => l_target_process_id
                                            , o_sequence_msg           => l_rt_lrd.sequence
                                            , o_it_area_id_cust        => l_it_area_id_cust
                                            , o_instance_id            => l_instance_id
                                            );

   
   










   
   l_pty_id := lm_lifesign.check_party(i_pty_id_cust     => l_source_process_id
                                      ,i_pty_instance_id => l_instance_id
                                      );
   if not lm_lpy_tapi_pck.lpy_select_row_uk1( i_lpy_pty_id => l_pty_id
                                             ,o_rt_lpy     => l_rt_lpy
                                             )
   then
      l_rt_lpy.pty_id            := l_pty_id;
      l_rt_lpy.response_interval := lm_common.get_parameter_value( i_prr_name => lm_constant.g_con_pve_pmr_lsn_def_resp_int );
      l_rt_lpy.allowed_misses    := lm_common.get_parameter_value( i_prr_name => lm_constant.g_con_pve_pmr_lsn_allowed_miss );
      l_rt_lpy.ind_initiator     := lm_constant.g_con_yesno_yes;
      lm_lpy_tapi_pck.lpy_insert_row( io_rt_lpy  => l_rt_lpy );
   end if;

   if l_it_area_id_cust.count > 0
   then
      
      for i_req_idx in l_it_area_id_cust.first .. l_it_area_id_cust.last
      loop
         
         open c_areas( i_id_cust      => l_it_area_id_cust( i_req_idx ));
         fetch c_areas
         into  rec_areas;
         if c_areas%found
         then
            close c_areas;
            if rec_areas.timestamp_healthy is not null
            then
               
               if l_rt_lrd.event_time > rec_areas.timestamp_healthy
               then
                  l_rt_scs.sct_id             := rec_areas.area_id;
                  l_rt_scs.timestamp_healthy  := l_rt_lrd.event_time;
                  l_rt_scs.lpy_id             := l_rt_lpy.id;
                  l_scs_found                 := lm_scs_tapi_pck.scs_update_row( i_scs_sct_id      => rec_areas.area_id
                                                                               , io_rt_scs         => l_rt_scs
                                                                               );
               end if;
            else
               



               l_rt_scs.sct_id             := rec_areas.area_id;
               l_rt_scs.timestamp_healthy  := l_rt_lrd.event_time;
               
               l_rt_scs.lpy_id             := l_rt_lpy.id;
               lm_scs_tapi_pck.scs_insert_row( io_rt_scs      => l_rt_scs );
            end if;
         else
            close c_areas;

            
            viu_info.operator_info( i_ifo_nr                 => viu_constant.c_ifo_areaverificationerror
                                  , i_calling_procedure      => l_con_proc_name
                                  , i_severity               => viu_info.c_severity_error
                                  , i_info_arguments         => l_it_area_id_cust( i_req_idx )
                                  , i_additional_data        => 'AreaID = "' || l_it_area_id_cust( i_req_idx ) || '"'
                                  );
         end if;
      end loop;
   end if;
  
   
   select xmlelement( "Signature", l_rt_lrd.sequence)
   into   l_message
   from   dual;

   
   l_ims_id := lm_interface.prepare_and_send_message
              ( i_imd_name        => 'LifeSignResponse'
              , i_message         => l_message
              , i_event_time      => l_rt_lrd.event_time_response
              , i_pty_id_cust     => l_source_process_id
              , i_pty_instance_id => l_instance_id
              , i_sct_id          => null
              );

   
   l_rt_lrd.lpy_id := l_rt_lpy.id;
   lm_lrd_tapi_pck.lrd_insert_row( io_rt_lrd      => l_rt_lrd );
   viu_module.leave_module( i_module      => l_con_proc_name );
exception
   when others
   then
      if c_areas%isopen
      then
         close c_areas;
      end if;

      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );
      viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
end hdl_request_for_lifesign;


procedure hdl_response_for_lifesign
is
   
























   l_con_proc_name constant lm_constant.st_proc_name := g_con_package || '.hdl_response_for_lifesign';

   l_it_lifesignresponse    lm_interface.g_it_ima := lm_interface.g_it_message_content;
   l_event_time             lm_package_events.event_time%type;
   l_source_process_id      lm_parties.id_cust%type;
   l_target_process_id      lm_parties.id_cust%type;
   l_instance_id            lm_parties.instance_id%type;
   l_signature              lm_lifesign_req_sent.sequence%type;
   l_rt_lpy                 lm_lifesign_parties%rowtype;
   l_rt_lrt                 lm_lifesign_req_sent%rowtype;
   l_rows_updated           number;

   
   cursor c_lrt
      (i_sequence in lm_lifesign_req_sent.sequence%type
      ,i_lpy_id   in lm_lifesign_req_sent.lpy_id%type
      )
   is
   



   select *
   from   lm_lifesign_req_sent
   where  sequence = i_sequence
   and    lpy_id   = i_lpy_id
   and    response_received is null
   order by event_time desc;

begin
   viu_module.enter_module( i_module      => l_con_proc_name );
   
   
   lm_lifesign.get_lsnresp_message_attributes( i_it_reg            => l_it_lifesignresponse
                                             , o_event_time        => l_event_time
                                             , o_source_process_id => l_source_process_id
                                             , o_target_process_id => l_target_process_id
                                             , o_signature         => l_signature
                                             , o_instance_id       => l_instance_id
                                             );

   




   lm_lifesign.get_lifesign_party( i_pty_id_cust => l_source_process_id
                                 , i_instance_id => l_instance_id
                                 , o_rt_lpy      => l_rt_lpy);


   
   open c_lrt( i_sequence      => l_signature
             , i_lpy_id        => l_rt_lpy.id
             );

   fetch c_lrt
   into  l_rt_lrt;

   if c_lrt%found
   then
      close c_lrt;

      
      l_rt_lrt.response_received    := lm_common.default_timestamp;
      
      l_rt_lrt.event_time_response  := l_event_time;
      
      l_rows_updated                := lm_lrt_tapi_pck.lrt_update_row( i_lrt_id       => l_rt_lrt.id
                                                                     , io_rt_lrt      => l_rt_lrt
                                                                     );
   else
      close c_lrt;

      


      viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_lifesignresponseerror
                         , i_calling_procedure      => l_con_proc_name
                         , i_severity               => viu_info.c_severity_error
                         , i_additional_data        => 'LifeSign party: ' || l_source_process_id || ', Message sequence: ' || l_signature
                         );
   end if;

   
   lm_lifesign.record_lpy_healthiness( i_lpy_id     => l_rt_lpy.id
                                     , i_event_time => l_event_time);

   viu_module.leave_module( i_module      => l_con_proc_name );
exception
   when others
   then
      if c_lrt%isopen
      then
         close c_lrt;
      end if;

      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );
      viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
end hdl_response_for_lifesign;


procedure send_request_for_lifesign
  (i_lpy_id      in lm_lifesign_parties.id%type
  ,i_pty_id_cust in lm_parties.id_cust%type
  ,i_instance_id in lm_parties.instance_id%type
 )
is
   



















   l_con_proc_name constant lm_constant.st_proc_name := g_con_package || '.send_request_for_lifesign';

   l_message                xmltype;
   l_rt_lrt                 lm_lifesign_req_sent%rowtype;
   l_ims_id                 lm_ifc_messages.id%type;

begin
   viu_module.enter_module( i_module      => l_con_proc_name );

   l_rt_lrt.event_time := lm_common.default_timestamp;
   l_rt_lrt.lpy_id     := i_lpy_id;
   l_rt_lrt.sequence   := lm_lifesign.get_next_lsn_sent_seq( i_lpy_id => i_lpy_id );
   
   lm_lrt_tapi_pck.lrt_insert_row( io_rt_lrt => l_rt_lrt );
   
   
   commit;

   
   select xmlelement( "Sequence", l_rt_lrt.sequence)
   into   l_message
   from   dual;

   
   l_ims_id := lm_interface.prepare_and_send_message
              ( i_imd_name        => 'LifeSignRequest'
              , i_message         => l_message
              , i_event_time      => l_rt_lrt.event_time
              , i_pty_id_cust     => i_pty_id_cust
              , i_pty_instance_id => i_instance_id
              , i_sct_id_cust     => null
              );
                            
   viu_module.leave_module( i_module      => l_con_proc_name );
exception
   when others
   then
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );
      viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
end send_request_for_lifesign;


procedure guard_outgoing_lifesign
  (i_lsn_party   in lm_parties.id_cust%type
  ,i_instance_id in lm_parties.instance_id%type default null
  )
is
   























   l_con_proc_name constant lm_constant.st_proc_name := g_con_package || '.guard_outgoing_lifesign';
   l_rt_lpy lm_lifesign_parties%rowtype;

begin
   viu_module.enter_module( i_module      => l_con_proc_name );

   
   lm_lifesign.get_lifesign_party( i_pty_id_cust => i_lsn_party
                                 , i_instance_id => i_instance_id
                                 , o_rt_lpy      => l_rt_lpy );

   
   lm_lifesign.send_request_for_lifesign( i_pty_id_cust => i_lsn_party
                                        , i_lpy_id      => l_rt_lpy.id
                                        , i_instance_id => i_instance_id
                                        );

   
   lm_lifesign.monitor( i_lpy_id => l_rt_lpy.id);
   
   commit;  

   viu_module.leave_module( i_module      => l_con_proc_name );
exception
   








   when lm_constant.exc_internal_error
   then
      
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );
      









      
      lm_common.abort_application_fatal;
      

   when others
   then
      rollback;

      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );
      viu_info.handle_info;
end guard_outgoing_lifesign;


procedure get_lsnreq_message_attributes
 (i_it_reg            in lm_interface.g_it_ima
 ,o_event_time        out lm_package_events.event_time%type
 ,o_source_process_id out lm_parties.id_cust%type
 ,o_target_process_id out lm_parties.id_cust%type
 ,o_sequence_msg      out lm_lifesign_req_received.sequence%type
 ,o_it_area_id_cust   out lm_lifesign.g_it_area_id_cust
 ,o_instance_id       out lm_parties.instance_id%type
 )
is
   

























   l_con_proc_name constant lm_constant.st_proc_name := g_con_package || '.get_lsnreq_message_attributes';
   i_idx_area_id_cust       binary_integer := 1;
   l_ims_id                 lm_ifc_messages.id%type;
   
begin
   viu_module.enter_module( i_module      => l_con_proc_name );

   
   for idx_msg in i_it_reg.first .. i_it_reg.last
   loop
      case i_it_reg( idx_msg ).attribute
         when 'EventTime'
         then
            o_event_time  := lm_common.varchar_to_timestamp( i_timestamp      => i_it_reg( idx_msg ).value );
         when 'Header/Source/ProcessID'
         then
            o_source_process_id  := i_it_reg( idx_msg ).value;
         when 'Header/Source/InstanceID'
         then
            o_instance_id  := i_it_reg( idx_msg ).value;
         when 'Header/Target/ProcessID'
         then
            o_target_process_id  := i_it_reg( idx_msg ).value;
         when 'Sequence'
         then
            o_sequence_msg  := i_it_reg( idx_msg ).value;
         when 'AreaID'
         then
            o_it_area_id_cust( i_idx_area_id_cust )  := i_it_reg( idx_msg ).value;
            i_idx_area_id_cust                       := i_idx_area_id_cust + 1;
         when lm_constant.g_con_ifc_ims_id_attribute
         then
            



            l_ims_id  := i_it_reg( idx_msg ).value;
         else
            
            if i_it_reg( idx_msg ).attribute not in ( 'Header/Target/InstanceID'
                                                    , 'Header/OperatorID'
                                                    , 'Header/MessageTime'
                                                    )
            then
               
               viu_info.operator_info( i_ifo_nr                 => viu_constant.c_ifo_messageattributeerror
                                     , i_calling_procedure      => l_con_proc_name
                                     , i_severity               => viu_info.c_severity_warning
                                     , i_additional_data        =>    'Message LifeSignRequest: Attribute: '''
                                                                   || i_it_reg( idx_msg ).attribute
                                                                   || '''; Value: '''
                                                                   || i_it_reg( idx_msg ).value
                                                                   || ''''
                                     );
            end if;
      end case;
   end loop;

   viu_module.leave_module( i_module      => l_con_proc_name );
exception
   when others
   then
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );
      viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
end get_lsnreq_message_attributes;


procedure get_lsnresp_message_attributes
   (i_it_reg            in  lm_interface.g_it_ima
   ,o_event_time        out lm_package_events.event_time%type
   ,o_source_process_id out lm_parties.id_cust%type
   ,o_target_process_id out lm_parties.id_cust%type
   ,o_signature         out lm_lifesign_req_sent.sequence%type
   ,o_instance_id       out lm_parties.instance_id%type
   )
is
   
























   
   l_con_proc_name constant lm_constant.st_proc_name := g_con_package || '.get_lsnresp_message_attributes';
   l_ims_id                 lm_ifc_messages.id%type;

begin
   viu_module.enter_module( i_module      => l_con_proc_name );

   
   for idx_msg in i_it_reg.first .. i_it_reg.last
   loop
      case i_it_reg( idx_msg ).attribute
         when 'EventTime'
         then
            o_event_time  := lm_common.varchar_to_timestamp( i_timestamp      => i_it_reg( idx_msg ).value );
         when 'Header/Source/ProcessID'
         then
            o_source_process_id  := i_it_reg( idx_msg ).value;
         when 'Header/Source/InstanceID'
         then
            o_instance_id  := i_it_reg( idx_msg ).value;
         when 'Header/Target/ProcessID'
         then
            o_target_process_id  := i_it_reg( idx_msg ).value;
         when 'Signature'
         then
            o_signature  := i_it_reg( idx_msg ).value;
         when lm_constant.g_con_ifc_ims_id_attribute
         then
            



            l_ims_id  := i_it_reg( idx_msg ).value;
         else
            
            if i_it_reg( idx_msg ).attribute not in ( 'Header/Target/InstanceID'
                                                    , 'Header/OperatorID'
                                                    , 'Header/MessageTime'
                                                    )
            then
               
               viu_info.operator_info( i_ifo_nr                 => viu_constant.c_ifo_messageattributeerror
                                     , i_calling_procedure      => l_con_proc_name
                                     , i_severity               => viu_info.c_severity_warning
                                     , i_additional_data        =>    'Message LifeSignResponse: Attribute: '''
                                                                   || i_it_reg( idx_msg ).attribute
                                                                   || '''; Value: '''
                                                                   || i_it_reg( idx_msg ).value
                                                                   || ''''
                                     );
             end if;
      end case;
   end loop;

   viu_module.leave_module( i_module      => l_con_proc_name );
exception
   when others
   then
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );
      viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
end get_lsnresp_message_attributes;


procedure get_lifesign_party
   (i_pty_id_cust in  lm_parties.id_cust%type
   ,i_instance_id in  lm_parties.instance_id%type
   ,o_rt_lpy      out lm_lifesign_parties%rowtype
 )
 is
   


























   l_con_proc_name constant lm_constant.st_proc_name := g_con_package || '.get_lifesign_party';
   l_rt_pty lm_parties%rowtype;
   
begin
   viu_module.enter_module (i_module => l_con_proc_name);

   
   if not lm_pty_tapi_pck.pty_select_row_uk1( i_pty_id_cust     => i_pty_id_cust
                                            , i_pty_instance_id => i_instance_id
                                            , o_rt_pty          => l_rt_pty
                                            )
   then
      viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_noifcparty
                         , i_calling_procedure => l_con_proc_name
                         , i_severity          => viu_info.c_severity_error
                         , i_info_arguments    => i_pty_id_cust
                         , i_additional_data   => 'Party: ' || i_pty_id_cust
                         );
   else
      
      if not lm_lpy_tapi_pck.lpy_select_row_uk1( i_lpy_pty_id => l_rt_pty.id
                                               , o_rt_lpy     => o_rt_lpy
                                               )
      then
         
         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_nolifesignpartyfound
                            , i_calling_procedure => l_con_proc_name
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => i_pty_id_cust
                            , i_additional_data   => 'LifeSign party for party: '|| i_pty_id_cust
                            );
      end if;
   end if;

   viu_module.leave_module (i_module => l_con_proc_name);
exception
   when others
   then
      viu_module.leave_module (i_module          => l_con_proc_name,
                               i_debug_info      => sqlerrm
                              );
      viu_info.raise_info (i_calling_procedure => l_con_proc_name);
end get_lifesign_party;

procedure record_lpy_healthiness
 (i_lpy_id in lm_lifesign_parties.id%type
 ,i_event_time in lm_lifesign_party_statuses.timestamp_healthy%type
 )
 is


cursor c_lpy_status
 (i_lpy_id in lm_lifesign_party_statuses.lpy_id%type
 )
 is
select lps.lpy_id
,      lps.timestamp_healthy
from   lm_lifesign_party_statuses lps
where  lps.lpy_id = i_lpy_id;

l_con_proc_name constant lm_constant.st_proc_name := g_con_package || '.record_lpy_healthiness';

rec_lpy_status c_lpy_status%rowtype;
l_rt_lps lm_lifesign_party_statuses%rowtype;
l_lps_found number;
   





















begin
   viu_module.enter_module( i_module      => l_con_proc_name );

   open c_lpy_status (i_lpy_id => i_lpy_id);

   fetch c_lpy_status
   into  rec_lpy_status;

   if c_lpy_status%found
   then
      close c_lpy_status;

      if rec_lpy_status.timestamp_healthy < i_event_time
      then
         
         l_rt_lps.lpy_id             := rec_lpy_status.lpy_id;
         l_rt_lps.timestamp_healthy  := i_event_time;
         l_lps_found                 :=
               lm_lps_tapi_pck.lps_update_row (i_lps_lpy_id =>    rec_lpy_status.lpy_id
                                              , io_rt_lps =>       l_rt_lps);
      end if;
   else
      
      close c_lpy_status;

      l_rt_lps.lpy_id             := i_lpy_id;
      l_rt_lps.timestamp_healthy  := i_event_time;
      lm_lps_tapi_pck.lps_insert_row (io_rt_lps =>    l_rt_lps);
   end if;


   viu_module.leave_module( i_module      => l_con_proc_name );
exception
   when others
   then
      if c_lpy_status%isopen
      then
         close c_lpy_status;
      end if;
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );
      viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
end record_lpy_healthiness;

function get_next_lsn_sent_seq
 (i_lpy_id in lm_lifesign_parties.id%type
 )
 return lm_lifesign_req_sent.sequence%type
 is


cursor c_lsn_sent_seqs
 (i_lpy_id in lm_lifesign_req_sent.lpy_id%type
 )
 is
select lrt.sequence
from   lm_lifesign_req_sent lrt
where  lrt.lpy_id = i_lpy_id
order by lrt.event_time desc;

l_con_proc_name constant lm_constant.st_proc_name := g_con_package || '.get_next_lsn_sent_seq';

l_next_lsn_sent_seq lm_lifesign_req_sent.sequence%type;
rec_lsn_sent_seqs c_lsn_sent_seqs%rowtype;
   
















begin
   viu_module.enter_module( i_module      => l_con_proc_name );

   
   open c_lsn_sent_seqs( i_lpy_id => i_lpy_id);

   fetch c_lsn_sent_seqs
   into  rec_lsn_sent_seqs;

   if c_lsn_sent_seqs%notfound
   then
      
      close c_lsn_sent_seqs;

      l_next_lsn_sent_seq := 1;
   else
      
      close c_lsn_sent_seqs;
      
      l_next_lsn_sent_seq := mod(rec_lsn_sent_seqs.sequence, lm_constant.g_con_lsn_max_sent_seq) + 1;
   end if;

   viu_module.leave_module( i_module      => l_con_proc_name );
   return l_next_lsn_sent_seq;
exception
   when others
   then
      if c_lsn_sent_seqs%isopen
      then
         close c_lsn_sent_seqs;
      end if;
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );
      viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
end get_next_lsn_sent_seq;

function determine_lpy_healthiness
 (i_lpy_id in lm_lifesign_parties.id%type
 )
 return boolean
 is


cursor c_lpy
 (i_lpy_id in lm_lifesign_parties.id%type
 )
 is
select lpy.allowed_misses
,      lpy.response_interval
,      lps.timestamp_healthy
from   lm_lifesign_parties        lpy
,      lm_lifesign_party_statuses lps
where  lpy.id = lps.lpy_id (+)
and    lpy.id = i_lpy_id
;

l_con_proc_name constant lm_constant.st_proc_name := g_con_package || '.DETERMINE_LPY_HEALTHINESS';

l_lpy_healthy boolean := false;
rec_lpy c_lpy%rowtype;




























begin
   viu_module.enter_module (i_module =>    l_con_proc_name);

   
   open c_lpy( i_lpy_id => i_lpy_id );

   fetch c_lpy
   into  rec_lpy;

   close c_lpy;
   

   if rec_lpy.timestamp_healthy is not null
    and rec_lpy.timestamp_healthy
        + numtodsinterval((rec_lpy.allowed_misses + 1) * rec_lpy.response_interval
                         ,lm_constant.g_con_cmn_numtodsintervalsecon
                         )
         > lm_common.default_timestamp
   then
      
      l_lpy_healthy := true;
   end if;

   viu_module.leave_module (i_module =>    l_con_proc_name);
   return l_lpy_healthy;
exception
   when others
   then
      if c_lpy%isopen
      then
         close c_lpy;
      end if;
      viu_module.leave_module ( i_module =>        l_con_proc_name
                              , i_debug_info => sqlerrm
                              );
      viu_info.raise_info ( i_calling_procedure =>    l_con_proc_name );
end determine_lpy_healthiness;

function determine_lpy_healthiness_yn
 (i_lpy_id in lm_lifesign_parties.id%type
 )
 return varchar2
 is

l_con_proc_name constant lm_constant.st_proc_name := g_con_package || '.DETERMINE_LPY_HEALTHINESS';

l_lpy_healthy varchar2(1);




























begin
   viu_module.enter_module (i_module =>    l_con_proc_name);

  if lm_lifesign.determine_lpy_healthiness(i_lpy_id)
  then
     l_lpy_healthy := lm_constant.g_con_yesno_yes;
  else
     l_lpy_healthy := lm_constant.g_con_yesno_no;
  end if;

   viu_module.leave_module (i_module =>    l_con_proc_name);
   return l_lpy_healthy;
exception
   when others
   then
      viu_module.leave_module ( i_module =>        l_con_proc_name
                              , i_debug_info => sqlerrm
                              );
      viu_info.raise_info ( i_calling_procedure =>    l_con_proc_name );
end determine_lpy_healthiness_yn;


function determine_area_healthiness
 (i_area_id_cust     in lm_system_components.id_cust%type
 )
return boolean
is



























   l_con_proc_name constant lm_constant.st_proc_name := g_con_package || '.DETERMINE_AREA_HEALTHINESS';

   cursor c_get_area_healthiness
    ( i_area_id_cust in lm_system_components.id_cust%type
    )
    is
   select timestamp_healthy
   from   lm_areas_v
   where  id_cust  = i_area_id_cust
   ;

   l_timestamp_healthy         lm_system_component_statuses.timestamp_healthy%type;
   l_pmr_lsn_allowed_misses    lm_parameter_values.value%type;
   l_pmr_lsn_def_resp_interval lm_parameter_values.value%type;
   l_ref_time                  timestamp;
   l_area_healthy              boolean;
begin
   viu_module.enter_module (i_module =>    l_con_proc_name);
   
   l_ref_time                  := lm_common.default_timestamp;
   l_pmr_lsn_allowed_misses    := lm_common.get_parameter_value(i_prr_name => lm_constant.g_con_pve_pmr_lsn_allowed_miss);
   l_pmr_lsn_def_resp_interval := lm_common.get_parameter_value(i_prr_name => lm_constant.g_con_pve_pmr_lsn_def_resp_int);
 
   open c_get_area_healthiness( i_area_id_cust => i_area_id_cust);
   fetch c_get_area_healthiness
   into  l_timestamp_healthy;
   close c_get_area_healthiness;

   
   

   if l_timestamp_healthy
      +  numtodsinterval((l_pmr_lsn_allowed_misses + 1) * l_pmr_lsn_def_resp_interval
                        , lm_constant.g_con_cmn_numtodsintervalsecon
                        )
      > l_ref_time
   then
      l_area_healthy  := true;
   else
      l_area_healthy  := false;
   end if;
   
   viu_module.leave_module (i_module =>    l_con_proc_name);
   return l_area_healthy;
exception
   when others
   then
      if c_get_area_healthiness%isopen
      then
         close c_get_area_healthiness;
      end if;
      viu_module.leave_module ( i_module =>        l_con_proc_name
                              , i_debug_info => sqlerrm
                              );
      viu_info.raise_info ( i_calling_procedure =>    l_con_proc_name );
end determine_area_healthiness;


procedure monitor
 (i_lpy_id in lm_lifesign_parties.id%type)
is





















   l_con_proc_name constant lm_constant.st_proc_name := g_con_package || '.monitor';
begin
   viu_module.enter_module( i_module      => l_con_proc_name );
   
   
   if lm_lifesign.determine_lpy_healthiness(i_lpy_id)
   then
      
      
      
      
      
      acl_application_control.clear_detailed_state(i_dsd_name => acl_constant.g_con_dsd_name_communication
                                                  ,i_aet_id   => null
                                                  );
   else
      
      
      
      acl_application_control.set_detailed_state(i_dsd_name => acl_constant.g_con_dsd_name_communication
                                                ,i_aet_id   => null
                                                );
   end if;
   
   viu_module.leave_module( i_module      => l_con_proc_name );
   
exception

   when lm_constant.exc_internal_error
   then

      
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );

      









      
      lm_common.abort_application_fatal;
      

   when others
   then
      rollback;

      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );
      viu_info.handle_info;
end monitor;


function check_party
 (i_pty_id_cust     in lm_parties.id_cust%type
 ,i_pty_instance_id in lm_parties.instance_id%type)
return lm_parties.id%type
is
























   l_con_proc_name constant lm_constant.st_proc_name := g_con_package || '.check_party';
   l_rt_pty   lm_parties%rowtype;
begin
   viu_module.enter_module( i_module => l_con_proc_name );

   if not lm_pty_tapi_pck.pty_select_row_uk1(i_pty_id_cust     => i_pty_id_cust
                                            ,i_pty_instance_id => i_pty_instance_id
                                            ,o_rt_pty          => l_rt_pty)
   then
      l_rt_pty.id_cust     := i_pty_id_cust;
      l_rt_pty.description := i_pty_id_cust||case
                                               when i_pty_instance_id is not null
                                                 then '-'||i_pty_instance_id
                                               else null
                                              end;
      l_rt_pty.instance_id := i_pty_instance_id;
      
      lm_pty_tapi_pck.pty_insert_row(io_rt_pty => l_rt_pty);
      
      viu_info.operator_info( i_ifo_nr                 => viu_constant.c_ifo_missingpartyadded
                            , i_calling_procedure      => l_con_proc_name
                            , i_severity               => viu_info.c_severity_notification
                            , i_info_arguments         => l_rt_pty.id || '##' || l_rt_pty.description
                            );
      
   end if;

   viu_module.leave_module( i_module => l_con_proc_name );
   return l_rt_pty.id;
   
exception
   when others
   then
      rollback;
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );
      viu_info.raise_info( i_calling_procedure   => l_con_proc_name );
end check_party;

end lm_lifesign;
/