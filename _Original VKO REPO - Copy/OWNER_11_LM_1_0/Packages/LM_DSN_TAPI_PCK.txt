create or replace PACKAGE lm_dsn_tapi_pck
IS
-- Table API package for table lm_determined_stations
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:09)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'LM_DSN_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'LM_DETERMINED_STATIONS';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION dsn_select_row( i_dsn_STN_ID   IN  lm_determined_stations.STN_ID%TYPE
 , i_dsn_TIN_ID   IN  lm_determined_stations.TIN_ID%TYPE
                       , o_rt_dsn   OUT lm_determined_stations%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION dsn_select_row_upd( i_dsn_STN_ID   IN  lm_determined_stations.STN_ID%TYPE
                           , i_dsn_TIN_ID   IN  lm_determined_stations.TIN_ID%TYPE
                           , o_rt_dsn   OUT lm_determined_stations%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE dsn_lock_row( i_dsn_STN_ID   IN  lm_determined_stations.STN_ID%TYPE
 , i_dsn_TIN_ID   IN  lm_determined_stations.TIN_ID%TYPE )
;

PROCEDURE dsn_lock_row_nowait( i_dsn_STN_ID   IN  lm_determined_stations.STN_ID%TYPE
 , i_dsn_TIN_ID   IN  lm_determined_stations.TIN_ID%TYPE )
;

PROCEDURE dsn_insert_row ( io_rt_dsn  IN OUT lm_determined_stations%ROWTYPE )
;

FUNCTION dsn_update_row( i_dsn_STN_ID   IN     lm_determined_stations.STN_ID%TYPE
                        , i_dsn_TIN_ID   IN     lm_determined_stations.TIN_ID%TYPE
                       , io_rt_dsn  IN OUT lm_determined_stations%ROWTYPE )
RETURN NUMBER
;

FUNCTION dsn_delete_row( i_dsn_STN_ID   IN  lm_determined_stations.STN_ID%TYPE
                         , i_dsn_TIN_ID   IN  lm_determined_stations.TIN_ID%TYPE )
RETURN BOOLEAN
;


END lm_dsn_tapi_pck;
/




package body lm_dsn_tapi_pck
is




function dsn_select_row( i_dsn_stn_id   in  lm_determined_stations.stn_id%type
 , i_dsn_tin_id   in  lm_determined_stations.tin_id%type
                       , o_rt_dsn   out lm_determined_stations%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.dsn_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_dsn ( i_dsn_stn_id   in  lm_determined_stations.stn_id%type
 , i_dsn_tin_id   in  lm_determined_stations.tin_id%type )
      is 
           select *
             from lm_determined_stations dsn
            where dsn.stn_id = i_dsn_stn_id 
              and dsn.tin_id = i_dsn_tin_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_dsn( i_dsn_stn_id => i_dsn_stn_id, i_dsn_tin_id => i_dsn_tin_id );
         fetch c_dsn into o_rt_dsn;
         l_found := c_dsn%found;
         close c_dsn;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_dsn%isopen
         then
            close c_dsn;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end dsn_select_row;

function dsn_select_row_upd( i_dsn_stn_id   in  lm_determined_stations.stn_id%type
                           , i_dsn_tin_id   in  lm_determined_stations.tin_id%type
                           , o_rt_dsn   out lm_determined_stations%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.dsn_select_row_upd';
   l_found                boolean      := false;

   cursor c_dsn ( i_dsn_stn_id   in  lm_determined_stations.stn_id%type
                , i_dsn_tin_id   in  lm_determined_stations.tin_id%type )
   is
           select *
             from lm_determined_stations dsn
            where dsn.stn_id = i_dsn_stn_id 
                and dsn.tin_id = i_dsn_tin_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_dsn( i_dsn_stn_id => i_dsn_stn_id
, i_dsn_tin_id => i_dsn_tin_id );
   fetch c_dsn into o_rt_dsn;
   l_found := c_dsn%found;
   close c_dsn;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_dsn%isopen
      then
         close c_dsn;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end dsn_select_row_upd;

procedure dsn_lock_row( i_dsn_stn_id   in  lm_determined_stations.stn_id%type
 , i_dsn_tin_id   in  lm_determined_stations.tin_id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.dsn_lock_row';
begin
  declare
     cursor c_dsn ( i_dsn_stn_id   in  lm_determined_stations.stn_id%type
 , i_dsn_tin_id   in  lm_determined_stations.tin_id%type )
     is
             select ''
               from lm_determined_stations dsn
              where dsn.stn_id = i_dsn_stn_id 
                and dsn.tin_id = i_dsn_tin_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_dsn_stn_id is not null
            or i_dsn_tin_id is not null
         then
            begin
                
                dsn_lock_row_nowait( i_dsn_stn_id => i_dsn_stn_id
, i_dsn_tin_id => i_dsn_tin_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_dsn( i_dsn_stn_id => i_dsn_stn_id, i_dsn_tin_id => i_dsn_tin_id );
                  close c_dsn;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_dsn%isopen
         then
            close c_dsn;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end dsn_lock_row;

procedure dsn_lock_row_nowait( i_dsn_stn_id   in  lm_determined_stations.stn_id%type
 , i_dsn_tin_id   in  lm_determined_stations.tin_id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.dsn_lock_row_nowait';
begin
   declare
      cursor c_dsn ( i_dsn_stn_id   in  lm_determined_stations.stn_id%type
 , i_dsn_tin_id   in  lm_determined_stations.tin_id%type )
      is
              select ''
                from lm_determined_stations dsn
               where dsn.stn_id = i_dsn_stn_id 
                 and dsn.tin_id = i_dsn_tin_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_dsn_stn_id is not null
         or i_dsn_tin_id is not null
         then
            
            open c_dsn( i_dsn_stn_id => i_dsn_stn_id, i_dsn_tin_id => i_dsn_tin_id );

            close c_dsn;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_dsn%isopen
        then
           close c_dsn;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'STN_ID = "'||i_dsn_stn_id||'"'
                                                       ||', TIN_ID = "'||i_dsn_tin_id||'"' );
   end;                                                          
end dsn_lock_row_nowait;

function dsn_perform_update( i_dsn_stn_id   in     lm_determined_stations.stn_id%type
 , i_dsn_tin_id   in     lm_determined_stations.tin_id%type
                           , io_rt_dsn  in out lm_determined_stations%rowtype )
return number
;

function dsn_perform_delete( i_dsn_stn_id   in  lm_determined_stations.stn_id%type
 , i_dsn_tin_id   in  lm_determined_stations.tin_id%type )
return boolean
;

procedure dsn_insert_row ( io_rt_dsn  in out lm_determined_stations%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.dsn_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into lm_determined_stations( stn_id
                                , tin_id
                                , ind_final_expected )
              values ( io_rt_dsn.stn_id
                     , io_rt_dsn.tin_id
                     , io_rt_dsn.ind_final_expected )
           returning stn_id
                   , tin_id
                   , ind_final_expected
                into io_rt_dsn.stn_id
                   , io_rt_dsn.tin_id
                   , io_rt_dsn.ind_final_expected;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('STN_ID = "'||io_rt_dsn.stn_id||'"'
                                                             ||', TIN_ID = "'||io_rt_dsn.tin_id||'"'
                                                             ||', IND_FINAL_EXPECTED = "'||io_rt_dsn.ind_final_expected||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end dsn_insert_row;

function dsn_perform_update( i_dsn_stn_id   in     lm_determined_stations.stn_id%type
 , i_dsn_tin_id   in     lm_determined_stations.tin_id%type
                           , io_rt_dsn  in out lm_determined_stations%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.dsn_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update lm_determined_stations
            set stn_id = io_rt_dsn.stn_id
              , tin_id = io_rt_dsn.tin_id
              , ind_final_expected = io_rt_dsn.ind_final_expected
          where stn_id = i_dsn_stn_id
            and tin_id = i_dsn_tin_id
      returning stn_id
              , tin_id
              , ind_final_expected
           into io_rt_dsn.stn_id
              , io_rt_dsn.tin_id
              , io_rt_dsn.ind_final_expected;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('STN_ID = "'||io_rt_dsn.stn_id||'"'
                                                             ||', TIN_ID = "'||io_rt_dsn.tin_id||'"'
                                                             ||', IND_FINAL_EXPECTED = "'||io_rt_dsn.ind_final_expected||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end dsn_perform_update;

function dsn_perform_delete( i_dsn_stn_id   in  lm_determined_stations.stn_id%type
 , i_dsn_tin_id   in  lm_determined_stations.tin_id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.dsn_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from lm_determined_stations
          where stn_id = i_dsn_stn_id
            and tin_id = i_dsn_tin_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'STN_ID = "'||i_dsn_stn_id||'"'
                                                         ||', TIN_ID = "'||i_dsn_tin_id||'"' );
   end;                                                          
end dsn_perform_delete;

function dsn_update_row( i_dsn_stn_id   in     lm_determined_stations.stn_id%type
                        , i_dsn_tin_id   in     lm_determined_stations.tin_id%type
                       , io_rt_dsn  in out lm_determined_stations%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.dsn_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         dsn_lock_row( i_dsn_stn_id   =>  i_dsn_stn_id
 , i_dsn_tin_id   =>  i_dsn_tin_id );

         
         l_rowcount := 
            dsn_perform_update( i_dsn_stn_id   =>  i_dsn_stn_id
 , i_dsn_tin_id   =>  i_dsn_tin_id
                              , io_rt_dsn  => io_rt_dsn );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('STN_ID = "'||io_rt_dsn.stn_id||'"'
                                                          ||', TIN_ID = "'||io_rt_dsn.tin_id||'"'
                                                          ||', IND_FINAL_EXPECTED = "'||io_rt_dsn.ind_final_expected||'"'                                                           , 1, 4000));
   end;                                                          
end dsn_update_row;

function dsn_delete_row( i_dsn_stn_id   in  lm_determined_stations.stn_id%type
                         , i_dsn_tin_id   in  lm_determined_stations.tin_id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.dsn_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         dsn_lock_row( i_dsn_stn_id   =>  i_dsn_stn_id
          , i_dsn_tin_id   =>  i_dsn_tin_id );

         
         l_deleted := dsn_perform_delete( i_dsn_stn_id   =>  i_dsn_stn_id
 , i_dsn_tin_id   =>  i_dsn_tin_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'STN_ID = "'||i_dsn_stn_id||'"'
                                                      ||', TIN_ID = "'||i_dsn_tin_id||'"' );
   end;                                                          
end dsn_delete_row;


end lm_dsn_tapi_pck;
/