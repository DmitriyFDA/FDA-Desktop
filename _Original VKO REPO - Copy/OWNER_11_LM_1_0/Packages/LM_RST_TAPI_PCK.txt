create or replace PACKAGE lm_rst_tapi_pck
IS
-- Table API package for table lm_route_segments
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:16)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'LM_RST_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'LM_ROUTE_SEGMENTS';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION rst_select_row( i_rst_ID   IN  lm_route_segments.ID%TYPE
                       , o_rt_rst   OUT lm_route_segments%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION rst_select_row_uk1( i_rst_NDE_ID_START_NODE   IN  lm_route_segments.NDE_ID_START_NODE%TYPE
                           , i_rst_DIRECTION_START_NODE   IN  lm_route_segments.DIRECTION_START_NODE%TYPE
                           , o_rt_rst  OUT lm_route_segments%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION rst_select_row_upd( i_rst_ID   IN  lm_route_segments.ID%TYPE
                           , o_rt_rst   OUT lm_route_segments%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION rst_select_row_upd_uk1( i_rst_NDE_ID_START_NODE   IN  lm_route_segments.NDE_ID_START_NODE%TYPE
                               , i_rst_DIRECTION_START_NODE   IN  lm_route_segments.DIRECTION_START_NODE%TYPE
                               , o_rt_rst  OUT lm_route_segments%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE rst_lock_row( i_rst_ID   IN  lm_route_segments.ID%TYPE )
;

PROCEDURE rst_lock_row_nowait( i_rst_ID   IN  lm_route_segments.ID%TYPE )
;

PROCEDURE rst_insert_row ( io_rt_rst  IN OUT lm_route_segments%ROWTYPE )
;

FUNCTION rst_update_row( i_rst_ID   IN     lm_route_segments.ID%TYPE
                       , io_rt_rst  IN OUT lm_route_segments%ROWTYPE )
RETURN NUMBER
;

FUNCTION rst_delete_row( i_rst_ID   IN  lm_route_segments.ID%TYPE )
RETURN BOOLEAN
;


END lm_rst_tapi_pck;
/




package body lm_rst_tapi_pck
is




function rst_select_row( i_rst_id   in  lm_route_segments.id%type
                       , o_rt_rst   out lm_route_segments%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rst_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_rst ( i_rst_id   in  lm_route_segments.id%type )
      is 
           select *
             from lm_route_segments rst
            where rst.id = i_rst_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_rst( i_rst_id => i_rst_id );
         fetch c_rst into o_rt_rst;
         l_found := c_rst%found;
         close c_rst;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_rst%isopen
         then
            close c_rst;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end rst_select_row;

function rst_select_row_uk1( i_rst_nde_id_start_node   in  lm_route_segments.nde_id_start_node%type
                           , i_rst_direction_start_node   in  lm_route_segments.direction_start_node%type
                           , o_rt_rst  out lm_route_segments%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rst_select_row_uk1';
   l_found                boolean      := false;
begin
   declare
      cursor c_rst ( i_rst_nde_id_start_node   in  lm_route_segments.nde_id_start_node%type
                   , i_rst_direction_start_node   in  lm_route_segments.direction_start_node%type )
      is
         select *
           from lm_route_segments rst
          where rst.nde_id_start_node = i_rst_nde_id_start_node 
            and ( rst.direction_start_node = i_rst_direction_start_node or (rst.direction_start_node is null  and i_rst_direction_start_node is null  ));
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_rst(i_rst_nde_id_start_node => i_rst_nde_id_start_node, i_rst_direction_start_node => i_rst_direction_start_node);
         fetch c_rst into o_rt_rst;
         l_found := c_rst%found;
         close c_rst;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_rst%isopen
      then
         close c_rst;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end rst_select_row_uk1;

function rst_select_row_upd( i_rst_id   in  lm_route_segments.id%type
                           , o_rt_rst   out lm_route_segments%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rst_select_row_upd';
   l_found                boolean      := false;

   cursor c_rst ( i_rst_id   in  lm_route_segments.id%type )
   is
           select *
             from lm_route_segments rst
            where rst.id = i_rst_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_rst( i_rst_id => i_rst_id );
   fetch c_rst into o_rt_rst;
   l_found := c_rst%found;
   close c_rst;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_rst%isopen
      then
         close c_rst;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end rst_select_row_upd;

function rst_select_row_upd_uk1( i_rst_nde_id_start_node   in  lm_route_segments.nde_id_start_node%type
                               , i_rst_direction_start_node   in  lm_route_segments.direction_start_node%type
                               , o_rt_rst  out lm_route_segments%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rst_select_row_upd_uk1';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := rst_select_row_uk1( i_rst_nde_id_start_node   =>  i_rst_nde_id_start_node
                                   , i_rst_direction_start_node   =>  i_rst_direction_start_node
                                   , o_rt_rst => o_rt_rst );
      if l_found
      then
         
         l_found := rst_select_row_upd( i_rst_id => o_rt_rst.id
                                      , o_rt_rst => o_rt_rst );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end rst_select_row_upd_uk1;

procedure rst_lock_row( i_rst_id   in  lm_route_segments.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rst_lock_row';
begin
  declare
     cursor c_rst ( i_rst_id   in  lm_route_segments.id%type )
     is
             select ''
               from lm_route_segments rst
              where rst.id = i_rst_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_rst_id is not null
         then
            begin
                
                rst_lock_row_nowait( i_rst_id => i_rst_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_rst( i_rst_id => i_rst_id );
                  close c_rst;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_rst%isopen
         then
            close c_rst;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end rst_lock_row;

procedure rst_lock_row_nowait( i_rst_id   in  lm_route_segments.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rst_lock_row_nowait';
begin
   declare
      cursor c_rst ( i_rst_id   in  lm_route_segments.id%type )
      is
              select ''
                from lm_route_segments rst
               where rst.id = i_rst_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_rst_id is not null
         then
            
            open c_rst( i_rst_id => i_rst_id );

            close c_rst;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_rst%isopen
        then
           close c_rst;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_rst_id||'"' );
   end;                                                          
end rst_lock_row_nowait;

function rst_perform_update( i_rst_id   in     lm_route_segments.id%type
                           , io_rt_rst  in out lm_route_segments%rowtype )
return number
;

function rst_perform_delete( i_rst_id   in  lm_route_segments.id%type )
return boolean
;

procedure rst_insert_row ( io_rt_rst  in out lm_route_segments%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rst_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into lm_route_segments( id
                                , lst_id
                                , nde_id_start_node
                                , nde_id_end_node
                                , direction_start_node
                                , report_start_node
                                , report_end_node
                                , ind_tracking
                                , ind_transport_default
                                , recirculation_count
                                , recirculation_interval
                                , ind_detect_missed_events
                                , mom_id
                                , sct_id
                                , direction_end_node
                                , average_travel_time
                                , region
                                , description )
              values ( io_rt_rst.id
                     , io_rt_rst.lst_id
                     , io_rt_rst.nde_id_start_node
                     , io_rt_rst.nde_id_end_node
                     , io_rt_rst.direction_start_node
                     , io_rt_rst.report_start_node
                     , io_rt_rst.report_end_node
                     , io_rt_rst.ind_tracking
                     , io_rt_rst.ind_transport_default
                     , io_rt_rst.recirculation_count
                     , io_rt_rst.recirculation_interval
                     , io_rt_rst.ind_detect_missed_events
                     , io_rt_rst.mom_id
                     , io_rt_rst.sct_id
                     , io_rt_rst.direction_end_node
                     , io_rt_rst.average_travel_time
                     , io_rt_rst.region
                     , io_rt_rst.description )
           returning id
                   , lst_id
                   , nde_id_start_node
                   , nde_id_end_node
                   , direction_start_node
                   , report_start_node
                   , report_end_node
                   , ind_tracking
                   , ind_transport_default
                   , recirculation_count
                   , recirculation_interval
                   , ind_detect_missed_events
                   , mom_id
                   , sct_id
                   , direction_end_node
                   , average_travel_time
                   , region
                   , description
                into io_rt_rst.id
                   , io_rt_rst.lst_id
                   , io_rt_rst.nde_id_start_node
                   , io_rt_rst.nde_id_end_node
                   , io_rt_rst.direction_start_node
                   , io_rt_rst.report_start_node
                   , io_rt_rst.report_end_node
                   , io_rt_rst.ind_tracking
                   , io_rt_rst.ind_transport_default
                   , io_rt_rst.recirculation_count
                   , io_rt_rst.recirculation_interval
                   , io_rt_rst.ind_detect_missed_events
                   , io_rt_rst.mom_id
                   , io_rt_rst.sct_id
                   , io_rt_rst.direction_end_node
                   , io_rt_rst.average_travel_time
                   , io_rt_rst.region
                   , io_rt_rst.description;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_rst.id||'"'
                                                             ||', LST_ID = "'||io_rt_rst.lst_id||'"'
                                                             ||', NDE_ID_START_NODE = "'||io_rt_rst.nde_id_start_node||'"'
                                                             ||', NDE_ID_END_NODE = "'||io_rt_rst.nde_id_end_node||'"'
                                                             ||', DIRECTION_START_NODE = "'||io_rt_rst.direction_start_node||'"'
                                                             ||', REPORT_START_NODE = "'||io_rt_rst.report_start_node||'"'
                                                             ||', REPORT_END_NODE = "'||io_rt_rst.report_end_node||'"'
                                                             ||', IND_TRACKING = "'||io_rt_rst.ind_tracking||'"'
                                                             ||', IND_TRANSPORT_DEFAULT = "'||io_rt_rst.ind_transport_default||'"'
                                                             ||', RECIRCULATION_COUNT = "'||io_rt_rst.recirculation_count||'"'
                                                             ||', RECIRCULATION_INTERVAL = "'||io_rt_rst.recirculation_interval||'"'
                                                             ||', IND_DETECT_MISSED_EVENTS = "'||io_rt_rst.ind_detect_missed_events||'"'
                                                             ||', MOM_ID = "'||io_rt_rst.mom_id||'"'
                                                             ||', SCT_ID = "'||io_rt_rst.sct_id||'"'
                                                             ||', DIRECTION_END_NODE = "'||io_rt_rst.direction_end_node||'"'
                                                             ||', AVERAGE_TRAVEL_TIME = "'||io_rt_rst.average_travel_time||'"'
                                                             ||', REGION = "'||io_rt_rst.region||'"'
                                                             ||', DESCRIPTION = "'||io_rt_rst.description||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end rst_insert_row;

function rst_perform_update( i_rst_id   in     lm_route_segments.id%type
                           , io_rt_rst  in out lm_route_segments%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rst_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update lm_route_segments
            set id = io_rt_rst.id
              , lst_id = io_rt_rst.lst_id
              , nde_id_start_node = io_rt_rst.nde_id_start_node
              , nde_id_end_node = io_rt_rst.nde_id_end_node
              , direction_start_node = io_rt_rst.direction_start_node
              , report_start_node = io_rt_rst.report_start_node
              , report_end_node = io_rt_rst.report_end_node
              , ind_tracking = io_rt_rst.ind_tracking
              , ind_transport_default = io_rt_rst.ind_transport_default
              , recirculation_count = io_rt_rst.recirculation_count
              , recirculation_interval = io_rt_rst.recirculation_interval
              , ind_detect_missed_events = io_rt_rst.ind_detect_missed_events
              , mom_id = io_rt_rst.mom_id
              , sct_id = io_rt_rst.sct_id
              , direction_end_node = io_rt_rst.direction_end_node
              , average_travel_time = io_rt_rst.average_travel_time
              , region = io_rt_rst.region
              , description = io_rt_rst.description
          where id = i_rst_id
      returning id
              , lst_id
              , nde_id_start_node
              , nde_id_end_node
              , direction_start_node
              , report_start_node
              , report_end_node
              , ind_tracking
              , ind_transport_default
              , recirculation_count
              , recirculation_interval
              , ind_detect_missed_events
              , mom_id
              , sct_id
              , direction_end_node
              , average_travel_time
              , region
              , description
           into io_rt_rst.id
              , io_rt_rst.lst_id
              , io_rt_rst.nde_id_start_node
              , io_rt_rst.nde_id_end_node
              , io_rt_rst.direction_start_node
              , io_rt_rst.report_start_node
              , io_rt_rst.report_end_node
              , io_rt_rst.ind_tracking
              , io_rt_rst.ind_transport_default
              , io_rt_rst.recirculation_count
              , io_rt_rst.recirculation_interval
              , io_rt_rst.ind_detect_missed_events
              , io_rt_rst.mom_id
              , io_rt_rst.sct_id
              , io_rt_rst.direction_end_node
              , io_rt_rst.average_travel_time
              , io_rt_rst.region
              , io_rt_rst.description;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_rst.id||'"'
                                                             ||', LST_ID = "'||io_rt_rst.lst_id||'"'
                                                             ||', NDE_ID_START_NODE = "'||io_rt_rst.nde_id_start_node||'"'
                                                             ||', NDE_ID_END_NODE = "'||io_rt_rst.nde_id_end_node||'"'
                                                             ||', DIRECTION_START_NODE = "'||io_rt_rst.direction_start_node||'"'
                                                             ||', REPORT_START_NODE = "'||io_rt_rst.report_start_node||'"'
                                                             ||', REPORT_END_NODE = "'||io_rt_rst.report_end_node||'"'
                                                             ||', IND_TRACKING = "'||io_rt_rst.ind_tracking||'"'
                                                             ||', IND_TRANSPORT_DEFAULT = "'||io_rt_rst.ind_transport_default||'"'
                                                             ||', RECIRCULATION_COUNT = "'||io_rt_rst.recirculation_count||'"'
                                                             ||', RECIRCULATION_INTERVAL = "'||io_rt_rst.recirculation_interval||'"'
                                                             ||', IND_DETECT_MISSED_EVENTS = "'||io_rt_rst.ind_detect_missed_events||'"'
                                                             ||', MOM_ID = "'||io_rt_rst.mom_id||'"'
                                                             ||', SCT_ID = "'||io_rt_rst.sct_id||'"'
                                                             ||', DIRECTION_END_NODE = "'||io_rt_rst.direction_end_node||'"'
                                                             ||', AVERAGE_TRAVEL_TIME = "'||io_rt_rst.average_travel_time||'"'
                                                             ||', REGION = "'||io_rt_rst.region||'"'
                                                             ||', DESCRIPTION = "'||io_rt_rst.description||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end rst_perform_update;

function rst_perform_delete( i_rst_id   in  lm_route_segments.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rst_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from lm_route_segments
          where id = i_rst_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_rst_id||'"' );
   end;                                                          
end rst_perform_delete;

function rst_update_row( i_rst_id   in     lm_route_segments.id%type
                       , io_rt_rst  in out lm_route_segments%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rst_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         rst_lock_row( i_rst_id   =>  i_rst_id );

         
         l_rowcount := 
            rst_perform_update( i_rst_id   =>  i_rst_id
                              , io_rt_rst  => io_rt_rst );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_rst.id||'"'
                                                          ||', LST_ID = "'||io_rt_rst.lst_id||'"'
                                                          ||', NDE_ID_START_NODE = "'||io_rt_rst.nde_id_start_node||'"'
                                                          ||', NDE_ID_END_NODE = "'||io_rt_rst.nde_id_end_node||'"'
                                                          ||', DIRECTION_START_NODE = "'||io_rt_rst.direction_start_node||'"'
                                                          ||', REPORT_START_NODE = "'||io_rt_rst.report_start_node||'"'
                                                          ||', REPORT_END_NODE = "'||io_rt_rst.report_end_node||'"'
                                                          ||', IND_TRACKING = "'||io_rt_rst.ind_tracking||'"'
                                                          ||', IND_TRANSPORT_DEFAULT = "'||io_rt_rst.ind_transport_default||'"'
                                                          ||', RECIRCULATION_COUNT = "'||io_rt_rst.recirculation_count||'"'
                                                          ||', RECIRCULATION_INTERVAL = "'||io_rt_rst.recirculation_interval||'"'
                                                          ||', IND_DETECT_MISSED_EVENTS = "'||io_rt_rst.ind_detect_missed_events||'"'
                                                          ||', MOM_ID = "'||io_rt_rst.mom_id||'"'
                                                          ||', SCT_ID = "'||io_rt_rst.sct_id||'"'
                                                          ||', DIRECTION_END_NODE = "'||io_rt_rst.direction_end_node||'"'
                                                          ||', AVERAGE_TRAVEL_TIME = "'||io_rt_rst.average_travel_time||'"'
                                                          ||', REGION = "'||io_rt_rst.region||'"'
                                                          ||', DESCRIPTION = "'||io_rt_rst.description||'"'                                                           , 1, 4000));
   end;                                                          
end rst_update_row;

function rst_delete_row( i_rst_id   in  lm_route_segments.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rst_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         rst_lock_row( i_rst_id   =>  i_rst_id );

         
         l_deleted := rst_perform_delete( i_rst_id   =>  i_rst_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_rst_id||'"' );
   end;                                                          
end rst_delete_row;


end lm_rst_tapi_pck;
/