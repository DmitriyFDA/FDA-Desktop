create or replace PACKAGE lm_hay_tapi_pck
IS
-- Table API package for table lm_haa_access_availabilities
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:11)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'LM_HAY_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'LM_HAA_ACCESS_AVAILABILITIES';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION hay_select_row( i_hay_HAS_ID   IN  lm_haa_access_availabilities.HAS_ID%TYPE
                       , o_rt_hay   OUT lm_haa_access_availabilities%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION hay_select_row_upd( i_hay_HAS_ID   IN  lm_haa_access_availabilities.HAS_ID%TYPE
                           , o_rt_hay   OUT lm_haa_access_availabilities%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE hay_lock_row( i_hay_HAS_ID   IN  lm_haa_access_availabilities.HAS_ID%TYPE )
;

PROCEDURE hay_lock_row_nowait( i_hay_HAS_ID   IN  lm_haa_access_availabilities.HAS_ID%TYPE )
;

PROCEDURE hay_insert_row ( io_rt_hay  IN OUT lm_haa_access_availabilities%ROWTYPE )
;

FUNCTION hay_update_row( i_hay_HAS_ID   IN     lm_haa_access_availabilities.HAS_ID%TYPE
                       , io_rt_hay  IN OUT lm_haa_access_availabilities%ROWTYPE )
RETURN NUMBER
;

FUNCTION hay_delete_row( i_hay_HAS_ID   IN  lm_haa_access_availabilities.HAS_ID%TYPE )
RETURN BOOLEAN
;


END lm_hay_tapi_pck;
/




package body lm_hay_tapi_pck
is




function hay_select_row( i_hay_has_id   in  lm_haa_access_availabilities.has_id%type
                       , o_rt_hay   out lm_haa_access_availabilities%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.hay_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_hay ( i_hay_has_id   in  lm_haa_access_availabilities.has_id%type )
      is 
           select *
             from lm_haa_access_availabilities hay
            where hay.has_id = i_hay_has_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_hay( i_hay_has_id => i_hay_has_id );
         fetch c_hay into o_rt_hay;
         l_found := c_hay%found;
         close c_hay;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_hay%isopen
         then
            close c_hay;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end hay_select_row;

function hay_select_row_upd( i_hay_has_id   in  lm_haa_access_availabilities.has_id%type
                           , o_rt_hay   out lm_haa_access_availabilities%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.hay_select_row_upd';
   l_found                boolean      := false;

   cursor c_hay ( i_hay_has_id   in  lm_haa_access_availabilities.has_id%type )
   is
           select *
             from lm_haa_access_availabilities hay
            where hay.has_id = i_hay_has_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_hay( i_hay_has_id => i_hay_has_id );
   fetch c_hay into o_rt_hay;
   l_found := c_hay%found;
   close c_hay;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_hay%isopen
      then
         close c_hay;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end hay_select_row_upd;

procedure hay_lock_row( i_hay_has_id   in  lm_haa_access_availabilities.has_id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.hay_lock_row';
begin
  declare
     cursor c_hay ( i_hay_has_id   in  lm_haa_access_availabilities.has_id%type )
     is
             select ''
               from lm_haa_access_availabilities hay
              where hay.has_id = i_hay_has_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_hay_has_id is not null
         then
            begin
                
                hay_lock_row_nowait( i_hay_has_id => i_hay_has_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_hay( i_hay_has_id => i_hay_has_id );
                  close c_hay;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_hay%isopen
         then
            close c_hay;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end hay_lock_row;

procedure hay_lock_row_nowait( i_hay_has_id   in  lm_haa_access_availabilities.has_id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.hay_lock_row_nowait';
begin
   declare
      cursor c_hay ( i_hay_has_id   in  lm_haa_access_availabilities.has_id%type )
      is
              select ''
                from lm_haa_access_availabilities hay
               where hay.has_id = i_hay_has_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_hay_has_id is not null
         then
            
            open c_hay( i_hay_has_id => i_hay_has_id );

            close c_hay;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_hay%isopen
        then
           close c_hay;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'HAS_ID = "'||i_hay_has_id||'"' );
   end;                                                          
end hay_lock_row_nowait;

function hay_perform_update( i_hay_has_id   in     lm_haa_access_availabilities.has_id%type
                           , io_rt_hay  in out lm_haa_access_availabilities%rowtype )
return number
;

function hay_perform_delete( i_hay_has_id   in  lm_haa_access_availabilities.has_id%type )
return boolean
;

procedure hay_insert_row ( io_rt_hay  in out lm_haa_access_availabilities%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.hay_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into lm_haa_access_availabilities( has_id
                                , ind_available
                                , ind_dirty
                                , timestamp_change )
              values ( io_rt_hay.has_id
                     , io_rt_hay.ind_available
                     , io_rt_hay.ind_dirty
                     , io_rt_hay.timestamp_change )
           returning has_id
                   , ind_available
                   , ind_dirty
                   , timestamp_change
                into io_rt_hay.has_id
                   , io_rt_hay.ind_available
                   , io_rt_hay.ind_dirty
                   , io_rt_hay.timestamp_change;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('HAS_ID = "'||io_rt_hay.has_id||'"'
                                                             ||', IND_AVAILABLE = "'||io_rt_hay.ind_available||'"'
                                                             ||', IND_DIRTY = "'||io_rt_hay.ind_dirty||'"'
                                                             ||', TIMESTAMP_CHANGE = "'||io_rt_hay.timestamp_change||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end hay_insert_row;

function hay_perform_update( i_hay_has_id   in     lm_haa_access_availabilities.has_id%type
                           , io_rt_hay  in out lm_haa_access_availabilities%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.hay_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update lm_haa_access_availabilities
            set has_id = io_rt_hay.has_id
              , ind_available = io_rt_hay.ind_available
              , ind_dirty = io_rt_hay.ind_dirty
              , timestamp_change = io_rt_hay.timestamp_change
          where has_id = i_hay_has_id
      returning has_id
              , ind_available
              , ind_dirty
              , timestamp_change
           into io_rt_hay.has_id
              , io_rt_hay.ind_available
              , io_rt_hay.ind_dirty
              , io_rt_hay.timestamp_change;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('HAS_ID = "'||io_rt_hay.has_id||'"'
                                                             ||', IND_AVAILABLE = "'||io_rt_hay.ind_available||'"'
                                                             ||', IND_DIRTY = "'||io_rt_hay.ind_dirty||'"'
                                                             ||', TIMESTAMP_CHANGE = "'||io_rt_hay.timestamp_change||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end hay_perform_update;

function hay_perform_delete( i_hay_has_id   in  lm_haa_access_availabilities.has_id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.hay_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from lm_haa_access_availabilities
          where has_id = i_hay_has_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'HAS_ID = "'||i_hay_has_id||'"' );
   end;                                                          
end hay_perform_delete;

function hay_update_row( i_hay_has_id   in     lm_haa_access_availabilities.has_id%type
                       , io_rt_hay  in out lm_haa_access_availabilities%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.hay_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         hay_lock_row( i_hay_has_id   =>  i_hay_has_id );

         
         l_rowcount := 
            hay_perform_update( i_hay_has_id   =>  i_hay_has_id
                              , io_rt_hay  => io_rt_hay );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('HAS_ID = "'||io_rt_hay.has_id||'"'
                                                          ||', IND_AVAILABLE = "'||io_rt_hay.ind_available||'"'
                                                          ||', IND_DIRTY = "'||io_rt_hay.ind_dirty||'"'
                                                          ||', TIMESTAMP_CHANGE = "'||io_rt_hay.timestamp_change||'"'                                                           , 1, 4000));
   end;                                                          
end hay_update_row;

function hay_delete_row( i_hay_has_id   in  lm_haa_access_availabilities.has_id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.hay_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         hay_lock_row( i_hay_has_id   =>  i_hay_has_id );

         
         l_deleted := hay_perform_delete( i_hay_has_id   =>  i_hay_has_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'HAS_ID = "'||i_hay_has_id||'"' );
   end;                                                          
end hay_delete_row;


end lm_hay_tapi_pck;
/