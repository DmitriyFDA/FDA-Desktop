create or replace PACKAGE lm_rie_tapi_pck
IS
-- Table API package for table lm_route_influences
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:16)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'LM_RIE_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'LM_ROUTE_INFLUENCES';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION rie_select_row( i_rie_ID   IN  lm_route_influences.ID%TYPE
                       , o_rt_rie   OUT lm_route_influences%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION rie_select_row_upd( i_rie_ID   IN  lm_route_influences.ID%TYPE
                           , o_rt_rie   OUT lm_route_influences%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE rie_lock_row( i_rie_ID   IN  lm_route_influences.ID%TYPE )
;

PROCEDURE rie_lock_row_nowait( i_rie_ID   IN  lm_route_influences.ID%TYPE )
;

PROCEDURE rie_insert_row ( io_rt_rie  IN OUT lm_route_influences%ROWTYPE )
;

FUNCTION rie_update_row( i_rie_ID   IN     lm_route_influences.ID%TYPE
                       , io_rt_rie  IN OUT lm_route_influences%ROWTYPE )
RETURN NUMBER
;

FUNCTION rie_delete_row( i_rie_ID   IN  lm_route_influences.ID%TYPE )
RETURN BOOLEAN
;

FUNCTION rie_seq1_nextval
RETURN lm_route_influences.ID%TYPE
;


END lm_rie_tapi_pck;
/




package body lm_rie_tapi_pck
is




function rie_select_row( i_rie_id   in  lm_route_influences.id%type
                       , o_rt_rie   out lm_route_influences%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rie_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_rie ( i_rie_id   in  lm_route_influences.id%type )
      is 
           select *
             from lm_route_influences rie
            where rie.id = i_rie_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_rie( i_rie_id => i_rie_id );
         fetch c_rie into o_rt_rie;
         l_found := c_rie%found;
         close c_rie;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_rie%isopen
         then
            close c_rie;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end rie_select_row;

function rie_select_row_upd( i_rie_id   in  lm_route_influences.id%type
                           , o_rt_rie   out lm_route_influences%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rie_select_row_upd';
   l_found                boolean      := false;

   cursor c_rie ( i_rie_id   in  lm_route_influences.id%type )
   is
           select *
             from lm_route_influences rie
            where rie.id = i_rie_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_rie( i_rie_id => i_rie_id );
   fetch c_rie into o_rt_rie;
   l_found := c_rie%found;
   close c_rie;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_rie%isopen
      then
         close c_rie;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end rie_select_row_upd;

procedure rie_lock_row( i_rie_id   in  lm_route_influences.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rie_lock_row';
begin
  declare
     cursor c_rie ( i_rie_id   in  lm_route_influences.id%type )
     is
             select ''
               from lm_route_influences rie
              where rie.id = i_rie_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_rie_id is not null
         then
            begin
                
                rie_lock_row_nowait( i_rie_id => i_rie_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_rie( i_rie_id => i_rie_id );
                  close c_rie;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_rie%isopen
         then
            close c_rie;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end rie_lock_row;

procedure rie_lock_row_nowait( i_rie_id   in  lm_route_influences.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rie_lock_row_nowait';
begin
   declare
      cursor c_rie ( i_rie_id   in  lm_route_influences.id%type )
      is
              select ''
                from lm_route_influences rie
               where rie.id = i_rie_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_rie_id is not null
         then
            
            open c_rie( i_rie_id => i_rie_id );

            close c_rie;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_rie%isopen
        then
           close c_rie;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_rie_id||'"' );
   end;                                                          
end rie_lock_row_nowait;

function rie_perform_update( i_rie_id   in     lm_route_influences.id%type
                           , io_rt_rie  in out lm_route_influences%rowtype )
return number
;

function rie_perform_delete( i_rie_id   in  lm_route_influences.id%type )
return boolean
;

procedure rie_insert_row ( io_rt_rie  in out lm_route_influences%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rie_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into lm_route_influences( id
                                , rre_id
                                , lss_id
                                , hss_id
                                , time_activated
                                , time_deactivated
                                , time_reported )
              values ( io_rt_rie.id
                     , io_rt_rie.rre_id
                     , io_rt_rie.lss_id
                     , io_rt_rie.hss_id
                     , io_rt_rie.time_activated
                     , io_rt_rie.time_deactivated
                     , io_rt_rie.time_reported )
           returning id
                   , rre_id
                   , lss_id
                   , hss_id
                   , time_activated
                   , time_deactivated
                   , time_reported
                into io_rt_rie.id
                   , io_rt_rie.rre_id
                   , io_rt_rie.lss_id
                   , io_rt_rie.hss_id
                   , io_rt_rie.time_activated
                   , io_rt_rie.time_deactivated
                   , io_rt_rie.time_reported;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_rie.id||'"'
                                                             ||', RRE_ID = "'||io_rt_rie.rre_id||'"'
                                                             ||', LSS_ID = "'||io_rt_rie.lss_id||'"'
                                                             ||', HSS_ID = "'||io_rt_rie.hss_id||'"'
                                                             ||', TIME_ACTIVATED = "'||io_rt_rie.time_activated||'"'
                                                             ||', TIME_DEACTIVATED = "'||io_rt_rie.time_deactivated||'"'
                                                             ||', TIME_REPORTED = "'||io_rt_rie.time_reported||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end rie_insert_row;

function rie_perform_update( i_rie_id   in     lm_route_influences.id%type
                           , io_rt_rie  in out lm_route_influences%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rie_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update lm_route_influences
            set id = io_rt_rie.id
              , rre_id = io_rt_rie.rre_id
              , lss_id = io_rt_rie.lss_id
              , hss_id = io_rt_rie.hss_id
              , time_activated = io_rt_rie.time_activated
              , time_deactivated = io_rt_rie.time_deactivated
              , time_reported = io_rt_rie.time_reported
          where id = i_rie_id
      returning id
              , rre_id
              , lss_id
              , hss_id
              , time_activated
              , time_deactivated
              , time_reported
           into io_rt_rie.id
              , io_rt_rie.rre_id
              , io_rt_rie.lss_id
              , io_rt_rie.hss_id
              , io_rt_rie.time_activated
              , io_rt_rie.time_deactivated
              , io_rt_rie.time_reported;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_rie.id||'"'
                                                             ||', RRE_ID = "'||io_rt_rie.rre_id||'"'
                                                             ||', LSS_ID = "'||io_rt_rie.lss_id||'"'
                                                             ||', HSS_ID = "'||io_rt_rie.hss_id||'"'
                                                             ||', TIME_ACTIVATED = "'||io_rt_rie.time_activated||'"'
                                                             ||', TIME_DEACTIVATED = "'||io_rt_rie.time_deactivated||'"'
                                                             ||', TIME_REPORTED = "'||io_rt_rie.time_reported||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end rie_perform_update;

function rie_perform_delete( i_rie_id   in  lm_route_influences.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rie_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from lm_route_influences
          where id = i_rie_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_rie_id||'"' );
   end;                                                          
end rie_perform_delete;

function rie_update_row( i_rie_id   in     lm_route_influences.id%type
                       , io_rt_rie  in out lm_route_influences%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rie_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         rie_lock_row( i_rie_id   =>  i_rie_id );

         
         l_rowcount := 
            rie_perform_update( i_rie_id   =>  i_rie_id
                              , io_rt_rie  => io_rt_rie );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_rie.id||'"'
                                                          ||', RRE_ID = "'||io_rt_rie.rre_id||'"'
                                                          ||', LSS_ID = "'||io_rt_rie.lss_id||'"'
                                                          ||', HSS_ID = "'||io_rt_rie.hss_id||'"'
                                                          ||', TIME_ACTIVATED = "'||io_rt_rie.time_activated||'"'
                                                          ||', TIME_DEACTIVATED = "'||io_rt_rie.time_deactivated||'"'
                                                          ||', TIME_REPORTED = "'||io_rt_rie.time_reported||'"'                                                           , 1, 4000));
   end;                                                          
end rie_update_row;

function rie_delete_row( i_rie_id   in  lm_route_influences.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rie_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         rie_lock_row( i_rie_id   =>  i_rie_id );

         
         l_deleted := rie_perform_delete( i_rie_id   =>  i_rie_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_rie_id||'"' );
   end;                                                          
end rie_delete_row;

function rie_seq1_nextval
return lm_route_influences.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rie_seq1_nextval';
   l_rie_id  lm_route_influences.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select lm_rie_seq1.nextval 
           into l_rie_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_rie_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end rie_seq1_nextval;


end lm_rie_tapi_pck;
/