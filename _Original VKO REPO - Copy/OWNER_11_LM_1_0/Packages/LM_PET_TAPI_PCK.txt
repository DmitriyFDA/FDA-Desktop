create or replace PACKAGE lm_pet_tapi_pck
IS
-- Table API package for table lm_package_events
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:14)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'LM_PET_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'LM_PACKAGE_EVENTS';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION pet_select_row( i_pet_ID   IN  lm_package_events.ID%TYPE
                       , o_rt_pet   OUT lm_package_events%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION pet_select_row_upd( i_pet_ID   IN  lm_package_events.ID%TYPE
                           , o_rt_pet   OUT lm_package_events%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE pet_lock_row( i_pet_ID   IN  lm_package_events.ID%TYPE )
;

PROCEDURE pet_lock_row_nowait( i_pet_ID   IN  lm_package_events.ID%TYPE )
;

PROCEDURE pet_insert_row ( io_rt_pet  IN OUT lm_package_events%ROWTYPE )
;

FUNCTION pet_update_row( i_pet_ID   IN     lm_package_events.ID%TYPE
                       , io_rt_pet  IN OUT lm_package_events%ROWTYPE )
RETURN NUMBER
;

FUNCTION pet_delete_row( i_pet_ID   IN  lm_package_events.ID%TYPE )
RETURN BOOLEAN
;

FUNCTION pet_seq1_nextval
RETURN lm_package_events.ID%TYPE
;


END lm_pet_tapi_pck;
/




package body lm_pet_tapi_pck
is




function pet_select_row( i_pet_id   in  lm_package_events.id%type
                       , o_rt_pet   out lm_package_events%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pet_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_pet ( i_pet_id   in  lm_package_events.id%type )
      is 
           select *
             from lm_package_events pet
            where pet.id = i_pet_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_pet( i_pet_id => i_pet_id );
         fetch c_pet into o_rt_pet;
         l_found := c_pet%found;
         close c_pet;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_pet%isopen
         then
            close c_pet;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pet_select_row;

function pet_select_row_upd( i_pet_id   in  lm_package_events.id%type
                           , o_rt_pet   out lm_package_events%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pet_select_row_upd';
   l_found                boolean      := false;

   cursor c_pet ( i_pet_id   in  lm_package_events.id%type )
   is
           select *
             from lm_package_events pet
            where pet.id = i_pet_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_pet( i_pet_id => i_pet_id );
   fetch c_pet into o_rt_pet;
   l_found := c_pet%found;
   close c_pet;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_pet%isopen
      then
         close c_pet;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end pet_select_row_upd;

procedure pet_lock_row( i_pet_id   in  lm_package_events.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pet_lock_row';
begin
  declare
     cursor c_pet ( i_pet_id   in  lm_package_events.id%type )
     is
             select ''
               from lm_package_events pet
              where pet.id = i_pet_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_pet_id is not null
         then
            begin
                
                pet_lock_row_nowait( i_pet_id => i_pet_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_pet( i_pet_id => i_pet_id );
                  close c_pet;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_pet%isopen
         then
            close c_pet;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end pet_lock_row;

procedure pet_lock_row_nowait( i_pet_id   in  lm_package_events.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pet_lock_row_nowait';
begin
   declare
      cursor c_pet ( i_pet_id   in  lm_package_events.id%type )
      is
              select ''
                from lm_package_events pet
               where pet.id = i_pet_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_pet_id is not null
         then
            
            open c_pet( i_pet_id => i_pet_id );

            close c_pet;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_pet%isopen
        then
           close c_pet;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_pet_id||'"' );
   end;                                                          
end pet_lock_row_nowait;

function pet_perform_update( i_pet_id   in     lm_package_events.id%type
                           , io_rt_pet  in out lm_package_events%rowtype )
return number
;

function pet_perform_delete( i_pet_id   in  lm_package_events.id%type )
return boolean
;

procedure pet_insert_row ( io_rt_pet  in out lm_package_events%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pet_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into lm_package_events( id
                                , pid
                                , ete_id
                                , pty_id
                                , ims_id
                                , event_time
                                , date_created
                                , nde_id
                                , sct_id
                                , rst_id
                                , haa_id
                                , lic
                                , time_recirc_obsolete )
              values ( io_rt_pet.id
                     , io_rt_pet.pid
                     , io_rt_pet.ete_id
                     , io_rt_pet.pty_id
                     , io_rt_pet.ims_id
                     , io_rt_pet.event_time
                     , io_rt_pet.date_created
                     , io_rt_pet.nde_id
                     , io_rt_pet.sct_id
                     , io_rt_pet.rst_id
                     , io_rt_pet.haa_id
                     , io_rt_pet.lic
                     , io_rt_pet.time_recirc_obsolete )
           returning id
                   , pid
                   , ete_id
                   , pty_id
                   , ims_id
                   , event_time
                   , date_created
                   , nde_id
                   , sct_id
                   , rst_id
                   , haa_id
                   , lic
                   , time_recirc_obsolete
                into io_rt_pet.id
                   , io_rt_pet.pid
                   , io_rt_pet.ete_id
                   , io_rt_pet.pty_id
                   , io_rt_pet.ims_id
                   , io_rt_pet.event_time
                   , io_rt_pet.date_created
                   , io_rt_pet.nde_id
                   , io_rt_pet.sct_id
                   , io_rt_pet.rst_id
                   , io_rt_pet.haa_id
                   , io_rt_pet.lic
                   , io_rt_pet.time_recirc_obsolete;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_pet.id||'"'
                                                             ||', PID = "'||io_rt_pet.pid||'"'
                                                             ||', ETE_ID = "'||io_rt_pet.ete_id||'"'
                                                             ||', PTY_ID = "'||io_rt_pet.pty_id||'"'
                                                             ||', IMS_ID = "'||io_rt_pet.ims_id||'"'
                                                             ||', EVENT_TIME = "'||io_rt_pet.event_time||'"'
                                                             ||', DATE_CREATED = "'||io_rt_pet.date_created||'"'
                                                             ||', NDE_ID = "'||io_rt_pet.nde_id||'"'
                                                             ||', SCT_ID = "'||io_rt_pet.sct_id||'"'
                                                             ||', RST_ID = "'||io_rt_pet.rst_id||'"'
                                                             ||', HAA_ID = "'||io_rt_pet.haa_id||'"'
                                                             ||', LIC = "'||io_rt_pet.lic||'"'
                                                             ||', TIME_RECIRC_OBSOLETE = "'||io_rt_pet.time_recirc_obsolete||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pet_insert_row;

function pet_perform_update( i_pet_id   in     lm_package_events.id%type
                           , io_rt_pet  in out lm_package_events%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pet_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update lm_package_events
            set id = io_rt_pet.id
              , pid = io_rt_pet.pid
              , ete_id = io_rt_pet.ete_id
              , pty_id = io_rt_pet.pty_id
              , ims_id = io_rt_pet.ims_id
              , event_time = io_rt_pet.event_time
              , date_created = io_rt_pet.date_created
              , nde_id = io_rt_pet.nde_id
              , sct_id = io_rt_pet.sct_id
              , rst_id = io_rt_pet.rst_id
              , haa_id = io_rt_pet.haa_id
              , lic = io_rt_pet.lic
              , time_recirc_obsolete = io_rt_pet.time_recirc_obsolete
          where id = i_pet_id
      returning id
              , pid
              , ete_id
              , pty_id
              , ims_id
              , event_time
              , date_created
              , nde_id
              , sct_id
              , rst_id
              , haa_id
              , lic
              , time_recirc_obsolete
           into io_rt_pet.id
              , io_rt_pet.pid
              , io_rt_pet.ete_id
              , io_rt_pet.pty_id
              , io_rt_pet.ims_id
              , io_rt_pet.event_time
              , io_rt_pet.date_created
              , io_rt_pet.nde_id
              , io_rt_pet.sct_id
              , io_rt_pet.rst_id
              , io_rt_pet.haa_id
              , io_rt_pet.lic
              , io_rt_pet.time_recirc_obsolete;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_pet.id||'"'
                                                             ||', PID = "'||io_rt_pet.pid||'"'
                                                             ||', ETE_ID = "'||io_rt_pet.ete_id||'"'
                                                             ||', PTY_ID = "'||io_rt_pet.pty_id||'"'
                                                             ||', IMS_ID = "'||io_rt_pet.ims_id||'"'
                                                             ||', EVENT_TIME = "'||io_rt_pet.event_time||'"'
                                                             ||', DATE_CREATED = "'||io_rt_pet.date_created||'"'
                                                             ||', NDE_ID = "'||io_rt_pet.nde_id||'"'
                                                             ||', SCT_ID = "'||io_rt_pet.sct_id||'"'
                                                             ||', RST_ID = "'||io_rt_pet.rst_id||'"'
                                                             ||', HAA_ID = "'||io_rt_pet.haa_id||'"'
                                                             ||', LIC = "'||io_rt_pet.lic||'"'
                                                             ||', TIME_RECIRC_OBSOLETE = "'||io_rt_pet.time_recirc_obsolete||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pet_perform_update;

function pet_perform_delete( i_pet_id   in  lm_package_events.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pet_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from lm_package_events
          where id = i_pet_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_pet_id||'"' );
   end;                                                          
end pet_perform_delete;

function pet_update_row( i_pet_id   in     lm_package_events.id%type
                       , io_rt_pet  in out lm_package_events%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pet_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         pet_lock_row( i_pet_id   =>  i_pet_id );

         
         l_rowcount := 
            pet_perform_update( i_pet_id   =>  i_pet_id
                              , io_rt_pet  => io_rt_pet );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_pet.id||'"'
                                                          ||', PID = "'||io_rt_pet.pid||'"'
                                                          ||', ETE_ID = "'||io_rt_pet.ete_id||'"'
                                                          ||', PTY_ID = "'||io_rt_pet.pty_id||'"'
                                                          ||', IMS_ID = "'||io_rt_pet.ims_id||'"'
                                                          ||', EVENT_TIME = "'||io_rt_pet.event_time||'"'
                                                          ||', DATE_CREATED = "'||io_rt_pet.date_created||'"'
                                                          ||', NDE_ID = "'||io_rt_pet.nde_id||'"'
                                                          ||', SCT_ID = "'||io_rt_pet.sct_id||'"'
                                                          ||', RST_ID = "'||io_rt_pet.rst_id||'"'
                                                          ||', HAA_ID = "'||io_rt_pet.haa_id||'"'
                                                          ||', LIC = "'||io_rt_pet.lic||'"'
                                                          ||', TIME_RECIRC_OBSOLETE = "'||io_rt_pet.time_recirc_obsolete||'"'                                                           , 1, 4000));
   end;                                                          
end pet_update_row;

function pet_delete_row( i_pet_id   in  lm_package_events.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pet_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         pet_lock_row( i_pet_id   =>  i_pet_id );

         
         l_deleted := pet_perform_delete( i_pet_id   =>  i_pet_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_pet_id||'"' );
   end;                                                          
end pet_delete_row;

function pet_seq1_nextval
return lm_package_events.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pet_seq1_nextval';
   l_pet_id  lm_package_events.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select lm_pet_seq1.nextval 
           into l_pet_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_pet_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pet_seq1_nextval;


end lm_pet_tapi_pck;
/