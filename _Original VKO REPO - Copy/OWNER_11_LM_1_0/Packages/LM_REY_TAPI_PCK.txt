create or replace PACKAGE lm_rey_tapi_pck
IS
-- Table API package for table lm_routing_entries
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:16)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'LM_REY_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'LM_ROUTING_ENTRIES';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION rey_select_row( i_rey_ID   IN  lm_routing_entries.ID%TYPE
                       , o_rt_rey   OUT lm_routing_entries%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION rey_select_row_uk1( i_rey_PON_ID   IN  lm_routing_entries.PON_ID%TYPE
                           , i_rey_RTE_ID   IN  lm_routing_entries.RTE_ID%TYPE
                           , i_rey_RST_ID   IN  lm_routing_entries.RST_ID%TYPE
                           , o_rt_rey  OUT lm_routing_entries%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION rey_select_row_upd( i_rey_ID   IN  lm_routing_entries.ID%TYPE
                           , o_rt_rey   OUT lm_routing_entries%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION rey_select_row_upd_uk1( i_rey_PON_ID   IN  lm_routing_entries.PON_ID%TYPE
                               , i_rey_RTE_ID   IN  lm_routing_entries.RTE_ID%TYPE
                               , i_rey_RST_ID   IN  lm_routing_entries.RST_ID%TYPE
                               , o_rt_rey  OUT lm_routing_entries%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE rey_lock_row( i_rey_ID   IN  lm_routing_entries.ID%TYPE )
;

PROCEDURE rey_lock_row_nowait( i_rey_ID   IN  lm_routing_entries.ID%TYPE )
;

PROCEDURE rey_insert_row ( io_rt_rey  IN OUT lm_routing_entries%ROWTYPE )
;

FUNCTION rey_update_row( i_rey_ID   IN     lm_routing_entries.ID%TYPE
                       , io_rt_rey  IN OUT lm_routing_entries%ROWTYPE )
RETURN NUMBER
;

FUNCTION rey_delete_row( i_rey_ID   IN  lm_routing_entries.ID%TYPE )
RETURN BOOLEAN
;

FUNCTION rey_seq1_nextval
RETURN lm_routing_entries.ID%TYPE
;


END lm_rey_tapi_pck;
/




package body lm_rey_tapi_pck
is




function rey_select_row( i_rey_id   in  lm_routing_entries.id%type
                       , o_rt_rey   out lm_routing_entries%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rey_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_rey ( i_rey_id   in  lm_routing_entries.id%type )
      is 
           select *
             from lm_routing_entries rey
            where rey.id = i_rey_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_rey( i_rey_id => i_rey_id );
         fetch c_rey into o_rt_rey;
         l_found := c_rey%found;
         close c_rey;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_rey%isopen
         then
            close c_rey;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end rey_select_row;

function rey_select_row_uk1( i_rey_pon_id   in  lm_routing_entries.pon_id%type
                           , i_rey_rte_id   in  lm_routing_entries.rte_id%type
                           , i_rey_rst_id   in  lm_routing_entries.rst_id%type
                           , o_rt_rey  out lm_routing_entries%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rey_select_row_uk1';
   l_found                boolean      := false;
begin
   declare
      cursor c_rey ( i_rey_pon_id   in  lm_routing_entries.pon_id%type
                   , i_rey_rte_id   in  lm_routing_entries.rte_id%type
                   , i_rey_rst_id   in  lm_routing_entries.rst_id%type )
      is
         select *
           from lm_routing_entries rey
          where rey.pon_id = i_rey_pon_id 
            and rey.rte_id = i_rey_rte_id 
            and rey.rst_id = i_rey_rst_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_rey(i_rey_pon_id => i_rey_pon_id, i_rey_rte_id => i_rey_rte_id, i_rey_rst_id => i_rey_rst_id);
         fetch c_rey into o_rt_rey;
         l_found := c_rey%found;
         close c_rey;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_rey%isopen
      then
         close c_rey;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end rey_select_row_uk1;

function rey_select_row_upd( i_rey_id   in  lm_routing_entries.id%type
                           , o_rt_rey   out lm_routing_entries%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rey_select_row_upd';
   l_found                boolean      := false;

   cursor c_rey ( i_rey_id   in  lm_routing_entries.id%type )
   is
           select *
             from lm_routing_entries rey
            where rey.id = i_rey_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_rey( i_rey_id => i_rey_id );
   fetch c_rey into o_rt_rey;
   l_found := c_rey%found;
   close c_rey;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_rey%isopen
      then
         close c_rey;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end rey_select_row_upd;

function rey_select_row_upd_uk1( i_rey_pon_id   in  lm_routing_entries.pon_id%type
                               , i_rey_rte_id   in  lm_routing_entries.rte_id%type
                               , i_rey_rst_id   in  lm_routing_entries.rst_id%type
                               , o_rt_rey  out lm_routing_entries%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rey_select_row_upd_uk1';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := rey_select_row_uk1( i_rey_pon_id   =>  i_rey_pon_id
                                   , i_rey_rte_id   =>  i_rey_rte_id
                                   , i_rey_rst_id   =>  i_rey_rst_id
                                   , o_rt_rey => o_rt_rey );
      if l_found
      then
         
         l_found := rey_select_row_upd( i_rey_id => o_rt_rey.id
                                      , o_rt_rey => o_rt_rey );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end rey_select_row_upd_uk1;

procedure rey_lock_row( i_rey_id   in  lm_routing_entries.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rey_lock_row';
begin
  declare
     cursor c_rey ( i_rey_id   in  lm_routing_entries.id%type )
     is
             select ''
               from lm_routing_entries rey
              where rey.id = i_rey_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_rey_id is not null
         then
            begin
                
                rey_lock_row_nowait( i_rey_id => i_rey_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_rey( i_rey_id => i_rey_id );
                  close c_rey;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_rey%isopen
         then
            close c_rey;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end rey_lock_row;

procedure rey_lock_row_nowait( i_rey_id   in  lm_routing_entries.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rey_lock_row_nowait';
begin
   declare
      cursor c_rey ( i_rey_id   in  lm_routing_entries.id%type )
      is
              select ''
                from lm_routing_entries rey
               where rey.id = i_rey_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_rey_id is not null
         then
            
            open c_rey( i_rey_id => i_rey_id );

            close c_rey;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_rey%isopen
        then
           close c_rey;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_rey_id||'"' );
   end;                                                          
end rey_lock_row_nowait;

function rey_perform_update( i_rey_id   in     lm_routing_entries.id%type
                           , io_rt_rey  in out lm_routing_entries%rowtype )
return number
;

function rey_perform_delete( i_rey_id   in  lm_routing_entries.id%type )
return boolean
;

procedure rey_insert_row ( io_rt_rey  in out lm_routing_entries%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rey_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into lm_routing_entries( id
                                , pon_id
                                , rte_id
                                , rst_id
                                , preference )
              values ( io_rt_rey.id
                     , io_rt_rey.pon_id
                     , io_rt_rey.rte_id
                     , io_rt_rey.rst_id
                     , io_rt_rey.preference )
           returning id
                   , pon_id
                   , rte_id
                   , rst_id
                   , preference
                into io_rt_rey.id
                   , io_rt_rey.pon_id
                   , io_rt_rey.rte_id
                   , io_rt_rey.rst_id
                   , io_rt_rey.preference;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_rey.id||'"'
                                                             ||', PON_ID = "'||io_rt_rey.pon_id||'"'
                                                             ||', RTE_ID = "'||io_rt_rey.rte_id||'"'
                                                             ||', RST_ID = "'||io_rt_rey.rst_id||'"'
                                                             ||', PREFERENCE = "'||io_rt_rey.preference||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end rey_insert_row;

function rey_perform_update( i_rey_id   in     lm_routing_entries.id%type
                           , io_rt_rey  in out lm_routing_entries%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rey_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update lm_routing_entries
            set id = io_rt_rey.id
              , pon_id = io_rt_rey.pon_id
              , rte_id = io_rt_rey.rte_id
              , rst_id = io_rt_rey.rst_id
              , preference = io_rt_rey.preference
          where id = i_rey_id
      returning id
              , pon_id
              , rte_id
              , rst_id
              , preference
           into io_rt_rey.id
              , io_rt_rey.pon_id
              , io_rt_rey.rte_id
              , io_rt_rey.rst_id
              , io_rt_rey.preference;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_rey.id||'"'
                                                             ||', PON_ID = "'||io_rt_rey.pon_id||'"'
                                                             ||', RTE_ID = "'||io_rt_rey.rte_id||'"'
                                                             ||', RST_ID = "'||io_rt_rey.rst_id||'"'
                                                             ||', PREFERENCE = "'||io_rt_rey.preference||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end rey_perform_update;

function rey_perform_delete( i_rey_id   in  lm_routing_entries.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rey_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from lm_routing_entries
          where id = i_rey_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_rey_id||'"' );
   end;                                                          
end rey_perform_delete;

function rey_update_row( i_rey_id   in     lm_routing_entries.id%type
                       , io_rt_rey  in out lm_routing_entries%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rey_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         rey_lock_row( i_rey_id   =>  i_rey_id );

         
         l_rowcount := 
            rey_perform_update( i_rey_id   =>  i_rey_id
                              , io_rt_rey  => io_rt_rey );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_rey.id||'"'
                                                          ||', PON_ID = "'||io_rt_rey.pon_id||'"'
                                                          ||', RTE_ID = "'||io_rt_rey.rte_id||'"'
                                                          ||', RST_ID = "'||io_rt_rey.rst_id||'"'
                                                          ||', PREFERENCE = "'||io_rt_rey.preference||'"'                                                           , 1, 4000));
   end;                                                          
end rey_update_row;

function rey_delete_row( i_rey_id   in  lm_routing_entries.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rey_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         rey_lock_row( i_rey_id   =>  i_rey_id );

         
         l_deleted := rey_perform_delete( i_rey_id   =>  i_rey_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_rey_id||'"' );
   end;                                                          
end rey_delete_row;

function rey_seq1_nextval
return lm_routing_entries.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rey_seq1_nextval';
   l_rey_id  lm_routing_entries.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select lm_rey_seq1.nextval 
           into l_rey_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_rey_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end rey_seq1_nextval;


end lm_rey_tapi_pck;
/