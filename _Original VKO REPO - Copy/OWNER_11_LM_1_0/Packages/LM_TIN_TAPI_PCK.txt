create or replace PACKAGE lm_tin_tapi_pck
IS
-- Table API package for table lm_task_instructions
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:19)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'LM_TIN_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'LM_TASK_INSTRUCTIONS';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION tin_select_row( i_tin_ID   IN  lm_task_instructions.ID%TYPE
                       , o_rt_tin   OUT lm_task_instructions%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION tin_select_row_upd( i_tin_ID   IN  lm_task_instructions.ID%TYPE
                           , o_rt_tin   OUT lm_task_instructions%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE tin_lock_row( i_tin_ID   IN  lm_task_instructions.ID%TYPE )
;

PROCEDURE tin_lock_row_nowait( i_tin_ID   IN  lm_task_instructions.ID%TYPE )
;

PROCEDURE tin_insert_row ( io_rt_tin  IN OUT lm_task_instructions%ROWTYPE )
;

FUNCTION tin_update_row( i_tin_ID   IN     lm_task_instructions.ID%TYPE
                       , io_rt_tin  IN OUT lm_task_instructions%ROWTYPE )
RETURN NUMBER
;

FUNCTION tin_delete_row( i_tin_ID   IN  lm_task_instructions.ID%TYPE )
RETURN BOOLEAN
;

FUNCTION tin_seq1_nextval
RETURN lm_task_instructions.ID%TYPE
;


END lm_tin_tapi_pck;
/




package body lm_tin_tapi_pck
is




function tin_select_row( i_tin_id   in  lm_task_instructions.id%type
                       , o_rt_tin   out lm_task_instructions%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tin_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_tin ( i_tin_id   in  lm_task_instructions.id%type )
      is 
           select *
             from lm_task_instructions tin
            where tin.id = i_tin_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_tin( i_tin_id => i_tin_id );
         fetch c_tin into o_rt_tin;
         l_found := c_tin%found;
         close c_tin;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_tin%isopen
         then
            close c_tin;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end tin_select_row;

function tin_select_row_upd( i_tin_id   in  lm_task_instructions.id%type
                           , o_rt_tin   out lm_task_instructions%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tin_select_row_upd';
   l_found                boolean      := false;

   cursor c_tin ( i_tin_id   in  lm_task_instructions.id%type )
   is
           select *
             from lm_task_instructions tin
            where tin.id = i_tin_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_tin( i_tin_id => i_tin_id );
   fetch c_tin into o_rt_tin;
   l_found := c_tin%found;
   close c_tin;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_tin%isopen
      then
         close c_tin;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end tin_select_row_upd;

procedure tin_lock_row( i_tin_id   in  lm_task_instructions.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tin_lock_row';
begin
  declare
     cursor c_tin ( i_tin_id   in  lm_task_instructions.id%type )
     is
             select ''
               from lm_task_instructions tin
              where tin.id = i_tin_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_tin_id is not null
         then
            begin
                
                tin_lock_row_nowait( i_tin_id => i_tin_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_tin( i_tin_id => i_tin_id );
                  close c_tin;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_tin%isopen
         then
            close c_tin;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end tin_lock_row;

procedure tin_lock_row_nowait( i_tin_id   in  lm_task_instructions.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tin_lock_row_nowait';
begin
   declare
      cursor c_tin ( i_tin_id   in  lm_task_instructions.id%type )
      is
              select ''
                from lm_task_instructions tin
               where tin.id = i_tin_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_tin_id is not null
         then
            
            open c_tin( i_tin_id => i_tin_id );

            close c_tin;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_tin%isopen
        then
           close c_tin;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_tin_id||'"' );
   end;                                                          
end tin_lock_row_nowait;

function tin_perform_update( i_tin_id   in     lm_task_instructions.id%type
                           , io_rt_tin  in out lm_task_instructions%rowtype )
return number
;

function tin_perform_delete( i_tin_id   in  lm_task_instructions.id%type )
return boolean
;

procedure tin_insert_row ( io_rt_tin  in out lm_task_instructions%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tin_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into lm_task_instructions( id
                                , pid
                                , tdn_id
                                , tdn_id_temporary
                                , event_time
                                , origin
                                , date_created
                                , pss_id
                                , ims_id
                                , sep_id
                                , pay_id
                                , time_limit
                                , release_priority
                                , handler
                                , time_limit_process_activity
                                , store_rank )
              values ( io_rt_tin.id
                     , io_rt_tin.pid
                     , io_rt_tin.tdn_id
                     , io_rt_tin.tdn_id_temporary
                     , io_rt_tin.event_time
                     , io_rt_tin.origin
                     , io_rt_tin.date_created
                     , io_rt_tin.pss_id
                     , io_rt_tin.ims_id
                     , io_rt_tin.sep_id
                     , io_rt_tin.pay_id
                     , io_rt_tin.time_limit
                     , io_rt_tin.release_priority
                     , io_rt_tin.handler
                     , io_rt_tin.time_limit_process_activity
                     , io_rt_tin.store_rank )
           returning id
                   , pid
                   , tdn_id
                   , tdn_id_temporary
                   , event_time
                   , origin
                   , date_created
                   , pss_id
                   , ims_id
                   , sep_id
                   , pay_id
                   , time_limit
                   , release_priority
                   , handler
                   , time_limit_process_activity
                   , store_rank
                into io_rt_tin.id
                   , io_rt_tin.pid
                   , io_rt_tin.tdn_id
                   , io_rt_tin.tdn_id_temporary
                   , io_rt_tin.event_time
                   , io_rt_tin.origin
                   , io_rt_tin.date_created
                   , io_rt_tin.pss_id
                   , io_rt_tin.ims_id
                   , io_rt_tin.sep_id
                   , io_rt_tin.pay_id
                   , io_rt_tin.time_limit
                   , io_rt_tin.release_priority
                   , io_rt_tin.handler
                   , io_rt_tin.time_limit_process_activity
                   , io_rt_tin.store_rank;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_tin.id||'"'
                                                             ||', PID = "'||io_rt_tin.pid||'"'
                                                             ||', TDN_ID = "'||io_rt_tin.tdn_id||'"'
                                                             ||', TDN_ID_TEMPORARY = "'||io_rt_tin.tdn_id_temporary||'"'
                                                             ||', EVENT_TIME = "'||io_rt_tin.event_time||'"'
                                                             ||', ORIGIN = "'||io_rt_tin.origin||'"'
                                                             ||', DATE_CREATED = "'||io_rt_tin.date_created||'"'
                                                             ||', PSS_ID = "'||io_rt_tin.pss_id||'"'
                                                             ||', IMS_ID = "'||io_rt_tin.ims_id||'"'
                                                             ||', SEP_ID = "'||io_rt_tin.sep_id||'"'
                                                             ||', PAY_ID = "'||io_rt_tin.pay_id||'"'
                                                             ||', TIME_LIMIT = "'||io_rt_tin.time_limit||'"'
                                                             ||', RELEASE_PRIORITY = "'||io_rt_tin.release_priority||'"'
                                                             ||', HANDLER = "'||io_rt_tin.handler||'"'
                                                             ||', TIME_LIMIT_PROCESS_ACTIVITY = "'||io_rt_tin.time_limit_process_activity||'"'
                                                             ||', STORE_RANK = "'||io_rt_tin.store_rank||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end tin_insert_row;

function tin_perform_update( i_tin_id   in     lm_task_instructions.id%type
                           , io_rt_tin  in out lm_task_instructions%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tin_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update lm_task_instructions
            set id = io_rt_tin.id
              , pid = io_rt_tin.pid
              , tdn_id = io_rt_tin.tdn_id
              , tdn_id_temporary = io_rt_tin.tdn_id_temporary
              , event_time = io_rt_tin.event_time
              , origin = io_rt_tin.origin
              , date_created = io_rt_tin.date_created
              , pss_id = io_rt_tin.pss_id
              , ims_id = io_rt_tin.ims_id
              , sep_id = io_rt_tin.sep_id
              , pay_id = io_rt_tin.pay_id
              , time_limit = io_rt_tin.time_limit
              , release_priority = io_rt_tin.release_priority
              , handler = io_rt_tin.handler
              , time_limit_process_activity = io_rt_tin.time_limit_process_activity
              , store_rank = io_rt_tin.store_rank
          where id = i_tin_id
      returning id
              , pid
              , tdn_id
              , tdn_id_temporary
              , event_time
              , origin
              , date_created
              , pss_id
              , ims_id
              , sep_id
              , pay_id
              , time_limit
              , release_priority
              , handler
              , time_limit_process_activity
              , store_rank
           into io_rt_tin.id
              , io_rt_tin.pid
              , io_rt_tin.tdn_id
              , io_rt_tin.tdn_id_temporary
              , io_rt_tin.event_time
              , io_rt_tin.origin
              , io_rt_tin.date_created
              , io_rt_tin.pss_id
              , io_rt_tin.ims_id
              , io_rt_tin.sep_id
              , io_rt_tin.pay_id
              , io_rt_tin.time_limit
              , io_rt_tin.release_priority
              , io_rt_tin.handler
              , io_rt_tin.time_limit_process_activity
              , io_rt_tin.store_rank;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_tin.id||'"'
                                                             ||', PID = "'||io_rt_tin.pid||'"'
                                                             ||', TDN_ID = "'||io_rt_tin.tdn_id||'"'
                                                             ||', TDN_ID_TEMPORARY = "'||io_rt_tin.tdn_id_temporary||'"'
                                                             ||', EVENT_TIME = "'||io_rt_tin.event_time||'"'
                                                             ||', ORIGIN = "'||io_rt_tin.origin||'"'
                                                             ||', DATE_CREATED = "'||io_rt_tin.date_created||'"'
                                                             ||', PSS_ID = "'||io_rt_tin.pss_id||'"'
                                                             ||', IMS_ID = "'||io_rt_tin.ims_id||'"'
                                                             ||', SEP_ID = "'||io_rt_tin.sep_id||'"'
                                                             ||', PAY_ID = "'||io_rt_tin.pay_id||'"'
                                                             ||', TIME_LIMIT = "'||io_rt_tin.time_limit||'"'
                                                             ||', RELEASE_PRIORITY = "'||io_rt_tin.release_priority||'"'
                                                             ||', HANDLER = "'||io_rt_tin.handler||'"'
                                                             ||', TIME_LIMIT_PROCESS_ACTIVITY = "'||io_rt_tin.time_limit_process_activity||'"'
                                                             ||', STORE_RANK = "'||io_rt_tin.store_rank||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end tin_perform_update;

function tin_perform_delete( i_tin_id   in  lm_task_instructions.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tin_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from lm_task_instructions
          where id = i_tin_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_tin_id||'"' );
   end;                                                          
end tin_perform_delete;

function tin_update_row( i_tin_id   in     lm_task_instructions.id%type
                       , io_rt_tin  in out lm_task_instructions%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tin_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         tin_lock_row( i_tin_id   =>  i_tin_id );

         
         l_rowcount := 
            tin_perform_update( i_tin_id   =>  i_tin_id
                              , io_rt_tin  => io_rt_tin );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_tin.id||'"'
                                                          ||', PID = "'||io_rt_tin.pid||'"'
                                                          ||', TDN_ID = "'||io_rt_tin.tdn_id||'"'
                                                          ||', TDN_ID_TEMPORARY = "'||io_rt_tin.tdn_id_temporary||'"'
                                                          ||', EVENT_TIME = "'||io_rt_tin.event_time||'"'
                                                          ||', ORIGIN = "'||io_rt_tin.origin||'"'
                                                          ||', DATE_CREATED = "'||io_rt_tin.date_created||'"'
                                                          ||', PSS_ID = "'||io_rt_tin.pss_id||'"'
                                                          ||', IMS_ID = "'||io_rt_tin.ims_id||'"'
                                                          ||', SEP_ID = "'||io_rt_tin.sep_id||'"'
                                                          ||', PAY_ID = "'||io_rt_tin.pay_id||'"'
                                                          ||', TIME_LIMIT = "'||io_rt_tin.time_limit||'"'
                                                          ||', RELEASE_PRIORITY = "'||io_rt_tin.release_priority||'"'
                                                          ||', HANDLER = "'||io_rt_tin.handler||'"'
                                                          ||', TIME_LIMIT_PROCESS_ACTIVITY = "'||io_rt_tin.time_limit_process_activity||'"'
                                                          ||', STORE_RANK = "'||io_rt_tin.store_rank||'"'                                                           , 1, 4000));
   end;                                                          
end tin_update_row;

function tin_delete_row( i_tin_id   in  lm_task_instructions.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tin_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         tin_lock_row( i_tin_id   =>  i_tin_id );

         
         l_deleted := tin_perform_delete( i_tin_id   =>  i_tin_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_tin_id||'"' );
   end;                                                          
end tin_delete_row;

function tin_seq1_nextval
return lm_task_instructions.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tin_seq1_nextval';
   l_tin_id  lm_task_instructions.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select lm_tin_seq1.nextval 
           into l_tin_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_tin_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end tin_seq1_nextval;


end lm_tin_tapi_pck;
/