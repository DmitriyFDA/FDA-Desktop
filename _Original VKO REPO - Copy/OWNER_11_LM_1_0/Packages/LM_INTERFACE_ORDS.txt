create or replace PACKAGE lm_interface_ords IS

   g_con_package CONSTANT lm_constant.st_proc_name := 'lm_interface_ords';

   FUNCTION validate_json_data
   ( i_data         IN     CLOB
   , o_operator_id     OUT VARCHAR2
   , o_ip_address      OUT VARCHAR2
   , o_items           OUT CLOB
   )
   RETURN BOOLEAN;

   FUNCTION get_lane_groups RETURN nt_lane_groups;
   
   PROCEDURE upd_lane_groups
   ( i_data IN     CLOB
   );

   FUNCTION get_load_groups RETURN nt_load_groups;
   
   PROCEDURE upd_load_groups
   ( i_data IN     CLOB
   );

   FUNCTION get_ebs_lane_details RETURN nt_ebs_lane_details;
   
   PROCEDURE request_to_empty_lanes
   ( i_data IN     CLOB
   );

END lm_interface_ords;
/




package body lm_interface_ords is


procedure log_processing_time
( i_request    in varchar2
, i_start_time in timestamp
, i_data       in clob       default null
)
is
   l_con_proc_name   constant lm_constant.st_proc_name
                                 := g_con_package || '.log_processing_time';

   l_elapsed_time            interval day to second;
begin
   viu_module.enter_module (i_module => l_con_proc_name);

   l_elapsed_time  := lm_common.default_timestamp - i_start_time;
   viu_info.operator_info( i_ifo_nr                 => viu_constant.c_ifo_requestprocessingtime
                         , i_calling_procedure      => l_con_proc_name
                         , i_severity               => viu_info.c_severity_notification
                         , i_info_arguments         => i_request
                                                    ||'##'
                                                    || to_char( extract( second from l_elapsed_time )
                                                                + 60 * extract( minute from l_elapsed_time )
                                                              , 'FM99990.000'
                                                              )
                         , i_additional_data        => substr( 'Request body: ' || nvl(to_char(i_data), '<null>')
                                                             , 1
                                                             , 4000
                                                             )
                         );

   viu_module.leave_module (i_module => l_con_proc_name);
exception
   when others
   then
      viu_module.leave_module (i_module          => l_con_proc_name,
                               i_debug_info      => sqlerrm
                              );
      
      viu_info.raise_info (i_calling_procedure => l_con_proc_name);

end log_processing_time;






function validate_json_data
( i_data         in     clob
, o_operator_id     out varchar2
, o_ip_address      out varchar2
, o_items           out clob
)
return boolean
is
   l_con_proc_name constant lm_constant.st_proc_name := g_con_package || '.data_is_json';

   l_valid                  integer;
   l_operator_id            varchar2(60);
   l_ip_address             varchar2(60);
   l_items                  clob;
   
   cursor c_is_json(b_data clob)
   is
   select count(1)
   from   dual
   where  i_data is json;
begin
   viu_module.enter_module( i_module => l_con_proc_name );

   open c_is_json(i_data);
   fetch c_is_json into l_valid;
   close c_is_json;
   if l_valid = 0
   then
      viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_docisnotjson
                         , i_calling_procedure      => l_con_proc_name
                         , i_severity               => viu_info.c_severity_error
                         );
   end if;
   
   select jte.ipaddress
   ,      jte.username
   ,      jte.items
   into   o_ip_address
   ,      o_operator_id
   ,      o_items
   from   json_table(i_data, '$'
                columns( ipaddress varchar2(30)               path '$.ipaddress'
                       , username  varchar2(30)               path '$.username'
                       , items     varchar2(4000) format json path '$.items'
                       )
                    ) jte
   ;
   if    o_ip_address is null
      or o_operator_id is null
      or o_items is null
   then
      viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_invalidjsonrequest
                         , i_calling_procedure      => l_con_proc_name
                         , i_severity               => viu_info.c_severity_error
                         );
   end if;
   
   viu_module.leave_module( i_module => l_con_proc_name );
   return true;
exception
   when others
   then
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );
      viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
end;







function get_lane_groups
return nt_lane_groups
is
   l_con_proc_name constant lm_constant.st_proc_name := g_con_package || '.get_lane_groups';

   l_start_time             timestamp := lm_common.default_timestamp;
   l_nt_lap                 nt_lane_groups;
begin
   viu_module.enter_module( i_module => l_con_proc_name );

   l_nt_lap := lm_cfg_lane_based_ebs.get_lane_groups;
   
   log_processing_time( i_request    => l_con_proc_name
                      , i_start_time => l_start_time
                      );

   viu_module.leave_module( i_module => l_con_proc_name );
   return l_nt_lap;
exception
   when others
   then
      viu_module.leave_module( i_module     => l_con_proc_name
                             , i_debug_info => sqlerrm
                             );
      viu_info.handle_info( i_calling_procedure => l_con_proc_name );
      log_processing_time( i_request    => l_con_proc_name
                         , i_start_time => l_start_time
                         );
      raise;  
end get_lane_groups;







procedure upd_lane_groups(i_data in clob)
is
   l_con_proc_name constant lm_constant.st_proc_name := g_con_package || '.upd_lane_groups';
   
   l_start_time             timestamp := lm_common.default_timestamp;
   l_operator_id            varchar2(60);
   l_ip_address             varchar2(60);
   l_items                  clob;
   l_nt_lap                 nt_lane_groups := nt_lane_groups();
   l_items_valid            boolean := true;
begin
   viu_module.enter_module( i_module => l_con_proc_name );

   if validate_json_data( i_data        => i_data
                        , o_operator_id => l_operator_id
                        , o_ip_address  => l_ip_address
                        , o_items       => l_items
                        )
   then
      select rt_lane_group( jte.lap_id
                          , jte.lap_name
                          , to_dsinterval(jte.lap_offset)
                          , to_dsinterval(jte.lap_window)
                          )
      bulk collect
      into   l_nt_lap
      from   json_table(l_items, '$'
                   columns( nested path '$[*]'
                            columns( lap_id     number        path '$.id'
                                   , lap_name   varchar2(100) path '$.name'
                                   , lap_offset varchar2(100) path '$.offset'
                                   , lap_window varchar2(100) path '$.window'
                                   )
                          )
                       ) jte
      ;

      
      for i in l_nt_lap.first .. l_nt_lap.last
      loop
         if    l_nt_lap(i).id is null
            or l_nt_lap(i).name is null
            or l_nt_lap(i).offset is null
            or l_nt_lap(i).window is null
         then
            l_items_valid := false;
            exit;
         end if;
      end loop;
      if    l_nt_lap is empty
         or not l_items_valid
      then
         viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_invalidjsonrequest
                            , i_calling_procedure      => l_con_proc_name
                            , i_severity               => viu_info.c_severity_error
                            );
      end if;

      lm_cfg_lane_based_ebs.upd_lane_groups( i_operator_id    => l_operator_id
                                           , i_ip_address     => l_ip_address
                                           , i_nt_lane_groups => l_nt_lap
                                           );
   end if;

   log_processing_time( i_request    => l_con_proc_name
                      , i_start_time => l_start_time
                      , i_data       => i_data
                      );
   viu_module.leave_module( i_module     => l_con_proc_name
                          , i_debug_info => sqlerrm
                          );
exception
   when others
   then
      viu_module.leave_module( i_module     => l_con_proc_name
                             , i_debug_info => sqlerrm
                             );
      viu_info.handle_info( i_calling_procedure => l_con_proc_name );
      log_processing_time( i_request    => l_con_proc_name
                         , i_start_time => l_start_time
                         , i_data       => i_data
                         );
      raise;  
end upd_lane_groups;







function get_load_groups
return nt_load_groups
is
   l_con_proc_name constant lm_constant.st_proc_name := g_con_package || '.get_load_groups';

   l_start_time             timestamp := lm_common.default_timestamp;
   l_nt_lgp                 nt_load_groups;
begin
   viu_module.enter_module( i_module => l_con_proc_name );

   l_nt_lgp := lm_cfg_congestion_control.get_load_groups;
   
   log_processing_time( i_request    => l_con_proc_name
                      , i_start_time => l_start_time
                      );

   viu_module.leave_module( i_module => l_con_proc_name );
   return l_nt_lgp;
exception
   when others
   then
      viu_module.leave_module( i_module     => l_con_proc_name
                             , i_debug_info => sqlerrm
                             );
      viu_info.handle_info( i_calling_procedure => l_con_proc_name );
      log_processing_time( i_request    => l_con_proc_name
                         , i_start_time => l_start_time
                         );
      raise;  
end get_load_groups;







procedure upd_load_groups(i_data in clob)
is
   l_con_proc_name constant lm_constant.st_proc_name := g_con_package || '.upd_load_groups';
   
   l_start_time             timestamp := lm_common.default_timestamp;
   l_operator_id            varchar2(60);
   l_ip_address             varchar2(60);
   l_items                  clob;
   l_nt_lgp                 nt_load_groups := nt_load_groups();
   l_items_valid            boolean := true;
begin
   viu_module.enter_module( i_module => l_con_proc_name );

   if validate_json_data( i_data        => i_data
                        , o_operator_id => l_operator_id
                        , o_ip_address  => l_ip_address
                        , o_items       => l_items
                        )
   then






































      for rec_grp in (select *
                      from   json_table(l_items
                                       , '$'
                                   columns( nested path '$[*]'
                                            columns( lgp_id     number                     path '$.id'
                                                   , lgp_name   varchar2(100)              path '$.name'
                                                   , load_rules varchar2(4000) format json path '$.load_rules'
                                                   )
                                          )
                                       )
                     )
      loop
         
         l_nt_lgp.extend(1);
         l_nt_lgp(l_nt_lgp.count) := new rt_load_group(null, null, nt_load_rules());
         
         l_nt_lgp(l_nt_lgp.count).id   := rec_grp.lgp_id;
         l_nt_lgp(l_nt_lgp.count).name := rec_grp.lgp_name;
         for rec_rle in (select rt_load_rule( rule_id
                                            , recirc_count
                                            , lower_load
                                            ) the_rules
                         from   json_table( rec_grp.load_rules, '$'
                                   columns (nested path '$[*]'
                                        columns( rule_id      number path '$.rule_id'
                                               , recirc_count number path '$.recirc_count'
                                               , lower_load   number path '$.lower_load'
                                               )
                                           )
                                          )
                         )
         loop
            l_nt_lgp(l_nt_lgp.count).load_rules.extend(1);
            l_nt_lgp(l_nt_lgp.count).load_rules(l_nt_lgp(l_nt_lgp.count).load_rules.count) := rec_rle.the_rules;
         end loop;
      end loop;
      
      
      
      for i in l_nt_lgp.first .. l_nt_lgp.last
      loop
         if    l_nt_lgp(i).id is null
            or l_nt_lgp(i).name is null
            or l_nt_lgp(i).load_rules is empty
         then
            l_items_valid := false;
            exit;
         end if;
         for j in l_nt_lgp(i).load_rules.first .. l_nt_lgp(i).load_rules.last
         loop
            if    l_nt_lgp(i).load_rules(j).rule_id is null
               or l_nt_lgp(i).load_rules(j).recirc_count is null
               or l_nt_lgp(i).load_rules(j).lower_load is null
            then
               l_items_valid := false;
               exit;
            end if;
         end loop;
      end loop;
      if    l_nt_lgp is empty
         or not l_items_valid
      then
         viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_invalidjsonrequest
                            , i_calling_procedure      => l_con_proc_name
                            , i_severity               => viu_info.c_severity_error
                            );
      end if;

      lm_cfg_congestion_control.upd_load_groups( i_operator_id    => l_operator_id
                                               , i_ip_address     => l_ip_address
                                               , i_nt_load_groups => l_nt_lgp
                                               );
   end if;

   log_processing_time( i_request    => l_con_proc_name
                      , i_start_time => l_start_time
                      , i_data       => i_data
                      );
   viu_module.leave_module( i_module     => l_con_proc_name
                          , i_debug_info => sqlerrm
                          );
exception
   when others
   then
      viu_module.leave_module( i_module     => l_con_proc_name
                             , i_debug_info => sqlerrm
                             );
      viu_info.handle_info( i_calling_procedure => l_con_proc_name );
      log_processing_time( i_request    => l_con_proc_name
                         , i_start_time => l_start_time
                         , i_data       => i_data
                         );
      raise;  
end upd_load_groups;






function get_ebs_lane_details return nt_ebs_lane_details
is
   l_con_proc_name constant lm_constant.st_proc_name := g_con_package || '.get_ebs_lane_details';

   l_start_time             timestamp := lm_common.default_timestamp;
   l_nt_ebs_lane_details    nt_ebs_lane_details;
begin
   viu_module.enter_module( i_module => l_con_proc_name );

   l_nt_ebs_lane_details := lm_lbs_administration.get_lane_details;
   
   log_processing_time( i_request    => l_con_proc_name
                      , i_start_time => l_start_time
                      );

   viu_module.leave_module( i_module => l_con_proc_name );
   return l_nt_ebs_lane_details;
exception
   when others
   then
      viu_module.leave_module( i_module     => l_con_proc_name
                             , i_debug_info => sqlerrm
                             );
      viu_info.handle_info( i_calling_procedure => l_con_proc_name );
      log_processing_time( i_request    => l_con_proc_name
                         , i_start_time => l_start_time
                         );
      raise;  
end get_ebs_lane_details;






procedure request_to_empty_lanes
( i_data in     clob
)
is
   l_con_proc_name constant lm_constant.st_proc_name := g_con_package || '.request_to_empty_lanes';
   
   l_start_time             timestamp := lm_common.default_timestamp;
   l_operator_id            varchar2(60);
   l_ip_address             varchar2(60);
   l_items                  clob;
   l_nt_lne                 nt_stn_id := nt_stn_id();
   l_items_valid            boolean := true;
begin
   viu_module.enter_module( i_module => l_con_proc_name );

   if validate_json_data( i_data        => i_data
                        , o_operator_id => l_operator_id
                        , o_ip_address  => l_ip_address
                        , o_items       => l_items
                        )
   then
      select jte.lne_stn_id
      bulk collect
      into   l_nt_lne
      from   json_table(l_items, '$'
                   columns( nested path '$[*]'
                            columns( lne_stn_id number        path '$.lne_stn_id'
                                   )
                          )
                       ) jte
      ;

      
      for i in l_nt_lne.first .. l_nt_lne.last
      loop
         if l_nt_lne(i) is null
         then
            l_items_valid := false;
            exit;
         end if;
      end loop;
      if    l_nt_lne is empty
         or not l_items_valid
      then
         viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_invalidjsonrequest
                            , i_calling_procedure      => l_con_proc_name
                            , i_severity               => viu_info.c_severity_error
                            );
      end if;
      lm_lbs_administration.handle_external_requests( i_operator_id    => l_operator_id
                                                    , i_ip_address     => l_ip_address
                                                    , i_nt_lne_stn_id  => l_nt_lne
                                                    );
   end if;

   log_processing_time( i_request    => l_con_proc_name
                      , i_start_time => l_start_time
                      , i_data       => i_data
                      );
   viu_module.leave_module( i_module     => l_con_proc_name
                          , i_debug_info => sqlerrm
                          );
exception
   when others
   then
      viu_module.leave_module( i_module     => l_con_proc_name
                             , i_debug_info => sqlerrm
                             );
      viu_info.handle_info( i_calling_procedure => l_con_proc_name );
      log_processing_time( i_request    => l_con_proc_name
                         , i_start_time => l_start_time
                         , i_data       => i_data
                         );
      raise;  
end request_to_empty_lanes;

end lm_interface_ords;
/