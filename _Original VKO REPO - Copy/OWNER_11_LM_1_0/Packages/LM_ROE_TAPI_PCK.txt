create or replace PACKAGE lm_roe_tapi_pck
IS
-- Table API package for table lm_routes
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:20)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'LM_ROE_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'LM_ROUTES';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION roe_select_row( i_roe_ID   IN  lm_routes.ID%TYPE
                       , o_rt_roe   OUT lm_routes%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION roe_select_row_uk1( i_roe_NDE_ID   IN  lm_routes.NDE_ID%TYPE
                           , i_roe_PON_ID   IN  lm_routes.PON_ID%TYPE
                           , i_roe_RME_ID   IN  lm_routes.RME_ID%TYPE
                           , o_rt_roe  OUT lm_routes%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION roe_select_row_upd( i_roe_ID   IN  lm_routes.ID%TYPE
                           , o_rt_roe   OUT lm_routes%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION roe_select_row_upd_uk1( i_roe_NDE_ID   IN  lm_routes.NDE_ID%TYPE
                               , i_roe_PON_ID   IN  lm_routes.PON_ID%TYPE
                               , i_roe_RME_ID   IN  lm_routes.RME_ID%TYPE
                               , o_rt_roe  OUT lm_routes%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE roe_lock_row( i_roe_ID   IN  lm_routes.ID%TYPE )
;

PROCEDURE roe_lock_row_nowait( i_roe_ID   IN  lm_routes.ID%TYPE )
;

PROCEDURE roe_insert_row ( io_rt_roe  IN OUT lm_routes%ROWTYPE )
;

FUNCTION roe_update_row( i_roe_ID   IN     lm_routes.ID%TYPE
                       , io_rt_roe  IN OUT lm_routes%ROWTYPE )
RETURN NUMBER
;

FUNCTION roe_delete_row( i_roe_ID   IN  lm_routes.ID%TYPE )
RETURN BOOLEAN
;

FUNCTION roe_seq1_nextval
RETURN lm_routes.ID%TYPE
;


END lm_roe_tapi_pck;
/




package body lm_roe_tapi_pck
is




function roe_select_row( i_roe_id   in  lm_routes.id%type
                       , o_rt_roe   out lm_routes%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.roe_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_roe ( i_roe_id   in  lm_routes.id%type )
      is 
           select *
             from lm_routes roe
            where roe.id = i_roe_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_roe( i_roe_id => i_roe_id );
         fetch c_roe into o_rt_roe;
         l_found := c_roe%found;
         close c_roe;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_roe%isopen
         then
            close c_roe;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end roe_select_row;

function roe_select_row_uk1( i_roe_nde_id   in  lm_routes.nde_id%type
                           , i_roe_pon_id   in  lm_routes.pon_id%type
                           , i_roe_rme_id   in  lm_routes.rme_id%type
                           , o_rt_roe  out lm_routes%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.roe_select_row_uk1';
   l_found                boolean      := false;
begin
   declare
      cursor c_roe ( i_roe_nde_id   in  lm_routes.nde_id%type
                   , i_roe_pon_id   in  lm_routes.pon_id%type
                   , i_roe_rme_id   in  lm_routes.rme_id%type )
      is
         select *
           from lm_routes roe
          where roe.nde_id = i_roe_nde_id 
            and roe.pon_id = i_roe_pon_id 
            and roe.rme_id = i_roe_rme_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_roe(i_roe_nde_id => i_roe_nde_id, i_roe_pon_id => i_roe_pon_id, i_roe_rme_id => i_roe_rme_id);
         fetch c_roe into o_rt_roe;
         l_found := c_roe%found;
         close c_roe;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_roe%isopen
      then
         close c_roe;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end roe_select_row_uk1;

function roe_select_row_upd( i_roe_id   in  lm_routes.id%type
                           , o_rt_roe   out lm_routes%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.roe_select_row_upd';
   l_found                boolean      := false;

   cursor c_roe ( i_roe_id   in  lm_routes.id%type )
   is
           select *
             from lm_routes roe
            where roe.id = i_roe_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_roe( i_roe_id => i_roe_id );
   fetch c_roe into o_rt_roe;
   l_found := c_roe%found;
   close c_roe;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_roe%isopen
      then
         close c_roe;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end roe_select_row_upd;

function roe_select_row_upd_uk1( i_roe_nde_id   in  lm_routes.nde_id%type
                               , i_roe_pon_id   in  lm_routes.pon_id%type
                               , i_roe_rme_id   in  lm_routes.rme_id%type
                               , o_rt_roe  out lm_routes%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.roe_select_row_upd_uk1';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := roe_select_row_uk1( i_roe_nde_id   =>  i_roe_nde_id
                                   , i_roe_pon_id   =>  i_roe_pon_id
                                   , i_roe_rme_id   =>  i_roe_rme_id
                                   , o_rt_roe => o_rt_roe );
      if l_found
      then
         
         l_found := roe_select_row_upd( i_roe_id => o_rt_roe.id
                                      , o_rt_roe => o_rt_roe );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end roe_select_row_upd_uk1;

procedure roe_lock_row( i_roe_id   in  lm_routes.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.roe_lock_row';
begin
  declare
     cursor c_roe ( i_roe_id   in  lm_routes.id%type )
     is
             select ''
               from lm_routes roe
              where roe.id = i_roe_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_roe_id is not null
         then
            begin
                
                roe_lock_row_nowait( i_roe_id => i_roe_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_roe( i_roe_id => i_roe_id );
                  close c_roe;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_roe%isopen
         then
            close c_roe;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end roe_lock_row;

procedure roe_lock_row_nowait( i_roe_id   in  lm_routes.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.roe_lock_row_nowait';
begin
   declare
      cursor c_roe ( i_roe_id   in  lm_routes.id%type )
      is
              select ''
                from lm_routes roe
               where roe.id = i_roe_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_roe_id is not null
         then
            
            open c_roe( i_roe_id => i_roe_id );

            close c_roe;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_roe%isopen
        then
           close c_roe;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_roe_id||'"' );
   end;                                                          
end roe_lock_row_nowait;

function roe_perform_update( i_roe_id   in     lm_routes.id%type
                           , io_rt_roe  in out lm_routes%rowtype )
return number
;

function roe_perform_delete( i_roe_id   in  lm_routes.id%type )
return boolean
;

procedure roe_insert_row ( io_rt_roe  in out lm_routes%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.roe_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into lm_routes( id
                                , nde_id
                                , pon_id
                                , rme_id
                                , ind_dirty
                                , total_travel_time
                                , travel_time_to_next_rep_node )
              values ( io_rt_roe.id
                     , io_rt_roe.nde_id
                     , io_rt_roe.pon_id
                     , io_rt_roe.rme_id
                     , io_rt_roe.ind_dirty
                     , io_rt_roe.total_travel_time
                     , io_rt_roe.travel_time_to_next_rep_node )
           returning id
                   , nde_id
                   , pon_id
                   , rme_id
                   , ind_dirty
                   , total_travel_time
                   , travel_time_to_next_rep_node
                into io_rt_roe.id
                   , io_rt_roe.nde_id
                   , io_rt_roe.pon_id
                   , io_rt_roe.rme_id
                   , io_rt_roe.ind_dirty
                   , io_rt_roe.total_travel_time
                   , io_rt_roe.travel_time_to_next_rep_node;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_roe.id||'"'
                                                             ||', NDE_ID = "'||io_rt_roe.nde_id||'"'
                                                             ||', PON_ID = "'||io_rt_roe.pon_id||'"'
                                                             ||', RME_ID = "'||io_rt_roe.rme_id||'"'
                                                             ||', IND_DIRTY = "'||io_rt_roe.ind_dirty||'"'
                                                             ||', TOTAL_TRAVEL_TIME = "'||io_rt_roe.total_travel_time||'"'
                                                             ||', TRAVEL_TIME_TO_NEXT_REP_NODE = "'||io_rt_roe.travel_time_to_next_rep_node||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end roe_insert_row;

function roe_perform_update( i_roe_id   in     lm_routes.id%type
                           , io_rt_roe  in out lm_routes%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.roe_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update lm_routes
            set id = io_rt_roe.id
              , nde_id = io_rt_roe.nde_id
              , pon_id = io_rt_roe.pon_id
              , rme_id = io_rt_roe.rme_id
              , ind_dirty = io_rt_roe.ind_dirty
              , total_travel_time = io_rt_roe.total_travel_time
              , travel_time_to_next_rep_node = io_rt_roe.travel_time_to_next_rep_node
          where id = i_roe_id
      returning id
              , nde_id
              , pon_id
              , rme_id
              , ind_dirty
              , total_travel_time
              , travel_time_to_next_rep_node
           into io_rt_roe.id
              , io_rt_roe.nde_id
              , io_rt_roe.pon_id
              , io_rt_roe.rme_id
              , io_rt_roe.ind_dirty
              , io_rt_roe.total_travel_time
              , io_rt_roe.travel_time_to_next_rep_node;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_roe.id||'"'
                                                             ||', NDE_ID = "'||io_rt_roe.nde_id||'"'
                                                             ||', PON_ID = "'||io_rt_roe.pon_id||'"'
                                                             ||', RME_ID = "'||io_rt_roe.rme_id||'"'
                                                             ||', IND_DIRTY = "'||io_rt_roe.ind_dirty||'"'
                                                             ||', TOTAL_TRAVEL_TIME = "'||io_rt_roe.total_travel_time||'"'
                                                             ||', TRAVEL_TIME_TO_NEXT_REP_NODE = "'||io_rt_roe.travel_time_to_next_rep_node||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end roe_perform_update;

function roe_perform_delete( i_roe_id   in  lm_routes.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.roe_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from lm_routes
          where id = i_roe_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_roe_id||'"' );
   end;                                                          
end roe_perform_delete;

function roe_update_row( i_roe_id   in     lm_routes.id%type
                       , io_rt_roe  in out lm_routes%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.roe_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         roe_lock_row( i_roe_id   =>  i_roe_id );

         
         l_rowcount := 
            roe_perform_update( i_roe_id   =>  i_roe_id
                              , io_rt_roe  => io_rt_roe );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_roe.id||'"'
                                                          ||', NDE_ID = "'||io_rt_roe.nde_id||'"'
                                                          ||', PON_ID = "'||io_rt_roe.pon_id||'"'
                                                          ||', RME_ID = "'||io_rt_roe.rme_id||'"'
                                                          ||', IND_DIRTY = "'||io_rt_roe.ind_dirty||'"'
                                                          ||', TOTAL_TRAVEL_TIME = "'||io_rt_roe.total_travel_time||'"'
                                                          ||', TRAVEL_TIME_TO_NEXT_REP_NODE = "'||io_rt_roe.travel_time_to_next_rep_node||'"'                                                           , 1, 4000));
   end;                                                          
end roe_update_row;

function roe_delete_row( i_roe_id   in  lm_routes.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.roe_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         roe_lock_row( i_roe_id   =>  i_roe_id );

         
         l_deleted := roe_perform_delete( i_roe_id   =>  i_roe_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_roe_id||'"' );
   end;                                                          
end roe_delete_row;

function roe_seq1_nextval
return lm_routes.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.roe_seq1_nextval';
   l_roe_id  lm_routes.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select lm_roe_seq1.nextval 
           into l_roe_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_roe_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end roe_seq1_nextval;


end lm_roe_tapi_pck;
/
