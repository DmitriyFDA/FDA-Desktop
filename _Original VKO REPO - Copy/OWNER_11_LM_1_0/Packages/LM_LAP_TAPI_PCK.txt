create or replace PACKAGE lm_lap_tapi_pck
IS
-- Table API package for table lm_ebs_lane_groups
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:10)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'LM_LAP_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'LM_EBS_LANE_GROUPS';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION lap_select_row( i_lap_ID   IN  lm_ebs_lane_groups.ID%TYPE
                       , o_rt_lap   OUT lm_ebs_lane_groups%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION lap_select_row_uk1( i_lap_NAME   IN  lm_ebs_lane_groups.NAME%TYPE
                           , o_rt_lap  OUT lm_ebs_lane_groups%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION lap_select_row_uk2( i_lap_DESCRIPTION   IN  lm_ebs_lane_groups.DESCRIPTION%TYPE
                           , o_rt_lap  OUT lm_ebs_lane_groups%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION lap_select_row_upd( i_lap_ID   IN  lm_ebs_lane_groups.ID%TYPE
                           , o_rt_lap   OUT lm_ebs_lane_groups%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION lap_select_row_upd_uk1( i_lap_NAME   IN  lm_ebs_lane_groups.NAME%TYPE
                               , o_rt_lap  OUT lm_ebs_lane_groups%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION lap_select_row_upd_uk2( i_lap_DESCRIPTION   IN  lm_ebs_lane_groups.DESCRIPTION%TYPE
                               , o_rt_lap  OUT lm_ebs_lane_groups%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE lap_lock_row( i_lap_ID   IN  lm_ebs_lane_groups.ID%TYPE )
;

PROCEDURE lap_lock_row_nowait( i_lap_ID   IN  lm_ebs_lane_groups.ID%TYPE )
;

PROCEDURE lap_insert_row ( io_rt_lap  IN OUT lm_ebs_lane_groups%ROWTYPE )
;

FUNCTION lap_update_row( i_lap_ID   IN     lm_ebs_lane_groups.ID%TYPE
                       , io_rt_lap  IN OUT lm_ebs_lane_groups%ROWTYPE )
RETURN NUMBER
;

FUNCTION lap_delete_row( i_lap_ID   IN  lm_ebs_lane_groups.ID%TYPE )
RETURN BOOLEAN
;


END lm_lap_tapi_pck;
/


Unwrap It!
Unwrap More Code

package body lm_lap_tapi_pck
is




function lap_select_row( i_lap_id   in  lm_ebs_lane_groups.id%type
                       , o_rt_lap   out lm_ebs_lane_groups%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lap_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_lap ( i_lap_id   in  lm_ebs_lane_groups.id%type )
      is 
           select *
             from lm_ebs_lane_groups lap
            where lap.id = i_lap_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_lap( i_lap_id => i_lap_id );
         fetch c_lap into o_rt_lap;
         l_found := c_lap%found;
         close c_lap;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_lap%isopen
         then
            close c_lap;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end lap_select_row;

function lap_select_row_uk1( i_lap_name   in  lm_ebs_lane_groups.name%type
                           , o_rt_lap  out lm_ebs_lane_groups%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lap_select_row_uk1';
   l_found                boolean      := false;
begin
   declare
      cursor c_lap ( i_lap_name   in  lm_ebs_lane_groups.name%type )
      is
         select *
           from lm_ebs_lane_groups lap
          where lap.name = i_lap_name ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_lap(i_lap_name => i_lap_name);
         fetch c_lap into o_rt_lap;
         l_found := c_lap%found;
         close c_lap;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_lap%isopen
      then
         close c_lap;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end lap_select_row_uk1;

function lap_select_row_uk2( i_lap_description   in  lm_ebs_lane_groups.description%type
                           , o_rt_lap  out lm_ebs_lane_groups%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lap_select_row_uk2';
   l_found                boolean      := false;
begin
   declare
      cursor c_lap ( i_lap_description   in  lm_ebs_lane_groups.description%type )
      is
         select *
           from lm_ebs_lane_groups lap
          where lap.description = i_lap_description ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_lap(i_lap_description => i_lap_description);
         fetch c_lap into o_rt_lap;
         l_found := c_lap%found;
         close c_lap;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_lap%isopen
      then
         close c_lap;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end lap_select_row_uk2;

function lap_select_row_upd( i_lap_id   in  lm_ebs_lane_groups.id%type
                           , o_rt_lap   out lm_ebs_lane_groups%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lap_select_row_upd';
   l_found                boolean      := false;

   cursor c_lap ( i_lap_id   in  lm_ebs_lane_groups.id%type )
   is
           select *
             from lm_ebs_lane_groups lap
            where lap.id = i_lap_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_lap( i_lap_id => i_lap_id );
   fetch c_lap into o_rt_lap;
   l_found := c_lap%found;
   close c_lap;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_lap%isopen
      then
         close c_lap;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end lap_select_row_upd;

function lap_select_row_upd_uk1( i_lap_name   in  lm_ebs_lane_groups.name%type
                               , o_rt_lap  out lm_ebs_lane_groups%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lap_select_row_upd_uk1';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := lap_select_row_uk1( i_lap_name   =>  i_lap_name
                                   , o_rt_lap => o_rt_lap );
      if l_found
      then
         
         l_found := lap_select_row_upd( i_lap_id => o_rt_lap.id
                                      , o_rt_lap => o_rt_lap );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end lap_select_row_upd_uk1;

function lap_select_row_upd_uk2( i_lap_description   in  lm_ebs_lane_groups.description%type
                               , o_rt_lap  out lm_ebs_lane_groups%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lap_select_row_upd_uk2';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := lap_select_row_uk2( i_lap_description   =>  i_lap_description
                                   , o_rt_lap => o_rt_lap );
      if l_found
      then
         
         l_found := lap_select_row_upd( i_lap_id => o_rt_lap.id
                                      , o_rt_lap => o_rt_lap );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end lap_select_row_upd_uk2;

procedure lap_lock_row( i_lap_id   in  lm_ebs_lane_groups.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lap_lock_row';
begin
  declare
     cursor c_lap ( i_lap_id   in  lm_ebs_lane_groups.id%type )
     is
             select ''
               from lm_ebs_lane_groups lap
              where lap.id = i_lap_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_lap_id is not null
         then
            begin
                
                lap_lock_row_nowait( i_lap_id => i_lap_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_lap( i_lap_id => i_lap_id );
                  close c_lap;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_lap%isopen
         then
            close c_lap;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end lap_lock_row;

procedure lap_lock_row_nowait( i_lap_id   in  lm_ebs_lane_groups.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lap_lock_row_nowait';
begin
   declare
      cursor c_lap ( i_lap_id   in  lm_ebs_lane_groups.id%type )
      is
              select ''
                from lm_ebs_lane_groups lap
               where lap.id = i_lap_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_lap_id is not null
         then
            
            open c_lap( i_lap_id => i_lap_id );

            close c_lap;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_lap%isopen
        then
           close c_lap;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_lap_id||'"' );
   end;                                                          
end lap_lock_row_nowait;

function lap_perform_update( i_lap_id   in     lm_ebs_lane_groups.id%type
                           , io_rt_lap  in out lm_ebs_lane_groups%rowtype )
return number
;

function lap_perform_delete( i_lap_id   in  lm_ebs_lane_groups.id%type )
return boolean
;

procedure lap_insert_row ( io_rt_lap  in out lm_ebs_lane_groups%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lap_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into lm_ebs_lane_groups( id
                                , name
                                , description
                                , tdn_id
                                , pcm_name
                                , priority
                                , maximum_allocable_lanes
                                , release_lane_threshold_pct
                                , force_release_time_limit
                                , offset
                                , time_window
                                , number_of_timeslots )
              values ( io_rt_lap.id
                     , io_rt_lap.name
                     , io_rt_lap.description
                     , io_rt_lap.tdn_id
                     , io_rt_lap.pcm_name
                     , io_rt_lap.priority
                     , io_rt_lap.maximum_allocable_lanes
                     , io_rt_lap.release_lane_threshold_pct
                     , io_rt_lap.force_release_time_limit
                     , io_rt_lap.offset
                     , io_rt_lap.time_window
                     , io_rt_lap.number_of_timeslots )
           returning id
                   , name
                   , description
                   , tdn_id
                   , pcm_name
                   , priority
                   , maximum_allocable_lanes
                   , release_lane_threshold_pct
                   , force_release_time_limit
                   , offset
                   , time_window
                   , number_of_timeslots
                into io_rt_lap.id
                   , io_rt_lap.name
                   , io_rt_lap.description
                   , io_rt_lap.tdn_id
                   , io_rt_lap.pcm_name
                   , io_rt_lap.priority
                   , io_rt_lap.maximum_allocable_lanes
                   , io_rt_lap.release_lane_threshold_pct
                   , io_rt_lap.force_release_time_limit
                   , io_rt_lap.offset
                   , io_rt_lap.time_window
                   , io_rt_lap.number_of_timeslots;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_lap.id||'"'
                                                             ||', NAME = "'||io_rt_lap.name||'"'
                                                             ||', DESCRIPTION = "'||io_rt_lap.description||'"'
                                                             ||', TDN_ID = "'||io_rt_lap.tdn_id||'"'
                                                             ||', PCM_NAME = "'||io_rt_lap.pcm_name||'"'
                                                             ||', PRIORITY = "'||io_rt_lap.priority||'"'
                                                             ||', MAXIMUM_ALLOCABLE_LANES = "'||io_rt_lap.maximum_allocable_lanes||'"'
                                                             ||', RELEASE_LANE_THRESHOLD_PCT = "'||io_rt_lap.release_lane_threshold_pct||'"'
                                                             ||', FORCE_RELEASE_TIME_LIMIT = "'||io_rt_lap.force_release_time_limit||'"'
                                                             ||', OFFSET = "'||io_rt_lap.offset||'"'
                                                             ||', TIME_WINDOW = "'||io_rt_lap.time_window||'"'
                                                             ||', NUMBER_OF_TIMESLOTS = "'||io_rt_lap.number_of_timeslots||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end lap_insert_row;

function lap_perform_update( i_lap_id   in     lm_ebs_lane_groups.id%type
                           , io_rt_lap  in out lm_ebs_lane_groups%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lap_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update lm_ebs_lane_groups
            set id = io_rt_lap.id
              , name = io_rt_lap.name
              , description = io_rt_lap.description
              , tdn_id = io_rt_lap.tdn_id
              , pcm_name = io_rt_lap.pcm_name
              , priority = io_rt_lap.priority
              , maximum_allocable_lanes = io_rt_lap.maximum_allocable_lanes
              , release_lane_threshold_pct = io_rt_lap.release_lane_threshold_pct
              , force_release_time_limit = io_rt_lap.force_release_time_limit
              , offset = io_rt_lap.offset
              , time_window = io_rt_lap.time_window
              , number_of_timeslots = io_rt_lap.number_of_timeslots
          where id = i_lap_id
      returning id
              , name
              , description
              , tdn_id
              , pcm_name
              , priority
              , maximum_allocable_lanes
              , release_lane_threshold_pct
              , force_release_time_limit
              , offset
              , time_window
              , number_of_timeslots
           into io_rt_lap.id
              , io_rt_lap.name
              , io_rt_lap.description
              , io_rt_lap.tdn_id
              , io_rt_lap.pcm_name
              , io_rt_lap.priority
              , io_rt_lap.maximum_allocable_lanes
              , io_rt_lap.release_lane_threshold_pct
              , io_rt_lap.force_release_time_limit
              , io_rt_lap.offset
              , io_rt_lap.time_window
              , io_rt_lap.number_of_timeslots;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_lap.id||'"'
                                                             ||', NAME = "'||io_rt_lap.name||'"'
                                                             ||', DESCRIPTION = "'||io_rt_lap.description||'"'
                                                             ||', TDN_ID = "'||io_rt_lap.tdn_id||'"'
                                                             ||', PCM_NAME = "'||io_rt_lap.pcm_name||'"'
                                                             ||', PRIORITY = "'||io_rt_lap.priority||'"'
                                                             ||', MAXIMUM_ALLOCABLE_LANES = "'||io_rt_lap.maximum_allocable_lanes||'"'
                                                             ||', RELEASE_LANE_THRESHOLD_PCT = "'||io_rt_lap.release_lane_threshold_pct||'"'
                                                             ||', FORCE_RELEASE_TIME_LIMIT = "'||io_rt_lap.force_release_time_limit||'"'
                                                             ||', OFFSET = "'||io_rt_lap.offset||'"'
                                                             ||', TIME_WINDOW = "'||io_rt_lap.time_window||'"'
                                                             ||', NUMBER_OF_TIMESLOTS = "'||io_rt_lap.number_of_timeslots||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end lap_perform_update;

function lap_perform_delete( i_lap_id   in  lm_ebs_lane_groups.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lap_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from lm_ebs_lane_groups
          where id = i_lap_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_lap_id||'"' );
   end;                                                          
end lap_perform_delete;

function lap_update_row( i_lap_id   in     lm_ebs_lane_groups.id%type
                       , io_rt_lap  in out lm_ebs_lane_groups%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lap_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         lap_lock_row( i_lap_id   =>  i_lap_id );

         
         l_rowcount := 
            lap_perform_update( i_lap_id   =>  i_lap_id
                              , io_rt_lap  => io_rt_lap );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_lap.id||'"'
                                                          ||', NAME = "'||io_rt_lap.name||'"'
                                                          ||', DESCRIPTION = "'||io_rt_lap.description||'"'
                                                          ||', TDN_ID = "'||io_rt_lap.tdn_id||'"'
                                                          ||', PCM_NAME = "'||io_rt_lap.pcm_name||'"'
                                                          ||', PRIORITY = "'||io_rt_lap.priority||'"'
                                                          ||', MAXIMUM_ALLOCABLE_LANES = "'||io_rt_lap.maximum_allocable_lanes||'"'
                                                          ||', RELEASE_LANE_THRESHOLD_PCT = "'||io_rt_lap.release_lane_threshold_pct||'"'
                                                          ||', FORCE_RELEASE_TIME_LIMIT = "'||io_rt_lap.force_release_time_limit||'"'
                                                          ||', OFFSET = "'||io_rt_lap.offset||'"'
                                                          ||', TIME_WINDOW = "'||io_rt_lap.time_window||'"'
                                                          ||', NUMBER_OF_TIMESLOTS = "'||io_rt_lap.number_of_timeslots||'"'                                                           , 1, 4000));
   end;                                                          
end lap_update_row;

function lap_delete_row( i_lap_id   in  lm_ebs_lane_groups.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lap_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         lap_lock_row( i_lap_id   =>  i_lap_id );

         
         l_deleted := lap_perform_delete( i_lap_id   =>  i_lap_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_lap_id||'"' );
   end;                                                          
end lap_delete_row;


end lm_lap_tapi_pck;
/