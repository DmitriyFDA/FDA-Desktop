create or replace PACKAGE lm_dpy_tapi_pck
IS
-- Table API package for table lm_destination_proximities
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:09)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'LM_DPY_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'LM_DESTINATION_PROXIMITIES';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION dpy_select_row( i_dpy_RST_ID   IN  lm_destination_proximities.RST_ID%TYPE
 , i_dpy_PON_ID   IN  lm_destination_proximities.PON_ID%TYPE
                       , o_rt_dpy   OUT lm_destination_proximities%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION dpy_select_row_upd( i_dpy_RST_ID   IN  lm_destination_proximities.RST_ID%TYPE
                           , i_dpy_PON_ID   IN  lm_destination_proximities.PON_ID%TYPE
                           , o_rt_dpy   OUT lm_destination_proximities%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE dpy_lock_row( i_dpy_RST_ID   IN  lm_destination_proximities.RST_ID%TYPE
 , i_dpy_PON_ID   IN  lm_destination_proximities.PON_ID%TYPE )
;

PROCEDURE dpy_lock_row_nowait( i_dpy_RST_ID   IN  lm_destination_proximities.RST_ID%TYPE
 , i_dpy_PON_ID   IN  lm_destination_proximities.PON_ID%TYPE )
;


END lm_dpy_tapi_pck;
/




package body lm_dpy_tapi_pck
is




function dpy_select_row( i_dpy_rst_id   in  lm_destination_proximities.rst_id%type
 , i_dpy_pon_id   in  lm_destination_proximities.pon_id%type
                       , o_rt_dpy   out lm_destination_proximities%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.dpy_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_dpy ( i_dpy_rst_id   in  lm_destination_proximities.rst_id%type
 , i_dpy_pon_id   in  lm_destination_proximities.pon_id%type )
      is 
           select *
             from lm_destination_proximities dpy
            where dpy.rst_id = i_dpy_rst_id 
              and dpy.pon_id = i_dpy_pon_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_dpy( i_dpy_rst_id => i_dpy_rst_id, i_dpy_pon_id => i_dpy_pon_id );
         fetch c_dpy into o_rt_dpy;
         l_found := c_dpy%found;
         close c_dpy;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_dpy%isopen
         then
            close c_dpy;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end dpy_select_row;

function dpy_select_row_upd( i_dpy_rst_id   in  lm_destination_proximities.rst_id%type
                           , i_dpy_pon_id   in  lm_destination_proximities.pon_id%type
                           , o_rt_dpy   out lm_destination_proximities%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.dpy_select_row_upd';
   l_found                boolean      := false;

   cursor c_dpy ( i_dpy_rst_id   in  lm_destination_proximities.rst_id%type
                , i_dpy_pon_id   in  lm_destination_proximities.pon_id%type )
   is
           select *
             from lm_destination_proximities dpy
            where dpy.rst_id = i_dpy_rst_id 
                and dpy.pon_id = i_dpy_pon_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_dpy( i_dpy_rst_id => i_dpy_rst_id
, i_dpy_pon_id => i_dpy_pon_id );
   fetch c_dpy into o_rt_dpy;
   l_found := c_dpy%found;
   close c_dpy;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_dpy%isopen
      then
         close c_dpy;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end dpy_select_row_upd;

procedure dpy_lock_row( i_dpy_rst_id   in  lm_destination_proximities.rst_id%type
 , i_dpy_pon_id   in  lm_destination_proximities.pon_id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.dpy_lock_row';
begin
  declare
     cursor c_dpy ( i_dpy_rst_id   in  lm_destination_proximities.rst_id%type
 , i_dpy_pon_id   in  lm_destination_proximities.pon_id%type )
     is
             select ''
               from lm_destination_proximities dpy
              where dpy.rst_id = i_dpy_rst_id 
                and dpy.pon_id = i_dpy_pon_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_dpy_rst_id is not null
            or i_dpy_pon_id is not null
         then
            begin
                
                dpy_lock_row_nowait( i_dpy_rst_id => i_dpy_rst_id
, i_dpy_pon_id => i_dpy_pon_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_dpy( i_dpy_rst_id => i_dpy_rst_id, i_dpy_pon_id => i_dpy_pon_id );
                  close c_dpy;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_dpy%isopen
         then
            close c_dpy;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end dpy_lock_row;

procedure dpy_lock_row_nowait( i_dpy_rst_id   in  lm_destination_proximities.rst_id%type
 , i_dpy_pon_id   in  lm_destination_proximities.pon_id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.dpy_lock_row_nowait';
begin
   declare
      cursor c_dpy ( i_dpy_rst_id   in  lm_destination_proximities.rst_id%type
 , i_dpy_pon_id   in  lm_destination_proximities.pon_id%type )
      is
              select ''
                from lm_destination_proximities dpy
               where dpy.rst_id = i_dpy_rst_id 
                 and dpy.pon_id = i_dpy_pon_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_dpy_rst_id is not null
         or i_dpy_pon_id is not null
         then
            
            open c_dpy( i_dpy_rst_id => i_dpy_rst_id, i_dpy_pon_id => i_dpy_pon_id );

            close c_dpy;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_dpy%isopen
        then
           close c_dpy;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'RST_ID = "'||i_dpy_rst_id||'"'
                                                       ||', PON_ID = "'||i_dpy_pon_id||'"' );
   end;                                                          
end dpy_lock_row_nowait;


end lm_dpy_tapi_pck;
/