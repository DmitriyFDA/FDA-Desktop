create or replace PACKAGE lm_rde_tapi_pck
IS
-- Table API package for table lm_rse_determined_preferences
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:17)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'LM_RDE_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'LM_RSE_DETERMINED_PREFERENCES';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION rde_select_row( i_rde_RSE_ID   IN  lm_rse_determined_preferences.RSE_ID%TYPE
                       , o_rt_rde   OUT lm_rse_determined_preferences%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION rde_select_row_upd( i_rde_RSE_ID   IN  lm_rse_determined_preferences.RSE_ID%TYPE
                           , o_rt_rde   OUT lm_rse_determined_preferences%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE rde_lock_row( i_rde_RSE_ID   IN  lm_rse_determined_preferences.RSE_ID%TYPE )
;

PROCEDURE rde_lock_row_nowait( i_rde_RSE_ID   IN  lm_rse_determined_preferences.RSE_ID%TYPE )
;

PROCEDURE rde_insert_row ( io_rt_rde  IN OUT lm_rse_determined_preferences%ROWTYPE )
;

FUNCTION rde_update_row( i_rde_RSE_ID   IN     lm_rse_determined_preferences.RSE_ID%TYPE
                       , io_rt_rde  IN OUT lm_rse_determined_preferences%ROWTYPE )
RETURN NUMBER
;

FUNCTION rde_delete_row( i_rde_RSE_ID   IN  lm_rse_determined_preferences.RSE_ID%TYPE )
RETURN BOOLEAN
;


END lm_rde_tapi_pck;
/




package body lm_rde_tapi_pck
is




function rde_select_row( i_rde_rse_id   in  lm_rse_determined_preferences.rse_id%type
                       , o_rt_rde   out lm_rse_determined_preferences%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rde_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_rde ( i_rde_rse_id   in  lm_rse_determined_preferences.rse_id%type )
      is 
           select *
             from lm_rse_determined_preferences rde
            where rde.rse_id = i_rde_rse_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_rde( i_rde_rse_id => i_rde_rse_id );
         fetch c_rde into o_rt_rde;
         l_found := c_rde%found;
         close c_rde;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_rde%isopen
         then
            close c_rde;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end rde_select_row;

function rde_select_row_upd( i_rde_rse_id   in  lm_rse_determined_preferences.rse_id%type
                           , o_rt_rde   out lm_rse_determined_preferences%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rde_select_row_upd';
   l_found                boolean      := false;

   cursor c_rde ( i_rde_rse_id   in  lm_rse_determined_preferences.rse_id%type )
   is
           select *
             from lm_rse_determined_preferences rde
            where rde.rse_id = i_rde_rse_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_rde( i_rde_rse_id => i_rde_rse_id );
   fetch c_rde into o_rt_rde;
   l_found := c_rde%found;
   close c_rde;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_rde%isopen
      then
         close c_rde;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end rde_select_row_upd;

procedure rde_lock_row( i_rde_rse_id   in  lm_rse_determined_preferences.rse_id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rde_lock_row';
begin
  declare
     cursor c_rde ( i_rde_rse_id   in  lm_rse_determined_preferences.rse_id%type )
     is
             select ''
               from lm_rse_determined_preferences rde
              where rde.rse_id = i_rde_rse_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_rde_rse_id is not null
         then
            begin
                
                rde_lock_row_nowait( i_rde_rse_id => i_rde_rse_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_rde( i_rde_rse_id => i_rde_rse_id );
                  close c_rde;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_rde%isopen
         then
            close c_rde;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end rde_lock_row;

procedure rde_lock_row_nowait( i_rde_rse_id   in  lm_rse_determined_preferences.rse_id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rde_lock_row_nowait';
begin
   declare
      cursor c_rde ( i_rde_rse_id   in  lm_rse_determined_preferences.rse_id%type )
      is
              select ''
                from lm_rse_determined_preferences rde
               where rde.rse_id = i_rde_rse_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_rde_rse_id is not null
         then
            
            open c_rde( i_rde_rse_id => i_rde_rse_id );

            close c_rde;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_rde%isopen
        then
           close c_rde;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'RSE_ID = "'||i_rde_rse_id||'"' );
   end;                                                          
end rde_lock_row_nowait;

function rde_perform_update( i_rde_rse_id   in     lm_rse_determined_preferences.rse_id%type
                           , io_rt_rde  in out lm_rse_determined_preferences%rowtype )
return number
;

function rde_perform_delete( i_rde_rse_id   in  lm_rse_determined_preferences.rse_id%type )
return boolean
;

procedure rde_insert_row ( io_rt_rde  in out lm_rse_determined_preferences%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rde_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into lm_rse_determined_preferences( rse_id
                                , value
                                , ind_dirty )
              values ( io_rt_rde.rse_id
                     , io_rt_rde.value
                     , io_rt_rde.ind_dirty )
           returning rse_id
                   , value
                   , ind_dirty
                into io_rt_rde.rse_id
                   , io_rt_rde.value
                   , io_rt_rde.ind_dirty;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('RSE_ID = "'||io_rt_rde.rse_id||'"'
                                                             ||', VALUE = "'||io_rt_rde.value||'"'
                                                             ||', IND_DIRTY = "'||io_rt_rde.ind_dirty||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end rde_insert_row;

function rde_perform_update( i_rde_rse_id   in     lm_rse_determined_preferences.rse_id%type
                           , io_rt_rde  in out lm_rse_determined_preferences%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rde_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update lm_rse_determined_preferences
            set rse_id = io_rt_rde.rse_id
              , value = io_rt_rde.value
              , ind_dirty = io_rt_rde.ind_dirty
          where rse_id = i_rde_rse_id
      returning rse_id
              , value
              , ind_dirty
           into io_rt_rde.rse_id
              , io_rt_rde.value
              , io_rt_rde.ind_dirty;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('RSE_ID = "'||io_rt_rde.rse_id||'"'
                                                             ||', VALUE = "'||io_rt_rde.value||'"'
                                                             ||', IND_DIRTY = "'||io_rt_rde.ind_dirty||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end rde_perform_update;

function rde_perform_delete( i_rde_rse_id   in  lm_rse_determined_preferences.rse_id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rde_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from lm_rse_determined_preferences
          where rse_id = i_rde_rse_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'RSE_ID = "'||i_rde_rse_id||'"' );
   end;                                                          
end rde_perform_delete;

function rde_update_row( i_rde_rse_id   in     lm_rse_determined_preferences.rse_id%type
                       , io_rt_rde  in out lm_rse_determined_preferences%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rde_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         rde_lock_row( i_rde_rse_id   =>  i_rde_rse_id );

         
         l_rowcount := 
            rde_perform_update( i_rde_rse_id   =>  i_rde_rse_id
                              , io_rt_rde  => io_rt_rde );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('RSE_ID = "'||io_rt_rde.rse_id||'"'
                                                          ||', VALUE = "'||io_rt_rde.value||'"'
                                                          ||', IND_DIRTY = "'||io_rt_rde.ind_dirty||'"'                                                           , 1, 4000));
   end;                                                          
end rde_update_row;

function rde_delete_row( i_rde_rse_id   in  lm_rse_determined_preferences.rse_id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rde_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         rde_lock_row( i_rde_rse_id   =>  i_rde_rse_id );

         
         l_deleted := rde_perform_delete( i_rde_rse_id   =>  i_rde_rse_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'RSE_ID = "'||i_rde_rse_id||'"' );
   end;                                                          
end rde_delete_row;


end lm_rde_tapi_pck;
/