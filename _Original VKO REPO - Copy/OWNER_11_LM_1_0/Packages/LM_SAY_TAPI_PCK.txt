create or replace PACKAGE lm_say_tapi_pck
IS
-- Table API package for table lm_station_availabilities
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:17)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'LM_SAY_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'LM_STATION_AVAILABILITIES';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION say_select_row( i_say_STN_ID   IN  lm_station_availabilities.STN_ID%TYPE
                       , o_rt_say   OUT lm_station_availabilities%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION say_select_row_upd( i_say_STN_ID   IN  lm_station_availabilities.STN_ID%TYPE
                           , o_rt_say   OUT lm_station_availabilities%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE say_lock_row( i_say_STN_ID   IN  lm_station_availabilities.STN_ID%TYPE )
;

PROCEDURE say_lock_row_nowait( i_say_STN_ID   IN  lm_station_availabilities.STN_ID%TYPE )
;

PROCEDURE say_insert_row ( io_rt_say  IN OUT lm_station_availabilities%ROWTYPE )
;

FUNCTION say_update_row( i_say_STN_ID   IN     lm_station_availabilities.STN_ID%TYPE
                       , io_rt_say  IN OUT lm_station_availabilities%ROWTYPE )
RETURN NUMBER
;

FUNCTION say_delete_row( i_say_STN_ID   IN  lm_station_availabilities.STN_ID%TYPE )
RETURN BOOLEAN
;


END lm_say_tapi_pck;
/




package body lm_say_tapi_pck
is




function say_select_row( i_say_stn_id   in  lm_station_availabilities.stn_id%type
                       , o_rt_say   out lm_station_availabilities%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.say_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_say ( i_say_stn_id   in  lm_station_availabilities.stn_id%type )
      is 
           select *
             from lm_station_availabilities say
            where say.stn_id = i_say_stn_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_say( i_say_stn_id => i_say_stn_id );
         fetch c_say into o_rt_say;
         l_found := c_say%found;
         close c_say;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_say%isopen
         then
            close c_say;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end say_select_row;

function say_select_row_upd( i_say_stn_id   in  lm_station_availabilities.stn_id%type
                           , o_rt_say   out lm_station_availabilities%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.say_select_row_upd';
   l_found                boolean      := false;

   cursor c_say ( i_say_stn_id   in  lm_station_availabilities.stn_id%type )
   is
           select *
             from lm_station_availabilities say
            where say.stn_id = i_say_stn_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_say( i_say_stn_id => i_say_stn_id );
   fetch c_say into o_rt_say;
   l_found := c_say%found;
   close c_say;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_say%isopen
      then
         close c_say;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end say_select_row_upd;

procedure say_lock_row( i_say_stn_id   in  lm_station_availabilities.stn_id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.say_lock_row';
begin
  declare
     cursor c_say ( i_say_stn_id   in  lm_station_availabilities.stn_id%type )
     is
             select ''
               from lm_station_availabilities say
              where say.stn_id = i_say_stn_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_say_stn_id is not null
         then
            begin
                
                say_lock_row_nowait( i_say_stn_id => i_say_stn_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_say( i_say_stn_id => i_say_stn_id );
                  close c_say;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_say%isopen
         then
            close c_say;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end say_lock_row;

procedure say_lock_row_nowait( i_say_stn_id   in  lm_station_availabilities.stn_id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.say_lock_row_nowait';
begin
   declare
      cursor c_say ( i_say_stn_id   in  lm_station_availabilities.stn_id%type )
      is
              select ''
                from lm_station_availabilities say
               where say.stn_id = i_say_stn_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_say_stn_id is not null
         then
            
            open c_say( i_say_stn_id => i_say_stn_id );

            close c_say;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_say%isopen
        then
           close c_say;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'STN_ID = "'||i_say_stn_id||'"' );
   end;                                                          
end say_lock_row_nowait;

function say_perform_update( i_say_stn_id   in     lm_station_availabilities.stn_id%type
                           , io_rt_say  in out lm_station_availabilities%rowtype )
return number
;

function say_perform_delete( i_say_stn_id   in  lm_station_availabilities.stn_id%type )
return boolean
;

procedure say_insert_row ( io_rt_say  in out lm_station_availabilities%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.say_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into lm_station_availabilities( stn_id
                                , ssd_id
                                , sod_id
                                , event_time
                                , ind_available_derived
                                , timestamp_change
                                , ind_dirty
                                , function_mode )
              values ( io_rt_say.stn_id
                     , io_rt_say.ssd_id
                     , io_rt_say.sod_id
                     , io_rt_say.event_time
                     , io_rt_say.ind_available_derived
                     , io_rt_say.timestamp_change
                     , io_rt_say.ind_dirty
                     , io_rt_say.function_mode )
           returning stn_id
                   , ssd_id
                   , sod_id
                   , event_time
                   , ind_available_derived
                   , timestamp_change
                   , ind_dirty
                   , function_mode
                into io_rt_say.stn_id
                   , io_rt_say.ssd_id
                   , io_rt_say.sod_id
                   , io_rt_say.event_time
                   , io_rt_say.ind_available_derived
                   , io_rt_say.timestamp_change
                   , io_rt_say.ind_dirty
                   , io_rt_say.function_mode;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('STN_ID = "'||io_rt_say.stn_id||'"'
                                                             ||', SSD_ID = "'||io_rt_say.ssd_id||'"'
                                                             ||', SOD_ID = "'||io_rt_say.sod_id||'"'
                                                             ||', EVENT_TIME = "'||io_rt_say.event_time||'"'
                                                             ||', IND_AVAILABLE_DERIVED = "'||io_rt_say.ind_available_derived||'"'
                                                             ||', TIMESTAMP_CHANGE = "'||io_rt_say.timestamp_change||'"'
                                                             ||', IND_DIRTY = "'||io_rt_say.ind_dirty||'"'
                                                             ||', FUNCTION_MODE = "'||io_rt_say.function_mode||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end say_insert_row;

function say_perform_update( i_say_stn_id   in     lm_station_availabilities.stn_id%type
                           , io_rt_say  in out lm_station_availabilities%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.say_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update lm_station_availabilities
            set stn_id = io_rt_say.stn_id
              , ssd_id = io_rt_say.ssd_id
              , sod_id = io_rt_say.sod_id
              , event_time = io_rt_say.event_time
              , ind_available_derived = io_rt_say.ind_available_derived
              , timestamp_change = io_rt_say.timestamp_change
              , ind_dirty = io_rt_say.ind_dirty
              , function_mode = io_rt_say.function_mode
          where stn_id = i_say_stn_id
      returning stn_id
              , ssd_id
              , sod_id
              , event_time
              , ind_available_derived
              , timestamp_change
              , ind_dirty
              , function_mode
           into io_rt_say.stn_id
              , io_rt_say.ssd_id
              , io_rt_say.sod_id
              , io_rt_say.event_time
              , io_rt_say.ind_available_derived
              , io_rt_say.timestamp_change
              , io_rt_say.ind_dirty
              , io_rt_say.function_mode;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('STN_ID = "'||io_rt_say.stn_id||'"'
                                                             ||', SSD_ID = "'||io_rt_say.ssd_id||'"'
                                                             ||', SOD_ID = "'||io_rt_say.sod_id||'"'
                                                             ||', EVENT_TIME = "'||io_rt_say.event_time||'"'
                                                             ||', IND_AVAILABLE_DERIVED = "'||io_rt_say.ind_available_derived||'"'
                                                             ||', TIMESTAMP_CHANGE = "'||io_rt_say.timestamp_change||'"'
                                                             ||', IND_DIRTY = "'||io_rt_say.ind_dirty||'"'
                                                             ||', FUNCTION_MODE = "'||io_rt_say.function_mode||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end say_perform_update;

function say_perform_delete( i_say_stn_id   in  lm_station_availabilities.stn_id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.say_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from lm_station_availabilities
          where stn_id = i_say_stn_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'STN_ID = "'||i_say_stn_id||'"' );
   end;                                                          
end say_perform_delete;

function say_update_row( i_say_stn_id   in     lm_station_availabilities.stn_id%type
                       , io_rt_say  in out lm_station_availabilities%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.say_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         say_lock_row( i_say_stn_id   =>  i_say_stn_id );

         
         l_rowcount := 
            say_perform_update( i_say_stn_id   =>  i_say_stn_id
                              , io_rt_say  => io_rt_say );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('STN_ID = "'||io_rt_say.stn_id||'"'
                                                          ||', SSD_ID = "'||io_rt_say.ssd_id||'"'
                                                          ||', SOD_ID = "'||io_rt_say.sod_id||'"'
                                                          ||', EVENT_TIME = "'||io_rt_say.event_time||'"'
                                                          ||', IND_AVAILABLE_DERIVED = "'||io_rt_say.ind_available_derived||'"'
                                                          ||', TIMESTAMP_CHANGE = "'||io_rt_say.timestamp_change||'"'
                                                          ||', IND_DIRTY = "'||io_rt_say.ind_dirty||'"'
                                                          ||', FUNCTION_MODE = "'||io_rt_say.function_mode||'"'                                                           , 1, 4000));
   end;                                                          
end say_update_row;

function say_delete_row( i_say_stn_id   in  lm_station_availabilities.stn_id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.say_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         say_lock_row( i_say_stn_id   =>  i_say_stn_id );

         
         l_deleted := say_perform_delete( i_say_stn_id   =>  i_say_stn_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'STN_ID = "'||i_say_stn_id||'"' );
   end;                                                          
end say_delete_row;


end lm_say_tapi_pck;
/