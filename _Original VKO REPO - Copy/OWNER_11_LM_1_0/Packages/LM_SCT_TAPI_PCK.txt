create or replace PACKAGE lm_sct_tapi_pck
IS
-- Table API package for table lm_system_components
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:18)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'LM_SCT_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'LM_SYSTEM_COMPONENTS';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION sct_select_row( i_sct_ID   IN  lm_system_components.ID%TYPE
                       , o_rt_sct   OUT lm_system_components%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION sct_select_row_uk1( i_sct_SCT_TYPE   IN  lm_system_components.SCT_TYPE%TYPE
                           , i_sct_ID_CUST   IN  lm_system_components.ID_CUST%TYPE
                           , i_sct_SCT_ID_SECTION_ZONE   IN  lm_system_components.SCT_ID_SECTION_ZONE%TYPE
                           , i_sct_SCT_ID_ZONE_AREA   IN  lm_system_components.SCT_ID_ZONE_AREA%TYPE
                           , o_rt_sct  OUT lm_system_components%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION sct_select_row_uk2( i_sct_ID_CUST_FULL   IN  lm_system_components.ID_CUST_FULL%TYPE
                           , o_rt_sct  OUT lm_system_components%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION sct_select_row_upd( i_sct_ID   IN  lm_system_components.ID%TYPE
                           , o_rt_sct   OUT lm_system_components%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION sct_select_row_upd_uk1( i_sct_SCT_TYPE   IN  lm_system_components.SCT_TYPE%TYPE
                               , i_sct_ID_CUST   IN  lm_system_components.ID_CUST%TYPE
                               , i_sct_SCT_ID_SECTION_ZONE   IN  lm_system_components.SCT_ID_SECTION_ZONE%TYPE
                               , i_sct_SCT_ID_ZONE_AREA   IN  lm_system_components.SCT_ID_ZONE_AREA%TYPE
                               , o_rt_sct  OUT lm_system_components%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION sct_select_row_upd_uk2( i_sct_ID_CUST_FULL   IN  lm_system_components.ID_CUST_FULL%TYPE
                               , o_rt_sct  OUT lm_system_components%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE sct_lock_row( i_sct_ID   IN  lm_system_components.ID%TYPE )
;

PROCEDURE sct_lock_row_nowait( i_sct_ID   IN  lm_system_components.ID%TYPE )
;

PROCEDURE sct_insert_row ( io_rt_sct  IN OUT lm_system_components%ROWTYPE )
;

FUNCTION sct_update_row( i_sct_ID   IN     lm_system_components.ID%TYPE
                       , io_rt_sct  IN OUT lm_system_components%ROWTYPE )
RETURN NUMBER
;

FUNCTION sct_delete_row( i_sct_ID   IN  lm_system_components.ID%TYPE )
RETURN BOOLEAN
;


END lm_sct_tapi_pck;
/




package body lm_sct_tapi_pck
is




function sct_select_row( i_sct_id   in  lm_system_components.id%type
                       , o_rt_sct   out lm_system_components%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sct_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_sct ( i_sct_id   in  lm_system_components.id%type )
      is 
           select *
             from lm_system_components sct
            where sct.id = i_sct_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_sct( i_sct_id => i_sct_id );
         fetch c_sct into o_rt_sct;
         l_found := c_sct%found;
         close c_sct;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_sct%isopen
         then
            close c_sct;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end sct_select_row;

function sct_select_row_uk1( i_sct_sct_type   in  lm_system_components.sct_type%type
                           , i_sct_id_cust   in  lm_system_components.id_cust%type
                           , i_sct_sct_id_section_zone   in  lm_system_components.sct_id_section_zone%type
                           , i_sct_sct_id_zone_area   in  lm_system_components.sct_id_zone_area%type
                           , o_rt_sct  out lm_system_components%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sct_select_row_uk1';
   l_found                boolean      := false;
begin
   declare
      cursor c_sct ( i_sct_sct_type   in  lm_system_components.sct_type%type
                   , i_sct_id_cust   in  lm_system_components.id_cust%type
                   , i_sct_sct_id_section_zone   in  lm_system_components.sct_id_section_zone%type
                   , i_sct_sct_id_zone_area   in  lm_system_components.sct_id_zone_area%type )
      is
         select *
           from lm_system_components sct
          where sct.sct_type = i_sct_sct_type 
            and sct.id_cust = i_sct_id_cust 
            and ( sct.sct_id_section_zone = i_sct_sct_id_section_zone or (sct.sct_id_section_zone is null  and i_sct_sct_id_section_zone is null  ))
            and ( sct.sct_id_zone_area = i_sct_sct_id_zone_area or (sct.sct_id_zone_area is null  and i_sct_sct_id_zone_area is null  ));
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_sct(i_sct_sct_type => i_sct_sct_type, i_sct_id_cust => i_sct_id_cust, i_sct_sct_id_section_zone => i_sct_sct_id_section_zone, i_sct_sct_id_zone_area => i_sct_sct_id_zone_area);
         fetch c_sct into o_rt_sct;
         l_found := c_sct%found;
         close c_sct;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_sct%isopen
      then
         close c_sct;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end sct_select_row_uk1;

function sct_select_row_uk2( i_sct_id_cust_full   in  lm_system_components.id_cust_full%type
                           , o_rt_sct  out lm_system_components%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sct_select_row_uk2';
   l_found                boolean      := false;
begin
   declare
      cursor c_sct ( i_sct_id_cust_full   in  lm_system_components.id_cust_full%type )
      is
         select *
           from lm_system_components sct
          where sct.id_cust_full = i_sct_id_cust_full ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_sct(i_sct_id_cust_full => i_sct_id_cust_full);
         fetch c_sct into o_rt_sct;
         l_found := c_sct%found;
         close c_sct;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_sct%isopen
      then
         close c_sct;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end sct_select_row_uk2;

function sct_select_row_upd( i_sct_id   in  lm_system_components.id%type
                           , o_rt_sct   out lm_system_components%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sct_select_row_upd';
   l_found                boolean      := false;

   cursor c_sct ( i_sct_id   in  lm_system_components.id%type )
   is
           select *
             from lm_system_components sct
            where sct.id = i_sct_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_sct( i_sct_id => i_sct_id );
   fetch c_sct into o_rt_sct;
   l_found := c_sct%found;
   close c_sct;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_sct%isopen
      then
         close c_sct;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end sct_select_row_upd;

function sct_select_row_upd_uk1( i_sct_sct_type   in  lm_system_components.sct_type%type
                               , i_sct_id_cust   in  lm_system_components.id_cust%type
                               , i_sct_sct_id_section_zone   in  lm_system_components.sct_id_section_zone%type
                               , i_sct_sct_id_zone_area   in  lm_system_components.sct_id_zone_area%type
                               , o_rt_sct  out lm_system_components%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sct_select_row_upd_uk1';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := sct_select_row_uk1( i_sct_sct_type   =>  i_sct_sct_type
                                   , i_sct_id_cust   =>  i_sct_id_cust
                                   , i_sct_sct_id_section_zone   =>  i_sct_sct_id_section_zone
                                   , i_sct_sct_id_zone_area   =>  i_sct_sct_id_zone_area
                                   , o_rt_sct => o_rt_sct );
      if l_found
      then
         
         l_found := sct_select_row_upd( i_sct_id => o_rt_sct.id
                                      , o_rt_sct => o_rt_sct );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end sct_select_row_upd_uk1;

function sct_select_row_upd_uk2( i_sct_id_cust_full   in  lm_system_components.id_cust_full%type
                               , o_rt_sct  out lm_system_components%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sct_select_row_upd_uk2';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := sct_select_row_uk2( i_sct_id_cust_full   =>  i_sct_id_cust_full
                                   , o_rt_sct => o_rt_sct );
      if l_found
      then
         
         l_found := sct_select_row_upd( i_sct_id => o_rt_sct.id
                                      , o_rt_sct => o_rt_sct );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end sct_select_row_upd_uk2;

procedure sct_lock_row( i_sct_id   in  lm_system_components.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sct_lock_row';
begin
  declare
     cursor c_sct ( i_sct_id   in  lm_system_components.id%type )
     is
             select ''
               from lm_system_components sct
              where sct.id = i_sct_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_sct_id is not null
         then
            begin
                
                sct_lock_row_nowait( i_sct_id => i_sct_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_sct( i_sct_id => i_sct_id );
                  close c_sct;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_sct%isopen
         then
            close c_sct;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end sct_lock_row;

procedure sct_lock_row_nowait( i_sct_id   in  lm_system_components.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sct_lock_row_nowait';
begin
   declare
      cursor c_sct ( i_sct_id   in  lm_system_components.id%type )
      is
              select ''
                from lm_system_components sct
               where sct.id = i_sct_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_sct_id is not null
         then
            
            open c_sct( i_sct_id => i_sct_id );

            close c_sct;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_sct%isopen
        then
           close c_sct;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_sct_id||'"' );
   end;                                                          
end sct_lock_row_nowait;

function sct_perform_update( i_sct_id   in     lm_system_components.id%type
                           , io_rt_sct  in out lm_system_components%rowtype )
return number
;

function sct_perform_delete( i_sct_id   in  lm_system_components.id%type )
return boolean
;

procedure sct_insert_row ( io_rt_sct  in out lm_system_components%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sct_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into lm_system_components( id
                                , sct_type
                                , id_cust
                                , id_cust_full
                                , tst_id
                                , sct_id_section_zone
                                , sct_id_zone_area
                                , default_capacity
                                , ind_sync_bir )
              values ( io_rt_sct.id
                     , io_rt_sct.sct_type
                     , io_rt_sct.id_cust
                     , io_rt_sct.id_cust_full
                     , io_rt_sct.tst_id
                     , io_rt_sct.sct_id_section_zone
                     , io_rt_sct.sct_id_zone_area
                     , io_rt_sct.default_capacity
                     , io_rt_sct.ind_sync_bir )
           returning id
                   , sct_type
                   , id_cust
                   , id_cust_full
                   , tst_id
                   , sct_id_section_zone
                   , sct_id_zone_area
                   , default_capacity
                   , ind_sync_bir
                into io_rt_sct.id
                   , io_rt_sct.sct_type
                   , io_rt_sct.id_cust
                   , io_rt_sct.id_cust_full
                   , io_rt_sct.tst_id
                   , io_rt_sct.sct_id_section_zone
                   , io_rt_sct.sct_id_zone_area
                   , io_rt_sct.default_capacity
                   , io_rt_sct.ind_sync_bir;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_sct.id||'"'
                                                             ||', SCT_TYPE = "'||io_rt_sct.sct_type||'"'
                                                             ||', ID_CUST = "'||io_rt_sct.id_cust||'"'
                                                             ||', ID_CUST_FULL = "'||io_rt_sct.id_cust_full||'"'
                                                             ||', TST_ID = "'||io_rt_sct.tst_id||'"'
                                                             ||', SCT_ID_SECTION_ZONE = "'||io_rt_sct.sct_id_section_zone||'"'
                                                             ||', SCT_ID_ZONE_AREA = "'||io_rt_sct.sct_id_zone_area||'"'
                                                             ||', DEFAULT_CAPACITY = "'||io_rt_sct.default_capacity||'"'
                                                             ||', IND_SYNC_BIR = "'||io_rt_sct.ind_sync_bir||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end sct_insert_row;

function sct_perform_update( i_sct_id   in     lm_system_components.id%type
                           , io_rt_sct  in out lm_system_components%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sct_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update lm_system_components
            set id = io_rt_sct.id
              , sct_type = io_rt_sct.sct_type
              , id_cust = io_rt_sct.id_cust
              , id_cust_full = io_rt_sct.id_cust_full
              , tst_id = io_rt_sct.tst_id
              , sct_id_section_zone = io_rt_sct.sct_id_section_zone
              , sct_id_zone_area = io_rt_sct.sct_id_zone_area
              , default_capacity = io_rt_sct.default_capacity
              , ind_sync_bir = io_rt_sct.ind_sync_bir
          where id = i_sct_id
      returning id
              , sct_type
              , id_cust
              , id_cust_full
              , tst_id
              , sct_id_section_zone
              , sct_id_zone_area
              , default_capacity
              , ind_sync_bir
           into io_rt_sct.id
              , io_rt_sct.sct_type
              , io_rt_sct.id_cust
              , io_rt_sct.id_cust_full
              , io_rt_sct.tst_id
              , io_rt_sct.sct_id_section_zone
              , io_rt_sct.sct_id_zone_area
              , io_rt_sct.default_capacity
              , io_rt_sct.ind_sync_bir;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_sct.id||'"'
                                                             ||', SCT_TYPE = "'||io_rt_sct.sct_type||'"'
                                                             ||', ID_CUST = "'||io_rt_sct.id_cust||'"'
                                                             ||', ID_CUST_FULL = "'||io_rt_sct.id_cust_full||'"'
                                                             ||', TST_ID = "'||io_rt_sct.tst_id||'"'
                                                             ||', SCT_ID_SECTION_ZONE = "'||io_rt_sct.sct_id_section_zone||'"'
                                                             ||', SCT_ID_ZONE_AREA = "'||io_rt_sct.sct_id_zone_area||'"'
                                                             ||', DEFAULT_CAPACITY = "'||io_rt_sct.default_capacity||'"'
                                                             ||', IND_SYNC_BIR = "'||io_rt_sct.ind_sync_bir||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end sct_perform_update;

function sct_perform_delete( i_sct_id   in  lm_system_components.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sct_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from lm_system_components
          where id = i_sct_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_sct_id||'"' );
   end;                                                          
end sct_perform_delete;

function sct_update_row( i_sct_id   in     lm_system_components.id%type
                       , io_rt_sct  in out lm_system_components%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sct_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         sct_lock_row( i_sct_id   =>  i_sct_id );

         
         l_rowcount := 
            sct_perform_update( i_sct_id   =>  i_sct_id
                              , io_rt_sct  => io_rt_sct );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_sct.id||'"'
                                                          ||', SCT_TYPE = "'||io_rt_sct.sct_type||'"'
                                                          ||', ID_CUST = "'||io_rt_sct.id_cust||'"'
                                                          ||', ID_CUST_FULL = "'||io_rt_sct.id_cust_full||'"'
                                                          ||', TST_ID = "'||io_rt_sct.tst_id||'"'
                                                          ||', SCT_ID_SECTION_ZONE = "'||io_rt_sct.sct_id_section_zone||'"'
                                                          ||', SCT_ID_ZONE_AREA = "'||io_rt_sct.sct_id_zone_area||'"'
                                                          ||', DEFAULT_CAPACITY = "'||io_rt_sct.default_capacity||'"'
                                                          ||', IND_SYNC_BIR = "'||io_rt_sct.ind_sync_bir||'"'                                                           , 1, 4000));
   end;                                                          
end sct_update_row;

function sct_delete_row( i_sct_id   in  lm_system_components.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sct_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         sct_lock_row( i_sct_id   =>  i_sct_id );

         
         l_deleted := sct_perform_delete( i_sct_id   =>  i_sct_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_sct_id||'"' );
   end;                                                          
end sct_delete_row;


end lm_sct_tapi_pck;
/