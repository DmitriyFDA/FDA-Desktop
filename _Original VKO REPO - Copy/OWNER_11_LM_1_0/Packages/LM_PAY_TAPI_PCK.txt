create or replace PACKAGE lm_pay_tapi_pck
IS
-- Table API package for table lm_process_activities
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:15)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'LM_PAY_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'LM_PROCESS_ACTIVITIES';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION pay_select_row( i_pay_ID   IN  lm_process_activities.ID%TYPE
                       , o_rt_pay   OUT lm_process_activities%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION pay_select_row_uk( i_pay_PPN_ID   IN  lm_process_activities.PPN_ID%TYPE
                          , i_pay_PROCESS_NAME   IN  lm_process_activities.PROCESS_NAME%TYPE
                          , i_pay_ACTIVITY_NAME   IN  lm_process_activities.ACTIVITY_NAME%TYPE
                          , o_rt_pay  OUT lm_process_activities%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION pay_select_row_upd( i_pay_ID   IN  lm_process_activities.ID%TYPE
                           , o_rt_pay   OUT lm_process_activities%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION pay_select_row_upd_uk( i_pay_PPN_ID   IN  lm_process_activities.PPN_ID%TYPE
                              , i_pay_PROCESS_NAME   IN  lm_process_activities.PROCESS_NAME%TYPE
                              , i_pay_ACTIVITY_NAME   IN  lm_process_activities.ACTIVITY_NAME%TYPE
                              , o_rt_pay  OUT lm_process_activities%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE pay_lock_row( i_pay_ID   IN  lm_process_activities.ID%TYPE )
;

PROCEDURE pay_lock_row_nowait( i_pay_ID   IN  lm_process_activities.ID%TYPE )
;

PROCEDURE pay_insert_row ( io_rt_pay  IN OUT lm_process_activities%ROWTYPE )
;

FUNCTION pay_update_row( i_pay_ID   IN     lm_process_activities.ID%TYPE
                       , io_rt_pay  IN OUT lm_process_activities%ROWTYPE )
RETURN NUMBER
;

FUNCTION pay_delete_row( i_pay_ID   IN  lm_process_activities.ID%TYPE )
RETURN BOOLEAN
;

FUNCTION pay_seq1_nextval
RETURN lm_process_activities.ID%TYPE
;


END lm_pay_tapi_pck;
/




package body lm_pay_tapi_pck
is




function pay_select_row( i_pay_id   in  lm_process_activities.id%type
                       , o_rt_pay   out lm_process_activities%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pay_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_pay ( i_pay_id   in  lm_process_activities.id%type )
      is 
           select *
             from lm_process_activities pay
            where pay.id = i_pay_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_pay( i_pay_id => i_pay_id );
         fetch c_pay into o_rt_pay;
         l_found := c_pay%found;
         close c_pay;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_pay%isopen
         then
            close c_pay;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pay_select_row;

function pay_select_row_uk( i_pay_ppn_id   in  lm_process_activities.ppn_id%type
                          , i_pay_process_name   in  lm_process_activities.process_name%type
                          , i_pay_activity_name   in  lm_process_activities.activity_name%type
                          , o_rt_pay  out lm_process_activities%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pay_select_row_uk';
   l_found                boolean      := false;
begin
   declare
      cursor c_pay ( i_pay_ppn_id   in  lm_process_activities.ppn_id%type
                   , i_pay_process_name   in  lm_process_activities.process_name%type
                   , i_pay_activity_name   in  lm_process_activities.activity_name%type )
      is
         select *
           from lm_process_activities pay
          where pay.ppn_id = i_pay_ppn_id 
            and pay.process_name = i_pay_process_name 
            and pay.activity_name = i_pay_activity_name ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_pay(i_pay_ppn_id => i_pay_ppn_id, i_pay_process_name => i_pay_process_name, i_pay_activity_name => i_pay_activity_name);
         fetch c_pay into o_rt_pay;
         l_found := c_pay%found;
         close c_pay;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_pay%isopen
      then
         close c_pay;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pay_select_row_uk;

function pay_select_row_upd( i_pay_id   in  lm_process_activities.id%type
                           , o_rt_pay   out lm_process_activities%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pay_select_row_upd';
   l_found                boolean      := false;

   cursor c_pay ( i_pay_id   in  lm_process_activities.id%type )
   is
           select *
             from lm_process_activities pay
            where pay.id = i_pay_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_pay( i_pay_id => i_pay_id );
   fetch c_pay into o_rt_pay;
   l_found := c_pay%found;
   close c_pay;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_pay%isopen
      then
         close c_pay;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end pay_select_row_upd;

function pay_select_row_upd_uk( i_pay_ppn_id   in  lm_process_activities.ppn_id%type
                              , i_pay_process_name   in  lm_process_activities.process_name%type
                              , i_pay_activity_name   in  lm_process_activities.activity_name%type
                              , o_rt_pay  out lm_process_activities%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pay_select_row_upd_uk';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := pay_select_row_uk( i_pay_ppn_id   =>  i_pay_ppn_id
                                  , i_pay_process_name   =>  i_pay_process_name
                                  , i_pay_activity_name   =>  i_pay_activity_name
                                  , o_rt_pay => o_rt_pay );
      if l_found
      then
         
         l_found := pay_select_row_upd( i_pay_id => o_rt_pay.id
                                      , o_rt_pay => o_rt_pay );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end pay_select_row_upd_uk;

procedure pay_lock_row( i_pay_id   in  lm_process_activities.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pay_lock_row';
begin
  declare
     cursor c_pay ( i_pay_id   in  lm_process_activities.id%type )
     is
             select ''
               from lm_process_activities pay
              where pay.id = i_pay_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_pay_id is not null
         then
            begin
                
                pay_lock_row_nowait( i_pay_id => i_pay_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_pay( i_pay_id => i_pay_id );
                  close c_pay;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_pay%isopen
         then
            close c_pay;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end pay_lock_row;

procedure pay_lock_row_nowait( i_pay_id   in  lm_process_activities.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pay_lock_row_nowait';
begin
   declare
      cursor c_pay ( i_pay_id   in  lm_process_activities.id%type )
      is
              select ''
                from lm_process_activities pay
               where pay.id = i_pay_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_pay_id is not null
         then
            
            open c_pay( i_pay_id => i_pay_id );

            close c_pay;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_pay%isopen
        then
           close c_pay;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_pay_id||'"' );
   end;                                                          
end pay_lock_row_nowait;

function pay_perform_update( i_pay_id   in     lm_process_activities.id%type
                           , io_rt_pay  in out lm_process_activities%rowtype )
return number
;

function pay_perform_delete( i_pay_id   in  lm_process_activities.id%type )
return boolean
;

procedure pay_insert_row ( io_rt_pay  in out lm_process_activities%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pay_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into lm_process_activities( id
                                , ppn_id
                                , process_name
                                , activity_name )
              values ( io_rt_pay.id
                     , io_rt_pay.ppn_id
                     , io_rt_pay.process_name
                     , io_rt_pay.activity_name )
           returning id
                   , ppn_id
                   , process_name
                   , activity_name
                into io_rt_pay.id
                   , io_rt_pay.ppn_id
                   , io_rt_pay.process_name
                   , io_rt_pay.activity_name;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_pay.id||'"'
                                                             ||', PPN_ID = "'||io_rt_pay.ppn_id||'"'
                                                             ||', PROCESS_NAME = "'||io_rt_pay.process_name||'"'
                                                             ||', ACTIVITY_NAME = "'||io_rt_pay.activity_name||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pay_insert_row;

function pay_perform_update( i_pay_id   in     lm_process_activities.id%type
                           , io_rt_pay  in out lm_process_activities%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pay_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update lm_process_activities
            set id = io_rt_pay.id
              , ppn_id = io_rt_pay.ppn_id
              , process_name = io_rt_pay.process_name
              , activity_name = io_rt_pay.activity_name
          where id = i_pay_id
      returning id
              , ppn_id
              , process_name
              , activity_name
           into io_rt_pay.id
              , io_rt_pay.ppn_id
              , io_rt_pay.process_name
              , io_rt_pay.activity_name;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_pay.id||'"'
                                                             ||', PPN_ID = "'||io_rt_pay.ppn_id||'"'
                                                             ||', PROCESS_NAME = "'||io_rt_pay.process_name||'"'
                                                             ||', ACTIVITY_NAME = "'||io_rt_pay.activity_name||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pay_perform_update;

function pay_perform_delete( i_pay_id   in  lm_process_activities.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pay_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from lm_process_activities
          where id = i_pay_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_pay_id||'"' );
   end;                                                          
end pay_perform_delete;

function pay_update_row( i_pay_id   in     lm_process_activities.id%type
                       , io_rt_pay  in out lm_process_activities%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pay_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         pay_lock_row( i_pay_id   =>  i_pay_id );

         
         l_rowcount := 
            pay_perform_update( i_pay_id   =>  i_pay_id
                              , io_rt_pay  => io_rt_pay );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_pay.id||'"'
                                                          ||', PPN_ID = "'||io_rt_pay.ppn_id||'"'
                                                          ||', PROCESS_NAME = "'||io_rt_pay.process_name||'"'
                                                          ||', ACTIVITY_NAME = "'||io_rt_pay.activity_name||'"'                                                           , 1, 4000));
   end;                                                          
end pay_update_row;

function pay_delete_row( i_pay_id   in  lm_process_activities.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pay_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         pay_lock_row( i_pay_id   =>  i_pay_id );

         
         l_deleted := pay_perform_delete( i_pay_id   =>  i_pay_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_pay_id||'"' );
   end;                                                          
end pay_delete_row;

function pay_seq1_nextval
return lm_process_activities.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pay_seq1_nextval';
   l_pay_id  lm_process_activities.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select lm_pay_seq1.nextval 
           into l_pay_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_pay_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pay_seq1_nextval;


end lm_pay_tapi_pck;
/