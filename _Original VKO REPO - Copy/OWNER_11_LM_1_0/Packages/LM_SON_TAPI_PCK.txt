create or replace PACKAGE lm_son_tapi_pck
IS
-- Table API package for table lm_scope_of_operation
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:17)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'LM_SON_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'LM_SCOPE_OF_OPERATION';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION son_select_row( i_son_ID   IN  lm_scope_of_operation.ID%TYPE
                       , o_rt_son   OUT lm_scope_of_operation%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION son_select_row_uk1( i_son_SAY_STN_ID   IN  lm_scope_of_operation.SAY_STN_ID%TYPE
                           , i_son_ID_CUST   IN  lm_scope_of_operation.ID_CUST%TYPE
                           , o_rt_son  OUT lm_scope_of_operation%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION son_select_row_upd( i_son_ID   IN  lm_scope_of_operation.ID%TYPE
                           , o_rt_son   OUT lm_scope_of_operation%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION son_select_row_upd_uk1( i_son_SAY_STN_ID   IN  lm_scope_of_operation.SAY_STN_ID%TYPE
                               , i_son_ID_CUST   IN  lm_scope_of_operation.ID_CUST%TYPE
                               , o_rt_son  OUT lm_scope_of_operation%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE son_lock_row( i_son_ID   IN  lm_scope_of_operation.ID%TYPE )
;

PROCEDURE son_lock_row_nowait( i_son_ID   IN  lm_scope_of_operation.ID%TYPE )
;

PROCEDURE son_insert_row ( io_rt_son  IN OUT lm_scope_of_operation%ROWTYPE )
;

FUNCTION son_update_row( i_son_ID   IN     lm_scope_of_operation.ID%TYPE
                       , io_rt_son  IN OUT lm_scope_of_operation%ROWTYPE )
RETURN NUMBER
;

FUNCTION son_delete_row( i_son_ID   IN  lm_scope_of_operation.ID%TYPE )
RETURN BOOLEAN
;

FUNCTION son_seq1_nextval
RETURN lm_scope_of_operation.ID%TYPE
;


END lm_son_tapi_pck;
/




package body lm_son_tapi_pck
is




function son_select_row( i_son_id   in  lm_scope_of_operation.id%type
                       , o_rt_son   out lm_scope_of_operation%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.son_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_son ( i_son_id   in  lm_scope_of_operation.id%type )
      is 
           select *
             from lm_scope_of_operation son
            where son.id = i_son_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_son( i_son_id => i_son_id );
         fetch c_son into o_rt_son;
         l_found := c_son%found;
         close c_son;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_son%isopen
         then
            close c_son;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end son_select_row;

function son_select_row_uk1( i_son_say_stn_id   in  lm_scope_of_operation.say_stn_id%type
                           , i_son_id_cust   in  lm_scope_of_operation.id_cust%type
                           , o_rt_son  out lm_scope_of_operation%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.son_select_row_uk1';
   l_found                boolean      := false;
begin
   declare
      cursor c_son ( i_son_say_stn_id   in  lm_scope_of_operation.say_stn_id%type
                   , i_son_id_cust   in  lm_scope_of_operation.id_cust%type )
      is
         select *
           from lm_scope_of_operation son
          where son.say_stn_id = i_son_say_stn_id 
            and son.id_cust = i_son_id_cust ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_son(i_son_say_stn_id => i_son_say_stn_id, i_son_id_cust => i_son_id_cust);
         fetch c_son into o_rt_son;
         l_found := c_son%found;
         close c_son;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_son%isopen
      then
         close c_son;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end son_select_row_uk1;

function son_select_row_upd( i_son_id   in  lm_scope_of_operation.id%type
                           , o_rt_son   out lm_scope_of_operation%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.son_select_row_upd';
   l_found                boolean      := false;

   cursor c_son ( i_son_id   in  lm_scope_of_operation.id%type )
   is
           select *
             from lm_scope_of_operation son
            where son.id = i_son_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_son( i_son_id => i_son_id );
   fetch c_son into o_rt_son;
   l_found := c_son%found;
   close c_son;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_son%isopen
      then
         close c_son;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end son_select_row_upd;

function son_select_row_upd_uk1( i_son_say_stn_id   in  lm_scope_of_operation.say_stn_id%type
                               , i_son_id_cust   in  lm_scope_of_operation.id_cust%type
                               , o_rt_son  out lm_scope_of_operation%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.son_select_row_upd_uk1';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := son_select_row_uk1( i_son_say_stn_id   =>  i_son_say_stn_id
                                   , i_son_id_cust   =>  i_son_id_cust
                                   , o_rt_son => o_rt_son );
      if l_found
      then
         
         l_found := son_select_row_upd( i_son_id => o_rt_son.id
                                      , o_rt_son => o_rt_son );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end son_select_row_upd_uk1;

procedure son_lock_row( i_son_id   in  lm_scope_of_operation.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.son_lock_row';
begin
  declare
     cursor c_son ( i_son_id   in  lm_scope_of_operation.id%type )
     is
             select ''
               from lm_scope_of_operation son
              where son.id = i_son_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_son_id is not null
         then
            begin
                
                son_lock_row_nowait( i_son_id => i_son_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_son( i_son_id => i_son_id );
                  close c_son;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_son%isopen
         then
            close c_son;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end son_lock_row;

procedure son_lock_row_nowait( i_son_id   in  lm_scope_of_operation.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.son_lock_row_nowait';
begin
   declare
      cursor c_son ( i_son_id   in  lm_scope_of_operation.id%type )
      is
              select ''
                from lm_scope_of_operation son
               where son.id = i_son_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_son_id is not null
         then
            
            open c_son( i_son_id => i_son_id );

            close c_son;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_son%isopen
        then
           close c_son;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_son_id||'"' );
   end;                                                          
end son_lock_row_nowait;

function son_perform_update( i_son_id   in     lm_scope_of_operation.id%type
                           , io_rt_son  in out lm_scope_of_operation%rowtype )
return number
;

function son_perform_delete( i_son_id   in  lm_scope_of_operation.id%type )
return boolean
;

procedure son_insert_row ( io_rt_son  in out lm_scope_of_operation%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.son_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into lm_scope_of_operation( id
                                , say_stn_id
                                , id_cust )
              values ( io_rt_son.id
                     , io_rt_son.say_stn_id
                     , io_rt_son.id_cust )
           returning id
                   , say_stn_id
                   , id_cust
                into io_rt_son.id
                   , io_rt_son.say_stn_id
                   , io_rt_son.id_cust;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_son.id||'"'
                                                             ||', SAY_STN_ID = "'||io_rt_son.say_stn_id||'"'
                                                             ||', ID_CUST = "'||io_rt_son.id_cust||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end son_insert_row;

function son_perform_update( i_son_id   in     lm_scope_of_operation.id%type
                           , io_rt_son  in out lm_scope_of_operation%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.son_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update lm_scope_of_operation
            set id = io_rt_son.id
              , say_stn_id = io_rt_son.say_stn_id
              , id_cust = io_rt_son.id_cust
          where id = i_son_id
      returning id
              , say_stn_id
              , id_cust
           into io_rt_son.id
              , io_rt_son.say_stn_id
              , io_rt_son.id_cust;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_son.id||'"'
                                                             ||', SAY_STN_ID = "'||io_rt_son.say_stn_id||'"'
                                                             ||', ID_CUST = "'||io_rt_son.id_cust||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end son_perform_update;

function son_perform_delete( i_son_id   in  lm_scope_of_operation.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.son_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from lm_scope_of_operation
          where id = i_son_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_son_id||'"' );
   end;                                                          
end son_perform_delete;

function son_update_row( i_son_id   in     lm_scope_of_operation.id%type
                       , io_rt_son  in out lm_scope_of_operation%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.son_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         son_lock_row( i_son_id   =>  i_son_id );

         
         l_rowcount := 
            son_perform_update( i_son_id   =>  i_son_id
                              , io_rt_son  => io_rt_son );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_son.id||'"'
                                                          ||', SAY_STN_ID = "'||io_rt_son.say_stn_id||'"'
                                                          ||', ID_CUST = "'||io_rt_son.id_cust||'"'                                                           , 1, 4000));
   end;                                                          
end son_update_row;

function son_delete_row( i_son_id   in  lm_scope_of_operation.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.son_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         son_lock_row( i_son_id   =>  i_son_id );

         
         l_deleted := son_perform_delete( i_son_id   =>  i_son_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_son_id||'"' );
   end;                                                          
end son_delete_row;

function son_seq1_nextval
return lm_scope_of_operation.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.son_seq1_nextval';
   l_son_id  lm_scope_of_operation.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select lm_son_seq1.nextval 
           into l_son_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_son_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end son_seq1_nextval;


end lm_son_tapi_pck;
/