create or replace PACKAGE lm_pon_tapi_pck
IS
-- Table API package for table lm_physical_destinations
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:15)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'LM_PON_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'LM_PHYSICAL_DESTINATIONS';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION pon_select_row( i_pon_ID   IN  lm_physical_destinations.ID%TYPE
                       , o_rt_pon   OUT lm_physical_destinations%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION pon_select_row_uk1( i_pon_ID_CUST   IN  lm_physical_destinations.ID_CUST%TYPE
                           , o_rt_pon  OUT lm_physical_destinations%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION pon_select_row_upd( i_pon_ID   IN  lm_physical_destinations.ID%TYPE
                           , o_rt_pon   OUT lm_physical_destinations%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION pon_select_row_upd_uk1( i_pon_ID_CUST   IN  lm_physical_destinations.ID_CUST%TYPE
                               , o_rt_pon  OUT lm_physical_destinations%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE pon_lock_row( i_pon_ID   IN  lm_physical_destinations.ID%TYPE )
;

PROCEDURE pon_lock_row_nowait( i_pon_ID   IN  lm_physical_destinations.ID%TYPE )
;

PROCEDURE pon_insert_row ( io_rt_pon  IN OUT lm_physical_destinations%ROWTYPE )
;

FUNCTION pon_update_row( i_pon_ID   IN     lm_physical_destinations.ID%TYPE
                       , io_rt_pon  IN OUT lm_physical_destinations%ROWTYPE )
RETURN NUMBER
;

FUNCTION pon_delete_row( i_pon_ID   IN  lm_physical_destinations.ID%TYPE )
RETURN BOOLEAN
;


END lm_pon_tapi_pck;
/




package body lm_pon_tapi_pck
is




function pon_select_row( i_pon_id   in  lm_physical_destinations.id%type
                       , o_rt_pon   out lm_physical_destinations%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pon_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_pon ( i_pon_id   in  lm_physical_destinations.id%type )
      is 
           select *
             from lm_physical_destinations pon
            where pon.id = i_pon_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_pon( i_pon_id => i_pon_id );
         fetch c_pon into o_rt_pon;
         l_found := c_pon%found;
         close c_pon;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_pon%isopen
         then
            close c_pon;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pon_select_row;

function pon_select_row_uk1( i_pon_id_cust   in  lm_physical_destinations.id_cust%type
                           , o_rt_pon  out lm_physical_destinations%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pon_select_row_uk1';
   l_found                boolean      := false;
begin
   declare
      cursor c_pon ( i_pon_id_cust   in  lm_physical_destinations.id_cust%type )
      is
         select *
           from lm_physical_destinations pon
          where pon.id_cust = i_pon_id_cust ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_pon(i_pon_id_cust => i_pon_id_cust);
         fetch c_pon into o_rt_pon;
         l_found := c_pon%found;
         close c_pon;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_pon%isopen
      then
         close c_pon;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pon_select_row_uk1;

function pon_select_row_upd( i_pon_id   in  lm_physical_destinations.id%type
                           , o_rt_pon   out lm_physical_destinations%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pon_select_row_upd';
   l_found                boolean      := false;

   cursor c_pon ( i_pon_id   in  lm_physical_destinations.id%type )
   is
           select *
             from lm_physical_destinations pon
            where pon.id = i_pon_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_pon( i_pon_id => i_pon_id );
   fetch c_pon into o_rt_pon;
   l_found := c_pon%found;
   close c_pon;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_pon%isopen
      then
         close c_pon;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end pon_select_row_upd;

function pon_select_row_upd_uk1( i_pon_id_cust   in  lm_physical_destinations.id_cust%type
                               , o_rt_pon  out lm_physical_destinations%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pon_select_row_upd_uk1';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := pon_select_row_uk1( i_pon_id_cust   =>  i_pon_id_cust
                                   , o_rt_pon => o_rt_pon );
      if l_found
      then
         
         l_found := pon_select_row_upd( i_pon_id => o_rt_pon.id
                                      , o_rt_pon => o_rt_pon );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end pon_select_row_upd_uk1;

procedure pon_lock_row( i_pon_id   in  lm_physical_destinations.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pon_lock_row';
begin
  declare
     cursor c_pon ( i_pon_id   in  lm_physical_destinations.id%type )
     is
             select ''
               from lm_physical_destinations pon
              where pon.id = i_pon_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_pon_id is not null
         then
            begin
                
                pon_lock_row_nowait( i_pon_id => i_pon_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_pon( i_pon_id => i_pon_id );
                  close c_pon;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_pon%isopen
         then
            close c_pon;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end pon_lock_row;

procedure pon_lock_row_nowait( i_pon_id   in  lm_physical_destinations.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pon_lock_row_nowait';
begin
   declare
      cursor c_pon ( i_pon_id   in  lm_physical_destinations.id%type )
      is
              select ''
                from lm_physical_destinations pon
               where pon.id = i_pon_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_pon_id is not null
         then
            
            open c_pon( i_pon_id => i_pon_id );

            close c_pon;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_pon%isopen
        then
           close c_pon;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_pon_id||'"' );
   end;                                                          
end pon_lock_row_nowait;

function pon_perform_update( i_pon_id   in     lm_physical_destinations.id%type
                           , io_rt_pon  in out lm_physical_destinations%rowtype )
return number
;

function pon_perform_delete( i_pon_id   in  lm_physical_destinations.id%type )
return boolean
;

procedure pon_insert_row ( io_rt_pon  in out lm_physical_destinations%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pon_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into lm_physical_destinations( id
                                , id_cust
                                , ind_assignable_destination
                                , ind_bagstore
                                , sct_id
                                , description )
              values ( io_rt_pon.id
                     , io_rt_pon.id_cust
                     , io_rt_pon.ind_assignable_destination
                     , io_rt_pon.ind_bagstore
                     , io_rt_pon.sct_id
                     , io_rt_pon.description )
           returning id
                   , id_cust
                   , ind_assignable_destination
                   , ind_bagstore
                   , sct_id
                   , description
                into io_rt_pon.id
                   , io_rt_pon.id_cust
                   , io_rt_pon.ind_assignable_destination
                   , io_rt_pon.ind_bagstore
                   , io_rt_pon.sct_id
                   , io_rt_pon.description;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_pon.id||'"'
                                                             ||', ID_CUST = "'||io_rt_pon.id_cust||'"'
                                                             ||', IND_ASSIGNABLE_DESTINATION = "'||io_rt_pon.ind_assignable_destination||'"'
                                                             ||', IND_BAGSTORE = "'||io_rt_pon.ind_bagstore||'"'
                                                             ||', SCT_ID = "'||io_rt_pon.sct_id||'"'
                                                             ||', DESCRIPTION = "'||io_rt_pon.description||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pon_insert_row;

function pon_perform_update( i_pon_id   in     lm_physical_destinations.id%type
                           , io_rt_pon  in out lm_physical_destinations%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pon_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update lm_physical_destinations
            set id = io_rt_pon.id
              , id_cust = io_rt_pon.id_cust
              , ind_assignable_destination = io_rt_pon.ind_assignable_destination
              , ind_bagstore = io_rt_pon.ind_bagstore
              , sct_id = io_rt_pon.sct_id
              , description = io_rt_pon.description
          where id = i_pon_id
      returning id
              , id_cust
              , ind_assignable_destination
              , ind_bagstore
              , sct_id
              , description
           into io_rt_pon.id
              , io_rt_pon.id_cust
              , io_rt_pon.ind_assignable_destination
              , io_rt_pon.ind_bagstore
              , io_rt_pon.sct_id
              , io_rt_pon.description;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_pon.id||'"'
                                                             ||', ID_CUST = "'||io_rt_pon.id_cust||'"'
                                                             ||', IND_ASSIGNABLE_DESTINATION = "'||io_rt_pon.ind_assignable_destination||'"'
                                                             ||', IND_BAGSTORE = "'||io_rt_pon.ind_bagstore||'"'
                                                             ||', SCT_ID = "'||io_rt_pon.sct_id||'"'
                                                             ||', DESCRIPTION = "'||io_rt_pon.description||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pon_perform_update;

function pon_perform_delete( i_pon_id   in  lm_physical_destinations.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pon_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from lm_physical_destinations
          where id = i_pon_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_pon_id||'"' );
   end;                                                          
end pon_perform_delete;

function pon_update_row( i_pon_id   in     lm_physical_destinations.id%type
                       , io_rt_pon  in out lm_physical_destinations%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pon_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         pon_lock_row( i_pon_id   =>  i_pon_id );

         
         l_rowcount := 
            pon_perform_update( i_pon_id   =>  i_pon_id
                              , io_rt_pon  => io_rt_pon );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_pon.id||'"'
                                                          ||', ID_CUST = "'||io_rt_pon.id_cust||'"'
                                                          ||', IND_ASSIGNABLE_DESTINATION = "'||io_rt_pon.ind_assignable_destination||'"'
                                                          ||', IND_BAGSTORE = "'||io_rt_pon.ind_bagstore||'"'
                                                          ||', SCT_ID = "'||io_rt_pon.sct_id||'"'
                                                          ||', DESCRIPTION = "'||io_rt_pon.description||'"'                                                           , 1, 4000));
   end;                                                          
end pon_update_row;

function pon_delete_row( i_pon_id   in  lm_physical_destinations.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pon_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         pon_lock_row( i_pon_id   =>  i_pon_id );

         
         l_deleted := pon_perform_delete( i_pon_id   =>  i_pon_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_pon_id||'"' );
   end;                                                          
end pon_delete_row;


end lm_pon_tapi_pck;
/