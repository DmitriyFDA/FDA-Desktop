create or replace PACKAGE lm_nde_tapi_pck
IS
-- Table API package for table lm_nodes
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:13)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'LM_NDE_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'LM_NODES';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION nde_select_row( i_nde_ID   IN  lm_nodes.ID%TYPE
                       , o_rt_nde   OUT lm_nodes%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION nde_select_row_upd( i_nde_ID   IN  lm_nodes.ID%TYPE
                           , o_rt_nde   OUT lm_nodes%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE nde_lock_row( i_nde_ID   IN  lm_nodes.ID%TYPE )
;

PROCEDURE nde_lock_row_nowait( i_nde_ID   IN  lm_nodes.ID%TYPE )
;

PROCEDURE nde_insert_row ( io_rt_nde  IN OUT lm_nodes%ROWTYPE )
;

FUNCTION nde_update_row( i_nde_ID   IN     lm_nodes.ID%TYPE
                       , io_rt_nde  IN OUT lm_nodes%ROWTYPE )
RETURN NUMBER
;

FUNCTION nde_delete_row( i_nde_ID   IN  lm_nodes.ID%TYPE )
RETURN BOOLEAN
;


END lm_nde_tapi_pck;
/




package body lm_nde_tapi_pck
is




function nde_select_row( i_nde_id   in  lm_nodes.id%type
                       , o_rt_nde   out lm_nodes%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.nde_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_nde ( i_nde_id   in  lm_nodes.id%type )
      is 
           select *
             from lm_nodes nde
            where nde.id = i_nde_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_nde( i_nde_id => i_nde_id );
         fetch c_nde into o_rt_nde;
         l_found := c_nde%found;
         close c_nde;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_nde%isopen
         then
            close c_nde;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end nde_select_row;

function nde_select_row_upd( i_nde_id   in  lm_nodes.id%type
                           , o_rt_nde   out lm_nodes%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.nde_select_row_upd';
   l_found                boolean      := false;

   cursor c_nde ( i_nde_id   in  lm_nodes.id%type )
   is
           select *
             from lm_nodes nde
            where nde.id = i_nde_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_nde( i_nde_id => i_nde_id );
   fetch c_nde into o_rt_nde;
   l_found := c_nde%found;
   close c_nde;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_nde%isopen
      then
         close c_nde;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end nde_select_row_upd;

procedure nde_lock_row( i_nde_id   in  lm_nodes.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.nde_lock_row';
begin
  declare
     cursor c_nde ( i_nde_id   in  lm_nodes.id%type )
     is
             select ''
               from lm_nodes nde
              where nde.id = i_nde_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_nde_id is not null
         then
            begin
                
                nde_lock_row_nowait( i_nde_id => i_nde_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_nde( i_nde_id => i_nde_id );
                  close c_nde;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_nde%isopen
         then
            close c_nde;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end nde_lock_row;

procedure nde_lock_row_nowait( i_nde_id   in  lm_nodes.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.nde_lock_row_nowait';
begin
   declare
      cursor c_nde ( i_nde_id   in  lm_nodes.id%type )
      is
              select ''
                from lm_nodes nde
               where nde.id = i_nde_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_nde_id is not null
         then
            
            open c_nde( i_nde_id => i_nde_id );

            close c_nde;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_nde%isopen
        then
           close c_nde;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_nde_id||'"' );
   end;                                                          
end nde_lock_row_nowait;

function nde_perform_update( i_nde_id   in     lm_nodes.id%type
                           , io_rt_nde  in out lm_nodes%rowtype )
return number
;

function nde_perform_delete( i_nde_id   in  lm_nodes.id%type )
return boolean
;

procedure nde_insert_row ( io_rt_nde  in out lm_nodes%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.nde_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into lm_nodes( id
                                , nde_type
                                , ind_autonomous_routing
                                , ind_normal_registration_point
                                , sct_id
                                , identifier_within_sct
                                , description
                                , pon_id
                                , ind_suspend_deregistration )
              values ( io_rt_nde.id
                     , io_rt_nde.nde_type
                     , io_rt_nde.ind_autonomous_routing
                     , io_rt_nde.ind_normal_registration_point
                     , io_rt_nde.sct_id
                     , io_rt_nde.identifier_within_sct
                     , io_rt_nde.description
                     , io_rt_nde.pon_id
                     , io_rt_nde.ind_suspend_deregistration )
           returning id
                   , nde_type
                   , ind_autonomous_routing
                   , ind_normal_registration_point
                   , sct_id
                   , identifier_within_sct
                   , description
                   , pon_id
                   , ind_suspend_deregistration
                into io_rt_nde.id
                   , io_rt_nde.nde_type
                   , io_rt_nde.ind_autonomous_routing
                   , io_rt_nde.ind_normal_registration_point
                   , io_rt_nde.sct_id
                   , io_rt_nde.identifier_within_sct
                   , io_rt_nde.description
                   , io_rt_nde.pon_id
                   , io_rt_nde.ind_suspend_deregistration;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_nde.id||'"'
                                                             ||', NDE_TYPE = "'||io_rt_nde.nde_type||'"'
                                                             ||', IND_AUTONOMOUS_ROUTING = "'||io_rt_nde.ind_autonomous_routing||'"'
                                                             ||', IND_NORMAL_REGISTRATION_POINT = "'||io_rt_nde.ind_normal_registration_point||'"'
                                                             ||', SCT_ID = "'||io_rt_nde.sct_id||'"'
                                                             ||', IDENTIFIER_WITHIN_SCT = "'||io_rt_nde.identifier_within_sct||'"'
                                                             ||', DESCRIPTION = "'||io_rt_nde.description||'"'
                                                             ||', PON_ID = "'||io_rt_nde.pon_id||'"'
                                                             ||', IND_SUSPEND_DEREGISTRATION = "'||io_rt_nde.ind_suspend_deregistration||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end nde_insert_row;

function nde_perform_update( i_nde_id   in     lm_nodes.id%type
                           , io_rt_nde  in out lm_nodes%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.nde_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update lm_nodes
            set id = io_rt_nde.id
              , nde_type = io_rt_nde.nde_type
              , ind_autonomous_routing = io_rt_nde.ind_autonomous_routing
              , ind_normal_registration_point = io_rt_nde.ind_normal_registration_point
              , sct_id = io_rt_nde.sct_id
              , identifier_within_sct = io_rt_nde.identifier_within_sct
              , description = io_rt_nde.description
              , pon_id = io_rt_nde.pon_id
              , ind_suspend_deregistration = io_rt_nde.ind_suspend_deregistration
          where id = i_nde_id
      returning id
              , nde_type
              , ind_autonomous_routing
              , ind_normal_registration_point
              , sct_id
              , identifier_within_sct
              , description
              , pon_id
              , ind_suspend_deregistration
           into io_rt_nde.id
              , io_rt_nde.nde_type
              , io_rt_nde.ind_autonomous_routing
              , io_rt_nde.ind_normal_registration_point
              , io_rt_nde.sct_id
              , io_rt_nde.identifier_within_sct
              , io_rt_nde.description
              , io_rt_nde.pon_id
              , io_rt_nde.ind_suspend_deregistration;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_nde.id||'"'
                                                             ||', NDE_TYPE = "'||io_rt_nde.nde_type||'"'
                                                             ||', IND_AUTONOMOUS_ROUTING = "'||io_rt_nde.ind_autonomous_routing||'"'
                                                             ||', IND_NORMAL_REGISTRATION_POINT = "'||io_rt_nde.ind_normal_registration_point||'"'
                                                             ||', SCT_ID = "'||io_rt_nde.sct_id||'"'
                                                             ||', IDENTIFIER_WITHIN_SCT = "'||io_rt_nde.identifier_within_sct||'"'
                                                             ||', DESCRIPTION = "'||io_rt_nde.description||'"'
                                                             ||', PON_ID = "'||io_rt_nde.pon_id||'"'
                                                             ||', IND_SUSPEND_DEREGISTRATION = "'||io_rt_nde.ind_suspend_deregistration||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end nde_perform_update;

function nde_perform_delete( i_nde_id   in  lm_nodes.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.nde_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from lm_nodes
          where id = i_nde_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_nde_id||'"' );
   end;                                                          
end nde_perform_delete;

function nde_update_row( i_nde_id   in     lm_nodes.id%type
                       , io_rt_nde  in out lm_nodes%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.nde_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         nde_lock_row( i_nde_id   =>  i_nde_id );

         
         l_rowcount := 
            nde_perform_update( i_nde_id   =>  i_nde_id
                              , io_rt_nde  => io_rt_nde );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_nde.id||'"'
                                                          ||', NDE_TYPE = "'||io_rt_nde.nde_type||'"'
                                                          ||', IND_AUTONOMOUS_ROUTING = "'||io_rt_nde.ind_autonomous_routing||'"'
                                                          ||', IND_NORMAL_REGISTRATION_POINT = "'||io_rt_nde.ind_normal_registration_point||'"'
                                                          ||', SCT_ID = "'||io_rt_nde.sct_id||'"'
                                                          ||', IDENTIFIER_WITHIN_SCT = "'||io_rt_nde.identifier_within_sct||'"'
                                                          ||', DESCRIPTION = "'||io_rt_nde.description||'"'
                                                          ||', PON_ID = "'||io_rt_nde.pon_id||'"'
                                                          ||', IND_SUSPEND_DEREGISTRATION = "'||io_rt_nde.ind_suspend_deregistration||'"'                                                           , 1, 4000));
   end;                                                          
end nde_update_row;

function nde_delete_row( i_nde_id   in  lm_nodes.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.nde_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         nde_lock_row( i_nde_id   =>  i_nde_id );

         
         l_deleted := nde_perform_delete( i_nde_id   =>  i_nde_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_nde_id||'"' );
   end;                                                          
end nde_delete_row;


end lm_nde_tapi_pck;
/