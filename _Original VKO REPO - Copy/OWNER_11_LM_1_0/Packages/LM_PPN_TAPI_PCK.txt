create or replace PACKAGE lm_ppn_tapi_pck
IS
-- Table API package for table lm_process_plans
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:15)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'LM_PPN_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'LM_PROCESS_PLANS';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION ppn_select_row( i_ppn_ID   IN  lm_process_plans.ID%TYPE
                       , o_rt_ppn   OUT lm_process_plans%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION ppn_select_row_uk1( i_ppn_CPN_ID   IN  lm_process_plans.CPN_ID%TYPE
                           , i_ppn_NAME   IN  lm_process_plans.NAME%TYPE
                           , i_ppn_VERSION   IN  lm_process_plans.VERSION%TYPE
                           , o_rt_ppn  OUT lm_process_plans%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION ppn_select_row_upd( i_ppn_ID   IN  lm_process_plans.ID%TYPE
                           , o_rt_ppn   OUT lm_process_plans%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION ppn_select_row_upd_uk1( i_ppn_CPN_ID   IN  lm_process_plans.CPN_ID%TYPE
                               , i_ppn_NAME   IN  lm_process_plans.NAME%TYPE
                               , i_ppn_VERSION   IN  lm_process_plans.VERSION%TYPE
                               , o_rt_ppn  OUT lm_process_plans%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE ppn_lock_row( i_ppn_ID   IN  lm_process_plans.ID%TYPE )
;

PROCEDURE ppn_lock_row_nowait( i_ppn_ID   IN  lm_process_plans.ID%TYPE )
;

PROCEDURE ppn_insert_row ( io_rt_ppn  IN OUT lm_process_plans%ROWTYPE )
;

FUNCTION ppn_update_row( i_ppn_ID   IN     lm_process_plans.ID%TYPE
                       , io_rt_ppn  IN OUT lm_process_plans%ROWTYPE )
RETURN NUMBER
;

FUNCTION ppn_delete_row( i_ppn_ID   IN  lm_process_plans.ID%TYPE )
RETURN BOOLEAN
;

FUNCTION ppn_seq1_nextval
RETURN lm_process_plans.ID%TYPE
;


END lm_ppn_tapi_pck;
/




package body lm_ppn_tapi_pck
is




function ppn_select_row( i_ppn_id   in  lm_process_plans.id%type
                       , o_rt_ppn   out lm_process_plans%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ppn_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_ppn ( i_ppn_id   in  lm_process_plans.id%type )
      is 
           select *
             from lm_process_plans ppn
            where ppn.id = i_ppn_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_ppn( i_ppn_id => i_ppn_id );
         fetch c_ppn into o_rt_ppn;
         l_found := c_ppn%found;
         close c_ppn;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_ppn%isopen
         then
            close c_ppn;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end ppn_select_row;

function ppn_select_row_uk1( i_ppn_cpn_id   in  lm_process_plans.cpn_id%type
                           , i_ppn_name   in  lm_process_plans.name%type
                           , i_ppn_version   in  lm_process_plans.version%type
                           , o_rt_ppn  out lm_process_plans%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ppn_select_row_uk1';
   l_found                boolean      := false;
begin
   declare
      cursor c_ppn ( i_ppn_cpn_id   in  lm_process_plans.cpn_id%type
                   , i_ppn_name   in  lm_process_plans.name%type
                   , i_ppn_version   in  lm_process_plans.version%type )
      is
         select *
           from lm_process_plans ppn
          where ppn.cpn_id = i_ppn_cpn_id 
            and ppn.name = i_ppn_name 
            and ppn.version = i_ppn_version ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_ppn(i_ppn_cpn_id => i_ppn_cpn_id, i_ppn_name => i_ppn_name, i_ppn_version => i_ppn_version);
         fetch c_ppn into o_rt_ppn;
         l_found := c_ppn%found;
         close c_ppn;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_ppn%isopen
      then
         close c_ppn;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end ppn_select_row_uk1;

function ppn_select_row_upd( i_ppn_id   in  lm_process_plans.id%type
                           , o_rt_ppn   out lm_process_plans%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ppn_select_row_upd';
   l_found                boolean      := false;

   cursor c_ppn ( i_ppn_id   in  lm_process_plans.id%type )
   is
           select *
             from lm_process_plans ppn
            where ppn.id = i_ppn_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_ppn( i_ppn_id => i_ppn_id );
   fetch c_ppn into o_rt_ppn;
   l_found := c_ppn%found;
   close c_ppn;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_ppn%isopen
      then
         close c_ppn;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end ppn_select_row_upd;

function ppn_select_row_upd_uk1( i_ppn_cpn_id   in  lm_process_plans.cpn_id%type
                               , i_ppn_name   in  lm_process_plans.name%type
                               , i_ppn_version   in  lm_process_plans.version%type
                               , o_rt_ppn  out lm_process_plans%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ppn_select_row_upd_uk1';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := ppn_select_row_uk1( i_ppn_cpn_id   =>  i_ppn_cpn_id
                                   , i_ppn_name   =>  i_ppn_name
                                   , i_ppn_version   =>  i_ppn_version
                                   , o_rt_ppn => o_rt_ppn );
      if l_found
      then
         
         l_found := ppn_select_row_upd( i_ppn_id => o_rt_ppn.id
                                      , o_rt_ppn => o_rt_ppn );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end ppn_select_row_upd_uk1;

procedure ppn_lock_row( i_ppn_id   in  lm_process_plans.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ppn_lock_row';
begin
  declare
     cursor c_ppn ( i_ppn_id   in  lm_process_plans.id%type )
     is
             select ''
               from lm_process_plans ppn
              where ppn.id = i_ppn_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_ppn_id is not null
         then
            begin
                
                ppn_lock_row_nowait( i_ppn_id => i_ppn_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_ppn( i_ppn_id => i_ppn_id );
                  close c_ppn;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_ppn%isopen
         then
            close c_ppn;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end ppn_lock_row;

procedure ppn_lock_row_nowait( i_ppn_id   in  lm_process_plans.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ppn_lock_row_nowait';
begin
   declare
      cursor c_ppn ( i_ppn_id   in  lm_process_plans.id%type )
      is
              select ''
                from lm_process_plans ppn
               where ppn.id = i_ppn_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_ppn_id is not null
         then
            
            open c_ppn( i_ppn_id => i_ppn_id );

            close c_ppn;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_ppn%isopen
        then
           close c_ppn;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_ppn_id||'"' );
   end;                                                          
end ppn_lock_row_nowait;

function ppn_perform_update( i_ppn_id   in     lm_process_plans.id%type
                           , io_rt_ppn  in out lm_process_plans%rowtype )
return number
;

function ppn_perform_delete( i_ppn_id   in  lm_process_plans.id%type )
return boolean
;

procedure ppn_insert_row ( io_rt_ppn  in out lm_process_plans%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ppn_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into lm_process_plans( id
                                , cpn_id
                                , name
                                , version )
              values ( io_rt_ppn.id
                     , io_rt_ppn.cpn_id
                     , io_rt_ppn.name
                     , io_rt_ppn.version )
           returning id
                   , cpn_id
                   , name
                   , version
                into io_rt_ppn.id
                   , io_rt_ppn.cpn_id
                   , io_rt_ppn.name
                   , io_rt_ppn.version;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_ppn.id||'"'
                                                             ||', CPN_ID = "'||io_rt_ppn.cpn_id||'"'
                                                             ||', NAME = "'||io_rt_ppn.name||'"'
                                                             ||', VERSION = "'||io_rt_ppn.version||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end ppn_insert_row;

function ppn_perform_update( i_ppn_id   in     lm_process_plans.id%type
                           , io_rt_ppn  in out lm_process_plans%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ppn_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update lm_process_plans
            set id = io_rt_ppn.id
              , cpn_id = io_rt_ppn.cpn_id
              , name = io_rt_ppn.name
              , version = io_rt_ppn.version
          where id = i_ppn_id
      returning id
              , cpn_id
              , name
              , version
           into io_rt_ppn.id
              , io_rt_ppn.cpn_id
              , io_rt_ppn.name
              , io_rt_ppn.version;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_ppn.id||'"'
                                                             ||', CPN_ID = "'||io_rt_ppn.cpn_id||'"'
                                                             ||', NAME = "'||io_rt_ppn.name||'"'
                                                             ||', VERSION = "'||io_rt_ppn.version||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end ppn_perform_update;

function ppn_perform_delete( i_ppn_id   in  lm_process_plans.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ppn_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from lm_process_plans
          where id = i_ppn_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_ppn_id||'"' );
   end;                                                          
end ppn_perform_delete;

function ppn_update_row( i_ppn_id   in     lm_process_plans.id%type
                       , io_rt_ppn  in out lm_process_plans%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ppn_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         ppn_lock_row( i_ppn_id   =>  i_ppn_id );

         
         l_rowcount := 
            ppn_perform_update( i_ppn_id   =>  i_ppn_id
                              , io_rt_ppn  => io_rt_ppn );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_ppn.id||'"'
                                                          ||', CPN_ID = "'||io_rt_ppn.cpn_id||'"'
                                                          ||', NAME = "'||io_rt_ppn.name||'"'
                                                          ||', VERSION = "'||io_rt_ppn.version||'"'                                                           , 1, 4000));
   end;                                                          
end ppn_update_row;

function ppn_delete_row( i_ppn_id   in  lm_process_plans.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ppn_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         ppn_lock_row( i_ppn_id   =>  i_ppn_id );

         
         l_deleted := ppn_perform_delete( i_ppn_id   =>  i_ppn_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_ppn_id||'"' );
   end;                                                          
end ppn_delete_row;

function ppn_seq1_nextval
return lm_process_plans.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ppn_seq1_nextval';
   l_ppn_id  lm_process_plans.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select lm_ppn_seq1.nextval 
           into l_ppn_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_ppn_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end ppn_seq1_nextval;


end lm_ppn_tapi_pck;
/