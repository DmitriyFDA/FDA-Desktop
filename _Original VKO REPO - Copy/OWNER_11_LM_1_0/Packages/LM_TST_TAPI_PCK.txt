create or replace PACKAGE lm_tst_tapi_pck
IS
-- Table API package for table lm_technical_segments
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:19)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'LM_TST_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'LM_TECHNICAL_SEGMENTS';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION tst_select_row( i_tst_ID   IN  lm_technical_segments.ID%TYPE
                       , o_rt_tst   OUT lm_technical_segments%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION tst_select_row_uk1( i_tst_ID_CUST   IN  lm_technical_segments.ID_CUST%TYPE
                           , o_rt_tst  OUT lm_technical_segments%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION tst_select_row_uk2( i_tst_SCT_ID   IN  lm_technical_segments.SCT_ID%TYPE
                           , i_tst_LST_ID   IN  lm_technical_segments.LST_ID%TYPE
                           , o_rt_tst  OUT lm_technical_segments%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION tst_select_row_upd( i_tst_ID   IN  lm_technical_segments.ID%TYPE
                           , o_rt_tst   OUT lm_technical_segments%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION tst_select_row_upd_uk1( i_tst_ID_CUST   IN  lm_technical_segments.ID_CUST%TYPE
                               , o_rt_tst  OUT lm_technical_segments%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION tst_select_row_upd_uk2( i_tst_SCT_ID   IN  lm_technical_segments.SCT_ID%TYPE
                               , i_tst_LST_ID   IN  lm_technical_segments.LST_ID%TYPE
                               , o_rt_tst  OUT lm_technical_segments%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE tst_lock_row( i_tst_ID   IN  lm_technical_segments.ID%TYPE )
;

PROCEDURE tst_lock_row_nowait( i_tst_ID   IN  lm_technical_segments.ID%TYPE )
;

PROCEDURE tst_insert_row ( io_rt_tst  IN OUT lm_technical_segments%ROWTYPE )
;

FUNCTION tst_update_row( i_tst_ID   IN     lm_technical_segments.ID%TYPE
                       , io_rt_tst  IN OUT lm_technical_segments%ROWTYPE )
RETURN NUMBER
;

FUNCTION tst_delete_row( i_tst_ID   IN  lm_technical_segments.ID%TYPE )
RETURN BOOLEAN
;


END lm_tst_tapi_pck;
/




package body lm_tst_tapi_pck
is




function tst_select_row( i_tst_id   in  lm_technical_segments.id%type
                       , o_rt_tst   out lm_technical_segments%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tst_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_tst ( i_tst_id   in  lm_technical_segments.id%type )
      is 
           select *
             from lm_technical_segments tst
            where tst.id = i_tst_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_tst( i_tst_id => i_tst_id );
         fetch c_tst into o_rt_tst;
         l_found := c_tst%found;
         close c_tst;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_tst%isopen
         then
            close c_tst;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end tst_select_row;

function tst_select_row_uk1( i_tst_id_cust   in  lm_technical_segments.id_cust%type
                           , o_rt_tst  out lm_technical_segments%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tst_select_row_uk1';
   l_found                boolean      := false;
begin
   declare
      cursor c_tst ( i_tst_id_cust   in  lm_technical_segments.id_cust%type )
      is
         select *
           from lm_technical_segments tst
          where tst.id_cust = i_tst_id_cust ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_tst(i_tst_id_cust => i_tst_id_cust);
         fetch c_tst into o_rt_tst;
         l_found := c_tst%found;
         close c_tst;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_tst%isopen
      then
         close c_tst;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end tst_select_row_uk1;

function tst_select_row_uk2( i_tst_sct_id   in  lm_technical_segments.sct_id%type
                           , i_tst_lst_id   in  lm_technical_segments.lst_id%type
                           , o_rt_tst  out lm_technical_segments%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tst_select_row_uk2';
   l_found                boolean      := false;
begin
   declare
      cursor c_tst ( i_tst_sct_id   in  lm_technical_segments.sct_id%type
                   , i_tst_lst_id   in  lm_technical_segments.lst_id%type )
      is
         select *
           from lm_technical_segments tst
          where tst.sct_id = i_tst_sct_id 
            and tst.lst_id = i_tst_lst_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_tst(i_tst_sct_id => i_tst_sct_id, i_tst_lst_id => i_tst_lst_id);
         fetch c_tst into o_rt_tst;
         l_found := c_tst%found;
         close c_tst;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_tst%isopen
      then
         close c_tst;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end tst_select_row_uk2;

function tst_select_row_upd( i_tst_id   in  lm_technical_segments.id%type
                           , o_rt_tst   out lm_technical_segments%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tst_select_row_upd';
   l_found                boolean      := false;

   cursor c_tst ( i_tst_id   in  lm_technical_segments.id%type )
   is
           select *
             from lm_technical_segments tst
            where tst.id = i_tst_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_tst( i_tst_id => i_tst_id );
   fetch c_tst into o_rt_tst;
   l_found := c_tst%found;
   close c_tst;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_tst%isopen
      then
         close c_tst;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end tst_select_row_upd;

function tst_select_row_upd_uk1( i_tst_id_cust   in  lm_technical_segments.id_cust%type
                               , o_rt_tst  out lm_technical_segments%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tst_select_row_upd_uk1';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := tst_select_row_uk1( i_tst_id_cust   =>  i_tst_id_cust
                                   , o_rt_tst => o_rt_tst );
      if l_found
      then
         
         l_found := tst_select_row_upd( i_tst_id => o_rt_tst.id
                                      , o_rt_tst => o_rt_tst );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end tst_select_row_upd_uk1;

function tst_select_row_upd_uk2( i_tst_sct_id   in  lm_technical_segments.sct_id%type
                               , i_tst_lst_id   in  lm_technical_segments.lst_id%type
                               , o_rt_tst  out lm_technical_segments%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tst_select_row_upd_uk2';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := tst_select_row_uk2( i_tst_sct_id   =>  i_tst_sct_id
                                   , i_tst_lst_id   =>  i_tst_lst_id
                                   , o_rt_tst => o_rt_tst );
      if l_found
      then
         
         l_found := tst_select_row_upd( i_tst_id => o_rt_tst.id
                                      , o_rt_tst => o_rt_tst );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end tst_select_row_upd_uk2;

procedure tst_lock_row( i_tst_id   in  lm_technical_segments.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tst_lock_row';
begin
  declare
     cursor c_tst ( i_tst_id   in  lm_technical_segments.id%type )
     is
             select ''
               from lm_technical_segments tst
              where tst.id = i_tst_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_tst_id is not null
         then
            begin
                
                tst_lock_row_nowait( i_tst_id => i_tst_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_tst( i_tst_id => i_tst_id );
                  close c_tst;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_tst%isopen
         then
            close c_tst;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end tst_lock_row;

procedure tst_lock_row_nowait( i_tst_id   in  lm_technical_segments.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tst_lock_row_nowait';
begin
   declare
      cursor c_tst ( i_tst_id   in  lm_technical_segments.id%type )
      is
              select ''
                from lm_technical_segments tst
               where tst.id = i_tst_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_tst_id is not null
         then
            
            open c_tst( i_tst_id => i_tst_id );

            close c_tst;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_tst%isopen
        then
           close c_tst;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_tst_id||'"' );
   end;                                                          
end tst_lock_row_nowait;

function tst_perform_update( i_tst_id   in     lm_technical_segments.id%type
                           , io_rt_tst  in out lm_technical_segments%rowtype )
return number
;

function tst_perform_delete( i_tst_id   in  lm_technical_segments.id%type )
return boolean
;

procedure tst_insert_row ( io_rt_tst  in out lm_technical_segments%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tst_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into lm_technical_segments( id
                                , sct_id
                                , id_cust
                                , description
                                , lst_id )
              values ( io_rt_tst.id
                     , io_rt_tst.sct_id
                     , io_rt_tst.id_cust
                     , io_rt_tst.description
                     , io_rt_tst.lst_id )
           returning id
                   , sct_id
                   , id_cust
                   , description
                   , lst_id
                into io_rt_tst.id
                   , io_rt_tst.sct_id
                   , io_rt_tst.id_cust
                   , io_rt_tst.description
                   , io_rt_tst.lst_id;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_tst.id||'"'
                                                             ||', SCT_ID = "'||io_rt_tst.sct_id||'"'
                                                             ||', ID_CUST = "'||io_rt_tst.id_cust||'"'
                                                             ||', DESCRIPTION = "'||io_rt_tst.description||'"'
                                                             ||', LST_ID = "'||io_rt_tst.lst_id||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end tst_insert_row;

function tst_perform_update( i_tst_id   in     lm_technical_segments.id%type
                           , io_rt_tst  in out lm_technical_segments%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tst_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update lm_technical_segments
            set id = io_rt_tst.id
              , sct_id = io_rt_tst.sct_id
              , id_cust = io_rt_tst.id_cust
              , description = io_rt_tst.description
              , lst_id = io_rt_tst.lst_id
          where id = i_tst_id
      returning id
              , sct_id
              , id_cust
              , description
              , lst_id
           into io_rt_tst.id
              , io_rt_tst.sct_id
              , io_rt_tst.id_cust
              , io_rt_tst.description
              , io_rt_tst.lst_id;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_tst.id||'"'
                                                             ||', SCT_ID = "'||io_rt_tst.sct_id||'"'
                                                             ||', ID_CUST = "'||io_rt_tst.id_cust||'"'
                                                             ||', DESCRIPTION = "'||io_rt_tst.description||'"'
                                                             ||', LST_ID = "'||io_rt_tst.lst_id||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end tst_perform_update;

function tst_perform_delete( i_tst_id   in  lm_technical_segments.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tst_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from lm_technical_segments
          where id = i_tst_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_tst_id||'"' );
   end;                                                          
end tst_perform_delete;

function tst_update_row( i_tst_id   in     lm_technical_segments.id%type
                       , io_rt_tst  in out lm_technical_segments%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tst_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         tst_lock_row( i_tst_id   =>  i_tst_id );

         
         l_rowcount := 
            tst_perform_update( i_tst_id   =>  i_tst_id
                              , io_rt_tst  => io_rt_tst );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_tst.id||'"'
                                                          ||', SCT_ID = "'||io_rt_tst.sct_id||'"'
                                                          ||', ID_CUST = "'||io_rt_tst.id_cust||'"'
                                                          ||', DESCRIPTION = "'||io_rt_tst.description||'"'
                                                          ||', LST_ID = "'||io_rt_tst.lst_id||'"'                                                           , 1, 4000));
   end;                                                          
end tst_update_row;

function tst_delete_row( i_tst_id   in  lm_technical_segments.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tst_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         tst_lock_row( i_tst_id   =>  i_tst_id );

         
         l_deleted := tst_perform_delete( i_tst_id   =>  i_tst_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_tst_id||'"' );
   end;                                                          
end tst_delete_row;


end lm_tst_tapi_pck;
/