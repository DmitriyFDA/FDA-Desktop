create or replace PACKAGE lm_tss_tapi_pck
IS
-- Table API package for table lm_technical_segment_statuses
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:19)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'LM_TSS_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'LM_TECHNICAL_SEGMENT_STATUSES';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION tss_select_row( i_tss_ID   IN  lm_technical_segment_statuses.ID%TYPE
                       , o_rt_tss   OUT lm_technical_segment_statuses%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION tss_select_row_uk1( i_tss_SSM_ID   IN  lm_technical_segment_statuses.SSM_ID%TYPE
                           , i_tss_TST_ID   IN  lm_technical_segment_statuses.TST_ID%TYPE
                           , o_rt_tss  OUT lm_technical_segment_statuses%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION tss_select_row_upd( i_tss_ID   IN  lm_technical_segment_statuses.ID%TYPE
                           , o_rt_tss   OUT lm_technical_segment_statuses%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION tss_select_row_upd_uk1( i_tss_SSM_ID   IN  lm_technical_segment_statuses.SSM_ID%TYPE
                               , i_tss_TST_ID   IN  lm_technical_segment_statuses.TST_ID%TYPE
                               , o_rt_tss  OUT lm_technical_segment_statuses%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE tss_lock_row( i_tss_ID   IN  lm_technical_segment_statuses.ID%TYPE )
;

PROCEDURE tss_lock_row_nowait( i_tss_ID   IN  lm_technical_segment_statuses.ID%TYPE )
;

PROCEDURE tss_insert_row ( io_rt_tss  IN OUT lm_technical_segment_statuses%ROWTYPE )
;

FUNCTION tss_update_row( i_tss_ID   IN     lm_technical_segment_statuses.ID%TYPE
                       , io_rt_tss  IN OUT lm_technical_segment_statuses%ROWTYPE )
RETURN NUMBER
;

FUNCTION tss_delete_row( i_tss_ID   IN  lm_technical_segment_statuses.ID%TYPE )
RETURN BOOLEAN
;

FUNCTION tss_seq1_nextval
RETURN lm_technical_segment_statuses.ID%TYPE
;


END lm_tss_tapi_pck;
/




package body lm_tss_tapi_pck
is




function tss_select_row( i_tss_id   in  lm_technical_segment_statuses.id%type
                       , o_rt_tss   out lm_technical_segment_statuses%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tss_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_tss ( i_tss_id   in  lm_technical_segment_statuses.id%type )
      is 
           select *
             from lm_technical_segment_statuses tss
            where tss.id = i_tss_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_tss( i_tss_id => i_tss_id );
         fetch c_tss into o_rt_tss;
         l_found := c_tss%found;
         close c_tss;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_tss%isopen
         then
            close c_tss;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end tss_select_row;

function tss_select_row_uk1( i_tss_ssm_id   in  lm_technical_segment_statuses.ssm_id%type
                           , i_tss_tst_id   in  lm_technical_segment_statuses.tst_id%type
                           , o_rt_tss  out lm_technical_segment_statuses%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tss_select_row_uk1';
   l_found                boolean      := false;
begin
   declare
      cursor c_tss ( i_tss_ssm_id   in  lm_technical_segment_statuses.ssm_id%type
                   , i_tss_tst_id   in  lm_technical_segment_statuses.tst_id%type )
      is
         select *
           from lm_technical_segment_statuses tss
          where tss.ssm_id = i_tss_ssm_id 
            and tss.tst_id = i_tss_tst_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_tss(i_tss_ssm_id => i_tss_ssm_id, i_tss_tst_id => i_tss_tst_id);
         fetch c_tss into o_rt_tss;
         l_found := c_tss%found;
         close c_tss;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_tss%isopen
      then
         close c_tss;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end tss_select_row_uk1;

function tss_select_row_upd( i_tss_id   in  lm_technical_segment_statuses.id%type
                           , o_rt_tss   out lm_technical_segment_statuses%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tss_select_row_upd';
   l_found                boolean      := false;

   cursor c_tss ( i_tss_id   in  lm_technical_segment_statuses.id%type )
   is
           select *
             from lm_technical_segment_statuses tss
            where tss.id = i_tss_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_tss( i_tss_id => i_tss_id );
   fetch c_tss into o_rt_tss;
   l_found := c_tss%found;
   close c_tss;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_tss%isopen
      then
         close c_tss;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end tss_select_row_upd;

function tss_select_row_upd_uk1( i_tss_ssm_id   in  lm_technical_segment_statuses.ssm_id%type
                               , i_tss_tst_id   in  lm_technical_segment_statuses.tst_id%type
                               , o_rt_tss  out lm_technical_segment_statuses%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tss_select_row_upd_uk1';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := tss_select_row_uk1( i_tss_ssm_id   =>  i_tss_ssm_id
                                   , i_tss_tst_id   =>  i_tss_tst_id
                                   , o_rt_tss => o_rt_tss );
      if l_found
      then
         
         l_found := tss_select_row_upd( i_tss_id => o_rt_tss.id
                                      , o_rt_tss => o_rt_tss );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end tss_select_row_upd_uk1;

procedure tss_lock_row( i_tss_id   in  lm_technical_segment_statuses.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tss_lock_row';
begin
  declare
     cursor c_tss ( i_tss_id   in  lm_technical_segment_statuses.id%type )
     is
             select ''
               from lm_technical_segment_statuses tss
              where tss.id = i_tss_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_tss_id is not null
         then
            begin
                
                tss_lock_row_nowait( i_tss_id => i_tss_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_tss( i_tss_id => i_tss_id );
                  close c_tss;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_tss%isopen
         then
            close c_tss;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end tss_lock_row;

procedure tss_lock_row_nowait( i_tss_id   in  lm_technical_segment_statuses.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tss_lock_row_nowait';
begin
   declare
      cursor c_tss ( i_tss_id   in  lm_technical_segment_statuses.id%type )
      is
              select ''
                from lm_technical_segment_statuses tss
               where tss.id = i_tss_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_tss_id is not null
         then
            
            open c_tss( i_tss_id => i_tss_id );

            close c_tss;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_tss%isopen
        then
           close c_tss;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_tss_id||'"' );
   end;                                                          
end tss_lock_row_nowait;

function tss_perform_update( i_tss_id   in     lm_technical_segment_statuses.id%type
                           , io_rt_tss  in out lm_technical_segment_statuses%rowtype )
return number
;

function tss_perform_delete( i_tss_id   in  lm_technical_segment_statuses.id%type )
return boolean
;

procedure tss_insert_row ( io_rt_tss  in out lm_technical_segment_statuses%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tss_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into lm_technical_segment_statuses( id
                                , ssm_id
                                , tst_id
                                , time_activated
                                , time_deactivated
                                , event_time )
              values ( io_rt_tss.id
                     , io_rt_tss.ssm_id
                     , io_rt_tss.tst_id
                     , io_rt_tss.time_activated
                     , io_rt_tss.time_deactivated
                     , io_rt_tss.event_time )
           returning id
                   , ssm_id
                   , tst_id
                   , time_activated
                   , time_deactivated
                   , event_time
                into io_rt_tss.id
                   , io_rt_tss.ssm_id
                   , io_rt_tss.tst_id
                   , io_rt_tss.time_activated
                   , io_rt_tss.time_deactivated
                   , io_rt_tss.event_time;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_tss.id||'"'
                                                             ||', SSM_ID = "'||io_rt_tss.ssm_id||'"'
                                                             ||', TST_ID = "'||io_rt_tss.tst_id||'"'
                                                             ||', TIME_ACTIVATED = "'||io_rt_tss.time_activated||'"'
                                                             ||', TIME_DEACTIVATED = "'||io_rt_tss.time_deactivated||'"'
                                                             ||', EVENT_TIME = "'||io_rt_tss.event_time||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end tss_insert_row;

function tss_perform_update( i_tss_id   in     lm_technical_segment_statuses.id%type
                           , io_rt_tss  in out lm_technical_segment_statuses%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tss_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update lm_technical_segment_statuses
            set id = io_rt_tss.id
              , ssm_id = io_rt_tss.ssm_id
              , tst_id = io_rt_tss.tst_id
              , time_activated = io_rt_tss.time_activated
              , time_deactivated = io_rt_tss.time_deactivated
              , event_time = io_rt_tss.event_time
          where id = i_tss_id
      returning id
              , ssm_id
              , tst_id
              , time_activated
              , time_deactivated
              , event_time
           into io_rt_tss.id
              , io_rt_tss.ssm_id
              , io_rt_tss.tst_id
              , io_rt_tss.time_activated
              , io_rt_tss.time_deactivated
              , io_rt_tss.event_time;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_tss.id||'"'
                                                             ||', SSM_ID = "'||io_rt_tss.ssm_id||'"'
                                                             ||', TST_ID = "'||io_rt_tss.tst_id||'"'
                                                             ||', TIME_ACTIVATED = "'||io_rt_tss.time_activated||'"'
                                                             ||', TIME_DEACTIVATED = "'||io_rt_tss.time_deactivated||'"'
                                                             ||', EVENT_TIME = "'||io_rt_tss.event_time||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end tss_perform_update;

function tss_perform_delete( i_tss_id   in  lm_technical_segment_statuses.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tss_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from lm_technical_segment_statuses
          where id = i_tss_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_tss_id||'"' );
   end;                                                          
end tss_perform_delete;

function tss_update_row( i_tss_id   in     lm_technical_segment_statuses.id%type
                       , io_rt_tss  in out lm_technical_segment_statuses%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tss_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         tss_lock_row( i_tss_id   =>  i_tss_id );

         
         l_rowcount := 
            tss_perform_update( i_tss_id   =>  i_tss_id
                              , io_rt_tss  => io_rt_tss );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_tss.id||'"'
                                                          ||', SSM_ID = "'||io_rt_tss.ssm_id||'"'
                                                          ||', TST_ID = "'||io_rt_tss.tst_id||'"'
                                                          ||', TIME_ACTIVATED = "'||io_rt_tss.time_activated||'"'
                                                          ||', TIME_DEACTIVATED = "'||io_rt_tss.time_deactivated||'"'
                                                          ||', EVENT_TIME = "'||io_rt_tss.event_time||'"'                                                           , 1, 4000));
   end;                                                          
end tss_update_row;

function tss_delete_row( i_tss_id   in  lm_technical_segment_statuses.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tss_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         tss_lock_row( i_tss_id   =>  i_tss_id );

         
         l_deleted := tss_perform_delete( i_tss_id   =>  i_tss_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_tss_id||'"' );
   end;                                                          
end tss_delete_row;

function tss_seq1_nextval
return lm_technical_segment_statuses.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tss_seq1_nextval';
   l_tss_id  lm_technical_segment_statuses.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select lm_tss_seq1.nextval 
           into l_tss_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_tss_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end tss_seq1_nextval;


end lm_tss_tapi_pck;
/