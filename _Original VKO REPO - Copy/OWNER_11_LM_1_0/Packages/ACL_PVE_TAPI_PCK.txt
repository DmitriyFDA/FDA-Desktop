create or replace PACKAGE acl_pve_tapi_pck
IS
-- Table API package for table acl_parameter_values
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:05)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'ACL_PVE_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'ACL_PARAMETER_VALUES';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION pve_select_row( i_pve_ID   IN  acl_parameter_values.ID%TYPE
                       , o_rt_pve   OUT acl_parameter_values%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION pve_select_row_pve_uk( i_pve_PRR_ID   IN  acl_parameter_values.PRR_ID%TYPE
                              , o_rt_pve  OUT acl_parameter_values%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION pve_select_row_upd( i_pve_ID   IN  acl_parameter_values.ID%TYPE
                           , o_rt_pve   OUT acl_parameter_values%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION pve_select_row_upd_pve_uk( i_pve_PRR_ID   IN  acl_parameter_values.PRR_ID%TYPE
                                  , o_rt_pve  OUT acl_parameter_values%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE pve_lock_row( i_pve_ID   IN  acl_parameter_values.ID%TYPE )
;

PROCEDURE pve_lock_row_nowait( i_pve_ID   IN  acl_parameter_values.ID%TYPE )
;

PROCEDURE pve_insert_row ( io_rt_pve  IN OUT acl_parameter_values%ROWTYPE )
;

FUNCTION pve_update_row( i_pve_ID   IN     acl_parameter_values.ID%TYPE
                       , io_rt_pve  IN OUT acl_parameter_values%ROWTYPE )
RETURN NUMBER
;

FUNCTION pve_delete_row( i_pve_ID   IN  acl_parameter_values.ID%TYPE )
RETURN BOOLEAN
;


END acl_pve_tapi_pck;
/




package body acl_pve_tapi_pck
is




function pve_select_row( i_pve_id   in  acl_parameter_values.id%type
                       , o_rt_pve   out acl_parameter_values%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pve_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_pve ( i_pve_id   in  acl_parameter_values.id%type )
      is 
           select *
             from acl_parameter_values pve
            where pve.id = i_pve_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_pve( i_pve_id => i_pve_id );
         fetch c_pve into o_rt_pve;
         l_found := c_pve%found;
         close c_pve;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_pve%isopen
         then
            close c_pve;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pve_select_row;

function pve_select_row_pve_uk( i_pve_prr_id   in  acl_parameter_values.prr_id%type
                              , o_rt_pve  out acl_parameter_values%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pve_select_row_pve_uk';
   l_found                boolean      := false;
begin
   declare
      cursor c_pve ( i_pve_prr_id   in  acl_parameter_values.prr_id%type )
      is
         select *
           from acl_parameter_values pve
          where pve.prr_id = i_pve_prr_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_pve(i_pve_prr_id => i_pve_prr_id);
         fetch c_pve into o_rt_pve;
         l_found := c_pve%found;
         close c_pve;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_pve%isopen
      then
         close c_pve;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pve_select_row_pve_uk;

function pve_select_row_upd( i_pve_id   in  acl_parameter_values.id%type
                           , o_rt_pve   out acl_parameter_values%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pve_select_row_upd';
   l_found                boolean      := false;

   cursor c_pve ( i_pve_id   in  acl_parameter_values.id%type )
   is
           select *
             from acl_parameter_values pve
            where pve.id = i_pve_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_pve( i_pve_id => i_pve_id );
   fetch c_pve into o_rt_pve;
   l_found := c_pve%found;
   close c_pve;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_pve%isopen
      then
         close c_pve;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end pve_select_row_upd;

function pve_select_row_upd_pve_uk( i_pve_prr_id   in  acl_parameter_values.prr_id%type
                                  , o_rt_pve  out acl_parameter_values%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pve_select_row_upd_pve_uk';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := pve_select_row_pve_uk( i_pve_prr_id   =>  i_pve_prr_id
                                      , o_rt_pve => o_rt_pve );
      if l_found
      then
         
         l_found := pve_select_row_upd( i_pve_id => o_rt_pve.id
                                      , o_rt_pve => o_rt_pve );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end pve_select_row_upd_pve_uk;

procedure pve_lock_row( i_pve_id   in  acl_parameter_values.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pve_lock_row';
begin
  declare
     cursor c_pve ( i_pve_id   in  acl_parameter_values.id%type )
     is
             select ''
               from acl_parameter_values pve
              where pve.id = i_pve_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_pve_id is not null
         then
            begin
                
                pve_lock_row_nowait( i_pve_id => i_pve_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_pve( i_pve_id => i_pve_id );
                  close c_pve;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_pve%isopen
         then
            close c_pve;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end pve_lock_row;

procedure pve_lock_row_nowait( i_pve_id   in  acl_parameter_values.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pve_lock_row_nowait';
begin
   declare
      cursor c_pve ( i_pve_id   in  acl_parameter_values.id%type )
      is
              select ''
                from acl_parameter_values pve
               where pve.id = i_pve_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_pve_id is not null
         then
            
            open c_pve( i_pve_id => i_pve_id );

            close c_pve;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_pve%isopen
        then
           close c_pve;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_pve_id||'"' );
   end;                                                          
end pve_lock_row_nowait;

function pve_perform_update( i_pve_id   in     acl_parameter_values.id%type
                           , io_rt_pve  in out acl_parameter_values%rowtype )
return number
;

function pve_perform_delete( i_pve_id   in  acl_parameter_values.id%type )
return boolean
;

procedure pve_insert_row ( io_rt_pve  in out acl_parameter_values%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pve_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into acl_parameter_values( id
                                , prr_id
                                , pve_comment
                                , value )
              values ( io_rt_pve.id
                     , io_rt_pve.prr_id
                     , io_rt_pve.pve_comment
                     , io_rt_pve.value )
           returning id
                   , prr_id
                   , pve_comment
                   , value
                into io_rt_pve.id
                   , io_rt_pve.prr_id
                   , io_rt_pve.pve_comment
                   , io_rt_pve.value;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_pve.id||'"'
                                                             ||', PRR_ID = "'||io_rt_pve.prr_id||'"'
                                                             ||', PVE_COMMENT = "'||io_rt_pve.pve_comment||'"'
                                                             ||', VALUE = "'||io_rt_pve.value||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pve_insert_row;

function pve_perform_update( i_pve_id   in     acl_parameter_values.id%type
                           , io_rt_pve  in out acl_parameter_values%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pve_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update acl_parameter_values
            set id = io_rt_pve.id
              , prr_id = io_rt_pve.prr_id
              , pve_comment = io_rt_pve.pve_comment
              , value = io_rt_pve.value
          where id = i_pve_id
      returning id
              , prr_id
              , pve_comment
              , value
           into io_rt_pve.id
              , io_rt_pve.prr_id
              , io_rt_pve.pve_comment
              , io_rt_pve.value;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_pve.id||'"'
                                                             ||', PRR_ID = "'||io_rt_pve.prr_id||'"'
                                                             ||', PVE_COMMENT = "'||io_rt_pve.pve_comment||'"'
                                                             ||', VALUE = "'||io_rt_pve.value||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pve_perform_update;

function pve_perform_delete( i_pve_id   in  acl_parameter_values.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pve_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from acl_parameter_values
          where id = i_pve_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_pve_id||'"' );
   end;                                                          
end pve_perform_delete;

function pve_update_row( i_pve_id   in     acl_parameter_values.id%type
                       , io_rt_pve  in out acl_parameter_values%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pve_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         pve_lock_row( i_pve_id   =>  i_pve_id );

         
         l_rowcount := 
            pve_perform_update( i_pve_id   =>  i_pve_id
                              , io_rt_pve  => io_rt_pve );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_pve.id||'"'
                                                          ||', PRR_ID = "'||io_rt_pve.prr_id||'"'
                                                          ||', PVE_COMMENT = "'||io_rt_pve.pve_comment||'"'
                                                          ||', VALUE = "'||io_rt_pve.value||'"'                                                           , 1, 4000));
   end;                                                          
end pve_update_row;

function pve_delete_row( i_pve_id   in  acl_parameter_values.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pve_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         pve_lock_row( i_pve_id   =>  i_pve_id );

         
         l_deleted := pve_perform_delete( i_pve_id   =>  i_pve_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_pve_id||'"' );
   end;                                                          
end pve_delete_row;


end acl_pve_tapi_pck;
/