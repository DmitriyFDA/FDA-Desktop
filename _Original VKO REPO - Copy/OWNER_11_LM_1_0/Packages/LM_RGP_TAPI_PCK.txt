create or replace PACKAGE lm_rgp_tapi_pck
IS
-- Table API package for table lm_release_groups
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:15)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'LM_RGP_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'LM_RELEASE_GROUPS';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION rgp_select_row( i_rgp_ID   IN  lm_release_groups.ID%TYPE
                       , o_rt_rgp   OUT lm_release_groups%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION rgp_select_row_uk1( i_rgp_PAY_ID   IN  lm_release_groups.PAY_ID%TYPE
                           , i_rgp_PTY_ID   IN  lm_release_groups.PTY_ID%TYPE
                           , o_rt_rgp  OUT lm_release_groups%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION rgp_select_row_upd( i_rgp_ID   IN  lm_release_groups.ID%TYPE
                           , o_rt_rgp   OUT lm_release_groups%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION rgp_select_row_upd_uk1( i_rgp_PAY_ID   IN  lm_release_groups.PAY_ID%TYPE
                               , i_rgp_PTY_ID   IN  lm_release_groups.PTY_ID%TYPE
                               , o_rt_rgp  OUT lm_release_groups%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE rgp_lock_row( i_rgp_ID   IN  lm_release_groups.ID%TYPE )
;

PROCEDURE rgp_lock_row_nowait( i_rgp_ID   IN  lm_release_groups.ID%TYPE )
;

PROCEDURE rgp_insert_row ( io_rt_rgp  IN OUT lm_release_groups%ROWTYPE )
;

FUNCTION rgp_update_row( i_rgp_ID   IN     lm_release_groups.ID%TYPE
                       , io_rt_rgp  IN OUT lm_release_groups%ROWTYPE )
RETURN NUMBER
;

FUNCTION rgp_delete_row( i_rgp_ID   IN  lm_release_groups.ID%TYPE )
RETURN BOOLEAN
;

FUNCTION rgp_seq1_nextval
RETURN lm_release_groups.ID%TYPE
;


END lm_rgp_tapi_pck;
/




package body lm_rgp_tapi_pck
is




function rgp_select_row( i_rgp_id   in  lm_release_groups.id%type
                       , o_rt_rgp   out lm_release_groups%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rgp_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_rgp ( i_rgp_id   in  lm_release_groups.id%type )
      is 
           select *
             from lm_release_groups rgp
            where rgp.id = i_rgp_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_rgp( i_rgp_id => i_rgp_id );
         fetch c_rgp into o_rt_rgp;
         l_found := c_rgp%found;
         close c_rgp;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_rgp%isopen
         then
            close c_rgp;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end rgp_select_row;

function rgp_select_row_uk1( i_rgp_pay_id   in  lm_release_groups.pay_id%type
                           , i_rgp_pty_id   in  lm_release_groups.pty_id%type
                           , o_rt_rgp  out lm_release_groups%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rgp_select_row_uk1';
   l_found                boolean      := false;
begin
   declare
      cursor c_rgp ( i_rgp_pay_id   in  lm_release_groups.pay_id%type
                   , i_rgp_pty_id   in  lm_release_groups.pty_id%type )
      is
         select *
           from lm_release_groups rgp
          where rgp.pay_id = i_rgp_pay_id 
            and rgp.pty_id = i_rgp_pty_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_rgp(i_rgp_pay_id => i_rgp_pay_id, i_rgp_pty_id => i_rgp_pty_id);
         fetch c_rgp into o_rt_rgp;
         l_found := c_rgp%found;
         close c_rgp;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_rgp%isopen
      then
         close c_rgp;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end rgp_select_row_uk1;

function rgp_select_row_upd( i_rgp_id   in  lm_release_groups.id%type
                           , o_rt_rgp   out lm_release_groups%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rgp_select_row_upd';
   l_found                boolean      := false;

   cursor c_rgp ( i_rgp_id   in  lm_release_groups.id%type )
   is
           select *
             from lm_release_groups rgp
            where rgp.id = i_rgp_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_rgp( i_rgp_id => i_rgp_id );
   fetch c_rgp into o_rt_rgp;
   l_found := c_rgp%found;
   close c_rgp;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_rgp%isopen
      then
         close c_rgp;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end rgp_select_row_upd;

function rgp_select_row_upd_uk1( i_rgp_pay_id   in  lm_release_groups.pay_id%type
                               , i_rgp_pty_id   in  lm_release_groups.pty_id%type
                               , o_rt_rgp  out lm_release_groups%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rgp_select_row_upd_uk1';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := rgp_select_row_uk1( i_rgp_pay_id   =>  i_rgp_pay_id
                                   , i_rgp_pty_id   =>  i_rgp_pty_id
                                   , o_rt_rgp => o_rt_rgp );
      if l_found
      then
         
         l_found := rgp_select_row_upd( i_rgp_id => o_rt_rgp.id
                                      , o_rt_rgp => o_rt_rgp );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end rgp_select_row_upd_uk1;

procedure rgp_lock_row( i_rgp_id   in  lm_release_groups.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rgp_lock_row';
begin
  declare
     cursor c_rgp ( i_rgp_id   in  lm_release_groups.id%type )
     is
             select ''
               from lm_release_groups rgp
              where rgp.id = i_rgp_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_rgp_id is not null
         then
            begin
                
                rgp_lock_row_nowait( i_rgp_id => i_rgp_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_rgp( i_rgp_id => i_rgp_id );
                  close c_rgp;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_rgp%isopen
         then
            close c_rgp;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end rgp_lock_row;

procedure rgp_lock_row_nowait( i_rgp_id   in  lm_release_groups.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rgp_lock_row_nowait';
begin
   declare
      cursor c_rgp ( i_rgp_id   in  lm_release_groups.id%type )
      is
              select ''
                from lm_release_groups rgp
               where rgp.id = i_rgp_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_rgp_id is not null
         then
            
            open c_rgp( i_rgp_id => i_rgp_id );

            close c_rgp;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_rgp%isopen
        then
           close c_rgp;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_rgp_id||'"' );
   end;                                                          
end rgp_lock_row_nowait;

function rgp_perform_update( i_rgp_id   in     lm_release_groups.id%type
                           , io_rt_rgp  in out lm_release_groups%rowtype )
return number
;

function rgp_perform_delete( i_rgp_id   in  lm_release_groups.id%type )
return boolean
;

procedure rgp_insert_row ( io_rt_rgp  in out lm_release_groups%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rgp_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into lm_release_groups( id
                                , pay_id
                                , pty_id
                                , ste_id
                                , time_limit
                                , status
                                , date_created )
              values ( io_rt_rgp.id
                     , io_rt_rgp.pay_id
                     , io_rt_rgp.pty_id
                     , io_rt_rgp.ste_id
                     , io_rt_rgp.time_limit
                     , io_rt_rgp.status
                     , io_rt_rgp.date_created )
           returning id
                   , pay_id
                   , pty_id
                   , ste_id
                   , time_limit
                   , status
                   , date_created
                into io_rt_rgp.id
                   , io_rt_rgp.pay_id
                   , io_rt_rgp.pty_id
                   , io_rt_rgp.ste_id
                   , io_rt_rgp.time_limit
                   , io_rt_rgp.status
                   , io_rt_rgp.date_created;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_rgp.id||'"'
                                                             ||', PAY_ID = "'||io_rt_rgp.pay_id||'"'
                                                             ||', PTY_ID = "'||io_rt_rgp.pty_id||'"'
                                                             ||', STE_ID = "'||io_rt_rgp.ste_id||'"'
                                                             ||', TIME_LIMIT = "'||io_rt_rgp.time_limit||'"'
                                                             ||', STATUS = "'||io_rt_rgp.status||'"'
                                                             ||', DATE_CREATED = "'||io_rt_rgp.date_created||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end rgp_insert_row;

function rgp_perform_update( i_rgp_id   in     lm_release_groups.id%type
                           , io_rt_rgp  in out lm_release_groups%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rgp_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update lm_release_groups
            set id = io_rt_rgp.id
              , pay_id = io_rt_rgp.pay_id
              , pty_id = io_rt_rgp.pty_id
              , ste_id = io_rt_rgp.ste_id
              , time_limit = io_rt_rgp.time_limit
              , status = io_rt_rgp.status
              , date_created = io_rt_rgp.date_created
          where id = i_rgp_id
      returning id
              , pay_id
              , pty_id
              , ste_id
              , time_limit
              , status
              , date_created
           into io_rt_rgp.id
              , io_rt_rgp.pay_id
              , io_rt_rgp.pty_id
              , io_rt_rgp.ste_id
              , io_rt_rgp.time_limit
              , io_rt_rgp.status
              , io_rt_rgp.date_created;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_rgp.id||'"'
                                                             ||', PAY_ID = "'||io_rt_rgp.pay_id||'"'
                                                             ||', PTY_ID = "'||io_rt_rgp.pty_id||'"'
                                                             ||', STE_ID = "'||io_rt_rgp.ste_id||'"'
                                                             ||', TIME_LIMIT = "'||io_rt_rgp.time_limit||'"'
                                                             ||', STATUS = "'||io_rt_rgp.status||'"'
                                                             ||', DATE_CREATED = "'||io_rt_rgp.date_created||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end rgp_perform_update;

function rgp_perform_delete( i_rgp_id   in  lm_release_groups.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rgp_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from lm_release_groups
          where id = i_rgp_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_rgp_id||'"' );
   end;                                                          
end rgp_perform_delete;

function rgp_update_row( i_rgp_id   in     lm_release_groups.id%type
                       , io_rt_rgp  in out lm_release_groups%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rgp_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         rgp_lock_row( i_rgp_id   =>  i_rgp_id );

         
         l_rowcount := 
            rgp_perform_update( i_rgp_id   =>  i_rgp_id
                              , io_rt_rgp  => io_rt_rgp );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_rgp.id||'"'
                                                          ||', PAY_ID = "'||io_rt_rgp.pay_id||'"'
                                                          ||', PTY_ID = "'||io_rt_rgp.pty_id||'"'
                                                          ||', STE_ID = "'||io_rt_rgp.ste_id||'"'
                                                          ||', TIME_LIMIT = "'||io_rt_rgp.time_limit||'"'
                                                          ||', STATUS = "'||io_rt_rgp.status||'"'
                                                          ||', DATE_CREATED = "'||io_rt_rgp.date_created||'"'                                                           , 1, 4000));
   end;                                                          
end rgp_update_row;

function rgp_delete_row( i_rgp_id   in  lm_release_groups.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rgp_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         rgp_lock_row( i_rgp_id   =>  i_rgp_id );

         
         l_deleted := rgp_perform_delete( i_rgp_id   =>  i_rgp_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_rgp_id||'"' );
   end;                                                          
end rgp_delete_row;

function rgp_seq1_nextval
return lm_release_groups.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rgp_seq1_nextval';
   l_rgp_id  lm_release_groups.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select lm_rgp_seq1.nextval 
           into l_rgp_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_rgp_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end rgp_seq1_nextval;


end lm_rgp_tapi_pck;
/