create or replace PACKAGE lm_tav_tapi_pck
IS
-- Table API package for table lm_task_attribute_values
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:19)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'LM_TAV_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'LM_TASK_ATTRIBUTE_VALUES';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION tav_select_row( i_tav_ID   IN  lm_task_attribute_values.ID%TYPE
                       , o_rt_tav   OUT lm_task_attribute_values%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION tav_select_row_uk1( i_tav_TAE_ID   IN  lm_task_attribute_values.TAE_ID%TYPE
                           , i_tav_TIN_ID   IN  lm_task_attribute_values.TIN_ID%TYPE
                           , i_tav_TAV_ORDER   IN  lm_task_attribute_values.TAV_ORDER%TYPE
                           , o_rt_tav  OUT lm_task_attribute_values%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION tav_select_row_upd( i_tav_ID   IN  lm_task_attribute_values.ID%TYPE
                           , o_rt_tav   OUT lm_task_attribute_values%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION tav_select_row_upd_uk1( i_tav_TAE_ID   IN  lm_task_attribute_values.TAE_ID%TYPE
                               , i_tav_TIN_ID   IN  lm_task_attribute_values.TIN_ID%TYPE
                               , i_tav_TAV_ORDER   IN  lm_task_attribute_values.TAV_ORDER%TYPE
                               , o_rt_tav  OUT lm_task_attribute_values%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE tav_lock_row( i_tav_ID   IN  lm_task_attribute_values.ID%TYPE )
;

PROCEDURE tav_lock_row_nowait( i_tav_ID   IN  lm_task_attribute_values.ID%TYPE )
;

PROCEDURE tav_insert_row ( io_rt_tav  IN OUT lm_task_attribute_values%ROWTYPE )
;

FUNCTION tav_update_row( i_tav_ID   IN     lm_task_attribute_values.ID%TYPE
                       , io_rt_tav  IN OUT lm_task_attribute_values%ROWTYPE )
RETURN NUMBER
;

FUNCTION tav_delete_row( i_tav_ID   IN  lm_task_attribute_values.ID%TYPE )
RETURN BOOLEAN
;

FUNCTION tav_seq1_nextval
RETURN lm_task_attribute_values.ID%TYPE
;


END lm_tav_tapi_pck;
/




package body lm_tav_tapi_pck
is




function tav_select_row( i_tav_id   in  lm_task_attribute_values.id%type
                       , o_rt_tav   out lm_task_attribute_values%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tav_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_tav ( i_tav_id   in  lm_task_attribute_values.id%type )
      is 
           select *
             from lm_task_attribute_values tav
            where tav.id = i_tav_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_tav( i_tav_id => i_tav_id );
         fetch c_tav into o_rt_tav;
         l_found := c_tav%found;
         close c_tav;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_tav%isopen
         then
            close c_tav;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end tav_select_row;

function tav_select_row_uk1( i_tav_tae_id   in  lm_task_attribute_values.tae_id%type
                           , i_tav_tin_id   in  lm_task_attribute_values.tin_id%type
                           , i_tav_tav_order   in  lm_task_attribute_values.tav_order%type
                           , o_rt_tav  out lm_task_attribute_values%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tav_select_row_uk1';
   l_found                boolean      := false;
begin
   declare
      cursor c_tav ( i_tav_tae_id   in  lm_task_attribute_values.tae_id%type
                   , i_tav_tin_id   in  lm_task_attribute_values.tin_id%type
                   , i_tav_tav_order   in  lm_task_attribute_values.tav_order%type )
      is
         select *
           from lm_task_attribute_values tav
          where tav.tae_id = i_tav_tae_id 
            and tav.tin_id = i_tav_tin_id 
            and tav.tav_order = i_tav_tav_order ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_tav(i_tav_tae_id => i_tav_tae_id, i_tav_tin_id => i_tav_tin_id, i_tav_tav_order => i_tav_tav_order);
         fetch c_tav into o_rt_tav;
         l_found := c_tav%found;
         close c_tav;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_tav%isopen
      then
         close c_tav;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end tav_select_row_uk1;

function tav_select_row_upd( i_tav_id   in  lm_task_attribute_values.id%type
                           , o_rt_tav   out lm_task_attribute_values%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tav_select_row_upd';
   l_found                boolean      := false;

   cursor c_tav ( i_tav_id   in  lm_task_attribute_values.id%type )
   is
           select *
             from lm_task_attribute_values tav
            where tav.id = i_tav_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_tav( i_tav_id => i_tav_id );
   fetch c_tav into o_rt_tav;
   l_found := c_tav%found;
   close c_tav;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_tav%isopen
      then
         close c_tav;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end tav_select_row_upd;

function tav_select_row_upd_uk1( i_tav_tae_id   in  lm_task_attribute_values.tae_id%type
                               , i_tav_tin_id   in  lm_task_attribute_values.tin_id%type
                               , i_tav_tav_order   in  lm_task_attribute_values.tav_order%type
                               , o_rt_tav  out lm_task_attribute_values%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tav_select_row_upd_uk1';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := tav_select_row_uk1( i_tav_tae_id   =>  i_tav_tae_id
                                   , i_tav_tin_id   =>  i_tav_tin_id
                                   , i_tav_tav_order   =>  i_tav_tav_order
                                   , o_rt_tav => o_rt_tav );
      if l_found
      then
         
         l_found := tav_select_row_upd( i_tav_id => o_rt_tav.id
                                      , o_rt_tav => o_rt_tav );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end tav_select_row_upd_uk1;

procedure tav_lock_row( i_tav_id   in  lm_task_attribute_values.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tav_lock_row';
begin
  declare
     cursor c_tav ( i_tav_id   in  lm_task_attribute_values.id%type )
     is
             select ''
               from lm_task_attribute_values tav
              where tav.id = i_tav_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_tav_id is not null
         then
            begin
                
                tav_lock_row_nowait( i_tav_id => i_tav_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_tav( i_tav_id => i_tav_id );
                  close c_tav;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_tav%isopen
         then
            close c_tav;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end tav_lock_row;

procedure tav_lock_row_nowait( i_tav_id   in  lm_task_attribute_values.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tav_lock_row_nowait';
begin
   declare
      cursor c_tav ( i_tav_id   in  lm_task_attribute_values.id%type )
      is
              select ''
                from lm_task_attribute_values tav
               where tav.id = i_tav_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_tav_id is not null
         then
            
            open c_tav( i_tav_id => i_tav_id );

            close c_tav;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_tav%isopen
        then
           close c_tav;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_tav_id||'"' );
   end;                                                          
end tav_lock_row_nowait;

function tav_perform_update( i_tav_id   in     lm_task_attribute_values.id%type
                           , io_rt_tav  in out lm_task_attribute_values%rowtype )
return number
;

function tav_perform_delete( i_tav_id   in  lm_task_attribute_values.id%type )
return boolean
;

procedure tav_insert_row ( io_rt_tav  in out lm_task_attribute_values%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tav_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into lm_task_attribute_values( id
                                , tae_id
                                , tin_id
                                , tav_order
                                , value )
              values ( io_rt_tav.id
                     , io_rt_tav.tae_id
                     , io_rt_tav.tin_id
                     , io_rt_tav.tav_order
                     , io_rt_tav.value )
           returning id
                   , tae_id
                   , tin_id
                   , tav_order
                   , value
                into io_rt_tav.id
                   , io_rt_tav.tae_id
                   , io_rt_tav.tin_id
                   , io_rt_tav.tav_order
                   , io_rt_tav.value;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_tav.id||'"'
                                                             ||', TAE_ID = "'||io_rt_tav.tae_id||'"'
                                                             ||', TIN_ID = "'||io_rt_tav.tin_id||'"'
                                                             ||', TAV_ORDER = "'||io_rt_tav.tav_order||'"'
                                                             ||', VALUE = "'||io_rt_tav.value||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end tav_insert_row;

function tav_perform_update( i_tav_id   in     lm_task_attribute_values.id%type
                           , io_rt_tav  in out lm_task_attribute_values%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tav_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update lm_task_attribute_values
            set id = io_rt_tav.id
              , tae_id = io_rt_tav.tae_id
              , tin_id = io_rt_tav.tin_id
              , tav_order = io_rt_tav.tav_order
              , value = io_rt_tav.value
          where id = i_tav_id
      returning id
              , tae_id
              , tin_id
              , tav_order
              , value
           into io_rt_tav.id
              , io_rt_tav.tae_id
              , io_rt_tav.tin_id
              , io_rt_tav.tav_order
              , io_rt_tav.value;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_tav.id||'"'
                                                             ||', TAE_ID = "'||io_rt_tav.tae_id||'"'
                                                             ||', TIN_ID = "'||io_rt_tav.tin_id||'"'
                                                             ||', TAV_ORDER = "'||io_rt_tav.tav_order||'"'
                                                             ||', VALUE = "'||io_rt_tav.value||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end tav_perform_update;

function tav_perform_delete( i_tav_id   in  lm_task_attribute_values.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tav_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from lm_task_attribute_values
          where id = i_tav_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_tav_id||'"' );
   end;                                                          
end tav_perform_delete;

function tav_update_row( i_tav_id   in     lm_task_attribute_values.id%type
                       , io_rt_tav  in out lm_task_attribute_values%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tav_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         tav_lock_row( i_tav_id   =>  i_tav_id );

         
         l_rowcount := 
            tav_perform_update( i_tav_id   =>  i_tav_id
                              , io_rt_tav  => io_rt_tav );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_tav.id||'"'
                                                          ||', TAE_ID = "'||io_rt_tav.tae_id||'"'
                                                          ||', TIN_ID = "'||io_rt_tav.tin_id||'"'
                                                          ||', TAV_ORDER = "'||io_rt_tav.tav_order||'"'
                                                          ||', VALUE = "'||io_rt_tav.value||'"'                                                           , 1, 4000));
   end;                                                          
end tav_update_row;

function tav_delete_row( i_tav_id   in  lm_task_attribute_values.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tav_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         tav_lock_row( i_tav_id   =>  i_tav_id );

         
         l_deleted := tav_perform_delete( i_tav_id   =>  i_tav_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_tav_id||'"' );
   end;                                                          
end tav_delete_row;

function tav_seq1_nextval
return lm_task_attribute_values.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tav_seq1_nextval';
   l_tav_id  lm_task_attribute_values.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select lm_tav_seq1.nextval 
           into l_tav_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_tav_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end tav_seq1_nextval;


end lm_tav_tapi_pck;
/