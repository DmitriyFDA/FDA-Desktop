create or replace PACKAGE lm_cfg_haa
IS
g_con_package CONSTANT VARCHAR2( 30 ) := 'LM_CFG_HAA';

PROCEDURE load_handling_area_data;

END lm_cfg_haa;
/




package body lm_cfg_haa is














procedure load_handling_area_data
is
   l_con_proc_name constant lm_constant.st_proc_name
                               := g_con_package || '.load_handling_area_data';

   l_rt_haa            lm_handling_areas%rowtype;
   l_rt_han            lm_handling_area_stations%rowtype;
   l_rt_stn            lm_stations%rowtype;
   l_rt_pon            lm_physical_destinations%rowtype;
   l_haa_found         boolean := false;
   l_current_processed boolean := false;
   l_start_time        timestamp := lm_common.default_timestamp;
   l_#haa              integer;

   
   cursor c_haa
   is
       select haa.id
       ,      haa.ind_current
       ,      haa.description
       ,      cast( multiset( select destination_id
                              from   xmltable( '/destination'
                                               passing haa.destination_xml
                                               columns destination_id number path '@id'
                                             )
                            ) as nt_id_coll
                  ) nt_destination
       from   cmn_v_sysconfig_data pd
       ,      xmltable( '/project_definition/handling_areas/handling_area'
                        passing pd.data
                        columns id              varchar2(30)  path '@id'          
                        ,       ind_current     varchar2(5)   path '@current'     
                        ,       description     varchar2(240) path '@description' 
                        ,       destination_xml xmltype       path '/handling_area/destination'
                      ) haa
      ;


begin
   viu_module.enter_module (i_module => l_con_proc_name);

   
   for l_rec_haa in c_haa
   loop

      
      l_haa_found := true;

      
      l_rt_haa.ind_current := lm_config.translate_truefalse( i_truefalse => l_rec_haa.ind_current );
      if l_rt_haa.ind_current = lm_constant.g_con_yesno_yes
      then
      if not l_current_processed
         then
            l_current_processed  := true;
         else
            viu_info.raise_info
               ( i_ifo_nr            => viu_constant.c_ifo_configuration
               , i_calling_procedure => l_con_proc_name
               , i_severity          => viu_info.c_severity_error
               , i_additional_data   => 'Second current handling area found: ' || l_rec_haa.id
               );
       end if;

      else 
         l_rt_haa.ind_current := null;
      end if;

      
      l_rt_haa.id          := l_rec_haa.id;
      l_rt_haa.id_cust     := l_rec_haa.id;
      l_rt_haa.description := l_rec_haa.description;

      lm_haa_tapi_pck.haa_insert_row( io_rt_haa => l_rt_haa );

      
      if l_rec_haa.nt_destination.count > 0
      then
         for i in l_rec_haa.nt_destination.first..l_rec_haa.nt_destination.last
         loop
            
            
            if not lm_stn_tapi_pck.stn_select_row_uk1( i_stn_id_cust => l_rec_haa.nt_destination(i)
                                                     , o_rt_stn      => l_rt_stn
                                                     )
            then
               
               lm_cfg_stn.create_station ( i_station_type            => lm_constant.g_con_cfg_ha_type
                                         , i_conduct_type            => lm_constant.g_con_cfg_virtual_type
                                         , i_station_id              => l_rec_haa.nt_destination(i)
                                         , i_description             => 'Access to Handling Area '||l_rec_haa.id
                                         , i_ind_report_availability => null
                                         , i_ind_update_tracking     => null
                                         , o_rt_stn                  => l_rt_stn
                                         );
            
               
               lm_cfg_stn.create_destination ( i_destination_id => l_rec_haa.nt_destination(i)
                                             , i_ind_assignable => lm_constant.g_con_truefalse_true
                                             , i_station_type   => lm_constant.g_con_cfg_virtual_type
                                             , i_rt_sct         => null
                                             , i_description    => 'Access to Handling Area '||l_rec_haa.id
                                             , i_rt_stn         => l_rt_stn
                                             , o_rt_pon         => l_rt_pon
                                             );
            end if;
            
            l_rt_han.haa_id := l_rt_haa.id;
            l_rt_han.stn_id := l_rt_stn.id;
            lm_han_tapi_pck.han_insert_row( io_rt_han => l_rt_han );
         end loop;
      end if;
   end loop;

   
   if l_haa_found and not l_current_processed
   then
      viu_info.raise_info
         ( i_ifo_nr            => viu_constant.c_ifo_configuration
         , i_calling_procedure => l_con_proc_name
         , i_severity          => viu_info.c_severity_error
         , i_additional_data   => 'No current handling area found'
         );
   end if;

   
   select count(*)
   into   l_#haa
   from   lm_handling_areas haa
   ;
   lm_config.log_processing_time( i_message_name    => 'handling_areas'
                                , i_start_time      => l_start_time
                                , i_additional_data => 'Created: '||l_#haa||' lm_handling_areas'
                                );

   viu_module.leave_module (i_module => l_con_proc_name);
exception
   when others
   then
      viu_module.leave_module (i_module          => l_con_proc_name,
                               i_debug_info      => sqlerrm
                              );
      viu_info.raise_info (i_calling_procedure => l_con_proc_name);
end load_handling_area_data;

end lm_cfg_haa;
/