create or replace PACKAGE lm_sgr_tapi_pck
IS
-- Table API package for table lm_segment_group_members
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:17)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'LM_SGR_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'LM_SEGMENT_GROUP_MEMBERS';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION sgr_select_row( i_sgr_ID   IN  lm_segment_group_members.ID%TYPE
                       , o_rt_sgr   OUT lm_segment_group_members%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION sgr_select_row_uk1( i_sgr_LST_ID   IN  lm_segment_group_members.LST_ID%TYPE
                           , i_sgr_CGP_ID   IN  lm_segment_group_members.CGP_ID%TYPE
                           , i_sgr_DTP_ID   IN  lm_segment_group_members.DTP_ID%TYPE
                           , i_sgr_TGR_ID   IN  lm_segment_group_members.TGR_ID%TYPE
                           , i_sgr_BRP_ID   IN  lm_segment_group_members.BRP_ID%TYPE
                           , i_sgr_LGP_ID   IN  lm_segment_group_members.LGP_ID%TYPE
                           , i_sgr_FGR_ID   IN  lm_segment_group_members.FGR_ID%TYPE
                           , o_rt_sgr  OUT lm_segment_group_members%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION sgr_select_row_upd( i_sgr_ID   IN  lm_segment_group_members.ID%TYPE
                           , o_rt_sgr   OUT lm_segment_group_members%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION sgr_select_row_upd_uk1( i_sgr_LST_ID   IN  lm_segment_group_members.LST_ID%TYPE
                               , i_sgr_CGP_ID   IN  lm_segment_group_members.CGP_ID%TYPE
                               , i_sgr_DTP_ID   IN  lm_segment_group_members.DTP_ID%TYPE
                               , i_sgr_TGR_ID   IN  lm_segment_group_members.TGR_ID%TYPE
                               , i_sgr_BRP_ID   IN  lm_segment_group_members.BRP_ID%TYPE
                               , i_sgr_LGP_ID   IN  lm_segment_group_members.LGP_ID%TYPE
                               , i_sgr_FGR_ID   IN  lm_segment_group_members.FGR_ID%TYPE
                               , o_rt_sgr  OUT lm_segment_group_members%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE sgr_lock_row( i_sgr_ID   IN  lm_segment_group_members.ID%TYPE )
;

PROCEDURE sgr_lock_row_nowait( i_sgr_ID   IN  lm_segment_group_members.ID%TYPE )
;


END lm_sgr_tapi_pck;
/




package body lm_sgr_tapi_pck
is




function sgr_select_row( i_sgr_id   in  lm_segment_group_members.id%type
                       , o_rt_sgr   out lm_segment_group_members%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sgr_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_sgr ( i_sgr_id   in  lm_segment_group_members.id%type )
      is 
           select *
             from lm_segment_group_members sgr
            where sgr.id = i_sgr_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_sgr( i_sgr_id => i_sgr_id );
         fetch c_sgr into o_rt_sgr;
         l_found := c_sgr%found;
         close c_sgr;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_sgr%isopen
         then
            close c_sgr;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end sgr_select_row;

function sgr_select_row_uk1( i_sgr_lst_id   in  lm_segment_group_members.lst_id%type
                           , i_sgr_cgp_id   in  lm_segment_group_members.cgp_id%type
                           , i_sgr_dtp_id   in  lm_segment_group_members.dtp_id%type
                           , i_sgr_tgr_id   in  lm_segment_group_members.tgr_id%type
                           , i_sgr_brp_id   in  lm_segment_group_members.brp_id%type
                           , i_sgr_lgp_id   in  lm_segment_group_members.lgp_id%type
                           , i_sgr_fgr_id   in  lm_segment_group_members.fgr_id%type
                           , o_rt_sgr  out lm_segment_group_members%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sgr_select_row_uk1';
   l_found                boolean      := false;
begin
   declare
      cursor c_sgr ( i_sgr_lst_id   in  lm_segment_group_members.lst_id%type
                   , i_sgr_cgp_id   in  lm_segment_group_members.cgp_id%type
                   , i_sgr_dtp_id   in  lm_segment_group_members.dtp_id%type
                   , i_sgr_tgr_id   in  lm_segment_group_members.tgr_id%type
                   , i_sgr_brp_id   in  lm_segment_group_members.brp_id%type
                   , i_sgr_lgp_id   in  lm_segment_group_members.lgp_id%type
                   , i_sgr_fgr_id   in  lm_segment_group_members.fgr_id%type )
      is
         select *
           from lm_segment_group_members sgr
          where sgr.lst_id = i_sgr_lst_id 
            and ( sgr.cgp_id = i_sgr_cgp_id or (sgr.cgp_id is null  and i_sgr_cgp_id is null  ))
            and ( sgr.dtp_id = i_sgr_dtp_id or (sgr.dtp_id is null  and i_sgr_dtp_id is null  ))
            and ( sgr.tgr_id = i_sgr_tgr_id or (sgr.tgr_id is null  and i_sgr_tgr_id is null  ))
            and ( sgr.brp_id = i_sgr_brp_id or (sgr.brp_id is null  and i_sgr_brp_id is null  ))
            and ( sgr.lgp_id = i_sgr_lgp_id or (sgr.lgp_id is null  and i_sgr_lgp_id is null  ))
            and ( sgr.fgr_id = i_sgr_fgr_id or (sgr.fgr_id is null  and i_sgr_fgr_id is null  ));
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_sgr(i_sgr_lst_id => i_sgr_lst_id, i_sgr_cgp_id => i_sgr_cgp_id, i_sgr_dtp_id => i_sgr_dtp_id, i_sgr_tgr_id => i_sgr_tgr_id, i_sgr_brp_id => i_sgr_brp_id, i_sgr_lgp_id => i_sgr_lgp_id, i_sgr_fgr_id => i_sgr_fgr_id);
         fetch c_sgr into o_rt_sgr;
         l_found := c_sgr%found;
         close c_sgr;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_sgr%isopen
      then
         close c_sgr;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end sgr_select_row_uk1;

function sgr_select_row_upd( i_sgr_id   in  lm_segment_group_members.id%type
                           , o_rt_sgr   out lm_segment_group_members%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sgr_select_row_upd';
   l_found                boolean      := false;

   cursor c_sgr ( i_sgr_id   in  lm_segment_group_members.id%type )
   is
           select *
             from lm_segment_group_members sgr
            where sgr.id = i_sgr_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_sgr( i_sgr_id => i_sgr_id );
   fetch c_sgr into o_rt_sgr;
   l_found := c_sgr%found;
   close c_sgr;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_sgr%isopen
      then
         close c_sgr;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end sgr_select_row_upd;

function sgr_select_row_upd_uk1( i_sgr_lst_id   in  lm_segment_group_members.lst_id%type
                               , i_sgr_cgp_id   in  lm_segment_group_members.cgp_id%type
                               , i_sgr_dtp_id   in  lm_segment_group_members.dtp_id%type
                               , i_sgr_tgr_id   in  lm_segment_group_members.tgr_id%type
                               , i_sgr_brp_id   in  lm_segment_group_members.brp_id%type
                               , i_sgr_lgp_id   in  lm_segment_group_members.lgp_id%type
                               , i_sgr_fgr_id   in  lm_segment_group_members.fgr_id%type
                               , o_rt_sgr  out lm_segment_group_members%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sgr_select_row_upd_uk1';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := sgr_select_row_uk1( i_sgr_lst_id   =>  i_sgr_lst_id
                                   , i_sgr_cgp_id   =>  i_sgr_cgp_id
                                   , i_sgr_dtp_id   =>  i_sgr_dtp_id
                                   , i_sgr_tgr_id   =>  i_sgr_tgr_id
                                   , i_sgr_brp_id   =>  i_sgr_brp_id
                                   , i_sgr_lgp_id   =>  i_sgr_lgp_id
                                   , i_sgr_fgr_id   =>  i_sgr_fgr_id
                                   , o_rt_sgr => o_rt_sgr );
      if l_found
      then
         
         l_found := sgr_select_row_upd( i_sgr_id => o_rt_sgr.id
                                      , o_rt_sgr => o_rt_sgr );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end sgr_select_row_upd_uk1;

procedure sgr_lock_row( i_sgr_id   in  lm_segment_group_members.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sgr_lock_row';
begin
  declare
     cursor c_sgr ( i_sgr_id   in  lm_segment_group_members.id%type )
     is
             select ''
               from lm_segment_group_members sgr
              where sgr.id = i_sgr_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_sgr_id is not null
         then
            begin
                
                sgr_lock_row_nowait( i_sgr_id => i_sgr_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_sgr( i_sgr_id => i_sgr_id );
                  close c_sgr;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_sgr%isopen
         then
            close c_sgr;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end sgr_lock_row;

procedure sgr_lock_row_nowait( i_sgr_id   in  lm_segment_group_members.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sgr_lock_row_nowait';
begin
   declare
      cursor c_sgr ( i_sgr_id   in  lm_segment_group_members.id%type )
      is
              select ''
                from lm_segment_group_members sgr
               where sgr.id = i_sgr_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_sgr_id is not null
         then
            
            open c_sgr( i_sgr_id => i_sgr_id );

            close c_sgr;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_sgr%isopen
        then
           close c_sgr;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_sgr_id||'"' );
   end;                                                          
end sgr_lock_row_nowait;


end lm_sgr_tapi_pck;
/