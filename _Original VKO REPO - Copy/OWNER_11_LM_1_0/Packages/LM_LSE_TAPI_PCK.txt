create or replace PACKAGE lm_lse_tapi_pck
IS
-- Table API package for table lm_logical_segm_performances
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:13)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'LM_LSE_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'LM_LOGICAL_SEGM_PERFORMANCES';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION lse_select_row( i_lse_ID   IN  lm_logical_segm_performances.ID%TYPE
                       , o_rt_lse   OUT lm_logical_segm_performances%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION lse_select_row_uk1( i_lse_LST_ID   IN  lm_logical_segm_performances.LST_ID%TYPE
                           , o_rt_lse  OUT lm_logical_segm_performances%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION lse_select_row_upd( i_lse_ID   IN  lm_logical_segm_performances.ID%TYPE
                           , o_rt_lse   OUT lm_logical_segm_performances%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION lse_select_row_upd_uk1( i_lse_LST_ID   IN  lm_logical_segm_performances.LST_ID%TYPE
                               , o_rt_lse  OUT lm_logical_segm_performances%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE lse_lock_row( i_lse_ID   IN  lm_logical_segm_performances.ID%TYPE )
;

PROCEDURE lse_lock_row_nowait( i_lse_ID   IN  lm_logical_segm_performances.ID%TYPE )
;

PROCEDURE lse_insert_row ( io_rt_lse  IN OUT lm_logical_segm_performances%ROWTYPE )
;

FUNCTION lse_update_row( i_lse_ID   IN     lm_logical_segm_performances.ID%TYPE
                       , io_rt_lse  IN OUT lm_logical_segm_performances%ROWTYPE )
RETURN NUMBER
;

FUNCTION lse_delete_row( i_lse_ID   IN  lm_logical_segm_performances.ID%TYPE )
RETURN BOOLEAN
;

FUNCTION lse_seq1_nextval
RETURN lm_logical_segm_performances.ID%TYPE
;


END lm_lse_tapi_pck;
/




package body lm_lse_tapi_pck
is




function lse_select_row( i_lse_id   in  lm_logical_segm_performances.id%type
                       , o_rt_lse   out lm_logical_segm_performances%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lse_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_lse ( i_lse_id   in  lm_logical_segm_performances.id%type )
      is 
           select *
             from lm_logical_segm_performances lse
            where lse.id = i_lse_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_lse( i_lse_id => i_lse_id );
         fetch c_lse into o_rt_lse;
         l_found := c_lse%found;
         close c_lse;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_lse%isopen
         then
            close c_lse;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end lse_select_row;

function lse_select_row_uk1( i_lse_lst_id   in  lm_logical_segm_performances.lst_id%type
                           , o_rt_lse  out lm_logical_segm_performances%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lse_select_row_uk1';
   l_found                boolean      := false;
begin
   declare
      cursor c_lse ( i_lse_lst_id   in  lm_logical_segm_performances.lst_id%type )
      is
         select *
           from lm_logical_segm_performances lse
          where lse.lst_id = i_lse_lst_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_lse(i_lse_lst_id => i_lse_lst_id);
         fetch c_lse into o_rt_lse;
         l_found := c_lse%found;
         close c_lse;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_lse%isopen
      then
         close c_lse;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end lse_select_row_uk1;

function lse_select_row_upd( i_lse_id   in  lm_logical_segm_performances.id%type
                           , o_rt_lse   out lm_logical_segm_performances%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lse_select_row_upd';
   l_found                boolean      := false;

   cursor c_lse ( i_lse_id   in  lm_logical_segm_performances.id%type )
   is
           select *
             from lm_logical_segm_performances lse
            where lse.id = i_lse_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_lse( i_lse_id => i_lse_id );
   fetch c_lse into o_rt_lse;
   l_found := c_lse%found;
   close c_lse;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_lse%isopen
      then
         close c_lse;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end lse_select_row_upd;

function lse_select_row_upd_uk1( i_lse_lst_id   in  lm_logical_segm_performances.lst_id%type
                               , o_rt_lse  out lm_logical_segm_performances%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lse_select_row_upd_uk1';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := lse_select_row_uk1( i_lse_lst_id   =>  i_lse_lst_id
                                   , o_rt_lse => o_rt_lse );
      if l_found
      then
         
         l_found := lse_select_row_upd( i_lse_id => o_rt_lse.id
                                      , o_rt_lse => o_rt_lse );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end lse_select_row_upd_uk1;

procedure lse_lock_row( i_lse_id   in  lm_logical_segm_performances.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lse_lock_row';
begin
  declare
     cursor c_lse ( i_lse_id   in  lm_logical_segm_performances.id%type )
     is
             select ''
               from lm_logical_segm_performances lse
              where lse.id = i_lse_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_lse_id is not null
         then
            begin
                
                lse_lock_row_nowait( i_lse_id => i_lse_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_lse( i_lse_id => i_lse_id );
                  close c_lse;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_lse%isopen
         then
            close c_lse;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end lse_lock_row;

procedure lse_lock_row_nowait( i_lse_id   in  lm_logical_segm_performances.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lse_lock_row_nowait';
begin
   declare
      cursor c_lse ( i_lse_id   in  lm_logical_segm_performances.id%type )
      is
              select ''
                from lm_logical_segm_performances lse
               where lse.id = i_lse_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_lse_id is not null
         then
            
            open c_lse( i_lse_id => i_lse_id );

            close c_lse;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_lse%isopen
        then
           close c_lse;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_lse_id||'"' );
   end;                                                          
end lse_lock_row_nowait;

function lse_perform_update( i_lse_id   in     lm_logical_segm_performances.id%type
                           , io_rt_lse  in out lm_logical_segm_performances%rowtype )
return number
;

function lse_perform_delete( i_lse_id   in  lm_logical_segm_performances.id%type )
return boolean
;

procedure lse_insert_row ( io_rt_lse  in out lm_logical_segm_performances%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lse_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into lm_logical_segm_performances( id
                                , lst_id
                                , event_time
                                , number_of_items )
              values ( io_rt_lse.id
                     , io_rt_lse.lst_id
                     , io_rt_lse.event_time
                     , io_rt_lse.number_of_items )
           returning id
                   , lst_id
                   , event_time
                   , number_of_items
                into io_rt_lse.id
                   , io_rt_lse.lst_id
                   , io_rt_lse.event_time
                   , io_rt_lse.number_of_items;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_lse.id||'"'
                                                             ||', LST_ID = "'||io_rt_lse.lst_id||'"'
                                                             ||', EVENT_TIME = "'||io_rt_lse.event_time||'"'
                                                             ||', NUMBER_OF_ITEMS = "'||io_rt_lse.number_of_items||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end lse_insert_row;

function lse_perform_update( i_lse_id   in     lm_logical_segm_performances.id%type
                           , io_rt_lse  in out lm_logical_segm_performances%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lse_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update lm_logical_segm_performances
            set id = io_rt_lse.id
              , lst_id = io_rt_lse.lst_id
              , event_time = io_rt_lse.event_time
              , number_of_items = io_rt_lse.number_of_items
          where id = i_lse_id
      returning id
              , lst_id
              , event_time
              , number_of_items
           into io_rt_lse.id
              , io_rt_lse.lst_id
              , io_rt_lse.event_time
              , io_rt_lse.number_of_items;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_lse.id||'"'
                                                             ||', LST_ID = "'||io_rt_lse.lst_id||'"'
                                                             ||', EVENT_TIME = "'||io_rt_lse.event_time||'"'
                                                             ||', NUMBER_OF_ITEMS = "'||io_rt_lse.number_of_items||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end lse_perform_update;

function lse_perform_delete( i_lse_id   in  lm_logical_segm_performances.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lse_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from lm_logical_segm_performances
          where id = i_lse_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_lse_id||'"' );
   end;                                                          
end lse_perform_delete;

function lse_update_row( i_lse_id   in     lm_logical_segm_performances.id%type
                       , io_rt_lse  in out lm_logical_segm_performances%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lse_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         lse_lock_row( i_lse_id   =>  i_lse_id );

         
         l_rowcount := 
            lse_perform_update( i_lse_id   =>  i_lse_id
                              , io_rt_lse  => io_rt_lse );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_lse.id||'"'
                                                          ||', LST_ID = "'||io_rt_lse.lst_id||'"'
                                                          ||', EVENT_TIME = "'||io_rt_lse.event_time||'"'
                                                          ||', NUMBER_OF_ITEMS = "'||io_rt_lse.number_of_items||'"'                                                           , 1, 4000));
   end;                                                          
end lse_update_row;

function lse_delete_row( i_lse_id   in  lm_logical_segm_performances.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lse_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         lse_lock_row( i_lse_id   =>  i_lse_id );

         
         l_deleted := lse_perform_delete( i_lse_id   =>  i_lse_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_lse_id||'"' );
   end;                                                          
end lse_delete_row;

function lse_seq1_nextval
return lm_logical_segm_performances.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lse_seq1_nextval';
   l_lse_id  lm_logical_segm_performances.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select lm_lse_seq1.nextval 
           into l_lse_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_lse_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end lse_seq1_nextval;


end lm_lse_tapi_pck;
/