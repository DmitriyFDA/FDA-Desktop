create or replace PACKAGE lm_stn_tapi_pck
IS
-- Table API package for table lm_stations
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:17)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'LM_STN_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'LM_STATIONS';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION stn_select_row( i_stn_ID   IN  lm_stations.ID%TYPE
                       , o_rt_stn   OUT lm_stations%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION stn_select_row_uk1( i_stn_ID_CUST   IN  lm_stations.ID_CUST%TYPE
                           , o_rt_stn  OUT lm_stations%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION stn_select_row_upd( i_stn_ID   IN  lm_stations.ID%TYPE
                           , o_rt_stn   OUT lm_stations%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION stn_select_row_upd_uk1( i_stn_ID_CUST   IN  lm_stations.ID_CUST%TYPE
                               , o_rt_stn  OUT lm_stations%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE stn_lock_row( i_stn_ID   IN  lm_stations.ID%TYPE )
;

PROCEDURE stn_lock_row_nowait( i_stn_ID   IN  lm_stations.ID%TYPE )
;

PROCEDURE stn_insert_row ( io_rt_stn  IN OUT lm_stations%ROWTYPE )
;

FUNCTION stn_update_row( i_stn_ID   IN     lm_stations.ID%TYPE
                       , io_rt_stn  IN OUT lm_stations%ROWTYPE )
RETURN NUMBER
;

FUNCTION stn_delete_row( i_stn_ID   IN  lm_stations.ID%TYPE )
RETURN BOOLEAN
;


END lm_stn_tapi_pck;
/




package body lm_stn_tapi_pck
is




function stn_select_row( i_stn_id   in  lm_stations.id%type
                       , o_rt_stn   out lm_stations%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.stn_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_stn ( i_stn_id   in  lm_stations.id%type )
      is 
           select *
             from lm_stations stn
            where stn.id = i_stn_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_stn( i_stn_id => i_stn_id );
         fetch c_stn into o_rt_stn;
         l_found := c_stn%found;
         close c_stn;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_stn%isopen
         then
            close c_stn;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end stn_select_row;

function stn_select_row_uk1( i_stn_id_cust   in  lm_stations.id_cust%type
                           , o_rt_stn  out lm_stations%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.stn_select_row_uk1';
   l_found                boolean      := false;
begin
   declare
      cursor c_stn ( i_stn_id_cust   in  lm_stations.id_cust%type )
      is
         select *
           from lm_stations stn
          where stn.id_cust = i_stn_id_cust ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_stn(i_stn_id_cust => i_stn_id_cust);
         fetch c_stn into o_rt_stn;
         l_found := c_stn%found;
         close c_stn;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_stn%isopen
      then
         close c_stn;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end stn_select_row_uk1;

function stn_select_row_upd( i_stn_id   in  lm_stations.id%type
                           , o_rt_stn   out lm_stations%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.stn_select_row_upd';
   l_found                boolean      := false;

   cursor c_stn ( i_stn_id   in  lm_stations.id%type )
   is
           select *
             from lm_stations stn
            where stn.id = i_stn_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_stn( i_stn_id => i_stn_id );
   fetch c_stn into o_rt_stn;
   l_found := c_stn%found;
   close c_stn;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_stn%isopen
      then
         close c_stn;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end stn_select_row_upd;

function stn_select_row_upd_uk1( i_stn_id_cust   in  lm_stations.id_cust%type
                               , o_rt_stn  out lm_stations%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.stn_select_row_upd_uk1';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := stn_select_row_uk1( i_stn_id_cust   =>  i_stn_id_cust
                                   , o_rt_stn => o_rt_stn );
      if l_found
      then
         
         l_found := stn_select_row_upd( i_stn_id => o_rt_stn.id
                                      , o_rt_stn => o_rt_stn );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end stn_select_row_upd_uk1;

procedure stn_lock_row( i_stn_id   in  lm_stations.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.stn_lock_row';
begin
  declare
     cursor c_stn ( i_stn_id   in  lm_stations.id%type )
     is
             select ''
               from lm_stations stn
              where stn.id = i_stn_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_stn_id is not null
         then
            begin
                
                stn_lock_row_nowait( i_stn_id => i_stn_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_stn( i_stn_id => i_stn_id );
                  close c_stn;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_stn%isopen
         then
            close c_stn;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end stn_lock_row;

procedure stn_lock_row_nowait( i_stn_id   in  lm_stations.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.stn_lock_row_nowait';
begin
   declare
      cursor c_stn ( i_stn_id   in  lm_stations.id%type )
      is
              select ''
                from lm_stations stn
               where stn.id = i_stn_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_stn_id is not null
         then
            
            open c_stn( i_stn_id => i_stn_id );

            close c_stn;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_stn%isopen
        then
           close c_stn;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_stn_id||'"' );
   end;                                                          
end stn_lock_row_nowait;

function stn_perform_update( i_stn_id   in     lm_stations.id%type
                           , io_rt_stn  in out lm_stations%rowtype )
return number
;

function stn_perform_delete( i_stn_id   in  lm_stations.id%type )
return boolean
;

procedure stn_insert_row ( io_rt_stn  in out lm_stations%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.stn_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into lm_stations( id
                                , ste_id
                                , id_cust
                                , ind_fallback
                                , ind_availability_reporting
                                , ind_rules_defined
                                , ind_update_tracking
                                , description
                                , cache_positions
                                , bagstore_type
                                , store_control_prim_fill_rate_1
                                , store_control_prim_duration_1
                                , store_control_prim_fill_rate_2
                                , store_control_prim_duration_2
                                , store_control_alt_fill_rate_1
                                , store_control_alt_duration_1
                                , store_control_alt_fill_rate_2
                                , store_control_alt_duration_2 )
              values ( io_rt_stn.id
                     , io_rt_stn.ste_id
                     , io_rt_stn.id_cust
                     , io_rt_stn.ind_fallback
                     , io_rt_stn.ind_availability_reporting
                     , io_rt_stn.ind_rules_defined
                     , io_rt_stn.ind_update_tracking
                     , io_rt_stn.description
                     , io_rt_stn.cache_positions
                     , io_rt_stn.bagstore_type
                     , io_rt_stn.store_control_prim_fill_rate_1
                     , io_rt_stn.store_control_prim_duration_1
                     , io_rt_stn.store_control_prim_fill_rate_2
                     , io_rt_stn.store_control_prim_duration_2
                     , io_rt_stn.store_control_alt_fill_rate_1
                     , io_rt_stn.store_control_alt_duration_1
                     , io_rt_stn.store_control_alt_fill_rate_2
                     , io_rt_stn.store_control_alt_duration_2 )
           returning id
                   , ste_id
                   , id_cust
                   , ind_fallback
                   , ind_availability_reporting
                   , ind_rules_defined
                   , ind_update_tracking
                   , description
                   , cache_positions
                   , bagstore_type
                   , store_control_prim_fill_rate_1
                   , store_control_prim_duration_1
                   , store_control_prim_fill_rate_2
                   , store_control_prim_duration_2
                   , store_control_alt_fill_rate_1
                   , store_control_alt_duration_1
                   , store_control_alt_fill_rate_2
                   , store_control_alt_duration_2
                into io_rt_stn.id
                   , io_rt_stn.ste_id
                   , io_rt_stn.id_cust
                   , io_rt_stn.ind_fallback
                   , io_rt_stn.ind_availability_reporting
                   , io_rt_stn.ind_rules_defined
                   , io_rt_stn.ind_update_tracking
                   , io_rt_stn.description
                   , io_rt_stn.cache_positions
                   , io_rt_stn.bagstore_type
                   , io_rt_stn.store_control_prim_fill_rate_1
                   , io_rt_stn.store_control_prim_duration_1
                   , io_rt_stn.store_control_prim_fill_rate_2
                   , io_rt_stn.store_control_prim_duration_2
                   , io_rt_stn.store_control_alt_fill_rate_1
                   , io_rt_stn.store_control_alt_duration_1
                   , io_rt_stn.store_control_alt_fill_rate_2
                   , io_rt_stn.store_control_alt_duration_2;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_stn.id||'"'
                                                             ||', STE_ID = "'||io_rt_stn.ste_id||'"'
                                                             ||', ID_CUST = "'||io_rt_stn.id_cust||'"'
                                                             ||', IND_FALLBACK = "'||io_rt_stn.ind_fallback||'"'
                                                             ||', IND_AVAILABILITY_REPORTING = "'||io_rt_stn.ind_availability_reporting||'"'
                                                             ||', IND_RULES_DEFINED = "'||io_rt_stn.ind_rules_defined||'"'
                                                             ||', IND_UPDATE_TRACKING = "'||io_rt_stn.ind_update_tracking||'"'
                                                             ||', DESCRIPTION = "'||io_rt_stn.description||'"'
                                                             ||', CACHE_POSITIONS = "'||io_rt_stn.cache_positions||'"'
                                                             ||', BAGSTORE_TYPE = "'||io_rt_stn.bagstore_type||'"'
                                                             ||', STORE_CONTROL_PRIM_FILL_RATE_1 = "'||io_rt_stn.store_control_prim_fill_rate_1||'"'
                                                             ||', STORE_CONTROL_PRIM_DURATION_1 = "'||io_rt_stn.store_control_prim_duration_1||'"'
                                                             ||', STORE_CONTROL_PRIM_FILL_RATE_2 = "'||io_rt_stn.store_control_prim_fill_rate_2||'"'
                                                             ||', STORE_CONTROL_PRIM_DURATION_2 = "'||io_rt_stn.store_control_prim_duration_2||'"'
                                                             ||', STORE_CONTROL_ALT_FILL_RATE_1 = "'||io_rt_stn.store_control_alt_fill_rate_1||'"'
                                                             ||', STORE_CONTROL_ALT_DURATION_1 = "'||io_rt_stn.store_control_alt_duration_1||'"'
                                                             ||', STORE_CONTROL_ALT_FILL_RATE_2 = "'||io_rt_stn.store_control_alt_fill_rate_2||'"'
                                                             ||', STORE_CONTROL_ALT_DURATION_2 = "'||io_rt_stn.store_control_alt_duration_2||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end stn_insert_row;

function stn_perform_update( i_stn_id   in     lm_stations.id%type
                           , io_rt_stn  in out lm_stations%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.stn_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update lm_stations
            set id = io_rt_stn.id
              , ste_id = io_rt_stn.ste_id
              , id_cust = io_rt_stn.id_cust
              , ind_fallback = io_rt_stn.ind_fallback
              , ind_availability_reporting = io_rt_stn.ind_availability_reporting
              , ind_rules_defined = io_rt_stn.ind_rules_defined
              , ind_update_tracking = io_rt_stn.ind_update_tracking
              , description = io_rt_stn.description
              , cache_positions = io_rt_stn.cache_positions
              , bagstore_type = io_rt_stn.bagstore_type
              , store_control_prim_fill_rate_1 = io_rt_stn.store_control_prim_fill_rate_1
              , store_control_prim_duration_1 = io_rt_stn.store_control_prim_duration_1
              , store_control_prim_fill_rate_2 = io_rt_stn.store_control_prim_fill_rate_2
              , store_control_prim_duration_2 = io_rt_stn.store_control_prim_duration_2
              , store_control_alt_fill_rate_1 = io_rt_stn.store_control_alt_fill_rate_1
              , store_control_alt_duration_1 = io_rt_stn.store_control_alt_duration_1
              , store_control_alt_fill_rate_2 = io_rt_stn.store_control_alt_fill_rate_2
              , store_control_alt_duration_2 = io_rt_stn.store_control_alt_duration_2
          where id = i_stn_id
      returning id
              , ste_id
              , id_cust
              , ind_fallback
              , ind_availability_reporting
              , ind_rules_defined
              , ind_update_tracking
              , description
              , cache_positions
              , bagstore_type
              , store_control_prim_fill_rate_1
              , store_control_prim_duration_1
              , store_control_prim_fill_rate_2
              , store_control_prim_duration_2
              , store_control_alt_fill_rate_1
              , store_control_alt_duration_1
              , store_control_alt_fill_rate_2
              , store_control_alt_duration_2
           into io_rt_stn.id
              , io_rt_stn.ste_id
              , io_rt_stn.id_cust
              , io_rt_stn.ind_fallback
              , io_rt_stn.ind_availability_reporting
              , io_rt_stn.ind_rules_defined
              , io_rt_stn.ind_update_tracking
              , io_rt_stn.description
              , io_rt_stn.cache_positions
              , io_rt_stn.bagstore_type
              , io_rt_stn.store_control_prim_fill_rate_1
              , io_rt_stn.store_control_prim_duration_1
              , io_rt_stn.store_control_prim_fill_rate_2
              , io_rt_stn.store_control_prim_duration_2
              , io_rt_stn.store_control_alt_fill_rate_1
              , io_rt_stn.store_control_alt_duration_1
              , io_rt_stn.store_control_alt_fill_rate_2
              , io_rt_stn.store_control_alt_duration_2;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_stn.id||'"'
                                                             ||', STE_ID = "'||io_rt_stn.ste_id||'"'
                                                             ||', ID_CUST = "'||io_rt_stn.id_cust||'"'
                                                             ||', IND_FALLBACK = "'||io_rt_stn.ind_fallback||'"'
                                                             ||', IND_AVAILABILITY_REPORTING = "'||io_rt_stn.ind_availability_reporting||'"'
                                                             ||', IND_RULES_DEFINED = "'||io_rt_stn.ind_rules_defined||'"'
                                                             ||', IND_UPDATE_TRACKING = "'||io_rt_stn.ind_update_tracking||'"'
                                                             ||', DESCRIPTION = "'||io_rt_stn.description||'"'
                                                             ||', CACHE_POSITIONS = "'||io_rt_stn.cache_positions||'"'
                                                             ||', BAGSTORE_TYPE = "'||io_rt_stn.bagstore_type||'"'
                                                             ||', STORE_CONTROL_PRIM_FILL_RATE_1 = "'||io_rt_stn.store_control_prim_fill_rate_1||'"'
                                                             ||', STORE_CONTROL_PRIM_DURATION_1 = "'||io_rt_stn.store_control_prim_duration_1||'"'
                                                             ||', STORE_CONTROL_PRIM_FILL_RATE_2 = "'||io_rt_stn.store_control_prim_fill_rate_2||'"'
                                                             ||', STORE_CONTROL_PRIM_DURATION_2 = "'||io_rt_stn.store_control_prim_duration_2||'"'
                                                             ||', STORE_CONTROL_ALT_FILL_RATE_1 = "'||io_rt_stn.store_control_alt_fill_rate_1||'"'
                                                             ||', STORE_CONTROL_ALT_DURATION_1 = "'||io_rt_stn.store_control_alt_duration_1||'"'
                                                             ||', STORE_CONTROL_ALT_FILL_RATE_2 = "'||io_rt_stn.store_control_alt_fill_rate_2||'"'
                                                             ||', STORE_CONTROL_ALT_DURATION_2 = "'||io_rt_stn.store_control_alt_duration_2||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end stn_perform_update;

function stn_perform_delete( i_stn_id   in  lm_stations.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.stn_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from lm_stations
          where id = i_stn_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_stn_id||'"' );
   end;                                                          
end stn_perform_delete;

function stn_update_row( i_stn_id   in     lm_stations.id%type
                       , io_rt_stn  in out lm_stations%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.stn_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         stn_lock_row( i_stn_id   =>  i_stn_id );

         
         l_rowcount := 
            stn_perform_update( i_stn_id   =>  i_stn_id
                              , io_rt_stn  => io_rt_stn );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_stn.id||'"'
                                                          ||', STE_ID = "'||io_rt_stn.ste_id||'"'
                                                          ||', ID_CUST = "'||io_rt_stn.id_cust||'"'
                                                          ||', IND_FALLBACK = "'||io_rt_stn.ind_fallback||'"'
                                                          ||', IND_AVAILABILITY_REPORTING = "'||io_rt_stn.ind_availability_reporting||'"'
                                                          ||', IND_RULES_DEFINED = "'||io_rt_stn.ind_rules_defined||'"'
                                                          ||', IND_UPDATE_TRACKING = "'||io_rt_stn.ind_update_tracking||'"'
                                                          ||', DESCRIPTION = "'||io_rt_stn.description||'"'
                                                          ||', CACHE_POSITIONS = "'||io_rt_stn.cache_positions||'"'
                                                          ||', BAGSTORE_TYPE = "'||io_rt_stn.bagstore_type||'"'
                                                          ||', STORE_CONTROL_PRIM_FILL_RATE_1 = "'||io_rt_stn.store_control_prim_fill_rate_1||'"'
                                                          ||', STORE_CONTROL_PRIM_DURATION_1 = "'||io_rt_stn.store_control_prim_duration_1||'"'
                                                          ||', STORE_CONTROL_PRIM_FILL_RATE_2 = "'||io_rt_stn.store_control_prim_fill_rate_2||'"'
                                                          ||', STORE_CONTROL_PRIM_DURATION_2 = "'||io_rt_stn.store_control_prim_duration_2||'"'
                                                          ||', STORE_CONTROL_ALT_FILL_RATE_1 = "'||io_rt_stn.store_control_alt_fill_rate_1||'"'
                                                          ||', STORE_CONTROL_ALT_DURATION_1 = "'||io_rt_stn.store_control_alt_duration_1||'"'
                                                          ||', STORE_CONTROL_ALT_FILL_RATE_2 = "'||io_rt_stn.store_control_alt_fill_rate_2||'"'
                                                          ||', STORE_CONTROL_ALT_DURATION_2 = "'||io_rt_stn.store_control_alt_duration_2||'"'                                                           , 1, 4000));
   end;                                                          
end stn_update_row;

function stn_delete_row( i_stn_id   in  lm_stations.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.stn_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         stn_lock_row( i_stn_id   =>  i_stn_id );

         
         l_deleted := stn_perform_delete( i_stn_id   =>  i_stn_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_stn_id||'"' );
   end;                                                          
end stn_delete_row;


end lm_stn_tapi_pck;
/
