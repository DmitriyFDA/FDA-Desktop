create or replace PACKAGE acl_ass_tapi_pck
IS
-- Table API package for table acl_aet_statuses
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:07)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'ACL_ASS_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'ACL_AET_STATUSES';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION ass_select_row( i_ass_ID   IN  acl_aet_statuses.ID%TYPE
                       , o_rt_ass   OUT acl_aet_statuses%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION ass_select_row_uk1( i_ass_AET_ID   IN  acl_aet_statuses.AET_ID%TYPE
                           , o_rt_ass  OUT acl_aet_statuses%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION ass_select_row_upd( i_ass_ID   IN  acl_aet_statuses.ID%TYPE
                           , o_rt_ass   OUT acl_aet_statuses%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION ass_select_row_upd_uk1( i_ass_AET_ID   IN  acl_aet_statuses.AET_ID%TYPE
                               , o_rt_ass  OUT acl_aet_statuses%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE ass_lock_row( i_ass_ID   IN  acl_aet_statuses.ID%TYPE )
;

PROCEDURE ass_lock_row_nowait( i_ass_ID   IN  acl_aet_statuses.ID%TYPE )
;

PROCEDURE ass_insert_row ( io_rt_ass  IN OUT acl_aet_statuses%ROWTYPE )
;

FUNCTION ass_update_row( i_ass_ID   IN     acl_aet_statuses.ID%TYPE
                       , io_rt_ass  IN OUT acl_aet_statuses%ROWTYPE )
RETURN NUMBER
;

FUNCTION ass_delete_row( i_ass_ID   IN  acl_aet_statuses.ID%TYPE )
RETURN BOOLEAN
;

FUNCTION ass_seq1_nextval
RETURN acl_aet_statuses.ID%TYPE
;


END acl_ass_tapi_pck;
/




package body acl_ass_tapi_pck
is




function ass_select_row( i_ass_id   in  acl_aet_statuses.id%type
                       , o_rt_ass   out acl_aet_statuses%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ass_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_ass ( i_ass_id   in  acl_aet_statuses.id%type )
      is 
           select *
             from acl_aet_statuses ass
            where ass.id = i_ass_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_ass( i_ass_id => i_ass_id );
         fetch c_ass into o_rt_ass;
         l_found := c_ass%found;
         close c_ass;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_ass%isopen
         then
            close c_ass;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end ass_select_row;

function ass_select_row_uk1( i_ass_aet_id   in  acl_aet_statuses.aet_id%type
                           , o_rt_ass  out acl_aet_statuses%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ass_select_row_uk1';
   l_found                boolean      := false;
begin
   declare
      cursor c_ass ( i_ass_aet_id   in  acl_aet_statuses.aet_id%type )
      is
         select *
           from acl_aet_statuses ass
          where ass.aet_id = i_ass_aet_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_ass(i_ass_aet_id => i_ass_aet_id);
         fetch c_ass into o_rt_ass;
         l_found := c_ass%found;
         close c_ass;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_ass%isopen
      then
         close c_ass;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end ass_select_row_uk1;

function ass_select_row_upd( i_ass_id   in  acl_aet_statuses.id%type
                           , o_rt_ass   out acl_aet_statuses%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ass_select_row_upd';
   l_found                boolean      := false;

   cursor c_ass ( i_ass_id   in  acl_aet_statuses.id%type )
   is
           select *
             from acl_aet_statuses ass
            where ass.id = i_ass_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_ass( i_ass_id => i_ass_id );
   fetch c_ass into o_rt_ass;
   l_found := c_ass%found;
   close c_ass;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_ass%isopen
      then
         close c_ass;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end ass_select_row_upd;

function ass_select_row_upd_uk1( i_ass_aet_id   in  acl_aet_statuses.aet_id%type
                               , o_rt_ass  out acl_aet_statuses%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ass_select_row_upd_uk1';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := ass_select_row_uk1( i_ass_aet_id   =>  i_ass_aet_id
                                   , o_rt_ass => o_rt_ass );
      if l_found
      then
         
         l_found := ass_select_row_upd( i_ass_id => o_rt_ass.id
                                      , o_rt_ass => o_rt_ass );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end ass_select_row_upd_uk1;

procedure ass_lock_row( i_ass_id   in  acl_aet_statuses.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ass_lock_row';
begin
  declare
     cursor c_ass ( i_ass_id   in  acl_aet_statuses.id%type )
     is
             select ''
               from acl_aet_statuses ass
              where ass.id = i_ass_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_ass_id is not null
         then
            begin
                
                ass_lock_row_nowait( i_ass_id => i_ass_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_ass( i_ass_id => i_ass_id );
                  close c_ass;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_ass%isopen
         then
            close c_ass;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end ass_lock_row;

procedure ass_lock_row_nowait( i_ass_id   in  acl_aet_statuses.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ass_lock_row_nowait';
begin
   declare
      cursor c_ass ( i_ass_id   in  acl_aet_statuses.id%type )
      is
              select ''
                from acl_aet_statuses ass
               where ass.id = i_ass_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_ass_id is not null
         then
            
            open c_ass( i_ass_id => i_ass_id );

            close c_ass;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_ass%isopen
        then
           close c_ass;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_ass_id||'"' );
   end;                                                          
end ass_lock_row_nowait;

function ass_perform_update( i_ass_id   in     acl_aet_statuses.id%type
                           , io_rt_ass  in out acl_aet_statuses%rowtype )
return number
;

function ass_perform_delete( i_ass_id   in  acl_aet_statuses.id%type )
return boolean
;

procedure ass_insert_row ( io_rt_ass  in out acl_aet_statuses%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ass_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into acl_aet_statuses( id
                                , aet_id
                                , asm_id
                                , timestamp_change
                                , act_id )
              values ( io_rt_ass.id
                     , io_rt_ass.aet_id
                     , io_rt_ass.asm_id
                     , io_rt_ass.timestamp_change
                     , io_rt_ass.act_id )
           returning id
                   , aet_id
                   , asm_id
                   , timestamp_change
                   , act_id
                into io_rt_ass.id
                   , io_rt_ass.aet_id
                   , io_rt_ass.asm_id
                   , io_rt_ass.timestamp_change
                   , io_rt_ass.act_id;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_ass.id||'"'
                                                             ||', AET_ID = "'||io_rt_ass.aet_id||'"'
                                                             ||', ASM_ID = "'||io_rt_ass.asm_id||'"'
                                                             ||', TIMESTAMP_CHANGE = "'||io_rt_ass.timestamp_change||'"'
                                                             ||', ACT_ID = "'||io_rt_ass.act_id||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end ass_insert_row;

function ass_perform_update( i_ass_id   in     acl_aet_statuses.id%type
                           , io_rt_ass  in out acl_aet_statuses%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ass_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update acl_aet_statuses
            set id = io_rt_ass.id
              , aet_id = io_rt_ass.aet_id
              , asm_id = io_rt_ass.asm_id
              , timestamp_change = io_rt_ass.timestamp_change
              , act_id = io_rt_ass.act_id
          where id = i_ass_id
      returning id
              , aet_id
              , asm_id
              , timestamp_change
              , act_id
           into io_rt_ass.id
              , io_rt_ass.aet_id
              , io_rt_ass.asm_id
              , io_rt_ass.timestamp_change
              , io_rt_ass.act_id;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_ass.id||'"'
                                                             ||', AET_ID = "'||io_rt_ass.aet_id||'"'
                                                             ||', ASM_ID = "'||io_rt_ass.asm_id||'"'
                                                             ||', TIMESTAMP_CHANGE = "'||io_rt_ass.timestamp_change||'"'
                                                             ||', ACT_ID = "'||io_rt_ass.act_id||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end ass_perform_update;

function ass_perform_delete( i_ass_id   in  acl_aet_statuses.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ass_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from acl_aet_statuses
          where id = i_ass_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_ass_id||'"' );
   end;                                                          
end ass_perform_delete;

function ass_update_row( i_ass_id   in     acl_aet_statuses.id%type
                       , io_rt_ass  in out acl_aet_statuses%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ass_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         ass_lock_row( i_ass_id   =>  i_ass_id );

         
         l_rowcount := 
            ass_perform_update( i_ass_id   =>  i_ass_id
                              , io_rt_ass  => io_rt_ass );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_ass.id||'"'
                                                          ||', AET_ID = "'||io_rt_ass.aet_id||'"'
                                                          ||', ASM_ID = "'||io_rt_ass.asm_id||'"'
                                                          ||', TIMESTAMP_CHANGE = "'||io_rt_ass.timestamp_change||'"'
                                                          ||', ACT_ID = "'||io_rt_ass.act_id||'"'                                                           , 1, 4000));
   end;                                                          
end ass_update_row;

function ass_delete_row( i_ass_id   in  acl_aet_statuses.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ass_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         ass_lock_row( i_ass_id   =>  i_ass_id );

         
         l_deleted := ass_perform_delete( i_ass_id   =>  i_ass_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_ass_id||'"' );
   end;                                                          
end ass_delete_row;

function ass_seq1_nextval
return acl_aet_statuses.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ass_seq1_nextval';
   l_ass_id  acl_aet_statuses.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select acl_ass_seq1.nextval 
           into l_ass_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_ass_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end ass_seq1_nextval;


end acl_ass_tapi_pck;
/