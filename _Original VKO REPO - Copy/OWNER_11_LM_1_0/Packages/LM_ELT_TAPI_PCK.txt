create or replace PACKAGE lm_elt_tapi_pck
IS
-- Table API package for table lm_ebs_empty_lane_requests
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:09)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'LM_ELT_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'LM_EBS_EMPTY_LANE_REQUESTS';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION elt_select_row( i_elt_ID   IN  lm_ebs_empty_lane_requests.ID%TYPE
                       , o_rt_elt   OUT lm_ebs_empty_lane_requests%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION elt_select_row_upd( i_elt_ID   IN  lm_ebs_empty_lane_requests.ID%TYPE
                           , o_rt_elt   OUT lm_ebs_empty_lane_requests%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE elt_lock_row( i_elt_ID   IN  lm_ebs_empty_lane_requests.ID%TYPE )
;

PROCEDURE elt_lock_row_nowait( i_elt_ID   IN  lm_ebs_empty_lane_requests.ID%TYPE )
;

PROCEDURE elt_insert_row ( io_rt_elt  IN OUT lm_ebs_empty_lane_requests%ROWTYPE )
;

FUNCTION elt_update_row( i_elt_ID   IN     lm_ebs_empty_lane_requests.ID%TYPE
                       , io_rt_elt  IN OUT lm_ebs_empty_lane_requests%ROWTYPE )
RETURN NUMBER
;

FUNCTION elt_delete_row( i_elt_ID   IN  lm_ebs_empty_lane_requests.ID%TYPE )
RETURN BOOLEAN
;

FUNCTION elt_seq1_nextval
RETURN lm_ebs_empty_lane_requests.ID%TYPE
;


END lm_elt_tapi_pck;
/




package body lm_elt_tapi_pck
is




function elt_select_row( i_elt_id   in  lm_ebs_empty_lane_requests.id%type
                       , o_rt_elt   out lm_ebs_empty_lane_requests%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.elt_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_elt ( i_elt_id   in  lm_ebs_empty_lane_requests.id%type )
      is 
           select *
             from lm_ebs_empty_lane_requests elt
            where elt.id = i_elt_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_elt( i_elt_id => i_elt_id );
         fetch c_elt into o_rt_elt;
         l_found := c_elt%found;
         close c_elt;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_elt%isopen
         then
            close c_elt;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end elt_select_row;

function elt_select_row_upd( i_elt_id   in  lm_ebs_empty_lane_requests.id%type
                           , o_rt_elt   out lm_ebs_empty_lane_requests%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.elt_select_row_upd';
   l_found                boolean      := false;

   cursor c_elt ( i_elt_id   in  lm_ebs_empty_lane_requests.id%type )
   is
           select *
             from lm_ebs_empty_lane_requests elt
            where elt.id = i_elt_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_elt( i_elt_id => i_elt_id );
   fetch c_elt into o_rt_elt;
   l_found := c_elt%found;
   close c_elt;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_elt%isopen
      then
         close c_elt;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end elt_select_row_upd;

procedure elt_lock_row( i_elt_id   in  lm_ebs_empty_lane_requests.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.elt_lock_row';
begin
  declare
     cursor c_elt ( i_elt_id   in  lm_ebs_empty_lane_requests.id%type )
     is
             select ''
               from lm_ebs_empty_lane_requests elt
              where elt.id = i_elt_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_elt_id is not null
         then
            begin
                
                elt_lock_row_nowait( i_elt_id => i_elt_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_elt( i_elt_id => i_elt_id );
                  close c_elt;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_elt%isopen
         then
            close c_elt;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end elt_lock_row;

procedure elt_lock_row_nowait( i_elt_id   in  lm_ebs_empty_lane_requests.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.elt_lock_row_nowait';
begin
   declare
      cursor c_elt ( i_elt_id   in  lm_ebs_empty_lane_requests.id%type )
      is
              select ''
                from lm_ebs_empty_lane_requests elt
               where elt.id = i_elt_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_elt_id is not null
         then
            
            open c_elt( i_elt_id => i_elt_id );

            close c_elt;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_elt%isopen
        then
           close c_elt;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_elt_id||'"' );
   end;                                                          
end elt_lock_row_nowait;

function elt_perform_update( i_elt_id   in     lm_ebs_empty_lane_requests.id%type
                           , io_rt_elt  in out lm_ebs_empty_lane_requests%rowtype )
return number
;

function elt_perform_delete( i_elt_id   in  lm_ebs_empty_lane_requests.id%type )
return boolean
;

procedure elt_insert_row ( io_rt_elt  in out lm_ebs_empty_lane_requests%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.elt_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into lm_ebs_empty_lane_requests( id
                                , lne_stn_id
                                , date_created
                                , elt_type
                                , elt_status
                                , ind_priority
                                , date_completed
                                , reason )
              values ( io_rt_elt.id
                     , io_rt_elt.lne_stn_id
                     , io_rt_elt.date_created
                     , io_rt_elt.elt_type
                     , io_rt_elt.elt_status
                     , io_rt_elt.ind_priority
                     , io_rt_elt.date_completed
                     , io_rt_elt.reason )
           returning id
                   , lne_stn_id
                   , date_created
                   , elt_type
                   , elt_status
                   , ind_priority
                   , date_completed
                   , reason
                into io_rt_elt.id
                   , io_rt_elt.lne_stn_id
                   , io_rt_elt.date_created
                   , io_rt_elt.elt_type
                   , io_rt_elt.elt_status
                   , io_rt_elt.ind_priority
                   , io_rt_elt.date_completed
                   , io_rt_elt.reason;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_elt.id||'"'
                                                             ||', LNE_STN_ID = "'||io_rt_elt.lne_stn_id||'"'
                                                             ||', DATE_CREATED = "'||io_rt_elt.date_created||'"'
                                                             ||', ELT_TYPE = "'||io_rt_elt.elt_type||'"'
                                                             ||', ELT_STATUS = "'||io_rt_elt.elt_status||'"'
                                                             ||', IND_PRIORITY = "'||io_rt_elt.ind_priority||'"'
                                                             ||', DATE_COMPLETED = "'||io_rt_elt.date_completed||'"'
                                                             ||', REASON = "'||io_rt_elt.reason||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end elt_insert_row;

function elt_perform_update( i_elt_id   in     lm_ebs_empty_lane_requests.id%type
                           , io_rt_elt  in out lm_ebs_empty_lane_requests%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.elt_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update lm_ebs_empty_lane_requests
            set id = io_rt_elt.id
              , lne_stn_id = io_rt_elt.lne_stn_id
              , date_created = io_rt_elt.date_created
              , elt_type = io_rt_elt.elt_type
              , elt_status = io_rt_elt.elt_status
              , ind_priority = io_rt_elt.ind_priority
              , date_completed = io_rt_elt.date_completed
              , reason = io_rt_elt.reason
          where id = i_elt_id
      returning id
              , lne_stn_id
              , date_created
              , elt_type
              , elt_status
              , ind_priority
              , date_completed
              , reason
           into io_rt_elt.id
              , io_rt_elt.lne_stn_id
              , io_rt_elt.date_created
              , io_rt_elt.elt_type
              , io_rt_elt.elt_status
              , io_rt_elt.ind_priority
              , io_rt_elt.date_completed
              , io_rt_elt.reason;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_elt.id||'"'
                                                             ||', LNE_STN_ID = "'||io_rt_elt.lne_stn_id||'"'
                                                             ||', DATE_CREATED = "'||io_rt_elt.date_created||'"'
                                                             ||', ELT_TYPE = "'||io_rt_elt.elt_type||'"'
                                                             ||', ELT_STATUS = "'||io_rt_elt.elt_status||'"'
                                                             ||', IND_PRIORITY = "'||io_rt_elt.ind_priority||'"'
                                                             ||', DATE_COMPLETED = "'||io_rt_elt.date_completed||'"'
                                                             ||', REASON = "'||io_rt_elt.reason||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end elt_perform_update;

function elt_perform_delete( i_elt_id   in  lm_ebs_empty_lane_requests.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.elt_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from lm_ebs_empty_lane_requests
          where id = i_elt_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_elt_id||'"' );
   end;                                                          
end elt_perform_delete;

function elt_update_row( i_elt_id   in     lm_ebs_empty_lane_requests.id%type
                       , io_rt_elt  in out lm_ebs_empty_lane_requests%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.elt_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         elt_lock_row( i_elt_id   =>  i_elt_id );

         
         l_rowcount := 
            elt_perform_update( i_elt_id   =>  i_elt_id
                              , io_rt_elt  => io_rt_elt );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_elt.id||'"'
                                                          ||', LNE_STN_ID = "'||io_rt_elt.lne_stn_id||'"'
                                                          ||', DATE_CREATED = "'||io_rt_elt.date_created||'"'
                                                          ||', ELT_TYPE = "'||io_rt_elt.elt_type||'"'
                                                          ||', ELT_STATUS = "'||io_rt_elt.elt_status||'"'
                                                          ||', IND_PRIORITY = "'||io_rt_elt.ind_priority||'"'
                                                          ||', DATE_COMPLETED = "'||io_rt_elt.date_completed||'"'
                                                          ||', REASON = "'||io_rt_elt.reason||'"'                                                           , 1, 4000));
   end;                                                          
end elt_update_row;

function elt_delete_row( i_elt_id   in  lm_ebs_empty_lane_requests.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.elt_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         elt_lock_row( i_elt_id   =>  i_elt_id );

         
         l_deleted := elt_perform_delete( i_elt_id   =>  i_elt_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_elt_id||'"' );
   end;                                                          
end elt_delete_row;

function elt_seq1_nextval
return lm_ebs_empty_lane_requests.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.elt_seq1_nextval';
   l_elt_id  lm_ebs_empty_lane_requests.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select lm_elt_seq1.nextval 
           into l_elt_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_elt_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end elt_seq1_nextval;


end lm_elt_tapi_pck;
/
