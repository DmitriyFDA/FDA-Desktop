create or replace PACKAGE lm_let_tapi_pck
IS
-- Table API package for table lm_load_rule_events
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:13)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'LM_LET_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'LM_LOAD_RULE_EVENTS';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION let_select_row( i_let_ID   IN  lm_load_rule_events.ID%TYPE
                       , o_rt_let   OUT lm_load_rule_events%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION let_select_row_upd( i_let_ID   IN  lm_load_rule_events.ID%TYPE
                           , o_rt_let   OUT lm_load_rule_events%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE let_lock_row( i_let_ID   IN  lm_load_rule_events.ID%TYPE )
;

PROCEDURE let_lock_row_nowait( i_let_ID   IN  lm_load_rule_events.ID%TYPE )
;

PROCEDURE let_insert_row ( io_rt_let  IN OUT lm_load_rule_events%ROWTYPE )
;

FUNCTION let_update_row( i_let_ID   IN     lm_load_rule_events.ID%TYPE
                       , io_rt_let  IN OUT lm_load_rule_events%ROWTYPE )
RETURN NUMBER
;

FUNCTION let_delete_row( i_let_ID   IN  lm_load_rule_events.ID%TYPE )
RETURN BOOLEAN
;

FUNCTION let_seq1_nextval
RETURN lm_load_rule_events.ID%TYPE
;


END lm_let_tapi_pck;
/




package body lm_let_tapi_pck
is




function let_select_row( i_let_id   in  lm_load_rule_events.id%type
                       , o_rt_let   out lm_load_rule_events%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.let_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_let ( i_let_id   in  lm_load_rule_events.id%type )
      is 
           select *
             from lm_load_rule_events let
            where let.id = i_let_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_let( i_let_id => i_let_id );
         fetch c_let into o_rt_let;
         l_found := c_let%found;
         close c_let;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_let%isopen
         then
            close c_let;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end let_select_row;

function let_select_row_upd( i_let_id   in  lm_load_rule_events.id%type
                           , o_rt_let   out lm_load_rule_events%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.let_select_row_upd';
   l_found                boolean      := false;

   cursor c_let ( i_let_id   in  lm_load_rule_events.id%type )
   is
           select *
             from lm_load_rule_events let
            where let.id = i_let_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_let( i_let_id => i_let_id );
   fetch c_let into o_rt_let;
   l_found := c_let%found;
   close c_let;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_let%isopen
      then
         close c_let;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end let_select_row_upd;

procedure let_lock_row( i_let_id   in  lm_load_rule_events.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.let_lock_row';
begin
  declare
     cursor c_let ( i_let_id   in  lm_load_rule_events.id%type )
     is
             select ''
               from lm_load_rule_events let
              where let.id = i_let_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_let_id is not null
         then
            begin
                
                let_lock_row_nowait( i_let_id => i_let_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_let( i_let_id => i_let_id );
                  close c_let;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_let%isopen
         then
            close c_let;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end let_lock_row;

procedure let_lock_row_nowait( i_let_id   in  lm_load_rule_events.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.let_lock_row_nowait';
begin
   declare
      cursor c_let ( i_let_id   in  lm_load_rule_events.id%type )
      is
              select ''
                from lm_load_rule_events let
               where let.id = i_let_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_let_id is not null
         then
            
            open c_let( i_let_id => i_let_id );

            close c_let;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_let%isopen
        then
           close c_let;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_let_id||'"' );
   end;                                                          
end let_lock_row_nowait;

function let_perform_update( i_let_id   in     lm_load_rule_events.id%type
                           , io_rt_let  in out lm_load_rule_events%rowtype )
return number
;

function let_perform_delete( i_let_id   in  lm_load_rule_events.id%type )
return boolean
;

procedure let_insert_row ( io_rt_let  in out lm_load_rule_events%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.let_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into lm_load_rule_events( id
                                , lre_id
                                , date_created
                                , lower_load_value
                                , recirculation_count
                                , user_info )
              values ( io_rt_let.id
                     , io_rt_let.lre_id
                     , io_rt_let.date_created
                     , io_rt_let.lower_load_value
                     , io_rt_let.recirculation_count
                     , io_rt_let.user_info )
           returning id
                   , lre_id
                   , date_created
                   , lower_load_value
                   , recirculation_count
                   , user_info
                into io_rt_let.id
                   , io_rt_let.lre_id
                   , io_rt_let.date_created
                   , io_rt_let.lower_load_value
                   , io_rt_let.recirculation_count
                   , io_rt_let.user_info;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_let.id||'"'
                                                             ||', LRE_ID = "'||io_rt_let.lre_id||'"'
                                                             ||', DATE_CREATED = "'||io_rt_let.date_created||'"'
                                                             ||', LOWER_LOAD_VALUE = "'||io_rt_let.lower_load_value||'"'
                                                             ||', RECIRCULATION_COUNT = "'||io_rt_let.recirculation_count||'"'
                                                             ||', USER_INFO = "'||io_rt_let.user_info||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end let_insert_row;

function let_perform_update( i_let_id   in     lm_load_rule_events.id%type
                           , io_rt_let  in out lm_load_rule_events%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.let_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update lm_load_rule_events
            set id = io_rt_let.id
              , lre_id = io_rt_let.lre_id
              , date_created = io_rt_let.date_created
              , lower_load_value = io_rt_let.lower_load_value
              , recirculation_count = io_rt_let.recirculation_count
              , user_info = io_rt_let.user_info
          where id = i_let_id
      returning id
              , lre_id
              , date_created
              , lower_load_value
              , recirculation_count
              , user_info
           into io_rt_let.id
              , io_rt_let.lre_id
              , io_rt_let.date_created
              , io_rt_let.lower_load_value
              , io_rt_let.recirculation_count
              , io_rt_let.user_info;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_let.id||'"'
                                                             ||', LRE_ID = "'||io_rt_let.lre_id||'"'
                                                             ||', DATE_CREATED = "'||io_rt_let.date_created||'"'
                                                             ||', LOWER_LOAD_VALUE = "'||io_rt_let.lower_load_value||'"'
                                                             ||', RECIRCULATION_COUNT = "'||io_rt_let.recirculation_count||'"'
                                                             ||', USER_INFO = "'||io_rt_let.user_info||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end let_perform_update;

function let_perform_delete( i_let_id   in  lm_load_rule_events.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.let_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from lm_load_rule_events
          where id = i_let_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_let_id||'"' );
   end;                                                          
end let_perform_delete;

function let_update_row( i_let_id   in     lm_load_rule_events.id%type
                       , io_rt_let  in out lm_load_rule_events%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.let_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         let_lock_row( i_let_id   =>  i_let_id );

         
         l_rowcount := 
            let_perform_update( i_let_id   =>  i_let_id
                              , io_rt_let  => io_rt_let );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_let.id||'"'
                                                          ||', LRE_ID = "'||io_rt_let.lre_id||'"'
                                                          ||', DATE_CREATED = "'||io_rt_let.date_created||'"'
                                                          ||', LOWER_LOAD_VALUE = "'||io_rt_let.lower_load_value||'"'
                                                          ||', RECIRCULATION_COUNT = "'||io_rt_let.recirculation_count||'"'
                                                          ||', USER_INFO = "'||io_rt_let.user_info||'"'                                                           , 1, 4000));
   end;                                                          
end let_update_row;

function let_delete_row( i_let_id   in  lm_load_rule_events.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.let_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         let_lock_row( i_let_id   =>  i_let_id );

         
         l_deleted := let_perform_delete( i_let_id   =>  i_let_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_let_id||'"' );
   end;                                                          
end let_delete_row;

function let_seq1_nextval
return lm_load_rule_events.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.let_seq1_nextval';
   l_let_id  lm_load_rule_events.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select lm_let_seq1.nextval 
           into l_let_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_let_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end let_seq1_nextval;


end lm_let_tapi_pck;
/