create or replace PACKAGE lm_lgt_tapi_pck
IS
-- Table API package for table lm_ebs_lane_group_events
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:10)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'LM_LGT_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'LM_EBS_LANE_GROUP_EVENTS';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION lgt_select_row( i_lgt_ID   IN  lm_ebs_lane_group_events.ID%TYPE
                       , o_rt_lgt   OUT lm_ebs_lane_group_events%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION lgt_select_row_upd( i_lgt_ID   IN  lm_ebs_lane_group_events.ID%TYPE
                           , o_rt_lgt   OUT lm_ebs_lane_group_events%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE lgt_lock_row( i_lgt_ID   IN  lm_ebs_lane_group_events.ID%TYPE )
;

PROCEDURE lgt_lock_row_nowait( i_lgt_ID   IN  lm_ebs_lane_group_events.ID%TYPE )
;

PROCEDURE lgt_insert_row ( io_rt_lgt  IN OUT lm_ebs_lane_group_events%ROWTYPE )
;

FUNCTION lgt_update_row( i_lgt_ID   IN     lm_ebs_lane_group_events.ID%TYPE
                       , io_rt_lgt  IN OUT lm_ebs_lane_group_events%ROWTYPE )
RETURN NUMBER
;

FUNCTION lgt_delete_row( i_lgt_ID   IN  lm_ebs_lane_group_events.ID%TYPE )
RETURN BOOLEAN
;

FUNCTION lgt_seq1_nextval
RETURN lm_ebs_lane_group_events.ID%TYPE
;


END lm_lgt_tapi_pck;
/




package body lm_lgt_tapi_pck
is




function lgt_select_row( i_lgt_id   in  lm_ebs_lane_group_events.id%type
                       , o_rt_lgt   out lm_ebs_lane_group_events%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lgt_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_lgt ( i_lgt_id   in  lm_ebs_lane_group_events.id%type )
      is 
           select *
             from lm_ebs_lane_group_events lgt
            where lgt.id = i_lgt_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_lgt( i_lgt_id => i_lgt_id );
         fetch c_lgt into o_rt_lgt;
         l_found := c_lgt%found;
         close c_lgt;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_lgt%isopen
         then
            close c_lgt;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end lgt_select_row;

function lgt_select_row_upd( i_lgt_id   in  lm_ebs_lane_group_events.id%type
                           , o_rt_lgt   out lm_ebs_lane_group_events%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lgt_select_row_upd';
   l_found                boolean      := false;

   cursor c_lgt ( i_lgt_id   in  lm_ebs_lane_group_events.id%type )
   is
           select *
             from lm_ebs_lane_group_events lgt
            where lgt.id = i_lgt_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_lgt( i_lgt_id => i_lgt_id );
   fetch c_lgt into o_rt_lgt;
   l_found := c_lgt%found;
   close c_lgt;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_lgt%isopen
      then
         close c_lgt;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end lgt_select_row_upd;

procedure lgt_lock_row( i_lgt_id   in  lm_ebs_lane_group_events.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lgt_lock_row';
begin
  declare
     cursor c_lgt ( i_lgt_id   in  lm_ebs_lane_group_events.id%type )
     is
             select ''
               from lm_ebs_lane_group_events lgt
              where lgt.id = i_lgt_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_lgt_id is not null
         then
            begin
                
                lgt_lock_row_nowait( i_lgt_id => i_lgt_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_lgt( i_lgt_id => i_lgt_id );
                  close c_lgt;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_lgt%isopen
         then
            close c_lgt;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end lgt_lock_row;

procedure lgt_lock_row_nowait( i_lgt_id   in  lm_ebs_lane_group_events.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lgt_lock_row_nowait';
begin
   declare
      cursor c_lgt ( i_lgt_id   in  lm_ebs_lane_group_events.id%type )
      is
              select ''
                from lm_ebs_lane_group_events lgt
               where lgt.id = i_lgt_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_lgt_id is not null
         then
            
            open c_lgt( i_lgt_id => i_lgt_id );

            close c_lgt;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_lgt%isopen
        then
           close c_lgt;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_lgt_id||'"' );
   end;                                                          
end lgt_lock_row_nowait;

function lgt_perform_update( i_lgt_id   in     lm_ebs_lane_group_events.id%type
                           , io_rt_lgt  in out lm_ebs_lane_group_events%rowtype )
return number
;

function lgt_perform_delete( i_lgt_id   in  lm_ebs_lane_group_events.id%type )
return boolean
;

procedure lgt_insert_row ( io_rt_lgt  in out lm_ebs_lane_group_events%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lgt_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into lm_ebs_lane_group_events( id
                                , lap_id
                                , date_created
                                , priority
                                , maximum_allocable_lanes
                                , release_lane_threshold_pct
                                , force_release_time_limit
                                , offset
                                , time_window
                                , number_of_timeslots
                                , pcm_name
                                , user_info )
              values ( io_rt_lgt.id
                     , io_rt_lgt.lap_id
                     , io_rt_lgt.date_created
                     , io_rt_lgt.priority
                     , io_rt_lgt.maximum_allocable_lanes
                     , io_rt_lgt.release_lane_threshold_pct
                     , io_rt_lgt.force_release_time_limit
                     , io_rt_lgt.offset
                     , io_rt_lgt.time_window
                     , io_rt_lgt.number_of_timeslots
                     , io_rt_lgt.pcm_name
                     , io_rt_lgt.user_info )
           returning id
                   , lap_id
                   , date_created
                   , priority
                   , maximum_allocable_lanes
                   , release_lane_threshold_pct
                   , force_release_time_limit
                   , offset
                   , time_window
                   , number_of_timeslots
                   , pcm_name
                   , user_info
                into io_rt_lgt.id
                   , io_rt_lgt.lap_id
                   , io_rt_lgt.date_created
                   , io_rt_lgt.priority
                   , io_rt_lgt.maximum_allocable_lanes
                   , io_rt_lgt.release_lane_threshold_pct
                   , io_rt_lgt.force_release_time_limit
                   , io_rt_lgt.offset
                   , io_rt_lgt.time_window
                   , io_rt_lgt.number_of_timeslots
                   , io_rt_lgt.pcm_name
                   , io_rt_lgt.user_info;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_lgt.id||'"'
                                                             ||', LAP_ID = "'||io_rt_lgt.lap_id||'"'
                                                             ||', DATE_CREATED = "'||io_rt_lgt.date_created||'"'
                                                             ||', PRIORITY = "'||io_rt_lgt.priority||'"'
                                                             ||', MAXIMUM_ALLOCABLE_LANES = "'||io_rt_lgt.maximum_allocable_lanes||'"'
                                                             ||', RELEASE_LANE_THRESHOLD_PCT = "'||io_rt_lgt.release_lane_threshold_pct||'"'
                                                             ||', FORCE_RELEASE_TIME_LIMIT = "'||io_rt_lgt.force_release_time_limit||'"'
                                                             ||', OFFSET = "'||io_rt_lgt.offset||'"'
                                                             ||', TIME_WINDOW = "'||io_rt_lgt.time_window||'"'
                                                             ||', NUMBER_OF_TIMESLOTS = "'||io_rt_lgt.number_of_timeslots||'"'
                                                             ||', PCM_NAME = "'||io_rt_lgt.pcm_name||'"'
                                                             ||', USER_INFO = "'||io_rt_lgt.user_info||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end lgt_insert_row;

function lgt_perform_update( i_lgt_id   in     lm_ebs_lane_group_events.id%type
                           , io_rt_lgt  in out lm_ebs_lane_group_events%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lgt_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update lm_ebs_lane_group_events
            set id = io_rt_lgt.id
              , lap_id = io_rt_lgt.lap_id
              , date_created = io_rt_lgt.date_created
              , priority = io_rt_lgt.priority
              , maximum_allocable_lanes = io_rt_lgt.maximum_allocable_lanes
              , release_lane_threshold_pct = io_rt_lgt.release_lane_threshold_pct
              , force_release_time_limit = io_rt_lgt.force_release_time_limit
              , offset = io_rt_lgt.offset
              , time_window = io_rt_lgt.time_window
              , number_of_timeslots = io_rt_lgt.number_of_timeslots
              , pcm_name = io_rt_lgt.pcm_name
              , user_info = io_rt_lgt.user_info
          where id = i_lgt_id
      returning id
              , lap_id
              , date_created
              , priority
              , maximum_allocable_lanes
              , release_lane_threshold_pct
              , force_release_time_limit
              , offset
              , time_window
              , number_of_timeslots
              , pcm_name
              , user_info
           into io_rt_lgt.id
              , io_rt_lgt.lap_id
              , io_rt_lgt.date_created
              , io_rt_lgt.priority
              , io_rt_lgt.maximum_allocable_lanes
              , io_rt_lgt.release_lane_threshold_pct
              , io_rt_lgt.force_release_time_limit
              , io_rt_lgt.offset
              , io_rt_lgt.time_window
              , io_rt_lgt.number_of_timeslots
              , io_rt_lgt.pcm_name
              , io_rt_lgt.user_info;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_lgt.id||'"'
                                                             ||', LAP_ID = "'||io_rt_lgt.lap_id||'"'
                                                             ||', DATE_CREATED = "'||io_rt_lgt.date_created||'"'
                                                             ||', PRIORITY = "'||io_rt_lgt.priority||'"'
                                                             ||', MAXIMUM_ALLOCABLE_LANES = "'||io_rt_lgt.maximum_allocable_lanes||'"'
                                                             ||', RELEASE_LANE_THRESHOLD_PCT = "'||io_rt_lgt.release_lane_threshold_pct||'"'
                                                             ||', FORCE_RELEASE_TIME_LIMIT = "'||io_rt_lgt.force_release_time_limit||'"'
                                                             ||', OFFSET = "'||io_rt_lgt.offset||'"'
                                                             ||', TIME_WINDOW = "'||io_rt_lgt.time_window||'"'
                                                             ||', NUMBER_OF_TIMESLOTS = "'||io_rt_lgt.number_of_timeslots||'"'
                                                             ||', PCM_NAME = "'||io_rt_lgt.pcm_name||'"'
                                                             ||', USER_INFO = "'||io_rt_lgt.user_info||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end lgt_perform_update;

function lgt_perform_delete( i_lgt_id   in  lm_ebs_lane_group_events.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lgt_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from lm_ebs_lane_group_events
          where id = i_lgt_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_lgt_id||'"' );
   end;                                                          
end lgt_perform_delete;

function lgt_update_row( i_lgt_id   in     lm_ebs_lane_group_events.id%type
                       , io_rt_lgt  in out lm_ebs_lane_group_events%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lgt_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         lgt_lock_row( i_lgt_id   =>  i_lgt_id );

         
         l_rowcount := 
            lgt_perform_update( i_lgt_id   =>  i_lgt_id
                              , io_rt_lgt  => io_rt_lgt );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_lgt.id||'"'
                                                          ||', LAP_ID = "'||io_rt_lgt.lap_id||'"'
                                                          ||', DATE_CREATED = "'||io_rt_lgt.date_created||'"'
                                                          ||', PRIORITY = "'||io_rt_lgt.priority||'"'
                                                          ||', MAXIMUM_ALLOCABLE_LANES = "'||io_rt_lgt.maximum_allocable_lanes||'"'
                                                          ||', RELEASE_LANE_THRESHOLD_PCT = "'||io_rt_lgt.release_lane_threshold_pct||'"'
                                                          ||', FORCE_RELEASE_TIME_LIMIT = "'||io_rt_lgt.force_release_time_limit||'"'
                                                          ||', OFFSET = "'||io_rt_lgt.offset||'"'
                                                          ||', TIME_WINDOW = "'||io_rt_lgt.time_window||'"'
                                                          ||', NUMBER_OF_TIMESLOTS = "'||io_rt_lgt.number_of_timeslots||'"'
                                                          ||', PCM_NAME = "'||io_rt_lgt.pcm_name||'"'
                                                          ||', USER_INFO = "'||io_rt_lgt.user_info||'"'                                                           , 1, 4000));
   end;                                                          
end lgt_update_row;

function lgt_delete_row( i_lgt_id   in  lm_ebs_lane_group_events.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lgt_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         lgt_lock_row( i_lgt_id   =>  i_lgt_id );

         
         l_deleted := lgt_perform_delete( i_lgt_id   =>  i_lgt_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_lgt_id||'"' );
   end;                                                          
end lgt_delete_row;

function lgt_seq1_nextval
return lm_ebs_lane_group_events.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lgt_seq1_nextval';
   l_lgt_id  lm_ebs_lane_group_events.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select lm_lgt_seq1.nextval 
           into l_lgt_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_lgt_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end lgt_seq1_nextval;


end lm_lgt_tapi_pck;
/