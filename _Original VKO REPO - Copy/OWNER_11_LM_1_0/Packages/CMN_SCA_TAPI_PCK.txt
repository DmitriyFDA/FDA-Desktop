create or replace PACKAGE cmn_sca_tapi_pck
IS
-- Table API package for table cmn_sysconfig_data
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:08)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'CMN_SCA_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'CMN_SYSCONFIG_DATA';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION sca_select_row( i_sca_ID   IN  cmn_sysconfig_data.ID%TYPE
                       , o_rt_sca   OUT cmn_sysconfig_data%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION sca_select_row_upd( i_sca_ID   IN  cmn_sysconfig_data.ID%TYPE
                           , o_rt_sca   OUT cmn_sysconfig_data%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE sca_lock_row( i_sca_ID   IN  cmn_sysconfig_data.ID%TYPE )
;

PROCEDURE sca_lock_row_nowait( i_sca_ID   IN  cmn_sysconfig_data.ID%TYPE )
;

PROCEDURE sca_insert_row ( io_rt_sca  IN OUT cmn_sysconfig_data%ROWTYPE )
;

FUNCTION sca_update_row( i_sca_ID   IN     cmn_sysconfig_data.ID%TYPE
                       , io_rt_sca  IN OUT cmn_sysconfig_data%ROWTYPE )
RETURN NUMBER
;

FUNCTION sca_delete_row( i_sca_ID   IN  cmn_sysconfig_data.ID%TYPE )
RETURN BOOLEAN
;

FUNCTION sca_seq1_nextval
RETURN cmn_sysconfig_data.ID%TYPE
;


END cmn_sca_tapi_pck;
/




package body cmn_sca_tapi_pck
is




function sca_select_row( i_sca_id   in  cmn_sysconfig_data.id%type
                       , o_rt_sca   out cmn_sysconfig_data%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sca_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_sca ( i_sca_id   in  cmn_sysconfig_data.id%type )
      is 
           select *
             from cmn_sysconfig_data sca
            where sca.id = i_sca_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_sca( i_sca_id => i_sca_id );
         fetch c_sca into o_rt_sca;
         l_found := c_sca%found;
         close c_sca;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_sca%isopen
         then
            close c_sca;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end sca_select_row;

function sca_select_row_upd( i_sca_id   in  cmn_sysconfig_data.id%type
                           , o_rt_sca   out cmn_sysconfig_data%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sca_select_row_upd';
   l_found                boolean      := false;

   cursor c_sca ( i_sca_id   in  cmn_sysconfig_data.id%type )
   is
           select *
             from cmn_sysconfig_data sca
            where sca.id = i_sca_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_sca( i_sca_id => i_sca_id );
   fetch c_sca into o_rt_sca;
   l_found := c_sca%found;
   close c_sca;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_sca%isopen
      then
         close c_sca;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end sca_select_row_upd;

procedure sca_lock_row( i_sca_id   in  cmn_sysconfig_data.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sca_lock_row';
begin
  declare
     cursor c_sca ( i_sca_id   in  cmn_sysconfig_data.id%type )
     is
             select ''
               from cmn_sysconfig_data sca
              where sca.id = i_sca_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_sca_id is not null
         then
            begin
                
                sca_lock_row_nowait( i_sca_id => i_sca_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_sca( i_sca_id => i_sca_id );
                  close c_sca;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_sca%isopen
         then
            close c_sca;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end sca_lock_row;

procedure sca_lock_row_nowait( i_sca_id   in  cmn_sysconfig_data.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sca_lock_row_nowait';
begin
   declare
      cursor c_sca ( i_sca_id   in  cmn_sysconfig_data.id%type )
      is
              select ''
                from cmn_sysconfig_data sca
               where sca.id = i_sca_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_sca_id is not null
         then
            
            open c_sca( i_sca_id => i_sca_id );

            close c_sca;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_sca%isopen
        then
           close c_sca;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_sca_id||'"' );
   end;                                                          
end sca_lock_row_nowait;

function sca_perform_update( i_sca_id   in     cmn_sysconfig_data.id%type
                           , io_rt_sca  in out cmn_sysconfig_data%rowtype )
return number
;

function sca_perform_delete( i_sca_id   in  cmn_sysconfig_data.id%type )
return boolean
;

procedure sca_insert_row ( io_rt_sca  in out cmn_sysconfig_data%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sca_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into cmn_sysconfig_data( id
                                , sde_doc_type
                                , ind_active
                                , version
                                , data
                                , datetime_created
                                , datetime_processing_start
                                , datetime_processing_end
                                , errors_encountered )
              values ( io_rt_sca.id
                     , io_rt_sca.sde_doc_type
                     , io_rt_sca.ind_active
                     , io_rt_sca.version
                     , io_rt_sca.data
                     , io_rt_sca.datetime_created
                     , io_rt_sca.datetime_processing_start
                     , io_rt_sca.datetime_processing_end
                     , io_rt_sca.errors_encountered )
           returning id
                   , sde_doc_type
                   , ind_active
                   , version
                   , datetime_created
                   , datetime_processing_start
                   , datetime_processing_end
                   , errors_encountered
                into io_rt_sca.id
                   , io_rt_sca.sde_doc_type
                   , io_rt_sca.ind_active
                   , io_rt_sca.version

                   , io_rt_sca.datetime_created
                   , io_rt_sca.datetime_processing_start
                   , io_rt_sca.datetime_processing_end
                   , io_rt_sca.errors_encountered;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_sca.id||'"'
                                                             ||', SDE_DOC_TYPE = "'||io_rt_sca.sde_doc_type||'"'
                                                             ||', IND_ACTIVE = "'||io_rt_sca.ind_active||'"'
                                                             ||', VERSION = "'||io_rt_sca.version||'"'

                                                             ||', DATETIME_CREATED = "'||io_rt_sca.datetime_created||'"'
                                                             ||', DATETIME_PROCESSING_START = "'||io_rt_sca.datetime_processing_start||'"'
                                                             ||', DATETIME_PROCESSING_END = "'||io_rt_sca.datetime_processing_end||'"'
                                                             ||', ERRORS_ENCOUNTERED = "'||io_rt_sca.errors_encountered||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end sca_insert_row;

function sca_perform_update( i_sca_id   in     cmn_sysconfig_data.id%type
                           , io_rt_sca  in out cmn_sysconfig_data%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sca_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update cmn_sysconfig_data
            set id = io_rt_sca.id
              , sde_doc_type = io_rt_sca.sde_doc_type
              , ind_active = io_rt_sca.ind_active
              , version = io_rt_sca.version
              , data = io_rt_sca.data
              , datetime_created = io_rt_sca.datetime_created
              , datetime_processing_start = io_rt_sca.datetime_processing_start
              , datetime_processing_end = io_rt_sca.datetime_processing_end
              , errors_encountered = io_rt_sca.errors_encountered
          where id = i_sca_id
      returning id
              , sde_doc_type
              , ind_active
              , version
              , datetime_created
              , datetime_processing_start
              , datetime_processing_end
              , errors_encountered
           into io_rt_sca.id
              , io_rt_sca.sde_doc_type
              , io_rt_sca.ind_active
              , io_rt_sca.version

              , io_rt_sca.datetime_created
              , io_rt_sca.datetime_processing_start
              , io_rt_sca.datetime_processing_end
              , io_rt_sca.errors_encountered;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_sca.id||'"'
                                                             ||', SDE_DOC_TYPE = "'||io_rt_sca.sde_doc_type||'"'
                                                             ||', IND_ACTIVE = "'||io_rt_sca.ind_active||'"'
                                                             ||', VERSION = "'||io_rt_sca.version||'"'

                                                             ||', DATETIME_CREATED = "'||io_rt_sca.datetime_created||'"'
                                                             ||', DATETIME_PROCESSING_START = "'||io_rt_sca.datetime_processing_start||'"'
                                                             ||', DATETIME_PROCESSING_END = "'||io_rt_sca.datetime_processing_end||'"'
                                                             ||', ERRORS_ENCOUNTERED = "'||io_rt_sca.errors_encountered||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end sca_perform_update;

function sca_perform_delete( i_sca_id   in  cmn_sysconfig_data.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sca_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from cmn_sysconfig_data
          where id = i_sca_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_sca_id||'"' );
   end;                                                          
end sca_perform_delete;

function sca_update_row( i_sca_id   in     cmn_sysconfig_data.id%type
                       , io_rt_sca  in out cmn_sysconfig_data%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sca_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         sca_lock_row( i_sca_id   =>  i_sca_id );

         
         l_rowcount := 
            sca_perform_update( i_sca_id   =>  i_sca_id
                              , io_rt_sca  => io_rt_sca );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_sca.id||'"'
                                                          ||', SDE_DOC_TYPE = "'||io_rt_sca.sde_doc_type||'"'
                                                          ||', IND_ACTIVE = "'||io_rt_sca.ind_active||'"'
                                                          ||', VERSION = "'||io_rt_sca.version||'"'

                                                          ||', DATETIME_CREATED = "'||io_rt_sca.datetime_created||'"'
                                                          ||', DATETIME_PROCESSING_START = "'||io_rt_sca.datetime_processing_start||'"'
                                                          ||', DATETIME_PROCESSING_END = "'||io_rt_sca.datetime_processing_end||'"'
                                                          ||', ERRORS_ENCOUNTERED = "'||io_rt_sca.errors_encountered||'"'                                                           , 1, 4000));
   end;                                                          
end sca_update_row;

function sca_delete_row( i_sca_id   in  cmn_sysconfig_data.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sca_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         sca_lock_row( i_sca_id   =>  i_sca_id );

         
         l_deleted := sca_perform_delete( i_sca_id   =>  i_sca_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_sca_id||'"' );
   end;                                                          
end sca_delete_row;

function sca_seq1_nextval
return cmn_sysconfig_data.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sca_seq1_nextval';
   l_sca_id  cmn_sysconfig_data.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select cmn_sca_seq1.nextval 
           into l_sca_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_sca_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end sca_seq1_nextval;


end cmn_sca_tapi_pck;
/