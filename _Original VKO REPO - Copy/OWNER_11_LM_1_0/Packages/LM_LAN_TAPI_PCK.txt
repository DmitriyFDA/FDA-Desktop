create or replace PACKAGE lm_lan_tapi_pck
IS
-- Table API package for table lm_ebs_lane_allocations
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:10)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'LM_LAN_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'LM_EBS_LANE_ALLOCATIONS';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION lan_select_row( i_lan_ID   IN  lm_ebs_lane_allocations.ID%TYPE
                       , o_rt_lan   OUT lm_ebs_lane_allocations%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION lan_select_row_upd( i_lan_ID   IN  lm_ebs_lane_allocations.ID%TYPE
                           , o_rt_lan   OUT lm_ebs_lane_allocations%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE lan_lock_row( i_lan_ID   IN  lm_ebs_lane_allocations.ID%TYPE )
;

PROCEDURE lan_lock_row_nowait( i_lan_ID   IN  lm_ebs_lane_allocations.ID%TYPE )
;

PROCEDURE lan_insert_row ( io_rt_lan  IN OUT lm_ebs_lane_allocations%ROWTYPE )
;

FUNCTION lan_update_row( i_lan_ID   IN     lm_ebs_lane_allocations.ID%TYPE
                       , io_rt_lan  IN OUT lm_ebs_lane_allocations%ROWTYPE )
RETURN NUMBER
;

FUNCTION lan_delete_row( i_lan_ID   IN  lm_ebs_lane_allocations.ID%TYPE )
RETURN BOOLEAN
;

FUNCTION lan_seq1_nextval
RETURN lm_ebs_lane_allocations.ID%TYPE
;


END lm_lan_tapi_pck;
/




package body lm_lan_tapi_pck
is




function lan_select_row( i_lan_id   in  lm_ebs_lane_allocations.id%type
                       , o_rt_lan   out lm_ebs_lane_allocations%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lan_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_lan ( i_lan_id   in  lm_ebs_lane_allocations.id%type )
      is 
           select *
             from lm_ebs_lane_allocations lan
            where lan.id = i_lan_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_lan( i_lan_id => i_lan_id );
         fetch c_lan into o_rt_lan;
         l_found := c_lan%found;
         close c_lan;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_lan%isopen
         then
            close c_lan;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end lan_select_row;

function lan_select_row_upd( i_lan_id   in  lm_ebs_lane_allocations.id%type
                           , o_rt_lan   out lm_ebs_lane_allocations%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lan_select_row_upd';
   l_found                boolean      := false;

   cursor c_lan ( i_lan_id   in  lm_ebs_lane_allocations.id%type )
   is
           select *
             from lm_ebs_lane_allocations lan
            where lan.id = i_lan_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_lan( i_lan_id => i_lan_id );
   fetch c_lan into o_rt_lan;
   l_found := c_lan%found;
   close c_lan;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_lan%isopen
      then
         close c_lan;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end lan_select_row_upd;

procedure lan_lock_row( i_lan_id   in  lm_ebs_lane_allocations.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lan_lock_row';
begin
  declare
     cursor c_lan ( i_lan_id   in  lm_ebs_lane_allocations.id%type )
     is
             select ''
               from lm_ebs_lane_allocations lan
              where lan.id = i_lan_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_lan_id is not null
         then
            begin
                
                lan_lock_row_nowait( i_lan_id => i_lan_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_lan( i_lan_id => i_lan_id );
                  close c_lan;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_lan%isopen
         then
            close c_lan;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end lan_lock_row;

procedure lan_lock_row_nowait( i_lan_id   in  lm_ebs_lane_allocations.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lan_lock_row_nowait';
begin
   declare
      cursor c_lan ( i_lan_id   in  lm_ebs_lane_allocations.id%type )
      is
              select ''
                from lm_ebs_lane_allocations lan
               where lan.id = i_lan_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_lan_id is not null
         then
            
            open c_lan( i_lan_id => i_lan_id );

            close c_lan;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_lan%isopen
        then
           close c_lan;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_lan_id||'"' );
   end;                                                          
end lan_lock_row_nowait;

function lan_perform_update( i_lan_id   in     lm_ebs_lane_allocations.id%type
                           , io_rt_lan  in out lm_ebs_lane_allocations%rowtype )
return number
;

function lan_perform_delete( i_lan_id   in  lm_ebs_lane_allocations.id%type )
return boolean
;

procedure lan_insert_row ( io_rt_lan  in out lm_ebs_lane_allocations%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lan_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into lm_ebs_lane_allocations( id
                                , lne_stn_id
                                , tsl_id
                                , sgn_id
                                , time_activated
                                , time_deactivated )
              values ( io_rt_lan.id
                     , io_rt_lan.lne_stn_id
                     , io_rt_lan.tsl_id
                     , io_rt_lan.sgn_id
                     , io_rt_lan.time_activated
                     , io_rt_lan.time_deactivated )
           returning id
                   , lne_stn_id
                   , tsl_id
                   , sgn_id
                   , time_activated
                   , time_deactivated
                into io_rt_lan.id
                   , io_rt_lan.lne_stn_id
                   , io_rt_lan.tsl_id
                   , io_rt_lan.sgn_id
                   , io_rt_lan.time_activated
                   , io_rt_lan.time_deactivated;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_lan.id||'"'
                                                             ||', LNE_STN_ID = "'||io_rt_lan.lne_stn_id||'"'
                                                             ||', TSL_ID = "'||io_rt_lan.tsl_id||'"'
                                                             ||', SGN_ID = "'||io_rt_lan.sgn_id||'"'
                                                             ||', TIME_ACTIVATED = "'||io_rt_lan.time_activated||'"'
                                                             ||', TIME_DEACTIVATED = "'||io_rt_lan.time_deactivated||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end lan_insert_row;

function lan_perform_update( i_lan_id   in     lm_ebs_lane_allocations.id%type
                           , io_rt_lan  in out lm_ebs_lane_allocations%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lan_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update lm_ebs_lane_allocations
            set id = io_rt_lan.id
              , lne_stn_id = io_rt_lan.lne_stn_id
              , tsl_id = io_rt_lan.tsl_id
              , sgn_id = io_rt_lan.sgn_id
              , time_activated = io_rt_lan.time_activated
              , time_deactivated = io_rt_lan.time_deactivated
          where id = i_lan_id
      returning id
              , lne_stn_id
              , tsl_id
              , sgn_id
              , time_activated
              , time_deactivated
           into io_rt_lan.id
              , io_rt_lan.lne_stn_id
              , io_rt_lan.tsl_id
              , io_rt_lan.sgn_id
              , io_rt_lan.time_activated
              , io_rt_lan.time_deactivated;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_lan.id||'"'
                                                             ||', LNE_STN_ID = "'||io_rt_lan.lne_stn_id||'"'
                                                             ||', TSL_ID = "'||io_rt_lan.tsl_id||'"'
                                                             ||', SGN_ID = "'||io_rt_lan.sgn_id||'"'
                                                             ||', TIME_ACTIVATED = "'||io_rt_lan.time_activated||'"'
                                                             ||', TIME_DEACTIVATED = "'||io_rt_lan.time_deactivated||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end lan_perform_update;

function lan_perform_delete( i_lan_id   in  lm_ebs_lane_allocations.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lan_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from lm_ebs_lane_allocations
          where id = i_lan_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_lan_id||'"' );
   end;                                                          
end lan_perform_delete;

function lan_update_row( i_lan_id   in     lm_ebs_lane_allocations.id%type
                       , io_rt_lan  in out lm_ebs_lane_allocations%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lan_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         lan_lock_row( i_lan_id   =>  i_lan_id );

         
         l_rowcount := 
            lan_perform_update( i_lan_id   =>  i_lan_id
                              , io_rt_lan  => io_rt_lan );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_lan.id||'"'
                                                          ||', LNE_STN_ID = "'||io_rt_lan.lne_stn_id||'"'
                                                          ||', TSL_ID = "'||io_rt_lan.tsl_id||'"'
                                                          ||', SGN_ID = "'||io_rt_lan.sgn_id||'"'
                                                          ||', TIME_ACTIVATED = "'||io_rt_lan.time_activated||'"'
                                                          ||', TIME_DEACTIVATED = "'||io_rt_lan.time_deactivated||'"'                                                           , 1, 4000));
   end;                                                          
end lan_update_row;

function lan_delete_row( i_lan_id   in  lm_ebs_lane_allocations.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lan_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         lan_lock_row( i_lan_id   =>  i_lan_id );

         
         l_deleted := lan_perform_delete( i_lan_id   =>  i_lan_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_lan_id||'"' );
   end;                                                          
end lan_delete_row;

function lan_seq1_nextval
return lm_ebs_lane_allocations.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lan_seq1_nextval';
   l_lan_id  lm_ebs_lane_allocations.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select lm_lan_seq1.nextval 
           into l_lan_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_lan_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end lan_seq1_nextval;


end lm_lan_tapi_pck;
/