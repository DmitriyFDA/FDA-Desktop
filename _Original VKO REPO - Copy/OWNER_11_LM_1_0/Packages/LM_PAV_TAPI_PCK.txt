create or replace PACKAGE lm_pav_tapi_pck
IS
-- Table API package for table lm_parameter_allowable_values
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:14)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'LM_PAV_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'LM_PARAMETER_ALLOWABLE_VALUES';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION pav_select_row( i_pav_ID   IN  lm_parameter_allowable_values.ID%TYPE
                       , o_rt_pav   OUT lm_parameter_allowable_values%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION pav_select_row_uk1( i_pav_PRR_ID   IN  lm_parameter_allowable_values.PRR_ID%TYPE
                           , i_pav_VALUE   IN  lm_parameter_allowable_values.VALUE%TYPE
                           , o_rt_pav  OUT lm_parameter_allowable_values%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION pav_select_row_upd( i_pav_ID   IN  lm_parameter_allowable_values.ID%TYPE
                           , o_rt_pav   OUT lm_parameter_allowable_values%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION pav_select_row_upd_uk1( i_pav_PRR_ID   IN  lm_parameter_allowable_values.PRR_ID%TYPE
                               , i_pav_VALUE   IN  lm_parameter_allowable_values.VALUE%TYPE
                               , o_rt_pav  OUT lm_parameter_allowable_values%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE pav_lock_row( i_pav_ID   IN  lm_parameter_allowable_values.ID%TYPE )
;

PROCEDURE pav_lock_row_nowait( i_pav_ID   IN  lm_parameter_allowable_values.ID%TYPE )
;


END lm_pav_tapi_pck;
/




package body lm_pav_tapi_pck
is




function pav_select_row( i_pav_id   in  lm_parameter_allowable_values.id%type
                       , o_rt_pav   out lm_parameter_allowable_values%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pav_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_pav ( i_pav_id   in  lm_parameter_allowable_values.id%type )
      is 
           select *
             from lm_parameter_allowable_values pav
            where pav.id = i_pav_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_pav( i_pav_id => i_pav_id );
         fetch c_pav into o_rt_pav;
         l_found := c_pav%found;
         close c_pav;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_pav%isopen
         then
            close c_pav;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pav_select_row;

function pav_select_row_uk1( i_pav_prr_id   in  lm_parameter_allowable_values.prr_id%type
                           , i_pav_value   in  lm_parameter_allowable_values.value%type
                           , o_rt_pav  out lm_parameter_allowable_values%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pav_select_row_uk1';
   l_found                boolean      := false;
begin
   declare
      cursor c_pav ( i_pav_prr_id   in  lm_parameter_allowable_values.prr_id%type
                   , i_pav_value   in  lm_parameter_allowable_values.value%type )
      is
         select *
           from lm_parameter_allowable_values pav
          where pav.prr_id = i_pav_prr_id 
            and pav.value = i_pav_value ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_pav(i_pav_prr_id => i_pav_prr_id, i_pav_value => i_pav_value);
         fetch c_pav into o_rt_pav;
         l_found := c_pav%found;
         close c_pav;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_pav%isopen
      then
         close c_pav;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pav_select_row_uk1;

function pav_select_row_upd( i_pav_id   in  lm_parameter_allowable_values.id%type
                           , o_rt_pav   out lm_parameter_allowable_values%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pav_select_row_upd';
   l_found                boolean      := false;

   cursor c_pav ( i_pav_id   in  lm_parameter_allowable_values.id%type )
   is
           select *
             from lm_parameter_allowable_values pav
            where pav.id = i_pav_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_pav( i_pav_id => i_pav_id );
   fetch c_pav into o_rt_pav;
   l_found := c_pav%found;
   close c_pav;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_pav%isopen
      then
         close c_pav;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end pav_select_row_upd;

function pav_select_row_upd_uk1( i_pav_prr_id   in  lm_parameter_allowable_values.prr_id%type
                               , i_pav_value   in  lm_parameter_allowable_values.value%type
                               , o_rt_pav  out lm_parameter_allowable_values%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pav_select_row_upd_uk1';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := pav_select_row_uk1( i_pav_prr_id   =>  i_pav_prr_id
                                   , i_pav_value   =>  i_pav_value
                                   , o_rt_pav => o_rt_pav );
      if l_found
      then
         
         l_found := pav_select_row_upd( i_pav_id => o_rt_pav.id
                                      , o_rt_pav => o_rt_pav );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end pav_select_row_upd_uk1;

procedure pav_lock_row( i_pav_id   in  lm_parameter_allowable_values.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pav_lock_row';
begin
  declare
     cursor c_pav ( i_pav_id   in  lm_parameter_allowable_values.id%type )
     is
             select ''
               from lm_parameter_allowable_values pav
              where pav.id = i_pav_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_pav_id is not null
         then
            begin
                
                pav_lock_row_nowait( i_pav_id => i_pav_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_pav( i_pav_id => i_pav_id );
                  close c_pav;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_pav%isopen
         then
            close c_pav;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end pav_lock_row;

procedure pav_lock_row_nowait( i_pav_id   in  lm_parameter_allowable_values.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pav_lock_row_nowait';
begin
   declare
      cursor c_pav ( i_pav_id   in  lm_parameter_allowable_values.id%type )
      is
              select ''
                from lm_parameter_allowable_values pav
               where pav.id = i_pav_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_pav_id is not null
         then
            
            open c_pav( i_pav_id => i_pav_id );

            close c_pav;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_pav%isopen
        then
           close c_pav;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_pav_id||'"' );
   end;                                                          
end pav_lock_row_nowait;


end lm_pav_tapi_pck;
/