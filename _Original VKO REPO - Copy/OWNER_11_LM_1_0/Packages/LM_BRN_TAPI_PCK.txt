create or replace PACKAGE lm_brn_tapi_pck
IS
-- Table API package for table lm_brp_compositions
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:08)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'LM_BRN_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'LM_BRP_COMPOSITIONS';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION brn_select_row( i_brn_ID   IN  lm_brp_compositions.ID%TYPE
                       , o_rt_brn   OUT lm_brp_compositions%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION brn_select_row_upd( i_brn_ID   IN  lm_brp_compositions.ID%TYPE
                           , o_rt_brn   OUT lm_brp_compositions%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE brn_lock_row( i_brn_ID   IN  lm_brp_compositions.ID%TYPE )
;

PROCEDURE brn_lock_row_nowait( i_brn_ID   IN  lm_brp_compositions.ID%TYPE )
;


END lm_brn_tapi_pck;
/




package body lm_brn_tapi_pck
is




function brn_select_row( i_brn_id   in  lm_brp_compositions.id%type
                       , o_rt_brn   out lm_brp_compositions%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.brn_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_brn ( i_brn_id   in  lm_brp_compositions.id%type )
      is 
           select *
             from lm_brp_compositions brn
            where brn.id = i_brn_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_brn( i_brn_id => i_brn_id );
         fetch c_brn into o_rt_brn;
         l_found := c_brn%found;
         close c_brn;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_brn%isopen
         then
            close c_brn;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end brn_select_row;

function brn_select_row_upd( i_brn_id   in  lm_brp_compositions.id%type
                           , o_rt_brn   out lm_brp_compositions%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.brn_select_row_upd';
   l_found                boolean      := false;

   cursor c_brn ( i_brn_id   in  lm_brp_compositions.id%type )
   is
           select *
             from lm_brp_compositions brn
            where brn.id = i_brn_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_brn( i_brn_id => i_brn_id );
   fetch c_brn into o_rt_brn;
   l_found := c_brn%found;
   close c_brn;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_brn%isopen
      then
         close c_brn;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end brn_select_row_upd;

procedure brn_lock_row( i_brn_id   in  lm_brp_compositions.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.brn_lock_row';
begin
  declare
     cursor c_brn ( i_brn_id   in  lm_brp_compositions.id%type )
     is
             select ''
               from lm_brp_compositions brn
              where brn.id = i_brn_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_brn_id is not null
         then
            begin
                
                brn_lock_row_nowait( i_brn_id => i_brn_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_brn( i_brn_id => i_brn_id );
                  close c_brn;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_brn%isopen
         then
            close c_brn;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end brn_lock_row;

procedure brn_lock_row_nowait( i_brn_id   in  lm_brp_compositions.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.brn_lock_row_nowait';
begin
   declare
      cursor c_brn ( i_brn_id   in  lm_brp_compositions.id%type )
      is
              select ''
                from lm_brp_compositions brn
               where brn.id = i_brn_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_brn_id is not null
         then
            
            open c_brn( i_brn_id => i_brn_id );

            close c_brn;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_brn%isopen
        then
           close c_brn;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_brn_id||'"' );
   end;                                                          
end brn_lock_row_nowait;


end lm_brn_tapi_pck;
/