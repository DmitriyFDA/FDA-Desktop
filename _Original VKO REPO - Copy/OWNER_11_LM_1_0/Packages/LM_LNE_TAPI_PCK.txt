create or replace PACKAGE lm_lne_tapi_pck
IS
-- Table API package for table lm_ebs_lanes
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:10)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'LM_LNE_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'LM_EBS_LANES';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION lne_select_row( i_lne_STN_ID   IN  lm_ebs_lanes.STN_ID%TYPE
                       , o_rt_lne   OUT lm_ebs_lanes%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION lne_select_row_uk1( i_lne_TST_ID   IN  lm_ebs_lanes.TST_ID%TYPE
                           , o_rt_lne  OUT lm_ebs_lanes%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION lne_select_row_upd( i_lne_STN_ID   IN  lm_ebs_lanes.STN_ID%TYPE
                           , o_rt_lne   OUT lm_ebs_lanes%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION lne_select_row_upd_uk1( i_lne_TST_ID   IN  lm_ebs_lanes.TST_ID%TYPE
                               , o_rt_lne  OUT lm_ebs_lanes%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE lne_lock_row( i_lne_STN_ID   IN  lm_ebs_lanes.STN_ID%TYPE )
;

PROCEDURE lne_lock_row_nowait( i_lne_STN_ID   IN  lm_ebs_lanes.STN_ID%TYPE )
;

PROCEDURE lne_insert_row ( io_rt_lne  IN OUT lm_ebs_lanes%ROWTYPE )
;

FUNCTION lne_update_row( i_lne_STN_ID   IN     lm_ebs_lanes.STN_ID%TYPE
                       , io_rt_lne  IN OUT lm_ebs_lanes%ROWTYPE )
RETURN NUMBER
;

FUNCTION lne_delete_row( i_lne_STN_ID   IN  lm_ebs_lanes.STN_ID%TYPE )
RETURN BOOLEAN
;


END lm_lne_tapi_pck;
/




package body lm_lne_tapi_pck
is




function lne_select_row( i_lne_stn_id   in  lm_ebs_lanes.stn_id%type
                       , o_rt_lne   out lm_ebs_lanes%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lne_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_lne ( i_lne_stn_id   in  lm_ebs_lanes.stn_id%type )
      is 
           select *
             from lm_ebs_lanes lne
            where lne.stn_id = i_lne_stn_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_lne( i_lne_stn_id => i_lne_stn_id );
         fetch c_lne into o_rt_lne;
         l_found := c_lne%found;
         close c_lne;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_lne%isopen
         then
            close c_lne;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end lne_select_row;

function lne_select_row_uk1( i_lne_tst_id   in  lm_ebs_lanes.tst_id%type
                           , o_rt_lne  out lm_ebs_lanes%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lne_select_row_uk1';
   l_found                boolean      := false;
begin
   declare
      cursor c_lne ( i_lne_tst_id   in  lm_ebs_lanes.tst_id%type )
      is
         select *
           from lm_ebs_lanes lne
          where lne.tst_id = i_lne_tst_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_lne(i_lne_tst_id => i_lne_tst_id);
         fetch c_lne into o_rt_lne;
         l_found := c_lne%found;
         close c_lne;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_lne%isopen
      then
         close c_lne;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end lne_select_row_uk1;

function lne_select_row_upd( i_lne_stn_id   in  lm_ebs_lanes.stn_id%type
                           , o_rt_lne   out lm_ebs_lanes%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lne_select_row_upd';
   l_found                boolean      := false;

   cursor c_lne ( i_lne_stn_id   in  lm_ebs_lanes.stn_id%type )
   is
           select *
             from lm_ebs_lanes lne
            where lne.stn_id = i_lne_stn_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_lne( i_lne_stn_id => i_lne_stn_id );
   fetch c_lne into o_rt_lne;
   l_found := c_lne%found;
   close c_lne;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_lne%isopen
      then
         close c_lne;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end lne_select_row_upd;

function lne_select_row_upd_uk1( i_lne_tst_id   in  lm_ebs_lanes.tst_id%type
                               , o_rt_lne  out lm_ebs_lanes%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lne_select_row_upd_uk1';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := lne_select_row_uk1( i_lne_tst_id   =>  i_lne_tst_id
                                   , o_rt_lne => o_rt_lne );
      if l_found
      then
         
         l_found := lne_select_row_upd( i_lne_stn_id => o_rt_lne.stn_id
                                      , o_rt_lne => o_rt_lne );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end lne_select_row_upd_uk1;

procedure lne_lock_row( i_lne_stn_id   in  lm_ebs_lanes.stn_id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lne_lock_row';
begin
  declare
     cursor c_lne ( i_lne_stn_id   in  lm_ebs_lanes.stn_id%type )
     is
             select ''
               from lm_ebs_lanes lne
              where lne.stn_id = i_lne_stn_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_lne_stn_id is not null
         then
            begin
                
                lne_lock_row_nowait( i_lne_stn_id => i_lne_stn_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_lne( i_lne_stn_id => i_lne_stn_id );
                  close c_lne;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_lne%isopen
         then
            close c_lne;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end lne_lock_row;

procedure lne_lock_row_nowait( i_lne_stn_id   in  lm_ebs_lanes.stn_id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lne_lock_row_nowait';
begin
   declare
      cursor c_lne ( i_lne_stn_id   in  lm_ebs_lanes.stn_id%type )
      is
              select ''
                from lm_ebs_lanes lne
               where lne.stn_id = i_lne_stn_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_lne_stn_id is not null
         then
            
            open c_lne( i_lne_stn_id => i_lne_stn_id );

            close c_lne;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_lne%isopen
        then
           close c_lne;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'STN_ID = "'||i_lne_stn_id||'"' );
   end;                                                          
end lne_lock_row_nowait;

function lne_perform_update( i_lne_stn_id   in     lm_ebs_lanes.stn_id%type
                           , io_rt_lne  in out lm_ebs_lanes%rowtype )
return number
;

function lne_perform_delete( i_lne_stn_id   in  lm_ebs_lanes.stn_id%type )
return boolean
;

procedure lne_insert_row ( io_rt_lne  in out lm_ebs_lanes%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lne_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into lm_ebs_lanes( stn_id
                                , stn_id_part_of
                                , tst_id
                                , ind_available
                                , time_empty_lane_instruction
                                , time_emptied )
              values ( io_rt_lne.stn_id
                     , io_rt_lne.stn_id_part_of
                     , io_rt_lne.tst_id
                     , io_rt_lne.ind_available
                     , io_rt_lne.time_empty_lane_instruction
                     , io_rt_lne.time_emptied )
           returning stn_id
                   , stn_id_part_of
                   , tst_id
                   , ind_available
                   , time_empty_lane_instruction
                   , time_emptied
                into io_rt_lne.stn_id
                   , io_rt_lne.stn_id_part_of
                   , io_rt_lne.tst_id
                   , io_rt_lne.ind_available
                   , io_rt_lne.time_empty_lane_instruction
                   , io_rt_lne.time_emptied;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('STN_ID = "'||io_rt_lne.stn_id||'"'
                                                             ||', STN_ID_PART_OF = "'||io_rt_lne.stn_id_part_of||'"'
                                                             ||', TST_ID = "'||io_rt_lne.tst_id||'"'
                                                             ||', IND_AVAILABLE = "'||io_rt_lne.ind_available||'"'
                                                             ||', TIME_EMPTY_LANE_INSTRUCTION = "'||io_rt_lne.time_empty_lane_instruction||'"'
                                                             ||', TIME_EMPTIED = "'||io_rt_lne.time_emptied||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end lne_insert_row;

function lne_perform_update( i_lne_stn_id   in     lm_ebs_lanes.stn_id%type
                           , io_rt_lne  in out lm_ebs_lanes%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lne_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update lm_ebs_lanes
            set stn_id = io_rt_lne.stn_id
              , stn_id_part_of = io_rt_lne.stn_id_part_of
              , tst_id = io_rt_lne.tst_id
              , ind_available = io_rt_lne.ind_available
              , time_empty_lane_instruction = io_rt_lne.time_empty_lane_instruction
              , time_emptied = io_rt_lne.time_emptied
          where stn_id = i_lne_stn_id
      returning stn_id
              , stn_id_part_of
              , tst_id
              , ind_available
              , time_empty_lane_instruction
              , time_emptied
           into io_rt_lne.stn_id
              , io_rt_lne.stn_id_part_of
              , io_rt_lne.tst_id
              , io_rt_lne.ind_available
              , io_rt_lne.time_empty_lane_instruction
              , io_rt_lne.time_emptied;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('STN_ID = "'||io_rt_lne.stn_id||'"'
                                                             ||', STN_ID_PART_OF = "'||io_rt_lne.stn_id_part_of||'"'
                                                             ||', TST_ID = "'||io_rt_lne.tst_id||'"'
                                                             ||', IND_AVAILABLE = "'||io_rt_lne.ind_available||'"'
                                                             ||', TIME_EMPTY_LANE_INSTRUCTION = "'||io_rt_lne.time_empty_lane_instruction||'"'
                                                             ||', TIME_EMPTIED = "'||io_rt_lne.time_emptied||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end lne_perform_update;

function lne_perform_delete( i_lne_stn_id   in  lm_ebs_lanes.stn_id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lne_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from lm_ebs_lanes
          where stn_id = i_lne_stn_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'STN_ID = "'||i_lne_stn_id||'"' );
   end;                                                          
end lne_perform_delete;

function lne_update_row( i_lne_stn_id   in     lm_ebs_lanes.stn_id%type
                       , io_rt_lne  in out lm_ebs_lanes%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lne_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         lne_lock_row( i_lne_stn_id   =>  i_lne_stn_id );

         
         l_rowcount := 
            lne_perform_update( i_lne_stn_id   =>  i_lne_stn_id
                              , io_rt_lne  => io_rt_lne );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('STN_ID = "'||io_rt_lne.stn_id||'"'
                                                          ||', STN_ID_PART_OF = "'||io_rt_lne.stn_id_part_of||'"'
                                                          ||', TST_ID = "'||io_rt_lne.tst_id||'"'
                                                          ||', IND_AVAILABLE = "'||io_rt_lne.ind_available||'"'
                                                          ||', TIME_EMPTY_LANE_INSTRUCTION = "'||io_rt_lne.time_empty_lane_instruction||'"'
                                                          ||', TIME_EMPTIED = "'||io_rt_lne.time_emptied||'"'                                                           , 1, 4000));
   end;                                                          
end lne_update_row;

function lne_delete_row( i_lne_stn_id   in  lm_ebs_lanes.stn_id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lne_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         lne_lock_row( i_lne_stn_id   =>  i_lne_stn_id );

         
         l_deleted := lne_perform_delete( i_lne_stn_id   =>  i_lne_stn_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'STN_ID = "'||i_lne_stn_id||'"' );
   end;                                                          
end lne_delete_row;


end lm_lne_tapi_pck;
/