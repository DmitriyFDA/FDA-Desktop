create or replace PACKAGE lm_rdn_tapi_pck
IS
-- Table API package for table lm_received_destinations
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:15)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'LM_RDN_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'LM_RECEIVED_DESTINATIONS';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION rdn_select_row( i_rdn_ID   IN  lm_received_destinations.ID%TYPE
                       , o_rt_rdn   OUT lm_received_destinations%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION rdn_select_row_uk1( i_rdn_PET_ID   IN  lm_received_destinations.PET_ID%TYPE
                           , i_rdn_RDN_ORDER   IN  lm_received_destinations.RDN_ORDER%TYPE
                           , o_rt_rdn  OUT lm_received_destinations%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION rdn_select_row_upd( i_rdn_ID   IN  lm_received_destinations.ID%TYPE
                           , o_rt_rdn   OUT lm_received_destinations%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION rdn_select_row_upd_uk1( i_rdn_PET_ID   IN  lm_received_destinations.PET_ID%TYPE
                               , i_rdn_RDN_ORDER   IN  lm_received_destinations.RDN_ORDER%TYPE
                               , o_rt_rdn  OUT lm_received_destinations%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE rdn_lock_row( i_rdn_ID   IN  lm_received_destinations.ID%TYPE )
;

PROCEDURE rdn_lock_row_nowait( i_rdn_ID   IN  lm_received_destinations.ID%TYPE )
;

PROCEDURE rdn_insert_row ( io_rt_rdn  IN OUT lm_received_destinations%ROWTYPE )
;

FUNCTION rdn_update_row( i_rdn_ID   IN     lm_received_destinations.ID%TYPE
                       , io_rt_rdn  IN OUT lm_received_destinations%ROWTYPE )
RETURN NUMBER
;

FUNCTION rdn_delete_row( i_rdn_ID   IN  lm_received_destinations.ID%TYPE )
RETURN BOOLEAN
;

FUNCTION rdn_seq1_nextval
RETURN lm_received_destinations.ID%TYPE
;


END lm_rdn_tapi_pck;
/




package body lm_rdn_tapi_pck
is




function rdn_select_row( i_rdn_id   in  lm_received_destinations.id%type
                       , o_rt_rdn   out lm_received_destinations%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rdn_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_rdn ( i_rdn_id   in  lm_received_destinations.id%type )
      is 
           select *
             from lm_received_destinations rdn
            where rdn.id = i_rdn_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_rdn( i_rdn_id => i_rdn_id );
         fetch c_rdn into o_rt_rdn;
         l_found := c_rdn%found;
         close c_rdn;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_rdn%isopen
         then
            close c_rdn;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end rdn_select_row;

function rdn_select_row_uk1( i_rdn_pet_id   in  lm_received_destinations.pet_id%type
                           , i_rdn_rdn_order   in  lm_received_destinations.rdn_order%type
                           , o_rt_rdn  out lm_received_destinations%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rdn_select_row_uk1';
   l_found                boolean      := false;
begin
   declare
      cursor c_rdn ( i_rdn_pet_id   in  lm_received_destinations.pet_id%type
                   , i_rdn_rdn_order   in  lm_received_destinations.rdn_order%type )
      is
         select *
           from lm_received_destinations rdn
          where rdn.pet_id = i_rdn_pet_id 
            and rdn.rdn_order = i_rdn_rdn_order ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_rdn(i_rdn_pet_id => i_rdn_pet_id, i_rdn_rdn_order => i_rdn_rdn_order);
         fetch c_rdn into o_rt_rdn;
         l_found := c_rdn%found;
         close c_rdn;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_rdn%isopen
      then
         close c_rdn;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end rdn_select_row_uk1;

function rdn_select_row_upd( i_rdn_id   in  lm_received_destinations.id%type
                           , o_rt_rdn   out lm_received_destinations%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rdn_select_row_upd';
   l_found                boolean      := false;

   cursor c_rdn ( i_rdn_id   in  lm_received_destinations.id%type )
   is
           select *
             from lm_received_destinations rdn
            where rdn.id = i_rdn_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_rdn( i_rdn_id => i_rdn_id );
   fetch c_rdn into o_rt_rdn;
   l_found := c_rdn%found;
   close c_rdn;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_rdn%isopen
      then
         close c_rdn;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end rdn_select_row_upd;

function rdn_select_row_upd_uk1( i_rdn_pet_id   in  lm_received_destinations.pet_id%type
                               , i_rdn_rdn_order   in  lm_received_destinations.rdn_order%type
                               , o_rt_rdn  out lm_received_destinations%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rdn_select_row_upd_uk1';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := rdn_select_row_uk1( i_rdn_pet_id   =>  i_rdn_pet_id
                                   , i_rdn_rdn_order   =>  i_rdn_rdn_order
                                   , o_rt_rdn => o_rt_rdn );
      if l_found
      then
         
         l_found := rdn_select_row_upd( i_rdn_id => o_rt_rdn.id
                                      , o_rt_rdn => o_rt_rdn );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end rdn_select_row_upd_uk1;

procedure rdn_lock_row( i_rdn_id   in  lm_received_destinations.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rdn_lock_row';
begin
  declare
     cursor c_rdn ( i_rdn_id   in  lm_received_destinations.id%type )
     is
             select ''
               from lm_received_destinations rdn
              where rdn.id = i_rdn_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_rdn_id is not null
         then
            begin
                
                rdn_lock_row_nowait( i_rdn_id => i_rdn_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_rdn( i_rdn_id => i_rdn_id );
                  close c_rdn;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_rdn%isopen
         then
            close c_rdn;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end rdn_lock_row;

procedure rdn_lock_row_nowait( i_rdn_id   in  lm_received_destinations.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rdn_lock_row_nowait';
begin
   declare
      cursor c_rdn ( i_rdn_id   in  lm_received_destinations.id%type )
      is
              select ''
                from lm_received_destinations rdn
               where rdn.id = i_rdn_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_rdn_id is not null
         then
            
            open c_rdn( i_rdn_id => i_rdn_id );

            close c_rdn;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_rdn%isopen
        then
           close c_rdn;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_rdn_id||'"' );
   end;                                                          
end rdn_lock_row_nowait;

function rdn_perform_update( i_rdn_id   in     lm_received_destinations.id%type
                           , io_rt_rdn  in out lm_received_destinations%rowtype )
return number
;

function rdn_perform_delete( i_rdn_id   in  lm_received_destinations.id%type )
return boolean
;

procedure rdn_insert_row ( io_rt_rdn  in out lm_received_destinations%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rdn_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into lm_received_destinations( id
                                , pet_id
                                , pon_id
                                , rdn_order )
              values ( io_rt_rdn.id
                     , io_rt_rdn.pet_id
                     , io_rt_rdn.pon_id
                     , io_rt_rdn.rdn_order )
           returning id
                   , pet_id
                   , pon_id
                   , rdn_order
                into io_rt_rdn.id
                   , io_rt_rdn.pet_id
                   , io_rt_rdn.pon_id
                   , io_rt_rdn.rdn_order;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_rdn.id||'"'
                                                             ||', PET_ID = "'||io_rt_rdn.pet_id||'"'
                                                             ||', PON_ID = "'||io_rt_rdn.pon_id||'"'
                                                             ||', RDN_ORDER = "'||io_rt_rdn.rdn_order||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end rdn_insert_row;

function rdn_perform_update( i_rdn_id   in     lm_received_destinations.id%type
                           , io_rt_rdn  in out lm_received_destinations%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rdn_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update lm_received_destinations
            set id = io_rt_rdn.id
              , pet_id = io_rt_rdn.pet_id
              , pon_id = io_rt_rdn.pon_id
              , rdn_order = io_rt_rdn.rdn_order
          where id = i_rdn_id
      returning id
              , pet_id
              , pon_id
              , rdn_order
           into io_rt_rdn.id
              , io_rt_rdn.pet_id
              , io_rt_rdn.pon_id
              , io_rt_rdn.rdn_order;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_rdn.id||'"'
                                                             ||', PET_ID = "'||io_rt_rdn.pet_id||'"'
                                                             ||', PON_ID = "'||io_rt_rdn.pon_id||'"'
                                                             ||', RDN_ORDER = "'||io_rt_rdn.rdn_order||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end rdn_perform_update;

function rdn_perform_delete( i_rdn_id   in  lm_received_destinations.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rdn_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from lm_received_destinations
          where id = i_rdn_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_rdn_id||'"' );
   end;                                                          
end rdn_perform_delete;

function rdn_update_row( i_rdn_id   in     lm_received_destinations.id%type
                       , io_rt_rdn  in out lm_received_destinations%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rdn_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         rdn_lock_row( i_rdn_id   =>  i_rdn_id );

         
         l_rowcount := 
            rdn_perform_update( i_rdn_id   =>  i_rdn_id
                              , io_rt_rdn  => io_rt_rdn );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_rdn.id||'"'
                                                          ||', PET_ID = "'||io_rt_rdn.pet_id||'"'
                                                          ||', PON_ID = "'||io_rt_rdn.pon_id||'"'
                                                          ||', RDN_ORDER = "'||io_rt_rdn.rdn_order||'"'                                                           , 1, 4000));
   end;                                                          
end rdn_update_row;

function rdn_delete_row( i_rdn_id   in  lm_received_destinations.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rdn_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         rdn_lock_row( i_rdn_id   =>  i_rdn_id );

         
         l_deleted := rdn_perform_delete( i_rdn_id   =>  i_rdn_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_rdn_id||'"' );
   end;                                                          
end rdn_delete_row;

function rdn_seq1_nextval
return lm_received_destinations.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rdn_seq1_nextval';
   l_rdn_id  lm_received_destinations.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select lm_rdn_seq1.nextval 
           into l_rdn_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_rdn_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end rdn_seq1_nextval;


end lm_rdn_tapi_pck;
/