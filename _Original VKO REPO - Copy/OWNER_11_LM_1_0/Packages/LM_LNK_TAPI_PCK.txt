create or replace PACKAGE lm_lnk_tapi_pck
IS
-- Table API package for table lm_links
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:12)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'LM_LNK_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'LM_LINKS';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION lnk_select_row( i_lnk_ID   IN  lm_links.ID%TYPE
                       , o_rt_lnk   OUT lm_links%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION lnk_select_row_uk1( i_lnk_NDE_ID   IN  lm_links.NDE_ID%TYPE
                           , o_rt_lnk  OUT lm_links%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION lnk_select_row_uk2( i_lnk_ID_CUST   IN  lm_links.ID_CUST%TYPE
                           , o_rt_lnk  OUT lm_links%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION lnk_select_row_upd( i_lnk_ID   IN  lm_links.ID%TYPE
                           , o_rt_lnk   OUT lm_links%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION lnk_select_row_upd_uk1( i_lnk_NDE_ID   IN  lm_links.NDE_ID%TYPE
                               , o_rt_lnk  OUT lm_links%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION lnk_select_row_upd_uk2( i_lnk_ID_CUST   IN  lm_links.ID_CUST%TYPE
                               , o_rt_lnk  OUT lm_links%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE lnk_lock_row( i_lnk_ID   IN  lm_links.ID%TYPE )
;

PROCEDURE lnk_lock_row_nowait( i_lnk_ID   IN  lm_links.ID%TYPE )
;

PROCEDURE lnk_insert_row ( io_rt_lnk  IN OUT lm_links%ROWTYPE )
;

FUNCTION lnk_update_row( i_lnk_ID   IN     lm_links.ID%TYPE
                       , io_rt_lnk  IN OUT lm_links%ROWTYPE )
RETURN NUMBER
;

FUNCTION lnk_delete_row( i_lnk_ID   IN  lm_links.ID%TYPE )
RETURN BOOLEAN
;


END lm_lnk_tapi_pck;
/




package body lm_lnk_tapi_pck
is




function lnk_select_row( i_lnk_id   in  lm_links.id%type
                       , o_rt_lnk   out lm_links%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lnk_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_lnk ( i_lnk_id   in  lm_links.id%type )
      is 
           select *
             from lm_links lnk
            where lnk.id = i_lnk_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_lnk( i_lnk_id => i_lnk_id );
         fetch c_lnk into o_rt_lnk;
         l_found := c_lnk%found;
         close c_lnk;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_lnk%isopen
         then
            close c_lnk;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end lnk_select_row;

function lnk_select_row_uk1( i_lnk_nde_id   in  lm_links.nde_id%type
                           , o_rt_lnk  out lm_links%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lnk_select_row_uk1';
   l_found                boolean      := false;
begin
   declare
      cursor c_lnk ( i_lnk_nde_id   in  lm_links.nde_id%type )
      is
         select *
           from lm_links lnk
          where lnk.nde_id = i_lnk_nde_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_lnk(i_lnk_nde_id => i_lnk_nde_id);
         fetch c_lnk into o_rt_lnk;
         l_found := c_lnk%found;
         close c_lnk;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_lnk%isopen
      then
         close c_lnk;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end lnk_select_row_uk1;

function lnk_select_row_uk2( i_lnk_id_cust   in  lm_links.id_cust%type
                           , o_rt_lnk  out lm_links%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lnk_select_row_uk2';
   l_found                boolean      := false;
begin
   declare
      cursor c_lnk ( i_lnk_id_cust   in  lm_links.id_cust%type )
      is
         select *
           from lm_links lnk
          where lnk.id_cust = i_lnk_id_cust ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_lnk(i_lnk_id_cust => i_lnk_id_cust);
         fetch c_lnk into o_rt_lnk;
         l_found := c_lnk%found;
         close c_lnk;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_lnk%isopen
      then
         close c_lnk;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end lnk_select_row_uk2;

function lnk_select_row_upd( i_lnk_id   in  lm_links.id%type
                           , o_rt_lnk   out lm_links%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lnk_select_row_upd';
   l_found                boolean      := false;

   cursor c_lnk ( i_lnk_id   in  lm_links.id%type )
   is
           select *
             from lm_links lnk
            where lnk.id = i_lnk_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_lnk( i_lnk_id => i_lnk_id );
   fetch c_lnk into o_rt_lnk;
   l_found := c_lnk%found;
   close c_lnk;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_lnk%isopen
      then
         close c_lnk;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end lnk_select_row_upd;

function lnk_select_row_upd_uk1( i_lnk_nde_id   in  lm_links.nde_id%type
                               , o_rt_lnk  out lm_links%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lnk_select_row_upd_uk1';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := lnk_select_row_uk1( i_lnk_nde_id   =>  i_lnk_nde_id
                                   , o_rt_lnk => o_rt_lnk );
      if l_found
      then
         
         l_found := lnk_select_row_upd( i_lnk_id => o_rt_lnk.id
                                      , o_rt_lnk => o_rt_lnk );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end lnk_select_row_upd_uk1;

function lnk_select_row_upd_uk2( i_lnk_id_cust   in  lm_links.id_cust%type
                               , o_rt_lnk  out lm_links%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lnk_select_row_upd_uk2';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := lnk_select_row_uk2( i_lnk_id_cust   =>  i_lnk_id_cust
                                   , o_rt_lnk => o_rt_lnk );
      if l_found
      then
         
         l_found := lnk_select_row_upd( i_lnk_id => o_rt_lnk.id
                                      , o_rt_lnk => o_rt_lnk );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end lnk_select_row_upd_uk2;

procedure lnk_lock_row( i_lnk_id   in  lm_links.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lnk_lock_row';
begin
  declare
     cursor c_lnk ( i_lnk_id   in  lm_links.id%type )
     is
             select ''
               from lm_links lnk
              where lnk.id = i_lnk_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_lnk_id is not null
         then
            begin
                
                lnk_lock_row_nowait( i_lnk_id => i_lnk_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_lnk( i_lnk_id => i_lnk_id );
                  close c_lnk;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_lnk%isopen
         then
            close c_lnk;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end lnk_lock_row;

procedure lnk_lock_row_nowait( i_lnk_id   in  lm_links.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lnk_lock_row_nowait';
begin
   declare
      cursor c_lnk ( i_lnk_id   in  lm_links.id%type )
      is
              select ''
                from lm_links lnk
               where lnk.id = i_lnk_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_lnk_id is not null
         then
            
            open c_lnk( i_lnk_id => i_lnk_id );

            close c_lnk;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_lnk%isopen
        then
           close c_lnk;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_lnk_id||'"' );
   end;                                                          
end lnk_lock_row_nowait;

function lnk_perform_update( i_lnk_id   in     lm_links.id%type
                           , io_rt_lnk  in out lm_links%rowtype )
return number
;

function lnk_perform_delete( i_lnk_id   in  lm_links.id%type )
return boolean
;

procedure lnk_insert_row ( io_rt_lnk  in out lm_links%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lnk_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into lm_links( id
                                , id_cust
                                , nde_id
                                , haa_id_upstream
                                , haa_id_downstream
                                , pty_id
                                , description )
              values ( io_rt_lnk.id
                     , io_rt_lnk.id_cust
                     , io_rt_lnk.nde_id
                     , io_rt_lnk.haa_id_upstream
                     , io_rt_lnk.haa_id_downstream
                     , io_rt_lnk.pty_id
                     , io_rt_lnk.description )
           returning id
                   , id_cust
                   , nde_id
                   , haa_id_upstream
                   , haa_id_downstream
                   , pty_id
                   , description
                into io_rt_lnk.id
                   , io_rt_lnk.id_cust
                   , io_rt_lnk.nde_id
                   , io_rt_lnk.haa_id_upstream
                   , io_rt_lnk.haa_id_downstream
                   , io_rt_lnk.pty_id
                   , io_rt_lnk.description;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_lnk.id||'"'
                                                             ||', ID_CUST = "'||io_rt_lnk.id_cust||'"'
                                                             ||', NDE_ID = "'||io_rt_lnk.nde_id||'"'
                                                             ||', HAA_ID_UPSTREAM = "'||io_rt_lnk.haa_id_upstream||'"'
                                                             ||', HAA_ID_DOWNSTREAM = "'||io_rt_lnk.haa_id_downstream||'"'
                                                             ||', PTY_ID = "'||io_rt_lnk.pty_id||'"'
                                                             ||', DESCRIPTION = "'||io_rt_lnk.description||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end lnk_insert_row;

function lnk_perform_update( i_lnk_id   in     lm_links.id%type
                           , io_rt_lnk  in out lm_links%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lnk_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update lm_links
            set id = io_rt_lnk.id
              , id_cust = io_rt_lnk.id_cust
              , nde_id = io_rt_lnk.nde_id
              , haa_id_upstream = io_rt_lnk.haa_id_upstream
              , haa_id_downstream = io_rt_lnk.haa_id_downstream
              , pty_id = io_rt_lnk.pty_id
              , description = io_rt_lnk.description
          where id = i_lnk_id
      returning id
              , id_cust
              , nde_id
              , haa_id_upstream
              , haa_id_downstream
              , pty_id
              , description
           into io_rt_lnk.id
              , io_rt_lnk.id_cust
              , io_rt_lnk.nde_id
              , io_rt_lnk.haa_id_upstream
              , io_rt_lnk.haa_id_downstream
              , io_rt_lnk.pty_id
              , io_rt_lnk.description;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_lnk.id||'"'
                                                             ||', ID_CUST = "'||io_rt_lnk.id_cust||'"'
                                                             ||', NDE_ID = "'||io_rt_lnk.nde_id||'"'
                                                             ||', HAA_ID_UPSTREAM = "'||io_rt_lnk.haa_id_upstream||'"'
                                                             ||', HAA_ID_DOWNSTREAM = "'||io_rt_lnk.haa_id_downstream||'"'
                                                             ||', PTY_ID = "'||io_rt_lnk.pty_id||'"'
                                                             ||', DESCRIPTION = "'||io_rt_lnk.description||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end lnk_perform_update;

function lnk_perform_delete( i_lnk_id   in  lm_links.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lnk_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from lm_links
          where id = i_lnk_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_lnk_id||'"' );
   end;                                                          
end lnk_perform_delete;

function lnk_update_row( i_lnk_id   in     lm_links.id%type
                       , io_rt_lnk  in out lm_links%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lnk_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         lnk_lock_row( i_lnk_id   =>  i_lnk_id );

         
         l_rowcount := 
            lnk_perform_update( i_lnk_id   =>  i_lnk_id
                              , io_rt_lnk  => io_rt_lnk );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_lnk.id||'"'
                                                          ||', ID_CUST = "'||io_rt_lnk.id_cust||'"'
                                                          ||', NDE_ID = "'||io_rt_lnk.nde_id||'"'
                                                          ||', HAA_ID_UPSTREAM = "'||io_rt_lnk.haa_id_upstream||'"'
                                                          ||', HAA_ID_DOWNSTREAM = "'||io_rt_lnk.haa_id_downstream||'"'
                                                          ||', PTY_ID = "'||io_rt_lnk.pty_id||'"'
                                                          ||', DESCRIPTION = "'||io_rt_lnk.description||'"'                                                           , 1, 4000));
   end;                                                          
end lnk_update_row;

function lnk_delete_row( i_lnk_id   in  lm_links.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lnk_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         lnk_lock_row( i_lnk_id   =>  i_lnk_id );

         
         l_deleted := lnk_perform_delete( i_lnk_id   =>  i_lnk_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_lnk_id||'"' );
   end;                                                          
end lnk_delete_row;


end lm_lnk_tapi_pck;
/