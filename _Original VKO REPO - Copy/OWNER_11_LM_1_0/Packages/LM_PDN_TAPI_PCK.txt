create or replace PACKAGE lm_pdn_tapi_pck
IS
-- Table API package for table lm_package_destinations
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:14)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'LM_PDN_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'LM_PACKAGE_DESTINATIONS';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION pdn_select_row( i_pdn_ID   IN  lm_package_destinations.ID%TYPE
                       , o_rt_pdn   OUT lm_package_destinations%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION pdn_select_row_uk1( i_pdn_PIN_ID   IN  lm_package_destinations.PIN_ID%TYPE
                           , i_pdn_PDN_ORDER   IN  lm_package_destinations.PDN_ORDER%TYPE
                           , o_rt_pdn  OUT lm_package_destinations%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION pdn_select_row_uk2( i_pdn_PIN_ID   IN  lm_package_destinations.PIN_ID%TYPE
                           , i_pdn_PON_ID   IN  lm_package_destinations.PON_ID%TYPE
                           , o_rt_pdn  OUT lm_package_destinations%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION pdn_select_row_upd( i_pdn_ID   IN  lm_package_destinations.ID%TYPE
                           , o_rt_pdn   OUT lm_package_destinations%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION pdn_select_row_upd_uk1( i_pdn_PIN_ID   IN  lm_package_destinations.PIN_ID%TYPE
                               , i_pdn_PDN_ORDER   IN  lm_package_destinations.PDN_ORDER%TYPE
                               , o_rt_pdn  OUT lm_package_destinations%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION pdn_select_row_upd_uk2( i_pdn_PIN_ID   IN  lm_package_destinations.PIN_ID%TYPE
                               , i_pdn_PON_ID   IN  lm_package_destinations.PON_ID%TYPE
                               , o_rt_pdn  OUT lm_package_destinations%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE pdn_lock_row( i_pdn_ID   IN  lm_package_destinations.ID%TYPE )
;

PROCEDURE pdn_lock_row_nowait( i_pdn_ID   IN  lm_package_destinations.ID%TYPE )
;

PROCEDURE pdn_insert_row ( io_rt_pdn  IN OUT lm_package_destinations%ROWTYPE )
;

FUNCTION pdn_update_row( i_pdn_ID   IN     lm_package_destinations.ID%TYPE
                       , io_rt_pdn  IN OUT lm_package_destinations%ROWTYPE )
RETURN NUMBER
;

FUNCTION pdn_delete_row( i_pdn_ID   IN  lm_package_destinations.ID%TYPE )
RETURN BOOLEAN
;

FUNCTION pdn_seq1_nextval
RETURN lm_package_destinations.ID%TYPE
;


END lm_pdn_tapi_pck;
/




package body lm_pdn_tapi_pck
is




function pdn_select_row( i_pdn_id   in  lm_package_destinations.id%type
                       , o_rt_pdn   out lm_package_destinations%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pdn_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_pdn ( i_pdn_id   in  lm_package_destinations.id%type )
      is 
           select *
             from lm_package_destinations pdn
            where pdn.id = i_pdn_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_pdn( i_pdn_id => i_pdn_id );
         fetch c_pdn into o_rt_pdn;
         l_found := c_pdn%found;
         close c_pdn;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_pdn%isopen
         then
            close c_pdn;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pdn_select_row;

function pdn_select_row_uk1( i_pdn_pin_id   in  lm_package_destinations.pin_id%type
                           , i_pdn_pdn_order   in  lm_package_destinations.pdn_order%type
                           , o_rt_pdn  out lm_package_destinations%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pdn_select_row_uk1';
   l_found                boolean      := false;
begin
   declare
      cursor c_pdn ( i_pdn_pin_id   in  lm_package_destinations.pin_id%type
                   , i_pdn_pdn_order   in  lm_package_destinations.pdn_order%type )
      is
         select *
           from lm_package_destinations pdn
          where pdn.pin_id = i_pdn_pin_id 
            and pdn.pdn_order = i_pdn_pdn_order ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_pdn(i_pdn_pin_id => i_pdn_pin_id, i_pdn_pdn_order => i_pdn_pdn_order);
         fetch c_pdn into o_rt_pdn;
         l_found := c_pdn%found;
         close c_pdn;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_pdn%isopen
      then
         close c_pdn;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pdn_select_row_uk1;

function pdn_select_row_uk2( i_pdn_pin_id   in  lm_package_destinations.pin_id%type
                           , i_pdn_pon_id   in  lm_package_destinations.pon_id%type
                           , o_rt_pdn  out lm_package_destinations%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pdn_select_row_uk2';
   l_found                boolean      := false;
begin
   declare
      cursor c_pdn ( i_pdn_pin_id   in  lm_package_destinations.pin_id%type
                   , i_pdn_pon_id   in  lm_package_destinations.pon_id%type )
      is
         select *
           from lm_package_destinations pdn
          where pdn.pin_id = i_pdn_pin_id 
            and pdn.pon_id = i_pdn_pon_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_pdn(i_pdn_pin_id => i_pdn_pin_id, i_pdn_pon_id => i_pdn_pon_id);
         fetch c_pdn into o_rt_pdn;
         l_found := c_pdn%found;
         close c_pdn;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_pdn%isopen
      then
         close c_pdn;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pdn_select_row_uk2;

function pdn_select_row_upd( i_pdn_id   in  lm_package_destinations.id%type
                           , o_rt_pdn   out lm_package_destinations%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pdn_select_row_upd';
   l_found                boolean      := false;

   cursor c_pdn ( i_pdn_id   in  lm_package_destinations.id%type )
   is
           select *
             from lm_package_destinations pdn
            where pdn.id = i_pdn_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_pdn( i_pdn_id => i_pdn_id );
   fetch c_pdn into o_rt_pdn;
   l_found := c_pdn%found;
   close c_pdn;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_pdn%isopen
      then
         close c_pdn;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end pdn_select_row_upd;

function pdn_select_row_upd_uk1( i_pdn_pin_id   in  lm_package_destinations.pin_id%type
                               , i_pdn_pdn_order   in  lm_package_destinations.pdn_order%type
                               , o_rt_pdn  out lm_package_destinations%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pdn_select_row_upd_uk1';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := pdn_select_row_uk1( i_pdn_pin_id   =>  i_pdn_pin_id
                                   , i_pdn_pdn_order   =>  i_pdn_pdn_order
                                   , o_rt_pdn => o_rt_pdn );
      if l_found
      then
         
         l_found := pdn_select_row_upd( i_pdn_id => o_rt_pdn.id
                                      , o_rt_pdn => o_rt_pdn );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end pdn_select_row_upd_uk1;

function pdn_select_row_upd_uk2( i_pdn_pin_id   in  lm_package_destinations.pin_id%type
                               , i_pdn_pon_id   in  lm_package_destinations.pon_id%type
                               , o_rt_pdn  out lm_package_destinations%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pdn_select_row_upd_uk2';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := pdn_select_row_uk2( i_pdn_pin_id   =>  i_pdn_pin_id
                                   , i_pdn_pon_id   =>  i_pdn_pon_id
                                   , o_rt_pdn => o_rt_pdn );
      if l_found
      then
         
         l_found := pdn_select_row_upd( i_pdn_id => o_rt_pdn.id
                                      , o_rt_pdn => o_rt_pdn );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end pdn_select_row_upd_uk2;

procedure pdn_lock_row( i_pdn_id   in  lm_package_destinations.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pdn_lock_row';
begin
  declare
     cursor c_pdn ( i_pdn_id   in  lm_package_destinations.id%type )
     is
             select ''
               from lm_package_destinations pdn
              where pdn.id = i_pdn_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_pdn_id is not null
         then
            begin
                
                pdn_lock_row_nowait( i_pdn_id => i_pdn_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_pdn( i_pdn_id => i_pdn_id );
                  close c_pdn;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_pdn%isopen
         then
            close c_pdn;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end pdn_lock_row;

procedure pdn_lock_row_nowait( i_pdn_id   in  lm_package_destinations.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pdn_lock_row_nowait';
begin
   declare
      cursor c_pdn ( i_pdn_id   in  lm_package_destinations.id%type )
      is
              select ''
                from lm_package_destinations pdn
               where pdn.id = i_pdn_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_pdn_id is not null
         then
            
            open c_pdn( i_pdn_id => i_pdn_id );

            close c_pdn;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_pdn%isopen
        then
           close c_pdn;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_pdn_id||'"' );
   end;                                                          
end pdn_lock_row_nowait;

function pdn_perform_update( i_pdn_id   in     lm_package_destinations.id%type
                           , io_rt_pdn  in out lm_package_destinations%rowtype )
return number
;

function pdn_perform_delete( i_pdn_id   in  lm_package_destinations.id%type )
return boolean
;

procedure pdn_insert_row ( io_rt_pdn  in out lm_package_destinations%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pdn_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into lm_package_destinations( id
                                , pin_id
                                , pon_id
                                , pdn_order )
              values ( io_rt_pdn.id
                     , io_rt_pdn.pin_id
                     , io_rt_pdn.pon_id
                     , io_rt_pdn.pdn_order )
           returning id
                   , pin_id
                   , pon_id
                   , pdn_order
                into io_rt_pdn.id
                   , io_rt_pdn.pin_id
                   , io_rt_pdn.pon_id
                   , io_rt_pdn.pdn_order;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_pdn.id||'"'
                                                             ||', PIN_ID = "'||io_rt_pdn.pin_id||'"'
                                                             ||', PON_ID = "'||io_rt_pdn.pon_id||'"'
                                                             ||', PDN_ORDER = "'||io_rt_pdn.pdn_order||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pdn_insert_row;

function pdn_perform_update( i_pdn_id   in     lm_package_destinations.id%type
                           , io_rt_pdn  in out lm_package_destinations%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pdn_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update lm_package_destinations
            set id = io_rt_pdn.id
              , pin_id = io_rt_pdn.pin_id
              , pon_id = io_rt_pdn.pon_id
              , pdn_order = io_rt_pdn.pdn_order
          where id = i_pdn_id
      returning id
              , pin_id
              , pon_id
              , pdn_order
           into io_rt_pdn.id
              , io_rt_pdn.pin_id
              , io_rt_pdn.pon_id
              , io_rt_pdn.pdn_order;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_pdn.id||'"'
                                                             ||', PIN_ID = "'||io_rt_pdn.pin_id||'"'
                                                             ||', PON_ID = "'||io_rt_pdn.pon_id||'"'
                                                             ||', PDN_ORDER = "'||io_rt_pdn.pdn_order||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pdn_perform_update;

function pdn_perform_delete( i_pdn_id   in  lm_package_destinations.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pdn_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from lm_package_destinations
          where id = i_pdn_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_pdn_id||'"' );
   end;                                                          
end pdn_perform_delete;

function pdn_update_row( i_pdn_id   in     lm_package_destinations.id%type
                       , io_rt_pdn  in out lm_package_destinations%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pdn_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         pdn_lock_row( i_pdn_id   =>  i_pdn_id );

         
         l_rowcount := 
            pdn_perform_update( i_pdn_id   =>  i_pdn_id
                              , io_rt_pdn  => io_rt_pdn );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_pdn.id||'"'
                                                          ||', PIN_ID = "'||io_rt_pdn.pin_id||'"'
                                                          ||', PON_ID = "'||io_rt_pdn.pon_id||'"'
                                                          ||', PDN_ORDER = "'||io_rt_pdn.pdn_order||'"'                                                           , 1, 4000));
   end;                                                          
end pdn_update_row;

function pdn_delete_row( i_pdn_id   in  lm_package_destinations.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pdn_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         pdn_lock_row( i_pdn_id   =>  i_pdn_id );

         
         l_deleted := pdn_perform_delete( i_pdn_id   =>  i_pdn_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_pdn_id||'"' );
   end;                                                          
end pdn_delete_row;

function pdn_seq1_nextval
return lm_package_destinations.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pdn_seq1_nextval';
   l_pdn_id  lm_package_destinations.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select lm_pdn_seq1.nextval 
           into l_pdn_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_pdn_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pdn_seq1_nextval;


end lm_pdn_tapi_pck;
/