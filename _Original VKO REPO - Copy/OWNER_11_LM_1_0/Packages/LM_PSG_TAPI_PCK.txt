create or replace PACKAGE lm_psg_tapi_pck
IS
-- Table API package for table lm_package_screenings
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:14)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'LM_PSG_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'LM_PACKAGE_SCREENINGS';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION psg_select_row( i_psg_ID   IN  lm_package_screenings.ID%TYPE
                       , o_rt_psg   OUT lm_package_screenings%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION psg_select_row_uk1( i_psg_PID   IN  lm_package_screenings.PID%TYPE
                           , i_psg_PROCESS_ID   IN  lm_package_screenings.PROCESS_ID%TYPE
                           , o_rt_psg  OUT lm_package_screenings%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION psg_select_row_upd( i_psg_ID   IN  lm_package_screenings.ID%TYPE
                           , o_rt_psg   OUT lm_package_screenings%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION psg_select_row_upd_uk1( i_psg_PID   IN  lm_package_screenings.PID%TYPE
                               , i_psg_PROCESS_ID   IN  lm_package_screenings.PROCESS_ID%TYPE
                               , o_rt_psg  OUT lm_package_screenings%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE psg_lock_row( i_psg_ID   IN  lm_package_screenings.ID%TYPE )
;

PROCEDURE psg_lock_row_nowait( i_psg_ID   IN  lm_package_screenings.ID%TYPE )
;

PROCEDURE psg_insert_row ( io_rt_psg  IN OUT lm_package_screenings%ROWTYPE )
;

FUNCTION psg_update_row( i_psg_ID   IN     lm_package_screenings.ID%TYPE
                       , io_rt_psg  IN OUT lm_package_screenings%ROWTYPE )
RETURN NUMBER
;

FUNCTION psg_delete_row( i_psg_ID   IN  lm_package_screenings.ID%TYPE )
RETURN BOOLEAN
;

FUNCTION psg_seq1_nextval
RETURN lm_package_screenings.ID%TYPE
;


END lm_psg_tapi_pck;
/


Unwrap It!
Unwrap More Code

package body lm_psg_tapi_pck
is




function psg_select_row( i_psg_id   in  lm_package_screenings.id%type
                       , o_rt_psg   out lm_package_screenings%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.psg_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_psg ( i_psg_id   in  lm_package_screenings.id%type )
      is 
           select *
             from lm_package_screenings psg
            where psg.id = i_psg_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_psg( i_psg_id => i_psg_id );
         fetch c_psg into o_rt_psg;
         l_found := c_psg%found;
         close c_psg;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_psg%isopen
         then
            close c_psg;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end psg_select_row;

function psg_select_row_uk1( i_psg_pid   in  lm_package_screenings.pid%type
                           , i_psg_process_id   in  lm_package_screenings.process_id%type
                           , o_rt_psg  out lm_package_screenings%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.psg_select_row_uk1';
   l_found                boolean      := false;
begin
   declare
      cursor c_psg ( i_psg_pid   in  lm_package_screenings.pid%type
                   , i_psg_process_id   in  lm_package_screenings.process_id%type )
      is
         select *
           from lm_package_screenings psg
          where psg.pid = i_psg_pid 
            and psg.process_id = i_psg_process_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_psg(i_psg_pid => i_psg_pid, i_psg_process_id => i_psg_process_id);
         fetch c_psg into o_rt_psg;
         l_found := c_psg%found;
         close c_psg;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_psg%isopen
      then
         close c_psg;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end psg_select_row_uk1;

function psg_select_row_upd( i_psg_id   in  lm_package_screenings.id%type
                           , o_rt_psg   out lm_package_screenings%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.psg_select_row_upd';
   l_found                boolean      := false;

   cursor c_psg ( i_psg_id   in  lm_package_screenings.id%type )
   is
           select *
             from lm_package_screenings psg
            where psg.id = i_psg_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_psg( i_psg_id => i_psg_id );
   fetch c_psg into o_rt_psg;
   l_found := c_psg%found;
   close c_psg;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_psg%isopen
      then
         close c_psg;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end psg_select_row_upd;

function psg_select_row_upd_uk1( i_psg_pid   in  lm_package_screenings.pid%type
                               , i_psg_process_id   in  lm_package_screenings.process_id%type
                               , o_rt_psg  out lm_package_screenings%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.psg_select_row_upd_uk1';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := psg_select_row_uk1( i_psg_pid   =>  i_psg_pid
                                   , i_psg_process_id   =>  i_psg_process_id
                                   , o_rt_psg => o_rt_psg );
      if l_found
      then
         
         l_found := psg_select_row_upd( i_psg_id => o_rt_psg.id
                                      , o_rt_psg => o_rt_psg );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end psg_select_row_upd_uk1;

procedure psg_lock_row( i_psg_id   in  lm_package_screenings.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.psg_lock_row';
begin
  declare
     cursor c_psg ( i_psg_id   in  lm_package_screenings.id%type )
     is
             select ''
               from lm_package_screenings psg
              where psg.id = i_psg_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_psg_id is not null
         then
            begin
                
                psg_lock_row_nowait( i_psg_id => i_psg_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_psg( i_psg_id => i_psg_id );
                  close c_psg;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_psg%isopen
         then
            close c_psg;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end psg_lock_row;

procedure psg_lock_row_nowait( i_psg_id   in  lm_package_screenings.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.psg_lock_row_nowait';
begin
   declare
      cursor c_psg ( i_psg_id   in  lm_package_screenings.id%type )
      is
              select ''
                from lm_package_screenings psg
               where psg.id = i_psg_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_psg_id is not null
         then
            
            open c_psg( i_psg_id => i_psg_id );

            close c_psg;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_psg%isopen
        then
           close c_psg;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_psg_id||'"' );
   end;                                                          
end psg_lock_row_nowait;

function psg_perform_update( i_psg_id   in     lm_package_screenings.id%type
                           , io_rt_psg  in out lm_package_screenings%rowtype )
return number
;

function psg_perform_delete( i_psg_id   in  lm_package_screenings.id%type )
return boolean
;

procedure psg_insert_row ( io_rt_psg  in out lm_package_screenings%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.psg_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into lm_package_screenings( id
                                , pid
                                , process_id
                                , required_screening_level
                                , process_name )
              values ( io_rt_psg.id
                     , io_rt_psg.pid
                     , io_rt_psg.process_id
                     , io_rt_psg.required_screening_level
                     , io_rt_psg.process_name )
           returning id
                   , pid
                   , process_id
                   , required_screening_level
                   , process_name
                into io_rt_psg.id
                   , io_rt_psg.pid
                   , io_rt_psg.process_id
                   , io_rt_psg.required_screening_level
                   , io_rt_psg.process_name;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_psg.id||'"'
                                                             ||', PID = "'||io_rt_psg.pid||'"'
                                                             ||', PROCESS_ID = "'||io_rt_psg.process_id||'"'
                                                             ||', REQUIRED_SCREENING_LEVEL = "'||io_rt_psg.required_screening_level||'"'
                                                             ||', PROCESS_NAME = "'||io_rt_psg.process_name||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end psg_insert_row;

function psg_perform_update( i_psg_id   in     lm_package_screenings.id%type
                           , io_rt_psg  in out lm_package_screenings%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.psg_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update lm_package_screenings
            set id = io_rt_psg.id
              , pid = io_rt_psg.pid
              , process_id = io_rt_psg.process_id
              , required_screening_level = io_rt_psg.required_screening_level
              , process_name = io_rt_psg.process_name
          where id = i_psg_id
      returning id
              , pid
              , process_id
              , required_screening_level
              , process_name
           into io_rt_psg.id
              , io_rt_psg.pid
              , io_rt_psg.process_id
              , io_rt_psg.required_screening_level
              , io_rt_psg.process_name;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_psg.id||'"'
                                                             ||', PID = "'||io_rt_psg.pid||'"'
                                                             ||', PROCESS_ID = "'||io_rt_psg.process_id||'"'
                                                             ||', REQUIRED_SCREENING_LEVEL = "'||io_rt_psg.required_screening_level||'"'
                                                             ||', PROCESS_NAME = "'||io_rt_psg.process_name||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end psg_perform_update;

function psg_perform_delete( i_psg_id   in  lm_package_screenings.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.psg_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from lm_package_screenings
          where id = i_psg_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_psg_id||'"' );
   end;                                                          
end psg_perform_delete;

function psg_update_row( i_psg_id   in     lm_package_screenings.id%type
                       , io_rt_psg  in out lm_package_screenings%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.psg_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         psg_lock_row( i_psg_id   =>  i_psg_id );

         
         l_rowcount := 
            psg_perform_update( i_psg_id   =>  i_psg_id
                              , io_rt_psg  => io_rt_psg );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_psg.id||'"'
                                                          ||', PID = "'||io_rt_psg.pid||'"'
                                                          ||', PROCESS_ID = "'||io_rt_psg.process_id||'"'
                                                          ||', REQUIRED_SCREENING_LEVEL = "'||io_rt_psg.required_screening_level||'"'
                                                          ||', PROCESS_NAME = "'||io_rt_psg.process_name||'"'                                                           , 1, 4000));
   end;                                                          
end psg_update_row;

function psg_delete_row( i_psg_id   in  lm_package_screenings.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.psg_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         psg_lock_row( i_psg_id   =>  i_psg_id );

         
         l_deleted := psg_perform_delete( i_psg_id   =>  i_psg_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_psg_id||'"' );
   end;                                                          
end psg_delete_row;

function psg_seq1_nextval
return lm_package_screenings.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.psg_seq1_nextval';
   l_psg_id  lm_package_screenings.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select lm_psg_seq1.nextval 
           into l_psg_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_psg_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end psg_seq1_nextval;


end lm_psg_tapi_pck;
/