create or replace PACKAGE lm_sep_tapi_pck
IS
-- Table API package for table lm_segregation_groups
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:17)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'LM_SEP_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'LM_SEGREGATION_GROUPS';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION sep_select_row( i_sep_ID   IN  lm_segregation_groups.ID%TYPE
                       , o_rt_sep   OUT lm_segregation_groups%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION sep_select_row_uk1( i_sep_PROCESS_PLAN_NAME   IN  lm_segregation_groups.PROCESS_PLAN_NAME%TYPE
                           , i_sep_PRODUCT_NAME   IN  lm_segregation_groups.PRODUCT_NAME%TYPE
                           , o_rt_sep  OUT lm_segregation_groups%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION sep_select_row_upd( i_sep_ID   IN  lm_segregation_groups.ID%TYPE
                           , o_rt_sep   OUT lm_segregation_groups%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION sep_select_row_upd_uk1( i_sep_PROCESS_PLAN_NAME   IN  lm_segregation_groups.PROCESS_PLAN_NAME%TYPE
                               , i_sep_PRODUCT_NAME   IN  lm_segregation_groups.PRODUCT_NAME%TYPE
                               , o_rt_sep  OUT lm_segregation_groups%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE sep_lock_row( i_sep_ID   IN  lm_segregation_groups.ID%TYPE )
;

PROCEDURE sep_lock_row_nowait( i_sep_ID   IN  lm_segregation_groups.ID%TYPE )
;

PROCEDURE sep_insert_row ( io_rt_sep  IN OUT lm_segregation_groups%ROWTYPE )
;

FUNCTION sep_update_row( i_sep_ID   IN     lm_segregation_groups.ID%TYPE
                       , io_rt_sep  IN OUT lm_segregation_groups%ROWTYPE )
RETURN NUMBER
;

FUNCTION sep_delete_row( i_sep_ID   IN  lm_segregation_groups.ID%TYPE )
RETURN BOOLEAN
;

FUNCTION sep_seq1_nextval
RETURN lm_segregation_groups.ID%TYPE
;


END lm_sep_tapi_pck;
/



package body lm_sep_tapi_pck
is




function sep_select_row( i_sep_id   in  lm_segregation_groups.id%type
                       , o_rt_sep   out lm_segregation_groups%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sep_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_sep ( i_sep_id   in  lm_segregation_groups.id%type )
      is 
           select *
             from lm_segregation_groups sep
            where sep.id = i_sep_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_sep( i_sep_id => i_sep_id );
         fetch c_sep into o_rt_sep;
         l_found := c_sep%found;
         close c_sep;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_sep%isopen
         then
            close c_sep;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end sep_select_row;

function sep_select_row_uk1( i_sep_process_plan_name   in  lm_segregation_groups.process_plan_name%type
                           , i_sep_product_name   in  lm_segregation_groups.product_name%type
                           , o_rt_sep  out lm_segregation_groups%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sep_select_row_uk1';
   l_found                boolean      := false;
begin
   declare
      cursor c_sep ( i_sep_process_plan_name   in  lm_segregation_groups.process_plan_name%type
                   , i_sep_product_name   in  lm_segregation_groups.product_name%type )
      is
         select *
           from lm_segregation_groups sep
          where sep.process_plan_name = i_sep_process_plan_name 
            and ( sep.product_name = i_sep_product_name or (sep.product_name is null  and i_sep_product_name is null  ));
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_sep(i_sep_process_plan_name => i_sep_process_plan_name, i_sep_product_name => i_sep_product_name);
         fetch c_sep into o_rt_sep;
         l_found := c_sep%found;
         close c_sep;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_sep%isopen
      then
         close c_sep;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end sep_select_row_uk1;

function sep_select_row_upd( i_sep_id   in  lm_segregation_groups.id%type
                           , o_rt_sep   out lm_segregation_groups%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sep_select_row_upd';
   l_found                boolean      := false;

   cursor c_sep ( i_sep_id   in  lm_segregation_groups.id%type )
   is
           select *
             from lm_segregation_groups sep
            where sep.id = i_sep_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_sep( i_sep_id => i_sep_id );
   fetch c_sep into o_rt_sep;
   l_found := c_sep%found;
   close c_sep;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_sep%isopen
      then
         close c_sep;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end sep_select_row_upd;

function sep_select_row_upd_uk1( i_sep_process_plan_name   in  lm_segregation_groups.process_plan_name%type
                               , i_sep_product_name   in  lm_segregation_groups.product_name%type
                               , o_rt_sep  out lm_segregation_groups%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sep_select_row_upd_uk1';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := sep_select_row_uk1( i_sep_process_plan_name   =>  i_sep_process_plan_name
                                   , i_sep_product_name   =>  i_sep_product_name
                                   , o_rt_sep => o_rt_sep );
      if l_found
      then
         
         l_found := sep_select_row_upd( i_sep_id => o_rt_sep.id
                                      , o_rt_sep => o_rt_sep );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end sep_select_row_upd_uk1;

procedure sep_lock_row( i_sep_id   in  lm_segregation_groups.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sep_lock_row';
begin
  declare
     cursor c_sep ( i_sep_id   in  lm_segregation_groups.id%type )
     is
             select ''
               from lm_segregation_groups sep
              where sep.id = i_sep_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_sep_id is not null
         then
            begin
                
                sep_lock_row_nowait( i_sep_id => i_sep_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_sep( i_sep_id => i_sep_id );
                  close c_sep;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_sep%isopen
         then
            close c_sep;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end sep_lock_row;

procedure sep_lock_row_nowait( i_sep_id   in  lm_segregation_groups.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sep_lock_row_nowait';
begin
   declare
      cursor c_sep ( i_sep_id   in  lm_segregation_groups.id%type )
      is
              select ''
                from lm_segregation_groups sep
               where sep.id = i_sep_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_sep_id is not null
         then
            
            open c_sep( i_sep_id => i_sep_id );

            close c_sep;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_sep%isopen
        then
           close c_sep;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_sep_id||'"' );
   end;                                                          
end sep_lock_row_nowait;

function sep_perform_update( i_sep_id   in     lm_segregation_groups.id%type
                           , io_rt_sep  in out lm_segregation_groups%rowtype )
return number
;

function sep_perform_delete( i_sep_id   in  lm_segregation_groups.id%type )
return boolean
;

procedure sep_insert_row ( io_rt_sep  in out lm_segregation_groups%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sep_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into lm_segregation_groups( id
                                , process_plan_name
                                , product_name )
              values ( io_rt_sep.id
                     , io_rt_sep.process_plan_name
                     , io_rt_sep.product_name )
           returning id
                   , process_plan_name
                   , product_name
                into io_rt_sep.id
                   , io_rt_sep.process_plan_name
                   , io_rt_sep.product_name;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_sep.id||'"'
                                                             ||', PROCESS_PLAN_NAME = "'||io_rt_sep.process_plan_name||'"'
                                                             ||', PRODUCT_NAME = "'||io_rt_sep.product_name||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end sep_insert_row;

function sep_perform_update( i_sep_id   in     lm_segregation_groups.id%type
                           , io_rt_sep  in out lm_segregation_groups%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sep_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update lm_segregation_groups
            set id = io_rt_sep.id
              , process_plan_name = io_rt_sep.process_plan_name
              , product_name = io_rt_sep.product_name
          where id = i_sep_id
      returning id
              , process_plan_name
              , product_name
           into io_rt_sep.id
              , io_rt_sep.process_plan_name
              , io_rt_sep.product_name;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_sep.id||'"'
                                                             ||', PROCESS_PLAN_NAME = "'||io_rt_sep.process_plan_name||'"'
                                                             ||', PRODUCT_NAME = "'||io_rt_sep.product_name||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end sep_perform_update;

function sep_perform_delete( i_sep_id   in  lm_segregation_groups.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sep_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from lm_segregation_groups
          where id = i_sep_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_sep_id||'"' );
   end;                                                          
end sep_perform_delete;

function sep_update_row( i_sep_id   in     lm_segregation_groups.id%type
                       , io_rt_sep  in out lm_segregation_groups%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sep_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         sep_lock_row( i_sep_id   =>  i_sep_id );

         
         l_rowcount := 
            sep_perform_update( i_sep_id   =>  i_sep_id
                              , io_rt_sep  => io_rt_sep );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_sep.id||'"'
                                                          ||', PROCESS_PLAN_NAME = "'||io_rt_sep.process_plan_name||'"'
                                                          ||', PRODUCT_NAME = "'||io_rt_sep.product_name||'"'                                                           , 1, 4000));
   end;                                                          
end sep_update_row;

function sep_delete_row( i_sep_id   in  lm_segregation_groups.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sep_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         sep_lock_row( i_sep_id   =>  i_sep_id );

         
         l_deleted := sep_perform_delete( i_sep_id   =>  i_sep_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_sep_id||'"' );
   end;                                                          
end sep_delete_row;

function sep_seq1_nextval
return lm_segregation_groups.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.sep_seq1_nextval';
   l_sep_id  lm_segregation_groups.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select lm_sep_seq1.nextval 
           into l_sep_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_sep_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end sep_seq1_nextval;


end lm_sep_tapi_pck;
/