create or replace PACKAGE lm_hae_tapi_pck
IS
-- Table API package for table lm_haa_access_attributes
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:11)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'LM_HAE_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'LM_HAA_ACCESS_ATTRIBUTES';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION hae_select_row( i_hae_ID   IN  lm_haa_access_attributes.ID%TYPE
                       , o_rt_hae   OUT lm_haa_access_attributes%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION hae_select_row_uk1( i_hae_HAS_ID   IN  lm_haa_access_attributes.HAS_ID%TYPE
                           , i_hae_MINIMUM_TRAVEL_TIME   IN  lm_haa_access_attributes.MINIMUM_TRAVEL_TIME%TYPE
                           , o_rt_hae  OUT lm_haa_access_attributes%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION hae_select_row_upd( i_hae_ID   IN  lm_haa_access_attributes.ID%TYPE
                           , o_rt_hae   OUT lm_haa_access_attributes%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION hae_select_row_upd_uk1( i_hae_HAS_ID   IN  lm_haa_access_attributes.HAS_ID%TYPE
                               , i_hae_MINIMUM_TRAVEL_TIME   IN  lm_haa_access_attributes.MINIMUM_TRAVEL_TIME%TYPE
                               , o_rt_hae  OUT lm_haa_access_attributes%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE hae_lock_row( i_hae_ID   IN  lm_haa_access_attributes.ID%TYPE )
;

PROCEDURE hae_lock_row_nowait( i_hae_ID   IN  lm_haa_access_attributes.ID%TYPE )
;

PROCEDURE hae_insert_row ( io_rt_hae  IN OUT lm_haa_access_attributes%ROWTYPE )
;

FUNCTION hae_update_row( i_hae_ID   IN     lm_haa_access_attributes.ID%TYPE
                       , io_rt_hae  IN OUT lm_haa_access_attributes%ROWTYPE )
RETURN NUMBER
;

FUNCTION hae_delete_row( i_hae_ID   IN  lm_haa_access_attributes.ID%TYPE )
RETURN BOOLEAN
;

FUNCTION hae_seq1_nextval
RETURN lm_haa_access_attributes.ID%TYPE
;


END lm_hae_tapi_pck;
/




package body lm_hae_tapi_pck
is




function hae_select_row( i_hae_id   in  lm_haa_access_attributes.id%type
                       , o_rt_hae   out lm_haa_access_attributes%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.hae_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_hae ( i_hae_id   in  lm_haa_access_attributes.id%type )
      is 
           select *
             from lm_haa_access_attributes hae
            where hae.id = i_hae_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_hae( i_hae_id => i_hae_id );
         fetch c_hae into o_rt_hae;
         l_found := c_hae%found;
         close c_hae;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_hae%isopen
         then
            close c_hae;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end hae_select_row;

function hae_select_row_uk1( i_hae_has_id   in  lm_haa_access_attributes.has_id%type
                           , i_hae_minimum_travel_time   in  lm_haa_access_attributes.minimum_travel_time%type
                           , o_rt_hae  out lm_haa_access_attributes%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.hae_select_row_uk1';
   l_found                boolean      := false;
begin
   declare
      cursor c_hae ( i_hae_has_id   in  lm_haa_access_attributes.has_id%type
                   , i_hae_minimum_travel_time   in  lm_haa_access_attributes.minimum_travel_time%type )
      is
         select *
           from lm_haa_access_attributes hae
          where hae.has_id = i_hae_has_id 
            and ( hae.minimum_travel_time = i_hae_minimum_travel_time or (hae.minimum_travel_time is null  and i_hae_minimum_travel_time is null  ));
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_hae(i_hae_has_id => i_hae_has_id, i_hae_minimum_travel_time => i_hae_minimum_travel_time);
         fetch c_hae into o_rt_hae;
         l_found := c_hae%found;
         close c_hae;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_hae%isopen
      then
         close c_hae;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end hae_select_row_uk1;

function hae_select_row_upd( i_hae_id   in  lm_haa_access_attributes.id%type
                           , o_rt_hae   out lm_haa_access_attributes%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.hae_select_row_upd';
   l_found                boolean      := false;

   cursor c_hae ( i_hae_id   in  lm_haa_access_attributes.id%type )
   is
           select *
             from lm_haa_access_attributes hae
            where hae.id = i_hae_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_hae( i_hae_id => i_hae_id );
   fetch c_hae into o_rt_hae;
   l_found := c_hae%found;
   close c_hae;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_hae%isopen
      then
         close c_hae;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end hae_select_row_upd;

function hae_select_row_upd_uk1( i_hae_has_id   in  lm_haa_access_attributes.has_id%type
                               , i_hae_minimum_travel_time   in  lm_haa_access_attributes.minimum_travel_time%type
                               , o_rt_hae  out lm_haa_access_attributes%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.hae_select_row_upd_uk1';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := hae_select_row_uk1( i_hae_has_id   =>  i_hae_has_id
                                   , i_hae_minimum_travel_time   =>  i_hae_minimum_travel_time
                                   , o_rt_hae => o_rt_hae );
      if l_found
      then
         
         l_found := hae_select_row_upd( i_hae_id => o_rt_hae.id
                                      , o_rt_hae => o_rt_hae );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end hae_select_row_upd_uk1;

procedure hae_lock_row( i_hae_id   in  lm_haa_access_attributes.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.hae_lock_row';
begin
  declare
     cursor c_hae ( i_hae_id   in  lm_haa_access_attributes.id%type )
     is
             select ''
               from lm_haa_access_attributes hae
              where hae.id = i_hae_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_hae_id is not null
         then
            begin
                
                hae_lock_row_nowait( i_hae_id => i_hae_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_hae( i_hae_id => i_hae_id );
                  close c_hae;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_hae%isopen
         then
            close c_hae;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end hae_lock_row;

procedure hae_lock_row_nowait( i_hae_id   in  lm_haa_access_attributes.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.hae_lock_row_nowait';
begin
   declare
      cursor c_hae ( i_hae_id   in  lm_haa_access_attributes.id%type )
      is
              select ''
                from lm_haa_access_attributes hae
               where hae.id = i_hae_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_hae_id is not null
         then
            
            open c_hae( i_hae_id => i_hae_id );

            close c_hae;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_hae%isopen
        then
           close c_hae;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_hae_id||'"' );
   end;                                                          
end hae_lock_row_nowait;

function hae_perform_update( i_hae_id   in     lm_haa_access_attributes.id%type
                           , io_rt_hae  in out lm_haa_access_attributes%rowtype )
return number
;

function hae_perform_delete( i_hae_id   in  lm_haa_access_attributes.id%type )
return boolean
;

procedure hae_insert_row ( io_rt_hae  in out lm_haa_access_attributes%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.hae_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into lm_haa_access_attributes( id
                                , has_id
                                , event_time
                                , bags_amount_arriving
                                , minimum_travel_time
                                , maximum_travel_time )
              values ( io_rt_hae.id
                     , io_rt_hae.has_id
                     , io_rt_hae.event_time
                     , io_rt_hae.bags_amount_arriving
                     , io_rt_hae.minimum_travel_time
                     , io_rt_hae.maximum_travel_time )
           returning id
                   , has_id
                   , event_time
                   , bags_amount_arriving
                   , minimum_travel_time
                   , maximum_travel_time
                into io_rt_hae.id
                   , io_rt_hae.has_id
                   , io_rt_hae.event_time
                   , io_rt_hae.bags_amount_arriving
                   , io_rt_hae.minimum_travel_time
                   , io_rt_hae.maximum_travel_time;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_hae.id||'"'
                                                             ||', HAS_ID = "'||io_rt_hae.has_id||'"'
                                                             ||', EVENT_TIME = "'||io_rt_hae.event_time||'"'
                                                             ||', BAGS_AMOUNT_ARRIVING = "'||io_rt_hae.bags_amount_arriving||'"'
                                                             ||', MINIMUM_TRAVEL_TIME = "'||io_rt_hae.minimum_travel_time||'"'
                                                             ||', MAXIMUM_TRAVEL_TIME = "'||io_rt_hae.maximum_travel_time||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end hae_insert_row;

function hae_perform_update( i_hae_id   in     lm_haa_access_attributes.id%type
                           , io_rt_hae  in out lm_haa_access_attributes%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.hae_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update lm_haa_access_attributes
            set id = io_rt_hae.id
              , has_id = io_rt_hae.has_id
              , event_time = io_rt_hae.event_time
              , bags_amount_arriving = io_rt_hae.bags_amount_arriving
              , minimum_travel_time = io_rt_hae.minimum_travel_time
              , maximum_travel_time = io_rt_hae.maximum_travel_time
          where id = i_hae_id
      returning id
              , has_id
              , event_time
              , bags_amount_arriving
              , minimum_travel_time
              , maximum_travel_time
           into io_rt_hae.id
              , io_rt_hae.has_id
              , io_rt_hae.event_time
              , io_rt_hae.bags_amount_arriving
              , io_rt_hae.minimum_travel_time
              , io_rt_hae.maximum_travel_time;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_hae.id||'"'
                                                             ||', HAS_ID = "'||io_rt_hae.has_id||'"'
                                                             ||', EVENT_TIME = "'||io_rt_hae.event_time||'"'
                                                             ||', BAGS_AMOUNT_ARRIVING = "'||io_rt_hae.bags_amount_arriving||'"'
                                                             ||', MINIMUM_TRAVEL_TIME = "'||io_rt_hae.minimum_travel_time||'"'
                                                             ||', MAXIMUM_TRAVEL_TIME = "'||io_rt_hae.maximum_travel_time||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end hae_perform_update;

function hae_perform_delete( i_hae_id   in  lm_haa_access_attributes.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.hae_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from lm_haa_access_attributes
          where id = i_hae_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_hae_id||'"' );
   end;                                                          
end hae_perform_delete;

function hae_update_row( i_hae_id   in     lm_haa_access_attributes.id%type
                       , io_rt_hae  in out lm_haa_access_attributes%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.hae_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         hae_lock_row( i_hae_id   =>  i_hae_id );

         
         l_rowcount := 
            hae_perform_update( i_hae_id   =>  i_hae_id
                              , io_rt_hae  => io_rt_hae );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_hae.id||'"'
                                                          ||', HAS_ID = "'||io_rt_hae.has_id||'"'
                                                          ||', EVENT_TIME = "'||io_rt_hae.event_time||'"'
                                                          ||', BAGS_AMOUNT_ARRIVING = "'||io_rt_hae.bags_amount_arriving||'"'
                                                          ||', MINIMUM_TRAVEL_TIME = "'||io_rt_hae.minimum_travel_time||'"'
                                                          ||', MAXIMUM_TRAVEL_TIME = "'||io_rt_hae.maximum_travel_time||'"'                                                           , 1, 4000));
   end;                                                          
end hae_update_row;

function hae_delete_row( i_hae_id   in  lm_haa_access_attributes.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.hae_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         hae_lock_row( i_hae_id   =>  i_hae_id );

         
         l_deleted := hae_perform_delete( i_hae_id   =>  i_hae_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_hae_id||'"' );
   end;                                                          
end hae_delete_row;

function hae_seq1_nextval
return lm_haa_access_attributes.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.hae_seq1_nextval';
   l_hae_id  lm_haa_access_attributes.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select lm_hae_seq1.nextval 
           into l_hae_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_hae_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end hae_seq1_nextval;


end lm_hae_tapi_pck;
/