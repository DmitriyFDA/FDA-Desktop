create or replace PACKAGE lm_rtt_tapi_pck
IS
-- Table API package for table lm_route_sets
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:16)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'LM_RTT_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'LM_ROUTE_SETS';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION rtt_select_row( i_rtt_ID   IN  lm_route_sets.ID%TYPE
                       , o_rt_rtt   OUT lm_route_sets%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION rtt_select_row_uk1( i_rtt_NAME   IN  lm_route_sets.NAME%TYPE
                           , o_rt_rtt  OUT lm_route_sets%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION rtt_select_row_uk2( i_rtt_DESCRIPTION   IN  lm_route_sets.DESCRIPTION%TYPE
                           , o_rt_rtt  OUT lm_route_sets%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION rtt_select_row_upd( i_rtt_ID   IN  lm_route_sets.ID%TYPE
                           , o_rt_rtt   OUT lm_route_sets%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION rtt_select_row_upd_uk1( i_rtt_NAME   IN  lm_route_sets.NAME%TYPE
                               , o_rt_rtt  OUT lm_route_sets%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION rtt_select_row_upd_uk2( i_rtt_DESCRIPTION   IN  lm_route_sets.DESCRIPTION%TYPE
                               , o_rt_rtt  OUT lm_route_sets%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE rtt_lock_row( i_rtt_ID   IN  lm_route_sets.ID%TYPE )
;

PROCEDURE rtt_lock_row_nowait( i_rtt_ID   IN  lm_route_sets.ID%TYPE )
;

PROCEDURE rtt_insert_row ( io_rt_rtt  IN OUT lm_route_sets%ROWTYPE )
;

FUNCTION rtt_update_row( i_rtt_ID   IN     lm_route_sets.ID%TYPE
                       , io_rt_rtt  IN OUT lm_route_sets%ROWTYPE )
RETURN NUMBER
;

FUNCTION rtt_delete_row( i_rtt_ID   IN  lm_route_sets.ID%TYPE )
RETURN BOOLEAN
;


END lm_rtt_tapi_pck;
/



package body lm_rtt_tapi_pck
is




function rtt_select_row( i_rtt_id   in  lm_route_sets.id%type
                       , o_rt_rtt   out lm_route_sets%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rtt_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_rtt ( i_rtt_id   in  lm_route_sets.id%type )
      is 
           select *
             from lm_route_sets rtt
            where rtt.id = i_rtt_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_rtt( i_rtt_id => i_rtt_id );
         fetch c_rtt into o_rt_rtt;
         l_found := c_rtt%found;
         close c_rtt;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_rtt%isopen
         then
            close c_rtt;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end rtt_select_row;

function rtt_select_row_uk1( i_rtt_name   in  lm_route_sets.name%type
                           , o_rt_rtt  out lm_route_sets%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rtt_select_row_uk1';
   l_found                boolean      := false;
begin
   declare
      cursor c_rtt ( i_rtt_name   in  lm_route_sets.name%type )
      is
         select *
           from lm_route_sets rtt
          where rtt.name = i_rtt_name ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_rtt(i_rtt_name => i_rtt_name);
         fetch c_rtt into o_rt_rtt;
         l_found := c_rtt%found;
         close c_rtt;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_rtt%isopen
      then
         close c_rtt;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end rtt_select_row_uk1;

function rtt_select_row_uk2( i_rtt_description   in  lm_route_sets.description%type
                           , o_rt_rtt  out lm_route_sets%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rtt_select_row_uk2';
   l_found                boolean      := false;
begin
   declare
      cursor c_rtt ( i_rtt_description   in  lm_route_sets.description%type )
      is
         select *
           from lm_route_sets rtt
          where rtt.description = i_rtt_description ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_rtt(i_rtt_description => i_rtt_description);
         fetch c_rtt into o_rt_rtt;
         l_found := c_rtt%found;
         close c_rtt;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_rtt%isopen
      then
         close c_rtt;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end rtt_select_row_uk2;

function rtt_select_row_upd( i_rtt_id   in  lm_route_sets.id%type
                           , o_rt_rtt   out lm_route_sets%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rtt_select_row_upd';
   l_found                boolean      := false;

   cursor c_rtt ( i_rtt_id   in  lm_route_sets.id%type )
   is
           select *
             from lm_route_sets rtt
            where rtt.id = i_rtt_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_rtt( i_rtt_id => i_rtt_id );
   fetch c_rtt into o_rt_rtt;
   l_found := c_rtt%found;
   close c_rtt;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_rtt%isopen
      then
         close c_rtt;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end rtt_select_row_upd;

function rtt_select_row_upd_uk1( i_rtt_name   in  lm_route_sets.name%type
                               , o_rt_rtt  out lm_route_sets%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rtt_select_row_upd_uk1';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := rtt_select_row_uk1( i_rtt_name   =>  i_rtt_name
                                   , o_rt_rtt => o_rt_rtt );
      if l_found
      then
         
         l_found := rtt_select_row_upd( i_rtt_id => o_rt_rtt.id
                                      , o_rt_rtt => o_rt_rtt );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end rtt_select_row_upd_uk1;

function rtt_select_row_upd_uk2( i_rtt_description   in  lm_route_sets.description%type
                               , o_rt_rtt  out lm_route_sets%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rtt_select_row_upd_uk2';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := rtt_select_row_uk2( i_rtt_description   =>  i_rtt_description
                                   , o_rt_rtt => o_rt_rtt );
      if l_found
      then
         
         l_found := rtt_select_row_upd( i_rtt_id => o_rt_rtt.id
                                      , o_rt_rtt => o_rt_rtt );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end rtt_select_row_upd_uk2;

procedure rtt_lock_row( i_rtt_id   in  lm_route_sets.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rtt_lock_row';
begin
  declare
     cursor c_rtt ( i_rtt_id   in  lm_route_sets.id%type )
     is
             select ''
               from lm_route_sets rtt
              where rtt.id = i_rtt_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_rtt_id is not null
         then
            begin
                
                rtt_lock_row_nowait( i_rtt_id => i_rtt_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_rtt( i_rtt_id => i_rtt_id );
                  close c_rtt;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_rtt%isopen
         then
            close c_rtt;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end rtt_lock_row;

procedure rtt_lock_row_nowait( i_rtt_id   in  lm_route_sets.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rtt_lock_row_nowait';
begin
   declare
      cursor c_rtt ( i_rtt_id   in  lm_route_sets.id%type )
      is
              select ''
                from lm_route_sets rtt
               where rtt.id = i_rtt_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_rtt_id is not null
         then
            
            open c_rtt( i_rtt_id => i_rtt_id );

            close c_rtt;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_rtt%isopen
        then
           close c_rtt;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_rtt_id||'"' );
   end;                                                          
end rtt_lock_row_nowait;

function rtt_perform_update( i_rtt_id   in     lm_route_sets.id%type
                           , io_rt_rtt  in out lm_route_sets%rowtype )
return number
;

function rtt_perform_delete( i_rtt_id   in  lm_route_sets.id%type )
return boolean
;

procedure rtt_insert_row ( io_rt_rtt  in out lm_route_sets%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rtt_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into lm_route_sets( id
                                , name
                                , description
                                , ind_factory_default_set
                                , active )
              values ( io_rt_rtt.id
                     , io_rt_rtt.name
                     , io_rt_rtt.description
                     , io_rt_rtt.ind_factory_default_set
                     , io_rt_rtt.active )
           returning id
                   , name
                   , description
                   , ind_factory_default_set
                   , active
                into io_rt_rtt.id
                   , io_rt_rtt.name
                   , io_rt_rtt.description
                   , io_rt_rtt.ind_factory_default_set
                   , io_rt_rtt.active;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_rtt.id||'"'
                                                             ||', NAME = "'||io_rt_rtt.name||'"'
                                                             ||', DESCRIPTION = "'||io_rt_rtt.description||'"'
                                                             ||', IND_FACTORY_DEFAULT_SET = "'||io_rt_rtt.ind_factory_default_set||'"'
                                                             ||', ACTIVE = "'||io_rt_rtt.active||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end rtt_insert_row;

function rtt_perform_update( i_rtt_id   in     lm_route_sets.id%type
                           , io_rt_rtt  in out lm_route_sets%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rtt_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update lm_route_sets
            set id = io_rt_rtt.id
              , name = io_rt_rtt.name
              , description = io_rt_rtt.description
              , ind_factory_default_set = io_rt_rtt.ind_factory_default_set
              , active = io_rt_rtt.active
          where id = i_rtt_id
      returning id
              , name
              , description
              , ind_factory_default_set
              , active
           into io_rt_rtt.id
              , io_rt_rtt.name
              , io_rt_rtt.description
              , io_rt_rtt.ind_factory_default_set
              , io_rt_rtt.active;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_rtt.id||'"'
                                                             ||', NAME = "'||io_rt_rtt.name||'"'
                                                             ||', DESCRIPTION = "'||io_rt_rtt.description||'"'
                                                             ||', IND_FACTORY_DEFAULT_SET = "'||io_rt_rtt.ind_factory_default_set||'"'
                                                             ||', ACTIVE = "'||io_rt_rtt.active||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end rtt_perform_update;

function rtt_perform_delete( i_rtt_id   in  lm_route_sets.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rtt_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from lm_route_sets
          where id = i_rtt_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_rtt_id||'"' );
   end;                                                          
end rtt_perform_delete;

function rtt_update_row( i_rtt_id   in     lm_route_sets.id%type
                       , io_rt_rtt  in out lm_route_sets%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rtt_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         rtt_lock_row( i_rtt_id   =>  i_rtt_id );

         
         l_rowcount := 
            rtt_perform_update( i_rtt_id   =>  i_rtt_id
                              , io_rt_rtt  => io_rt_rtt );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_rtt.id||'"'
                                                          ||', NAME = "'||io_rt_rtt.name||'"'
                                                          ||', DESCRIPTION = "'||io_rt_rtt.description||'"'
                                                          ||', IND_FACTORY_DEFAULT_SET = "'||io_rt_rtt.ind_factory_default_set||'"'
                                                          ||', ACTIVE = "'||io_rt_rtt.active||'"'                                                           , 1, 4000));
   end;                                                          
end rtt_update_row;

function rtt_delete_row( i_rtt_id   in  lm_route_sets.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rtt_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         rtt_lock_row( i_rtt_id   =>  i_rtt_id );

         
         l_deleted := rtt_perform_delete( i_rtt_id   =>  i_rtt_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_rtt_id||'"' );
   end;                                                          
end rtt_delete_row;


end lm_rtt_tapi_pck;
/