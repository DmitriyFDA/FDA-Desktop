create or replace PACKAGE LM_INITSYNC IS

TYPE G_IT_AREA_ID_CUST IS TABLE OF LM_SYSTEM_COMPONENTS.ID_CUST%TYPE INDEX BY BINARY_INTEGER;

G_CON_PACKAGE CONSTANT LM_CONSTANT.ST_PROC_NAME := 'LM_INITSYNC';

/* ISC_001: handle the InitSync message. */
PROCEDURE HDL_INITSYNC;
/* ISC_002: Extract message attributes from InitSync message. */
PROCEDURE GET_MESSAGE_ATTRIBUTES
 (I_IT_REG IN Lm_Interface.G_IT_IMA
 ,O_EVENT_TIME OUT LM_PACKAGE_EVENTS.EVENT_TIME%TYPE
 ,O_IT_AREA_ID_CUST OUT Lm_Initsync.G_IT_AREA_ID_CUST
 ,O_PROCESS_ID OUT LM_PARTIES.ID_CUST%TYPE
 ,O_INSTANCE_ID OUT LM_PARTIES.INSTANCE_ID%TYPE
 );
/* ISC_003:Temporary solution send simulate receiving a InitSync message. */
PROCEDURE SEND_INITSYNC
 (I_AREA_ID_CUST IN LM_AREAS_V.ID_CUST%TYPE
 );
END LM_INITSYNC;
/




package body lm_initsync is











procedure hdl_initsync
is






















   l_con_proc_name constant lm_constant.st_proc_name := g_con_package || '.HDL_INITSYNC';

   
   cursor c_area_zones
    (b_area_id_cust in lm_areas_v.id_cust%type
    )
   is
   select ara.id_cust area_id_cust
        , zne.id_cust zone_id_cust
        , zne.zone_id zone_id
   from   lm_areas_v ara
        , lm_zones_v zne
   where  ara.area_id = zne.area_id(+)
   and    ara.id_cust = b_area_id_cust;
   
   
   cursor c_nodes_divert
    (b_zone_id in lm_zones_v.zone_id%type
    )
   is
   select nde.identifier_within_sct
   from   lm_nodes nde
   where  nde.nde_type               = lm_constant.g_con_nde_type_divert
   and    nde.ind_autonomous_routing = lm_constant.g_con_yesno_no
   and    nde.sct_id                 = b_zone_id;
   
   
   cursor c_nodes_haa_entry
    (b_zone_id in lm_zones_v.zone_id%type
    )
   is
   select nde.identifier_within_sct
   from   lm_nodes          nde
   ,      lm_links          lnk
   ,      lm_handling_areas haa
   where  nde.sct_id            = b_zone_id
   and    lnk.nde_id            = nde.id
   and    lnk.haa_id_downstream = haa.id
   and    haa.ind_current       = lm_constant.g_con_yesno_yes;

   l_area_found      boolean := false;
   l_nodes_to_update boolean := false;
   l_event_time      lm_package_events.event_time%type;
   l_area_id_cust    lm_areas_v.id_cust%type;
   l_it_area_id_cust lm_initsync.g_it_area_id_cust;
   l_process_id      lm_parties.id_cust%type;
   l_instance_id     lm_parties.instance_id%type;
   l_zone_id_cust    lm_zones_v.id_cust%type;
   l_it_destinations lm_common.g_it_pon_id_cust;


begin
   viu_module.enter_module( i_module      => l_con_proc_name );
   
   lm_initsync.get_message_attributes( i_it_reg           => lm_interface.g_it_message_content
                                     , o_event_time       => l_event_time
                                     , o_it_area_id_cust  => l_it_area_id_cust
                                     , o_process_id       => l_process_id
                                     , o_instance_id      => l_instance_id
                                     );
   if l_it_area_id_cust.count > 0
   then
      
      for idx_areas in l_it_area_id_cust.first .. l_it_area_id_cust.last
      loop
         l_area_found      := false;
         l_nodes_to_update := false;

         l_area_id_cust  := l_it_area_id_cust( idx_areas );

         
         for rec_area_zones in c_area_zones( b_area_id_cust      => l_area_id_cust )
         loop
            
            l_zone_id_cust  := rec_area_zones.zone_id_cust;

            for rec_nodes_divert in c_nodes_divert( b_zone_id      => rec_area_zones.zone_id )
            loop
               
               lm_flow_administration.send_routing_table( i_area_id_cust                    => rec_area_zones.area_id_cust
                                                        , i_zone_id_cust                    => rec_area_zones.zone_id_cust
                                                        , i_node_identifier_within_sct      => rec_nodes_divert.identifier_within_sct
                                                        , i_routing_table_type              => null   
                                                        , i_it_destinations                 => l_it_destinations   
                                                        );
                                                           
               
               l_nodes_to_update  := true;
            end loop nodes_divert;

            for rec_nodes_haa_entry in c_nodes_haa_entry( b_zone_id => rec_area_zones.zone_id)
            loop
               
               
           
               lm_flow_administration.send_handling_area_table( i_area_id_cust                    => rec_area_zones.area_id_cust
                                                              , i_zone_id_cust                    => rec_area_zones.zone_id_cust
                                                              , i_node_identifier_within_sct      => rec_nodes_haa_entry.identifier_within_sct
                                                              );
                                                           
            end loop nodes_divert;

            
            l_area_found    := true;
         end loop area_zones;

         if not l_area_found
         then
            


            viu_info.operator_info( i_ifo_nr                 => viu_constant.c_ifo_areaverificationerror
                                  , i_calling_procedure      => l_con_proc_name
                                  , i_severity               => viu_info.c_severity_error
                                  , i_additional_data        => 'AreaID:"' || l_area_id_cust || '"'
                                  );
         end if;

         if not l_nodes_to_update
         then
            


            viu_info.operator_info( i_ifo_nr                 => viu_constant.c_ifo_nodeverificationerror
                                  , i_calling_procedure      => l_con_proc_name
                                  , i_severity               => viu_info.c_severity_notification
                                  , i_additional_data        => 'AreaID:"' || l_area_id_cust || '", ZoneID:"' || l_zone_id_cust || '"'
                                  );
         end if;
      end loop; 
   else
      


      viu_info.operator_info( i_ifo_nr                 => viu_constant.c_ifo_initsyncprocesserror
                            , i_calling_procedure      => l_con_proc_name
                            , i_severity               => viu_info.c_severity_warning
                            , i_additional_data        => 'ProcessID = "' || l_process_id || '"'
                                                       || case when l_instance_id is not null
                                                             then ' InstanceID = "' || l_instance_id || '"'
                                                             else null
                                                          end
                            );
   end if;

   viu_module.leave_module( i_module      => l_con_proc_name );
exception
   when others
   then
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );
      viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
end hdl_initsync;

procedure get_message_attributes
 (i_it_reg in lm_interface.g_it_ima
 ,o_event_time out lm_package_events.event_time%type
 ,o_it_area_id_cust out lm_initsync.g_it_area_id_cust
 ,o_process_id out lm_parties.id_cust%type
 ,o_instance_id out lm_parties.instance_id%type
 )
is


























   l_con_proc_name    constant lm_constant.st_proc_name := g_con_package || '.GET_MESSAGE_ATTRIBUTES';

   i_idx_area_id_cust binary_integer := 1;
   l_ims_id           lm_ifc_messages.id%type;


begin
   viu_module.enter_module( i_module      => l_con_proc_name );

   
   for idx_msg in i_it_reg.first .. i_it_reg.last
   loop
      case i_it_reg( idx_msg ).attribute
         when 'EventTime'
         then
            o_event_time  := lm_common.varchar_to_timestamp( i_timestamp      => i_it_reg( idx_msg ).value );
         when 'AreaID'
         then
            o_it_area_id_cust( i_idx_area_id_cust )  := i_it_reg( idx_msg ).value;
            i_idx_area_id_cust                       := i_idx_area_id_cust + 1;
         when 'Header/Source/ProcessID'
         then
            o_process_id  := i_it_reg( idx_msg ).value;
         when 'Header/Source/InstanceID'
         then
            o_instance_id  := i_it_reg( idx_msg ).value;
         when lm_constant.g_con_ifc_ims_id_attribute
         then
            



            l_ims_id  := i_it_reg( idx_msg ).value;
         else
            
            if i_it_reg( idx_msg ).attribute not in ( 'Header/MessageTime'
                                                    , 'Header/Target/ProcessID'
                                                    , 'Header/Target/InstanceID'
                                                    , 'Header/OperatorID')
            then
               
               viu_info.operator_info( i_ifo_nr                 => viu_constant.c_ifo_messageattributeerror
                                     , i_calling_procedure      => l_con_proc_name
                                     , i_severity               => viu_info.c_severity_warning
                                     , i_additional_data        =>    'Message: InitSync; Attribute: '''
                                                                   || i_it_reg( idx_msg ).attribute
                                                                   || '''; Value: '''
                                                                   || i_it_reg( idx_msg ).value
                                                                   || ''''
                                     );
            end if;
      end case;
   end loop;

   viu_module.leave_module( i_module      => l_con_proc_name );
exception
   when others
   then
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );
      viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
end get_message_attributes;

procedure send_initsync
(i_area_id_cust in lm_areas_v.id_cust%type
 )
is



















   l_con_proc_name constant lm_constant.st_proc_name := g_con_package || '.SEND_INITSYNC';

   
   cursor c_area_zone_nodes
   (b_area_id_cust in lm_areas_v.id_cust%type
    )
   is
   select distinct ( ara.id_cust ) area_id_cust
   from            lm_areas_v ara
                 , lm_zones_v zne
                 , lm_nodes nde
   where           ara.area_id = zne.area_id
   and             zne.zone_id = nde.sct_id
   and             nde_type = lm_constant.g_con_nde_type_divert
   and             ara.id_cust = nvl(b_area_id_cust,ara.id_cust);

   l_message        xmltype;
   l_area_id_cust   lm_areas_v.id_cust%type;

begin
   viu_module.enter_module( i_module      => l_con_proc_name );

   if i_area_id_cust != '%'
   then
     l_area_id_cust := i_area_id_cust;
   end if;
   
   for rec_area_zone_nodes in c_area_zone_nodes( b_area_id_cust => l_area_id_cust )
   loop
      
      select xmlroot
             ( xmlelement
               ( "ELInitSync"
               , xmlelement
                   ("Header"
                   , xmlelement
                      ( "Source"
                      , xmlelement ("ProcessID" ,lm_common.get_parameter_value( lm_constant.g_con_pve_lm_source_process_id))
                      )
                   )
               , xmlelement( "EventTime", lm_common.timestamp_to_varchar( lm_common.default_timestamp))
               , xmlelement( "AreaID", rec_area_zone_nodes.area_id_cust)
               )
             , version lm_constant.g_con_msg_xmlroot
             )
      into   l_message
      from   dual;

      
      lm_interface.process_message( i_message => l_message.getclobval() );
      
   end loop;

   viu_module.leave_module( i_module      => l_con_proc_name );
exception
   when others
   then
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );
      viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
end send_initsync;

end lm_initsync;
/