create or replace PACKAGE VIU_ACTION IS

/* Interface to v_current_action */
FUNCTION CURRENT_ACTION
 RETURN viu_actions.id%TYPE;
PRAGMA RESTRICT_REFERENCES (CURRENT_ACTION, WNDS, WNPS);
/* Set the value for v_current_action and v_current_loglevel */
PROCEDURE SET_CURRENT_ACTION
 (I_CURRENT_ACTION IN VIU_ACTIONS.ID%TYPE
 );
/* Interface to v_current_loglevel */
FUNCTION CURRENT_LOGLEVEL
 RETURN viu_actions.max_severity_logged%TYPE;
PRAGMA RESTRICT_REFERENCES (CURRENT_LOGLEVEL, WNDS, WNPS);
/* Set the value for v_current_loglevel */
PROCEDURE SET_CURRENT_LOGLEVEL
 (I_CURRENT_LOGLEVEL IN VIU_ACTIONS.MAX_SEVERITY_LOGGED%TYPE
 );
/* Get a description from VIU_ACTIONS using Primary Key */
FUNCTION DESCRIPTION
 (I_ID IN VIU_ACTIONS.ID%TYPE
 )
 RETURN viu_actions.description%TYPE;
END VIU_ACTION;
/




package body viu_action is

v_current_action viu_actions.id%type;
v_current_loglevel viu_actions.max_severity_logged%type;



function current_action
 return viu_actions.id%type
 is
begin
return v_current_action;
end current_action;

procedure set_current_action
 (i_current_action in viu_actions.id%type
 )
 is


c_proc constant varchar2(100) := 'Viu_Action.Set_Current_Action';
begin
declare
  cursor c_loglevel is
    select atn.max_severity_logged
      from viu_actions atn
      where id = i_current_action;
begin
  v_current_action := i_current_action;

  
  
  
  if i_current_action is null then
    v_current_loglevel := null;
  else
    open c_loglevel;
    fetch c_loglevel into v_current_loglevel;
    if c_loglevel%notfound then
      viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_invalidaction
                          ,i_calling_procedure => c_proc
                          ,i_severity          => viu_info.c_severity_error
                          ,i_info_arguments    => i_current_action);
    end if;
    close c_loglevel;
  end if;

exception
  when others then
    if c_loglevel%isopen then close c_loglevel; end if;
end;
end set_current_action;

function current_loglevel
 return viu_actions.max_severity_logged%type
 is
begin
return v_current_loglevel;
end current_loglevel;

procedure set_current_loglevel
 (i_current_loglevel in viu_actions.max_severity_logged%type
 )
 is
begin
v_current_loglevel := i_current_loglevel;
end set_current_loglevel;

function description
 (i_id in viu_actions.id%type
 )
 return viu_actions.description%type
 is


c_proc constant varchar2(100) := 'Viu_Action.description';


v_description viu_actions.description%type;
begin
declare
  cursor c_action is
    select description
      from viu_actions
      where id = i_id;
begin
  if i_id is not null then
    open c_action;
    fetch c_action into v_description;
    if c_action%notfound then
      viu_info.operator_info(i_ifo_nr            => viu_constant.c_ifo_nodescriptionavailable,
                             i_calling_procedure => c_proc,
                             i_severity          => viu_info.c_severity_warning,
                             i_info_arguments    => 'viu_actions',
                             i_additional_data   => 'i_id = ['||i_id||']');
    end if;
    close c_action;
  end if;

  return v_description;

exception
  when others then
    if c_action%isopen then close c_action; end if;
    raise;
end;
end description;

end viu_action;
/