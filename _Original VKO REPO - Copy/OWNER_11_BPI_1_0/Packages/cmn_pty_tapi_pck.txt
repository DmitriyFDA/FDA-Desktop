create or replace PACKAGE cmn_pty_tapi_pck
IS
-- Table API package for table cmn_parties
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  09:28:39)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'CMN_PTY_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'CMN_PARTIES';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION pty_select_row( i_pty_ID   IN  cmn_parties.ID%TYPE
                       , o_rt_pty   OUT cmn_parties%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION pty_select_row_uk( i_pty_ID_CUST   IN  cmn_parties.ID_CUST%TYPE
                          , i_pty_INSTANCE_ID_CUST   IN  cmn_parties.INSTANCE_ID_CUST%TYPE
                          , o_rt_pty  OUT cmn_parties%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION pty_select_row_upd( i_pty_ID   IN  cmn_parties.ID%TYPE
                           , o_rt_pty   OUT cmn_parties%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION pty_select_row_upd_uk( i_pty_ID_CUST   IN  cmn_parties.ID_CUST%TYPE
                              , i_pty_INSTANCE_ID_CUST   IN  cmn_parties.INSTANCE_ID_CUST%TYPE
                              , o_rt_pty  OUT cmn_parties%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE pty_lock_row( i_pty_ID   IN  cmn_parties.ID%TYPE )
;

PROCEDURE pty_lock_row_nowait( i_pty_ID   IN  cmn_parties.ID%TYPE )
;


END cmn_pty_tapi_pck;
/




package body cmn_pty_tapi_pck
is




function pty_select_row( i_pty_id   in  cmn_parties.id%type
                       , o_rt_pty   out cmn_parties%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pty_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_pty ( i_pty_id   in  cmn_parties.id%type )
      is 
           select *
             from cmn_parties pty
            where pty.id = i_pty_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_pty( i_pty_id => i_pty_id );
         fetch c_pty into o_rt_pty;
         l_found := c_pty%found;
         close c_pty;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_pty%isopen
         then
            close c_pty;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pty_select_row;

function pty_select_row_uk( i_pty_id_cust   in  cmn_parties.id_cust%type
                          , i_pty_instance_id_cust   in  cmn_parties.instance_id_cust%type
                          , o_rt_pty  out cmn_parties%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pty_select_row_uk';
   l_found                boolean      := false;
begin
   declare
      cursor c_pty ( i_pty_id_cust   in  cmn_parties.id_cust%type
                   , i_pty_instance_id_cust   in  cmn_parties.instance_id_cust%type )
      is
         select *
           from cmn_parties pty
          where pty.id_cust = i_pty_id_cust 
            and ( pty.instance_id_cust = i_pty_instance_id_cust or (pty.instance_id_cust is null  and i_pty_instance_id_cust is null  ));
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_pty(i_pty_id_cust => i_pty_id_cust, i_pty_instance_id_cust => i_pty_instance_id_cust);
         fetch c_pty into o_rt_pty;
         l_found := c_pty%found;
         close c_pty;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_pty%isopen
      then
         close c_pty;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pty_select_row_uk;

function pty_select_row_upd( i_pty_id   in  cmn_parties.id%type
                           , o_rt_pty   out cmn_parties%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pty_select_row_upd';
   l_found                boolean      := false;

   cursor c_pty ( i_pty_id   in  cmn_parties.id%type )
   is
           select *
             from cmn_parties pty
            where pty.id = i_pty_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_pty( i_pty_id => i_pty_id );
   fetch c_pty into o_rt_pty;
   l_found := c_pty%found;
   close c_pty;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_pty%isopen
      then
         close c_pty;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end pty_select_row_upd;

function pty_select_row_upd_uk( i_pty_id_cust   in  cmn_parties.id_cust%type
                              , i_pty_instance_id_cust   in  cmn_parties.instance_id_cust%type
                              , o_rt_pty  out cmn_parties%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pty_select_row_upd_uk';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := pty_select_row_uk( i_pty_id_cust   =>  i_pty_id_cust
                                  , i_pty_instance_id_cust   =>  i_pty_instance_id_cust
                                  , o_rt_pty => o_rt_pty );
      if l_found
      then
         
         l_found := pty_select_row_upd( i_pty_id => o_rt_pty.id
                                      , o_rt_pty => o_rt_pty );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end pty_select_row_upd_uk;

procedure pty_lock_row( i_pty_id   in  cmn_parties.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pty_lock_row';
begin
  declare
     cursor c_pty ( i_pty_id   in  cmn_parties.id%type )
     is
             select ''
               from cmn_parties pty
              where pty.id = i_pty_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_pty_id is not null
         then
            begin
                
                pty_lock_row_nowait( i_pty_id => i_pty_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_pty( i_pty_id => i_pty_id );
                  close c_pty;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_pty%isopen
         then
            close c_pty;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end pty_lock_row;

procedure pty_lock_row_nowait( i_pty_id   in  cmn_parties.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pty_lock_row_nowait';
begin
   declare
      cursor c_pty ( i_pty_id   in  cmn_parties.id%type )
      is
              select ''
                from cmn_parties pty
               where pty.id = i_pty_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_pty_id is not null
         then
            
            open c_pty( i_pty_id => i_pty_id );

            close c_pty;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_pty%isopen
        then
           close c_pty;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_pty_id||'"' );
   end;                                                          
end pty_lock_row_nowait;


end cmn_pty_tapi_pck;
/