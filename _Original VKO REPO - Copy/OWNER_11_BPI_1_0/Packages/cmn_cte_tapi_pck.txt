create or replace PACKAGE cmn_cte_tapi_pck
IS
-- Table API package for table cmn_cleanup_tables
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  09:28:39)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'CMN_CTE_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'CMN_CLEANUP_TABLES';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION cte_select_row( i_cte_ID   IN  cmn_cleanup_tables.ID%TYPE
                       , o_rt_cte   OUT cmn_cleanup_tables%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION cte_select_row_uk_1( i_cte_TABLE_NAME   IN  cmn_cleanup_tables.TABLE_NAME%TYPE
                            , o_rt_cte  OUT cmn_cleanup_tables%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION cte_select_row_uk_2( i_cte_TABLE_ALIAS   IN  cmn_cleanup_tables.TABLE_ALIAS%TYPE
                            , o_rt_cte  OUT cmn_cleanup_tables%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION cte_select_row_upd( i_cte_ID   IN  cmn_cleanup_tables.ID%TYPE
                           , o_rt_cte   OUT cmn_cleanup_tables%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION cte_select_row_upd_uk_1( i_cte_TABLE_NAME   IN  cmn_cleanup_tables.TABLE_NAME%TYPE
                                , o_rt_cte  OUT cmn_cleanup_tables%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION cte_select_row_upd_uk_2( i_cte_TABLE_ALIAS   IN  cmn_cleanup_tables.TABLE_ALIAS%TYPE
                                , o_rt_cte  OUT cmn_cleanup_tables%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE cte_lock_row( i_cte_ID   IN  cmn_cleanup_tables.ID%TYPE )
;

PROCEDURE cte_lock_row_nowait( i_cte_ID   IN  cmn_cleanup_tables.ID%TYPE )
;


END cmn_cte_tapi_pck;
/


Unwrap It!
Unwrap More Code

package body cmn_cte_tapi_pck
is




function cte_select_row( i_cte_id   in  cmn_cleanup_tables.id%type
                       , o_rt_cte   out cmn_cleanup_tables%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.cte_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_cte ( i_cte_id   in  cmn_cleanup_tables.id%type )
      is 
           select *
             from cmn_cleanup_tables cte
            where cte.id = i_cte_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_cte( i_cte_id => i_cte_id );
         fetch c_cte into o_rt_cte;
         l_found := c_cte%found;
         close c_cte;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_cte%isopen
         then
            close c_cte;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end cte_select_row;

function cte_select_row_uk_1( i_cte_table_name   in  cmn_cleanup_tables.table_name%type
                            , o_rt_cte  out cmn_cleanup_tables%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.cte_select_row_uk_1';
   l_found                boolean      := false;
begin
   declare
      cursor c_cte ( i_cte_table_name   in  cmn_cleanup_tables.table_name%type )
      is
         select *
           from cmn_cleanup_tables cte
          where cte.table_name = i_cte_table_name ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_cte(i_cte_table_name => i_cte_table_name);
         fetch c_cte into o_rt_cte;
         l_found := c_cte%found;
         close c_cte;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_cte%isopen
      then
         close c_cte;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end cte_select_row_uk_1;

function cte_select_row_uk_2( i_cte_table_alias   in  cmn_cleanup_tables.table_alias%type
                            , o_rt_cte  out cmn_cleanup_tables%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.cte_select_row_uk_2';
   l_found                boolean      := false;
begin
   declare
      cursor c_cte ( i_cte_table_alias   in  cmn_cleanup_tables.table_alias%type )
      is
         select *
           from cmn_cleanup_tables cte
          where cte.table_alias = i_cte_table_alias ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_cte(i_cte_table_alias => i_cte_table_alias);
         fetch c_cte into o_rt_cte;
         l_found := c_cte%found;
         close c_cte;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_cte%isopen
      then
         close c_cte;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end cte_select_row_uk_2;

function cte_select_row_upd( i_cte_id   in  cmn_cleanup_tables.id%type
                           , o_rt_cte   out cmn_cleanup_tables%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.cte_select_row_upd';
   l_found                boolean      := false;

   cursor c_cte ( i_cte_id   in  cmn_cleanup_tables.id%type )
   is
           select *
             from cmn_cleanup_tables cte
            where cte.id = i_cte_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_cte( i_cte_id => i_cte_id );
   fetch c_cte into o_rt_cte;
   l_found := c_cte%found;
   close c_cte;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_cte%isopen
      then
         close c_cte;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end cte_select_row_upd;

function cte_select_row_upd_uk_1( i_cte_table_name   in  cmn_cleanup_tables.table_name%type
                                , o_rt_cte  out cmn_cleanup_tables%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.cte_select_row_upd_uk_1';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := cte_select_row_uk_1( i_cte_table_name   =>  i_cte_table_name
                                    , o_rt_cte => o_rt_cte );
      if l_found
      then
         
         l_found := cte_select_row_upd( i_cte_id => o_rt_cte.id
                                      , o_rt_cte => o_rt_cte );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end cte_select_row_upd_uk_1;

function cte_select_row_upd_uk_2( i_cte_table_alias   in  cmn_cleanup_tables.table_alias%type
                                , o_rt_cte  out cmn_cleanup_tables%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.cte_select_row_upd_uk_2';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := cte_select_row_uk_2( i_cte_table_alias   =>  i_cte_table_alias
                                    , o_rt_cte => o_rt_cte );
      if l_found
      then
         
         l_found := cte_select_row_upd( i_cte_id => o_rt_cte.id
                                      , o_rt_cte => o_rt_cte );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end cte_select_row_upd_uk_2;

procedure cte_lock_row( i_cte_id   in  cmn_cleanup_tables.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.cte_lock_row';
begin
  declare
     cursor c_cte ( i_cte_id   in  cmn_cleanup_tables.id%type )
     is
             select ''
               from cmn_cleanup_tables cte
              where cte.id = i_cte_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_cte_id is not null
         then
            begin
                
                cte_lock_row_nowait( i_cte_id => i_cte_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_cte( i_cte_id => i_cte_id );
                  close c_cte;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_cte%isopen
         then
            close c_cte;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end cte_lock_row;

procedure cte_lock_row_nowait( i_cte_id   in  cmn_cleanup_tables.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.cte_lock_row_nowait';
begin
   declare
      cursor c_cte ( i_cte_id   in  cmn_cleanup_tables.id%type )
      is
              select ''
                from cmn_cleanup_tables cte
               where cte.id = i_cte_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_cte_id is not null
         then
            
            open c_cte( i_cte_id => i_cte_id );

            close c_cte;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_cte%isopen
        then
           close c_cte;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_cte_id||'"' );
   end;                                                          
end cte_lock_row_nowait;


end cmn_cte_tapi_pck;
/