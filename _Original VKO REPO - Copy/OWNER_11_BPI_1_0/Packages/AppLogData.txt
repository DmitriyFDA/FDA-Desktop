create or replace package AppLogData is
G_CON_PACKAGE CONSTANT VARCHAR2(30) := 'AppLogData';

PROCEDURE VIU_to_APPLICATIONLOGDATA;
FUNCTION app_description(p_APPLICATIONELEMENTID DIM_APPLICATIONS.APPLICATIONELEMENTID%TYPE
, p_PROCESS_ID DIM_APPLICATIONS.PROCESS_ID%TYPE) return DIM_APPLICATIONS.DESCRIPTION%TYPE;

end AppLogData;
/




package body applogdata is

g_commit_rate number := 1000;

function get_id_message return number is
l_sequence number := 0;
begin
  
  
  
  l_sequence := xml2table_idevent_sequence.nextval;
  return l_sequence;
end;


function get_obfuscation_factor return number is
l_factor number := 999;
begin
  








  return l_factor;
end;


function app_description(p_applicationelementid dim_applications.applicationelementid%type
, p_process_id dim_applications.process_id%type) return dim_applications.description%type as
appdesc dim_applications.description%type;
begin
  begin
    select description into appdesc from dim_applications where applicationelementid = p_applicationelementid and rownum = 1;
  exception when others then
    appdesc := null;
  end;
  if appdesc is null then
    begin
      select description into appdesc from dim_applications where process_id = p_process_id and rownum = 1;
    exception when others then
      appdesc := null;
    end;
  end if;
  appdesc := appdesc||chr(10)||trim(p_applicationelementid)||' '||trim(p_process_id);
  return appdesc;
end;


procedure viu_to_applicationlogdata is
l_con_proc_name constant varchar2(61) := g_con_package||'.VIU_to_APPLICATIONLOGDATA';
l_xml clob;
l_last_update timestamp;
l_msg varchar2(2000) := '';
l_count number := 0;
l_id_message number := 0;
l_obfuscation_factor number := get_obfuscation_factor;
l_host varchar2(250) := '';
l_processid varchar2(250) := '';
l_applicationelementid varchar2(250) := '';
l_severity varchar2(250) := '';
cursor c_viu (c_ts timestamp) is
  select id, datetime_created, sessionid, severity, ifo_application, calling_procedure, message_text, additional_data, ifo_nr
  from viu_v_info_logs
  where severity < 3 and datetime_created > c_ts;
cursor c_xms (c_ts timestamp) is
  select idevent, insertts, rootnode, returncode, errormessage
  from xml_message_store
  where (returncode not in (0, -2)) and (insertts > c_ts);
begin
  viu_module.enter_module( i_module          => l_con_proc_name
                         , i_debug_info      => to_char(sys_extract_utc(systimestamp))
                         );
  begin
    select nvl(trim(sys_context('USERENV','SERVER_HOST')), sys_context('USERENV','IP_ADDRESS')) into l_host from dual;
    l_host := nvl(l_host, 'BPIServer');  

    
    
    begin
      select id_cust into l_applicationelementid from acl_application_elements where aet_type='ATN';
    exception when others then
      l_applicationelementid := null;
    end;
    if l_applicationelementid is not null then
      begin
        select process_id into l_processid from dim_applications where applicationelementid = l_applicationelementid;
      exception when others then
        l_processid := null;
      end;
    end if;
    if l_applicationelementid is null then
      begin
        select applicationelementid into l_applicationelementid from dim_applications where componenttypeid like 'BPI_ATN%';
      exception when others then
        l_applicationelementid := null;
      end;
    end if;
    if l_processid is null then
      begin
        select process_id into l_processid from dim_applications where componenttypeid like 'BPI_ATN%';
      exception when others then
        l_processid := null;
      end;
    end if;
    
    if l_processid is null then
      l_processid := 'BPI';  
    end if;


    select max(eventts) into l_last_update
    from wc_applicationlogdata
    where host = l_host and processid = l_processid;

    if l_last_update is null then
      l_last_update := sys_extract_utc(systimestamp) - 1;
    end if;
    
    
    

    
    
    
    viu_info.operator_info( i_ifo_nr       => viu_constant.c_ifo_bpidebuginfo
                         , i_calling_procedure      => l_con_proc_name
                         , i_severity               => viu_info.c_severity_notification
                         , i_info_arguments         => to_char(sys_extract_utc(systimestamp),'YYYYMMDD HH24:MI:SS.FF')||','||l_host||','||l_processid
                         , i_additional_data        => l_con_proc_name||' STARTED. Processing VIU_V_INFO_LOGS later than '||to_char(l_last_update,'YYYYMMDD HH24:MI:SS.FF')
                         );

    for c_rec in c_viu(l_last_update) loop
      l_count := l_count + 1;
      l_id_message := get_id_message();

      l_msg := trim(c_rec.message_text);
      if l_msg = 'BPI Debug info, see additional info.' then
        l_msg := c_rec.additional_data;
      end if;
      l_msg := substr(replace(l_msg, '''', ''''''),1,4000);

      
      
      if c_rec.severity = 1 then
        l_severity := 'ERROR';
        if instr(upper(l_msg), 'FATAL ') > 0 then
          l_severity := 'FATAL';
        end if;
      else
        l_severity := 'WARNING';
      end if;

      insert into wc_applicationlogdata
                ( idevent,  key, eventts, insertts
                , host, processid, logmessageid, logmessageseverity
                , applicationelementid, subcomponent, sessionid, threadid
                , eventtime, l_logmessage )
      values    ( l_id_message, l_id_message * l_obfuscation_factor, c_rec.datetime_created, sys_extract_utc(systimestamp)
                , l_host, l_processid, to_char(c_rec.ifo_nr), l_severity
                , l_applicationelementid, c_rec.ifo_application, to_char(c_rec.sessionid), null
                , to_char(c_rec.datetime_created, 'YYYY-MM-DD"T"HH24:MI:SS"Z"'), l_msg );
      
      if mod(l_count, g_commit_rate) = 0 then commit; end if;
    end loop;
    commit;

    viu_info.operator_info( i_ifo_nr       => viu_constant.c_ifo_bpidebuginfo
                         , i_calling_procedure      => l_con_proc_name
                         , i_severity               => viu_info.c_severity_notification
                         , i_info_arguments         => null
                         , i_additional_data        => l_con_proc_name||' finished processing VIU_V_INFO_LOGS: '||to_char(l_count)||' errors/warnings.'
                         );



    
    
    
    viu_info.operator_info( i_ifo_nr       => viu_constant.c_ifo_bpidebuginfo
                         , i_calling_procedure      => l_con_proc_name
                         , i_severity               => viu_info.c_severity_notification
                         , i_info_arguments         => to_char(sys_extract_utc(systimestamp),'YYYYMMDD HH24:MI:SS.FF')||','||l_host||','||l_processid
                         , i_additional_data        => l_con_proc_name||' STARTED. Processing XML_MESSAGE_STORE later than '||to_char(l_last_update,'YYYYMMDD HH24:MI:SS.FF')
                         );

    l_count := 0;
    for c_rec in c_xms(l_last_update) loop
      l_count := l_count + 1;
      l_id_message := get_id_message();

      l_msg := trim(substr(c_rec.returncode||';'||c_rec.errormessage,1,4000));
      l_severity := 'ERROR';

      insert into wc_applicationlogdata
                ( idevent,  key, eventts, insertts
                , host, processid, logmessageid, logmessageseverity
                , applicationelementid, subcomponent, sessionid, threadid
                , eventtime, l_logmessage )
      values    ( l_id_message, l_id_message * l_obfuscation_factor, c_rec.insertts, sys_extract_utc(systimestamp)
                , l_host, l_processid, viu_constant.c_ifo_xml2taberror, l_severity
                , l_applicationelementid, 'XML2TABLE', null, null
                , to_char(c_rec.insertts, 'YYYY-MM-DD"T"HH24:MI:SS"Z"'), l_msg );
      
      
      if mod(l_count, g_commit_rate) = 0 then commit; end if;
    end loop;
    commit;

    viu_info.operator_info( i_ifo_nr       => viu_constant.c_ifo_bpidebuginfo
                         , i_calling_procedure      => l_con_proc_name
                         , i_severity               => viu_info.c_severity_notification
                         , i_info_arguments         => null
                         , i_additional_data        => l_con_proc_name||' finished processing XML_MESSAGE_STORE: '||to_char(l_count)||' errors/warnings.'
                         );


  exception when others then
    viu_info.operator_info( i_ifo_nr       => viu_constant.c_ifo_bpidebuginfo
                         , i_calling_procedure      => l_con_proc_name
                         , i_severity               => viu_info.c_severity_error
                         , i_info_arguments         => null
                         , i_additional_data        => l_con_proc_name||', '||sqlerrm
                         );
  end;
  viu_module.leave_module( i_module      => l_con_proc_name );

end;

end applogdata;
/