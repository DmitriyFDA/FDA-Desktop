create or replace PACKAGE acl_aps_tapi_pck
IS
-- Table API package for table acl_application_processes
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  09:28:38)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'ACL_APS_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'ACL_APPLICATION_PROCESSES';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION aps_select_row( i_aps_ID   IN  acl_application_processes.ID%TYPE
                       , o_rt_aps   OUT acl_application_processes%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION aps_select_row_upd( i_aps_ID   IN  acl_application_processes.ID%TYPE
                           , o_rt_aps   OUT acl_application_processes%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE aps_lock_row( i_aps_ID   IN  acl_application_processes.ID%TYPE )
;

PROCEDURE aps_lock_row_nowait( i_aps_ID   IN  acl_application_processes.ID%TYPE )
;

PROCEDURE aps_insert_row ( io_rt_aps  IN OUT acl_application_processes%ROWTYPE )
;

FUNCTION aps_update_row( i_aps_ID   IN     acl_application_processes.ID%TYPE
                       , io_rt_aps  IN OUT acl_application_processes%ROWTYPE )
RETURN NUMBER
;

FUNCTION aps_delete_row( i_aps_ID   IN  acl_application_processes.ID%TYPE )
RETURN BOOLEAN
;

FUNCTION aps_seq1_nextval
RETURN acl_application_processes.ID%TYPE
;


END acl_aps_tapi_pck;
/




package body acl_aps_tapi_pck
is




function aps_select_row( i_aps_id   in  acl_application_processes.id%type
                       , o_rt_aps   out acl_application_processes%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.aps_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_aps ( i_aps_id   in  acl_application_processes.id%type )
      is 
           select *
             from acl_application_processes aps
            where aps.id = i_aps_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_aps( i_aps_id => i_aps_id );
         fetch c_aps into o_rt_aps;
         l_found := c_aps%found;
         close c_aps;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_aps%isopen
         then
            close c_aps;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end aps_select_row;

function aps_select_row_upd( i_aps_id   in  acl_application_processes.id%type
                           , o_rt_aps   out acl_application_processes%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.aps_select_row_upd';
   l_found                boolean      := false;

   cursor c_aps ( i_aps_id   in  acl_application_processes.id%type )
   is
           select *
             from acl_application_processes aps
            where aps.id = i_aps_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_aps( i_aps_id => i_aps_id );
   fetch c_aps into o_rt_aps;
   l_found := c_aps%found;
   close c_aps;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_aps%isopen
      then
         close c_aps;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end aps_select_row_upd;

procedure aps_lock_row( i_aps_id   in  acl_application_processes.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.aps_lock_row';
begin
  declare
     cursor c_aps ( i_aps_id   in  acl_application_processes.id%type )
     is
             select ''
               from acl_application_processes aps
              where aps.id = i_aps_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_aps_id is not null
         then
            begin
                
                aps_lock_row_nowait( i_aps_id => i_aps_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_aps( i_aps_id => i_aps_id );
                  close c_aps;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_aps%isopen
         then
            close c_aps;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end aps_lock_row;

procedure aps_lock_row_nowait( i_aps_id   in  acl_application_processes.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.aps_lock_row_nowait';
begin
   declare
      cursor c_aps ( i_aps_id   in  acl_application_processes.id%type )
      is
              select ''
                from acl_application_processes aps
               where aps.id = i_aps_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_aps_id is not null
         then
            
            open c_aps( i_aps_id => i_aps_id );

            close c_aps;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_aps%isopen
        then
           close c_aps;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_aps_id||'"' );
   end;                                                          
end aps_lock_row_nowait;

function aps_perform_update( i_aps_id   in     acl_application_processes.id%type
                           , io_rt_aps  in out acl_application_processes%rowtype )
return number
;

function aps_perform_delete( i_aps_id   in  acl_application_processes.id%type )
return boolean
;

procedure aps_insert_row ( io_rt_aps  in out acl_application_processes%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.aps_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into acl_application_processes( id
                                , date_created
                                , date_modified
                                , ind_registered
                                , ind_controlled
                                , status
                                , act_id_aborted_by
                                , act_id_initiated_by
                                , act_id_stopped_by
                                , aet_id
                                , job_name
                                , executed_first_time
                                , stopped
                                , aborted
                                , ind_finished_normally
                                , ind_dead
                                , ind_job_terminated
                                , reason_end
                                , timestamp_latest_execution
                                , number_of_executions
                                , latest_execution_time
                                , total_execution_time
                                , ind_execution_time_too_long
                                , ind_timeslot_exceeded
                                , application_info
                                , module
                                , program
                                , db_instance
                                , audsid
                                , unique_session_id
                                , sid
                                , serial#
                                , database_user
                                , session_userid
                                , ind_dba
                                , os_user
                                , proxy_user
                                , proxy_userid
                                , external_name
                                , authentication_type
                                , authentication_method
                                , terminal
                                , host
                                , ip_address
                                , job_block )
              values ( io_rt_aps.id
                     , io_rt_aps.date_created
                     , io_rt_aps.date_modified
                     , io_rt_aps.ind_registered
                     , io_rt_aps.ind_controlled
                     , io_rt_aps.status
                     , io_rt_aps.act_id_aborted_by
                     , io_rt_aps.act_id_initiated_by
                     , io_rt_aps.act_id_stopped_by
                     , io_rt_aps.aet_id
                     , io_rt_aps.job_name
                     , io_rt_aps.executed_first_time
                     , io_rt_aps.stopped
                     , io_rt_aps.aborted
                     , io_rt_aps.ind_finished_normally
                     , io_rt_aps.ind_dead
                     , io_rt_aps.ind_job_terminated
                     , io_rt_aps.reason_end
                     , io_rt_aps.timestamp_latest_execution
                     , io_rt_aps.number_of_executions
                     , io_rt_aps.latest_execution_time
                     , io_rt_aps.total_execution_time
                     , io_rt_aps.ind_execution_time_too_long
                     , io_rt_aps.ind_timeslot_exceeded
                     , io_rt_aps.application_info
                     , io_rt_aps.module
                     , io_rt_aps.program
                     , io_rt_aps.db_instance
                     , io_rt_aps.audsid
                     , io_rt_aps.unique_session_id
                     , io_rt_aps.sid
                     , io_rt_aps.serial#
                     , io_rt_aps.database_user
                     , io_rt_aps.session_userid
                     , io_rt_aps.ind_dba
                     , io_rt_aps.os_user
                     , io_rt_aps.proxy_user
                     , io_rt_aps.proxy_userid
                     , io_rt_aps.external_name
                     , io_rt_aps.authentication_type
                     , io_rt_aps.authentication_method
                     , io_rt_aps.terminal
                     , io_rt_aps.host
                     , io_rt_aps.ip_address
                     , io_rt_aps.job_block )
           returning id
                   , date_created
                   , date_modified
                   , ind_registered
                   , ind_controlled
                   , status
                   , act_id_aborted_by
                   , act_id_initiated_by
                   , act_id_stopped_by
                   , aet_id
                   , job_name
                   , executed_first_time
                   , stopped
                   , aborted
                   , ind_finished_normally
                   , ind_dead
                   , ind_job_terminated
                   , reason_end
                   , timestamp_latest_execution
                   , number_of_executions
                   , latest_execution_time
                   , total_execution_time
                   , ind_execution_time_too_long
                   , ind_timeslot_exceeded
                   , application_info
                   , module
                   , program
                   , db_instance
                   , audsid
                   , unique_session_id
                   , sid
                   , serial#
                   , database_user
                   , session_userid
                   , ind_dba
                   , os_user
                   , proxy_user
                   , proxy_userid
                   , external_name
                   , authentication_type
                   , authentication_method
                   , terminal
                   , host
                   , ip_address
                   , job_block
                into io_rt_aps.id
                   , io_rt_aps.date_created
                   , io_rt_aps.date_modified
                   , io_rt_aps.ind_registered
                   , io_rt_aps.ind_controlled
                   , io_rt_aps.status
                   , io_rt_aps.act_id_aborted_by
                   , io_rt_aps.act_id_initiated_by
                   , io_rt_aps.act_id_stopped_by
                   , io_rt_aps.aet_id
                   , io_rt_aps.job_name
                   , io_rt_aps.executed_first_time
                   , io_rt_aps.stopped
                   , io_rt_aps.aborted
                   , io_rt_aps.ind_finished_normally
                   , io_rt_aps.ind_dead
                   , io_rt_aps.ind_job_terminated
                   , io_rt_aps.reason_end
                   , io_rt_aps.timestamp_latest_execution
                   , io_rt_aps.number_of_executions
                   , io_rt_aps.latest_execution_time
                   , io_rt_aps.total_execution_time
                   , io_rt_aps.ind_execution_time_too_long
                   , io_rt_aps.ind_timeslot_exceeded
                   , io_rt_aps.application_info
                   , io_rt_aps.module
                   , io_rt_aps.program
                   , io_rt_aps.db_instance
                   , io_rt_aps.audsid
                   , io_rt_aps.unique_session_id
                   , io_rt_aps.sid
                   , io_rt_aps.serial#
                   , io_rt_aps.database_user
                   , io_rt_aps.session_userid
                   , io_rt_aps.ind_dba
                   , io_rt_aps.os_user
                   , io_rt_aps.proxy_user
                   , io_rt_aps.proxy_userid
                   , io_rt_aps.external_name
                   , io_rt_aps.authentication_type
                   , io_rt_aps.authentication_method
                   , io_rt_aps.terminal
                   , io_rt_aps.host
                   , io_rt_aps.ip_address
                   , io_rt_aps.job_block;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_aps.id||'"'
                                                             ||', DATE_CREATED = "'||io_rt_aps.date_created||'"'
                                                             ||', DATE_MODIFIED = "'||io_rt_aps.date_modified||'"'
                                                             ||', IND_REGISTERED = "'||io_rt_aps.ind_registered||'"'
                                                             ||', IND_CONTROLLED = "'||io_rt_aps.ind_controlled||'"'
                                                             ||', STATUS = "'||io_rt_aps.status||'"'
                                                             ||', ACT_ID_ABORTED_BY = "'||io_rt_aps.act_id_aborted_by||'"'
                                                             ||', ACT_ID_INITIATED_BY = "'||io_rt_aps.act_id_initiated_by||'"'
                                                             ||', ACT_ID_STOPPED_BY = "'||io_rt_aps.act_id_stopped_by||'"'
                                                             ||', AET_ID = "'||io_rt_aps.aet_id||'"'
                                                             ||', JOB_NAME = "'||io_rt_aps.job_name||'"'
                                                             ||', EXECUTED_FIRST_TIME = "'||io_rt_aps.executed_first_time||'"'
                                                             ||', STOPPED = "'||io_rt_aps.stopped||'"'
                                                             ||', ABORTED = "'||io_rt_aps.aborted||'"'
                                                             ||', IND_FINISHED_NORMALLY = "'||io_rt_aps.ind_finished_normally||'"'
                                                             ||', IND_DEAD = "'||io_rt_aps.ind_dead||'"'
                                                             ||', IND_JOB_TERMINATED = "'||io_rt_aps.ind_job_terminated||'"'
                                                             ||', REASON_END = "'||io_rt_aps.reason_end||'"'
                                                             ||', TIMESTAMP_LATEST_EXECUTION = "'||io_rt_aps.timestamp_latest_execution||'"'
                                                             ||', NUMBER_OF_EXECUTIONS = "'||io_rt_aps.number_of_executions||'"'
                                                             ||', LATEST_EXECUTION_TIME = "'||io_rt_aps.latest_execution_time||'"'
                                                             ||', TOTAL_EXECUTION_TIME = "'||io_rt_aps.total_execution_time||'"'
                                                             ||', IND_EXECUTION_TIME_TOO_LONG = "'||io_rt_aps.ind_execution_time_too_long||'"'
                                                             ||', IND_TIMESLOT_EXCEEDED = "'||io_rt_aps.ind_timeslot_exceeded||'"'
                                                             ||', APPLICATION_INFO = "'||io_rt_aps.application_info||'"'
                                                             ||', MODULE = "'||io_rt_aps.module||'"'
                                                             ||', PROGRAM = "'||io_rt_aps.program||'"'
                                                             ||', DB_INSTANCE = "'||io_rt_aps.db_instance||'"'
                                                             ||', AUDSID = "'||io_rt_aps.audsid||'"'
                                                             ||', UNIQUE_SESSION_ID = "'||io_rt_aps.unique_session_id||'"'
                                                             ||', SID = "'||io_rt_aps.sid||'"'
                                                             ||', SERIAL# = "'||io_rt_aps.serial#||'"'
                                                             ||', DATABASE_USER = "'||io_rt_aps.database_user||'"'
                                                             ||', SESSION_USERID = "'||io_rt_aps.session_userid||'"'
                                                             ||', IND_DBA = "'||io_rt_aps.ind_dba||'"'
                                                             ||', OS_USER = "'||io_rt_aps.os_user||'"'
                                                             ||', PROXY_USER = "'||io_rt_aps.proxy_user||'"'
                                                             ||', PROXY_USERID = "'||io_rt_aps.proxy_userid||'"'
                                                             ||', EXTERNAL_NAME = "'||io_rt_aps.external_name||'"'
                                                             ||', AUTHENTICATION_TYPE = "'||io_rt_aps.authentication_type||'"'
                                                             ||', AUTHENTICATION_METHOD = "'||io_rt_aps.authentication_method||'"'
                                                             ||', TERMINAL = "'||io_rt_aps.terminal||'"'
                                                             ||', HOST = "'||io_rt_aps.host||'"'
                                                             ||', IP_ADDRESS = "'||io_rt_aps.ip_address||'"'
                                                             ||', JOB_BLOCK = "'||io_rt_aps.job_block||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end aps_insert_row;

function aps_perform_update( i_aps_id   in     acl_application_processes.id%type
                           , io_rt_aps  in out acl_application_processes%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.aps_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update acl_application_processes
            set id = io_rt_aps.id
              , date_created = io_rt_aps.date_created
              , date_modified = io_rt_aps.date_modified
              , ind_registered = io_rt_aps.ind_registered
              , ind_controlled = io_rt_aps.ind_controlled
              , status = io_rt_aps.status
              , act_id_aborted_by = io_rt_aps.act_id_aborted_by
              , act_id_initiated_by = io_rt_aps.act_id_initiated_by
              , act_id_stopped_by = io_rt_aps.act_id_stopped_by
              , aet_id = io_rt_aps.aet_id
              , job_name = io_rt_aps.job_name
              , executed_first_time = io_rt_aps.executed_first_time
              , stopped = io_rt_aps.stopped
              , aborted = io_rt_aps.aborted
              , ind_finished_normally = io_rt_aps.ind_finished_normally
              , ind_dead = io_rt_aps.ind_dead
              , ind_job_terminated = io_rt_aps.ind_job_terminated
              , reason_end = io_rt_aps.reason_end
              , timestamp_latest_execution = io_rt_aps.timestamp_latest_execution
              , number_of_executions = io_rt_aps.number_of_executions
              , latest_execution_time = io_rt_aps.latest_execution_time
              , total_execution_time = io_rt_aps.total_execution_time
              , ind_execution_time_too_long = io_rt_aps.ind_execution_time_too_long
              , ind_timeslot_exceeded = io_rt_aps.ind_timeslot_exceeded
              , application_info = io_rt_aps.application_info
              , module = io_rt_aps.module
              , program = io_rt_aps.program
              , db_instance = io_rt_aps.db_instance
              , audsid = io_rt_aps.audsid
              , unique_session_id = io_rt_aps.unique_session_id
              , sid = io_rt_aps.sid
              , serial# = io_rt_aps.serial#
              , database_user = io_rt_aps.database_user
              , session_userid = io_rt_aps.session_userid
              , ind_dba = io_rt_aps.ind_dba
              , os_user = io_rt_aps.os_user
              , proxy_user = io_rt_aps.proxy_user
              , proxy_userid = io_rt_aps.proxy_userid
              , external_name = io_rt_aps.external_name
              , authentication_type = io_rt_aps.authentication_type
              , authentication_method = io_rt_aps.authentication_method
              , terminal = io_rt_aps.terminal
              , host = io_rt_aps.host
              , ip_address = io_rt_aps.ip_address
              , job_block = io_rt_aps.job_block
          where id = i_aps_id
      returning id
              , date_created
              , date_modified
              , ind_registered
              , ind_controlled
              , status
              , act_id_aborted_by
              , act_id_initiated_by
              , act_id_stopped_by
              , aet_id
              , job_name
              , executed_first_time
              , stopped
              , aborted
              , ind_finished_normally
              , ind_dead
              , ind_job_terminated
              , reason_end
              , timestamp_latest_execution
              , number_of_executions
              , latest_execution_time
              , total_execution_time
              , ind_execution_time_too_long
              , ind_timeslot_exceeded
              , application_info
              , module
              , program
              , db_instance
              , audsid
              , unique_session_id
              , sid
              , serial#
              , database_user
              , session_userid
              , ind_dba
              , os_user
              , proxy_user
              , proxy_userid
              , external_name
              , authentication_type
              , authentication_method
              , terminal
              , host
              , ip_address
              , job_block
           into io_rt_aps.id
              , io_rt_aps.date_created
              , io_rt_aps.date_modified
              , io_rt_aps.ind_registered
              , io_rt_aps.ind_controlled
              , io_rt_aps.status
              , io_rt_aps.act_id_aborted_by
              , io_rt_aps.act_id_initiated_by
              , io_rt_aps.act_id_stopped_by
              , io_rt_aps.aet_id
              , io_rt_aps.job_name
              , io_rt_aps.executed_first_time
              , io_rt_aps.stopped
              , io_rt_aps.aborted
              , io_rt_aps.ind_finished_normally
              , io_rt_aps.ind_dead
              , io_rt_aps.ind_job_terminated
              , io_rt_aps.reason_end
              , io_rt_aps.timestamp_latest_execution
              , io_rt_aps.number_of_executions
              , io_rt_aps.latest_execution_time
              , io_rt_aps.total_execution_time
              , io_rt_aps.ind_execution_time_too_long
              , io_rt_aps.ind_timeslot_exceeded
              , io_rt_aps.application_info
              , io_rt_aps.module
              , io_rt_aps.program
              , io_rt_aps.db_instance
              , io_rt_aps.audsid
              , io_rt_aps.unique_session_id
              , io_rt_aps.sid
              , io_rt_aps.serial#
              , io_rt_aps.database_user
              , io_rt_aps.session_userid
              , io_rt_aps.ind_dba
              , io_rt_aps.os_user
              , io_rt_aps.proxy_user
              , io_rt_aps.proxy_userid
              , io_rt_aps.external_name
              , io_rt_aps.authentication_type
              , io_rt_aps.authentication_method
              , io_rt_aps.terminal
              , io_rt_aps.host
              , io_rt_aps.ip_address
              , io_rt_aps.job_block;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_aps.id||'"'
                                                             ||', DATE_CREATED = "'||io_rt_aps.date_created||'"'
                                                             ||', DATE_MODIFIED = "'||io_rt_aps.date_modified||'"'
                                                             ||', IND_REGISTERED = "'||io_rt_aps.ind_registered||'"'
                                                             ||', IND_CONTROLLED = "'||io_rt_aps.ind_controlled||'"'
                                                             ||', STATUS = "'||io_rt_aps.status||'"'
                                                             ||', ACT_ID_ABORTED_BY = "'||io_rt_aps.act_id_aborted_by||'"'
                                                             ||', ACT_ID_INITIATED_BY = "'||io_rt_aps.act_id_initiated_by||'"'
                                                             ||', ACT_ID_STOPPED_BY = "'||io_rt_aps.act_id_stopped_by||'"'
                                                             ||', AET_ID = "'||io_rt_aps.aet_id||'"'
                                                             ||', JOB_NAME = "'||io_rt_aps.job_name||'"'
                                                             ||', EXECUTED_FIRST_TIME = "'||io_rt_aps.executed_first_time||'"'
                                                             ||', STOPPED = "'||io_rt_aps.stopped||'"'
                                                             ||', ABORTED = "'||io_rt_aps.aborted||'"'
                                                             ||', IND_FINISHED_NORMALLY = "'||io_rt_aps.ind_finished_normally||'"'
                                                             ||', IND_DEAD = "'||io_rt_aps.ind_dead||'"'
                                                             ||', IND_JOB_TERMINATED = "'||io_rt_aps.ind_job_terminated||'"'
                                                             ||', REASON_END = "'||io_rt_aps.reason_end||'"'
                                                             ||', TIMESTAMP_LATEST_EXECUTION = "'||io_rt_aps.timestamp_latest_execution||'"'
                                                             ||', NUMBER_OF_EXECUTIONS = "'||io_rt_aps.number_of_executions||'"'
                                                             ||', LATEST_EXECUTION_TIME = "'||io_rt_aps.latest_execution_time||'"'
                                                             ||', TOTAL_EXECUTION_TIME = "'||io_rt_aps.total_execution_time||'"'
                                                             ||', IND_EXECUTION_TIME_TOO_LONG = "'||io_rt_aps.ind_execution_time_too_long||'"'
                                                             ||', IND_TIMESLOT_EXCEEDED = "'||io_rt_aps.ind_timeslot_exceeded||'"'
                                                             ||', APPLICATION_INFO = "'||io_rt_aps.application_info||'"'
                                                             ||', MODULE = "'||io_rt_aps.module||'"'
                                                             ||', PROGRAM = "'||io_rt_aps.program||'"'
                                                             ||', DB_INSTANCE = "'||io_rt_aps.db_instance||'"'
                                                             ||', AUDSID = "'||io_rt_aps.audsid||'"'
                                                             ||', UNIQUE_SESSION_ID = "'||io_rt_aps.unique_session_id||'"'
                                                             ||', SID = "'||io_rt_aps.sid||'"'
                                                             ||', SERIAL# = "'||io_rt_aps.serial#||'"'
                                                             ||', DATABASE_USER = "'||io_rt_aps.database_user||'"'
                                                             ||', SESSION_USERID = "'||io_rt_aps.session_userid||'"'
                                                             ||', IND_DBA = "'||io_rt_aps.ind_dba||'"'
                                                             ||', OS_USER = "'||io_rt_aps.os_user||'"'
                                                             ||', PROXY_USER = "'||io_rt_aps.proxy_user||'"'
                                                             ||', PROXY_USERID = "'||io_rt_aps.proxy_userid||'"'
                                                             ||', EXTERNAL_NAME = "'||io_rt_aps.external_name||'"'
                                                             ||', AUTHENTICATION_TYPE = "'||io_rt_aps.authentication_type||'"'
                                                             ||', AUTHENTICATION_METHOD = "'||io_rt_aps.authentication_method||'"'
                                                             ||', TERMINAL = "'||io_rt_aps.terminal||'"'
                                                             ||', HOST = "'||io_rt_aps.host||'"'
                                                             ||', IP_ADDRESS = "'||io_rt_aps.ip_address||'"'
                                                             ||', JOB_BLOCK = "'||io_rt_aps.job_block||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end aps_perform_update;

function aps_perform_delete( i_aps_id   in  acl_application_processes.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.aps_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from acl_application_processes
          where id = i_aps_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_aps_id||'"' );
   end;                                                          
end aps_perform_delete;

function aps_update_row( i_aps_id   in     acl_application_processes.id%type
                       , io_rt_aps  in out acl_application_processes%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.aps_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         aps_lock_row( i_aps_id   =>  i_aps_id );

         
         l_rowcount := 
            aps_perform_update( i_aps_id   =>  i_aps_id
                              , io_rt_aps  => io_rt_aps );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_aps.id||'"'
                                                          ||', DATE_CREATED = "'||io_rt_aps.date_created||'"'
                                                          ||', DATE_MODIFIED = "'||io_rt_aps.date_modified||'"'
                                                          ||', IND_REGISTERED = "'||io_rt_aps.ind_registered||'"'
                                                          ||', IND_CONTROLLED = "'||io_rt_aps.ind_controlled||'"'
                                                          ||', STATUS = "'||io_rt_aps.status||'"'
                                                          ||', ACT_ID_ABORTED_BY = "'||io_rt_aps.act_id_aborted_by||'"'
                                                          ||', ACT_ID_INITIATED_BY = "'||io_rt_aps.act_id_initiated_by||'"'
                                                          ||', ACT_ID_STOPPED_BY = "'||io_rt_aps.act_id_stopped_by||'"'
                                                          ||', AET_ID = "'||io_rt_aps.aet_id||'"'
                                                          ||', JOB_NAME = "'||io_rt_aps.job_name||'"'
                                                          ||', EXECUTED_FIRST_TIME = "'||io_rt_aps.executed_first_time||'"'
                                                          ||', STOPPED = "'||io_rt_aps.stopped||'"'
                                                          ||', ABORTED = "'||io_rt_aps.aborted||'"'
                                                          ||', IND_FINISHED_NORMALLY = "'||io_rt_aps.ind_finished_normally||'"'
                                                          ||', IND_DEAD = "'||io_rt_aps.ind_dead||'"'
                                                          ||', IND_JOB_TERMINATED = "'||io_rt_aps.ind_job_terminated||'"'
                                                          ||', REASON_END = "'||io_rt_aps.reason_end||'"'
                                                          ||', TIMESTAMP_LATEST_EXECUTION = "'||io_rt_aps.timestamp_latest_execution||'"'
                                                          ||', NUMBER_OF_EXECUTIONS = "'||io_rt_aps.number_of_executions||'"'
                                                          ||', LATEST_EXECUTION_TIME = "'||io_rt_aps.latest_execution_time||'"'
                                                          ||', TOTAL_EXECUTION_TIME = "'||io_rt_aps.total_execution_time||'"'
                                                          ||', IND_EXECUTION_TIME_TOO_LONG = "'||io_rt_aps.ind_execution_time_too_long||'"'
                                                          ||', IND_TIMESLOT_EXCEEDED = "'||io_rt_aps.ind_timeslot_exceeded||'"'
                                                          ||', APPLICATION_INFO = "'||io_rt_aps.application_info||'"'
                                                          ||', MODULE = "'||io_rt_aps.module||'"'
                                                          ||', PROGRAM = "'||io_rt_aps.program||'"'
                                                          ||', DB_INSTANCE = "'||io_rt_aps.db_instance||'"'
                                                          ||', AUDSID = "'||io_rt_aps.audsid||'"'
                                                          ||', UNIQUE_SESSION_ID = "'||io_rt_aps.unique_session_id||'"'
                                                          ||', SID = "'||io_rt_aps.sid||'"'
                                                          ||', SERIAL# = "'||io_rt_aps.serial#||'"'
                                                          ||', DATABASE_USER = "'||io_rt_aps.database_user||'"'
                                                          ||', SESSION_USERID = "'||io_rt_aps.session_userid||'"'
                                                          ||', IND_DBA = "'||io_rt_aps.ind_dba||'"'
                                                          ||', OS_USER = "'||io_rt_aps.os_user||'"'
                                                          ||', PROXY_USER = "'||io_rt_aps.proxy_user||'"'
                                                          ||', PROXY_USERID = "'||io_rt_aps.proxy_userid||'"'
                                                          ||', EXTERNAL_NAME = "'||io_rt_aps.external_name||'"'
                                                          ||', AUTHENTICATION_TYPE = "'||io_rt_aps.authentication_type||'"'
                                                          ||', AUTHENTICATION_METHOD = "'||io_rt_aps.authentication_method||'"'
                                                          ||', TERMINAL = "'||io_rt_aps.terminal||'"'
                                                          ||', HOST = "'||io_rt_aps.host||'"'
                                                          ||', IP_ADDRESS = "'||io_rt_aps.ip_address||'"'
                                                          ||', JOB_BLOCK = "'||io_rt_aps.job_block||'"'                                                           , 1, 4000));
   end;                                                          
end aps_update_row;

function aps_delete_row( i_aps_id   in  acl_application_processes.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.aps_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         aps_lock_row( i_aps_id   =>  i_aps_id );

         
         l_deleted := aps_perform_delete( i_aps_id   =>  i_aps_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_aps_id||'"' );
   end;                                                          
end aps_delete_row;

function aps_seq1_nextval
return acl_application_processes.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.aps_seq1_nextval';
   l_aps_id  acl_application_processes.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select acl_aps_seq1.nextval 
           into l_aps_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_aps_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end aps_seq1_nextval;


end acl_aps_tapi_pck;
/