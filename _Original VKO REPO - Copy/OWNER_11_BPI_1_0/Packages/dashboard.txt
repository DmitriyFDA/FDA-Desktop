create or replace PACKAGE dashboard IS
G_CON_PACKAGE CONSTANT VARCHAR2(30) := 'dashboard';
function day_inout_throughput(p_d1_periodid in number) RETURN DASHBOARD_INOUT_TABLE PIPELINED;
procedure get_inout_throughput;
function day_segments(p_d1_periodid in number) RETURN SEGMENT_DAY_TABLE PIPELINED;
function day_DCV_throughput(p_d1_periodid in number) RETURN DCV_THROUGHPUT_DAY_TABLE PIPELINED;
END dashboard;
/



package body dashboard is

function day_inout_throughput(p_d1_periodid in number) return dashboard_inout_table pipelined is
type inout_tuples is table of fact_dashboard_inout_d1%rowtype;
tuples inout_tuples;
n integer := 0;
begin
  select * bulk collect into tuples from fact_dashboard_inout_d1
  where d1_periodid = p_d1_periodid order by d1_periodid, input_ps, output_ps;
  if tuples.count > 0 then
    for i in 1..tuples.count loop
      pipe row ( dashboard_inout_tuple
      ( tuples(i).d1_periodid
      , tuples(i).input_ps
      , tuples(i).output_ps
      , tuples(i).dayts
      , tuples(i).updatets
      , tuples(i).ist
      , tuples(i).not_ist_sa
      , tuples(i).not_ist_not_sa
      , tuples(i).total ) );
    end loop;
  else
    for c_rec in ( select d1_periodid
                   ,      nvl(input_ps, '..') as input_ps
                   ,      nvl(output_ps, '..') as output_ps
                   ,      sum(ist) as ist
                   ,      sum(not_ist_sa) as not_ist_sa
                   ,      sum(not_ist_not_sa) as not_ist_not_sa
                   ,      sum(total) as total
                   from (
                                select period.periodid(f.m5_periodid,'D1') as d1_periodid
                         ,      nvl(d1.process_step, '..') as input_ps
                         ,      nvl(d2.process_step, '..') as output_ps
                         ,      sum(case when nvl(f.ind_in_system_time_ok,'?') = 'Y' then 1 else 0 end) as ist
                         ,      sum(case when nvl(f.ind_in_system_time_ok,'?') != 'Y' and nvl(f.ind_system_attributable,'?') = 'Y' then 1 else 0 end) as not_ist_sa
                         ,      sum(case when nvl(f.ind_in_system_time_ok,'?') != 'Y' and nvl(f.ind_system_attributable,'?') != 'Y' then 1 else 0 end) as not_ist_not_sa
                         ,      count(f.id) as total
                         from fact_bag_summaries f
						 ,    dim_node_area_zone_equipment d1
						 ,    dim_node_area_zone_equipment d2
                         where f.nodeid_entry = d1.nodeid(+)
						 and   f.nodeid_exit = d2.nodeid(+)
                 
                         and   f.m5_periodid between p_d1_periodid and p_d1_periodid + 86400 - 1 
                         group by period.periodid(f.m5_periodid,'D1'), d1.process_step, d2.process_step
                         union
                         select p_d1_periodid as d1_periodid
                         ,      a.process_step as input_ps
                         ,      b.process_step as output_ps
                         ,      0 as ist
                         ,      0 as not_ist_sa
                         ,      0 as not_ist_not_sa
                         ,      0 as total
                         from ( select distinct process_step from dim_nodes where ntype='ETE'
				                union
						        select '..' as process_step from dual) a
                         ,    ( select distinct process_step from dim_nodes where ntype='EXT'
				                union
				                select '..' as process_step from dual) b
                         )
                   group by  d1_periodid, input_ps, output_ps order by 1,2,3 ) loop

      pipe row ( dashboard_inout_tuple
      ( c_rec.d1_periodid
      , c_rec.input_ps
      , c_rec.output_ps
      , period.startts(c_rec.d1_periodid)
      , sys_extract_utc(systimestamp)
      , c_rec.ist
      , c_rec.not_ist_sa
      , c_rec.not_ist_not_sa
      , c_rec.total ) );

    end loop;
  end if;
end;


procedure get_inout_throughput is
this_periodid number;
last_inout_d1_periodid number;
day_offset number := 0;
type inout_tuples is table of fact_dashboard_inout_d1%rowtype;
tuples inout_tuples;
l_con_proc_name constant varchar2(61) := g_con_package||'.get_inout_throughput';
l_msg viu_info_logs.additional_data%type;
l_day_count number := 0;
begin
  viu_module.enter_module(i_module => l_con_proc_name, i_debug_info => to_char(sys_extract_utc(systimestamp)));
  begin
    begin
      select max(d1_periodid) into last_inout_d1_periodid from fact_dashboard_inout_d1;
    exception when others then
      last_inout_d1_periodid := null;
    end;
     
    if last_inout_d1_periodid is null then
      last_inout_d1_periodid := period.periodid(sys_extract_utc(systimestamp)-31, 'D1');
    end if;
    
    viu_info.operator_info( i_ifo_nr       => viu_constant.c_ifo_bpidebuginfo
                         , i_calling_procedure      => l_con_proc_name
                         , i_severity               => viu_info.c_severity_notification
                         , i_info_arguments         => 'last_inout_d1_periodid: '||to_char(last_inout_d1_periodid)
                         , i_additional_data        => l_con_proc_name||' STARTED. Processing Dashboard day metrics  later than '||to_char(period.startts(last_inout_d1_periodid))
                         );

    
    
    for i in 1..30 loop
      day_offset := 30-i+1; 
      this_periodid := period.periodid(sys_extract_utc(systimestamp) - day_offset, 'D1');
      
      if this_periodid > last_inout_d1_periodid then
        

        
        

        select * bulk collect into tuples from table(dashboard.day_inout_throughput(this_periodid));
        for i in 1..tuples.count loop
          begin
             insert into fact_dashboard_inout_d1 values tuples(i);
          exception
             when dup_val_on_index then
                update fact_dashboard_inout_d1 set row = tuples(i)
                where  d1_periodid = tuples(i).d1_periodid
                and    input_ps    = tuples(i).input_ps
                and    output_ps   = tuples(i).output_ps;
          end;
          
        end loop;
        commit;
        l_day_count := l_day_count + 1;
      end if;
    end loop;

    viu_info.operator_info( i_ifo_nr       => viu_constant.c_ifo_bpidebuginfo
                         , i_calling_procedure      => l_con_proc_name
                         , i_severity               => viu_info.c_severity_notification
                         , i_info_arguments         => null
                         , i_additional_data        => l_con_proc_name||' finished successfully. Processed '||to_char(l_day_count)||' days of Dashboard metrics.'
                         );

  exception when others then
    l_msg := substr(l_con_proc_name||', '||sqlerrm||chr(10)||dbms_utility.format_error_backtrace,1,4000);
    viu_info.operator_info(viu_constant.c_ifo_bpidebuginfo,l_con_proc_name, viu_info.c_severity_error, null, l_msg);
  end;
  viu_module.leave_module(i_module => l_con_proc_name);
end;



function day_segments(p_d1_periodid in number) return segment_day_table pipelined is
cursor c_day_segs is
select id as segmentid
  , p_d1_periodid as d1_periodid
  , 1 as  oper_h0
  , 1 as  oper_h1
  , 1 as  oper_h2
  , 1 as  oper_h3
  , 1 as  oper_h4
  , 1 as  oper_h5
  , 1 as  oper_h6
  , 1 as  oper_h7
  , 1 as  oper_h8
  , 1 as  oper_h9
  , 1 as  oper_h10
  , 1 as  oper_h11
  , 1 as  oper_h12
  , 1 as  oper_h13
  , 1 as  oper_h14
  , 1 as  oper_h15
  , 1 as  oper_h16
  , 1 as  oper_h17
  , 1 as  oper_h18
  , 1 as  oper_h19
  , 1 as  oper_h20
  , 1 as  oper_h21
  , 1 as  oper_h22
  , 1 as  oper_h23
  , 1 as  tech_h0
  , 1 as  tech_h1
  , 1 as  tech_h2
  , 1 as  tech_h3
  , 1 as  tech_h4
  , 1 as  tech_h5
  , 1 as  tech_h6
  , 1 as  tech_h7
  , 1 as  tech_h8
  , 1 as  tech_h9
  , 1 as  tech_h10
  , 1 as  tech_h11
  , 1 as  tech_h12
  , 1 as  tech_h13
  , 1 as  tech_h14
  , 1 as  tech_h15
  , 1 as  tech_h16
  , 1 as  tech_h17
  , 1 as  tech_h18
  , 1 as  tech_h19
  , 1 as  tech_h20
  , 1 as  tech_h21
  , 1 as  tech_h22
  , 1 as  tech_h23
  , 1 as  safe_h0
  , 1 as  safe_h1
  , 1 as  safe_h2
  , 1 as  safe_h3
  , 1 as  safe_h4
  , 1 as  safe_h5
  , 1 as  safe_h6
  , 1 as  safe_h7
  , 1 as  safe_h8
  , 1 as  safe_h9
  , 1 as  safe_h10
  , 1 as  safe_h11
  , 1 as  safe_h12
  , 1 as  safe_h13
  , 1 as  safe_h14
  , 1 as  safe_h15
  , 1 as  safe_h16
  , 1 as  safe_h17
  , 1 as  safe_h18
  , 1 as  safe_h19
  , 1 as  safe_h20
  , 1 as  safe_h21
  , 1 as  safe_h22
  , 1 as  safe_h23
from dim_status_segments;
type seg_tuples is table of c_day_segs%rowtype;
stuples seg_tuples := seg_tuples();
n integer := 0;
l_day_start timestamp := period.startts(p_d1_periodid);
l_day_end timestamp := period.endts(p_d1_periodid, 'D1');
begin
  select str_to_num(segmentid) as segmentid
  , p_d1_periodid as d1_periodid
  , max(case when period.hourofday(period.startts(h1_periodid)) = 0 then oper else 0 end) as oper_h0
  , max(case when period.hourofday(period.startts(h1_periodid)) = 1 then oper else 0 end) as oper_h1
  , max(case when period.hourofday(period.startts(h1_periodid)) = 2 then oper else 0 end) as oper_h2
  , max(case when period.hourofday(period.startts(h1_periodid)) = 3 then oper else 0 end) as oper_h3
  , max(case when period.hourofday(period.startts(h1_periodid)) = 4 then oper else 0 end) as oper_h4
  , max(case when period.hourofday(period.startts(h1_periodid)) = 5 then oper else 0 end) as oper_h5
  , max(case when period.hourofday(period.startts(h1_periodid)) = 6 then oper else 0 end) as oper_h6
  , max(case when period.hourofday(period.startts(h1_periodid)) = 7 then oper else 0 end) as oper_h7
  , max(case when period.hourofday(period.startts(h1_periodid)) = 8 then oper else 0 end) as oper_h8
  , max(case when period.hourofday(period.startts(h1_periodid)) = 9 then oper else 0 end) as oper_h9
  , max(case when period.hourofday(period.startts(h1_periodid)) = 10 then oper else 0 end) as oper_h10
  , max(case when period.hourofday(period.startts(h1_periodid)) = 11 then oper else 0 end) as oper_h11
  , max(case when period.hourofday(period.startts(h1_periodid)) = 12 then oper else 0 end) as oper_h12
  , max(case when period.hourofday(period.startts(h1_periodid)) = 13 then oper else 0 end) as oper_h13
  , max(case when period.hourofday(period.startts(h1_periodid)) = 14 then oper else 0 end) as oper_h14
  , max(case when period.hourofday(period.startts(h1_periodid)) = 15 then oper else 0 end) as oper_h15
  , max(case when period.hourofday(period.startts(h1_periodid)) = 16 then oper else 0 end) as oper_h16
  , max(case when period.hourofday(period.startts(h1_periodid)) = 17 then oper else 0 end) as oper_h17
  , max(case when period.hourofday(period.startts(h1_periodid)) = 18 then oper else 0 end) as oper_h18
  , max(case when period.hourofday(period.startts(h1_periodid)) = 19 then oper else 0 end) as oper_h19
  , max(case when period.hourofday(period.startts(h1_periodid)) = 20 then oper else 0 end) as oper_h20
  , max(case when period.hourofday(period.startts(h1_periodid)) = 21 then oper else 0 end) as oper_h21
  , max(case when period.hourofday(period.startts(h1_periodid)) = 22 then oper else 0 end) as oper_h22
  , max(case when period.hourofday(period.startts(h1_periodid)) = 23 then oper else 0 end) as oper_h23
  , max(case when period.hourofday(period.startts(h1_periodid)) = 0 then tech else 0 end) as tech_h0
  , max(case when period.hourofday(period.startts(h1_periodid)) = 1 then tech else 0 end) as tech_h1
  , max(case when period.hourofday(period.startts(h1_periodid)) = 2 then tech else 0 end) as tech_h2
  , max(case when period.hourofday(period.startts(h1_periodid)) = 3 then tech else 0 end) as tech_h3
  , max(case when period.hourofday(period.startts(h1_periodid)) = 4 then tech else 0 end) as tech_h4
  , max(case when period.hourofday(period.startts(h1_periodid)) = 5 then tech else 0 end) as tech_h5
  , max(case when period.hourofday(period.startts(h1_periodid)) = 6 then tech else 0 end) as tech_h6
  , max(case when period.hourofday(period.startts(h1_periodid)) = 7 then tech else 0 end) as tech_h7
  , max(case when period.hourofday(period.startts(h1_periodid)) = 8 then tech else 0 end) as tech_h8
  , max(case when period.hourofday(period.startts(h1_periodid)) = 9 then tech else 0 end) as tech_h9
  , max(case when period.hourofday(period.startts(h1_periodid)) = 10 then tech else 0 end) as tech_h10
  , max(case when period.hourofday(period.startts(h1_periodid)) = 11 then tech else 0 end) as tech_h11
  , max(case when period.hourofday(period.startts(h1_periodid)) = 12 then tech else 0 end) as tech_h12
  , max(case when period.hourofday(period.startts(h1_periodid)) = 13 then tech else 0 end) as tech_h13
  , max(case when period.hourofday(period.startts(h1_periodid)) = 14 then tech else 0 end) as tech_h14
  , max(case when period.hourofday(period.startts(h1_periodid)) = 15 then tech else 0 end) as tech_h15
  , max(case when period.hourofday(period.startts(h1_periodid)) = 16 then tech else 0 end) as tech_h16
  , max(case when period.hourofday(period.startts(h1_periodid)) = 17 then tech else 0 end) as tech_h17
  , max(case when period.hourofday(period.startts(h1_periodid)) = 18 then tech else 0 end) as tech_h18
  , max(case when period.hourofday(period.startts(h1_periodid)) = 19 then tech else 0 end) as tech_h19
  , max(case when period.hourofday(period.startts(h1_periodid)) = 20 then tech else 0 end) as tech_h20
  , max(case when period.hourofday(period.startts(h1_periodid)) = 21 then tech else 0 end) as tech_h21
  , max(case when period.hourofday(period.startts(h1_periodid)) = 22 then tech else 0 end) as tech_h22
  , max(case when period.hourofday(period.startts(h1_periodid)) = 23 then tech else 0 end) as tech_h23
  , max(case when period.hourofday(period.startts(h1_periodid)) = 0 then safe else 0 end) as safe_h0
  , max(case when period.hourofday(period.startts(h1_periodid)) = 1 then safe else 0 end) as safe_h1
  , max(case when period.hourofday(period.startts(h1_periodid)) = 2 then safe else 0 end) as safe_h2
  , max(case when period.hourofday(period.startts(h1_periodid)) = 3 then safe else 0 end) as safe_h3
  , max(case when period.hourofday(period.startts(h1_periodid)) = 4 then safe else 0 end) as safe_h4
  , max(case when period.hourofday(period.startts(h1_periodid)) = 5 then safe else 0 end) as safe_h5
  , max(case when period.hourofday(period.startts(h1_periodid)) = 6 then safe else 0 end) as safe_h6
  , max(case when period.hourofday(period.startts(h1_periodid)) = 7 then safe else 0 end) as safe_h7
  , max(case when period.hourofday(period.startts(h1_periodid)) = 8 then safe else 0 end) as safe_h8
  , max(case when period.hourofday(period.startts(h1_periodid)) = 9 then safe else 0 end) as safe_h9
  , max(case when period.hourofday(period.startts(h1_periodid)) = 10 then safe else 0 end) as safe_h10
  , max(case when period.hourofday(period.startts(h1_periodid)) = 11 then safe else 0 end) as safe_h11
  , max(case when period.hourofday(period.startts(h1_periodid)) = 12 then safe else 0 end) as safe_h12
  , max(case when period.hourofday(period.startts(h1_periodid)) = 13 then safe else 0 end) as safe_h13
  , max(case when period.hourofday(period.startts(h1_periodid)) = 14 then safe else 0 end) as safe_h14
  , max(case when period.hourofday(period.startts(h1_periodid)) = 15 then safe else 0 end) as safe_h15
  , max(case when period.hourofday(period.startts(h1_periodid)) = 16 then safe else 0 end) as safe_h16
  , max(case when period.hourofday(period.startts(h1_periodid)) = 17 then safe else 0 end) as safe_h17
  , max(case when period.hourofday(period.startts(h1_periodid)) = 18 then safe else 0 end) as safe_h18
  , max(case when period.hourofday(period.startts(h1_periodid)) = 19 then safe else 0 end) as safe_h19
  , max(case when period.hourofday(period.startts(h1_periodid)) = 20 then safe else 0 end) as safe_h20
  , max(case when period.hourofday(period.startts(h1_periodid)) = 21 then safe else 0 end) as safe_h21
  , max(case when period.hourofday(period.startts(h1_periodid)) = 22 then safe else 0 end) as safe_h22
  , max(case when period.hourofday(period.startts(h1_periodid)) = 23 then safe else 0 end) as safe_h23
  bulk collect into stuples from
  ( select segmentid, h1_periodid
    , min(operational_availability) as oper
    , min(technical_availability) as tech
    , min(safety_availability) as safe
    from
    ( select segmentid, h1_periodid
      , operational_availability, technical_availability, safety_availability
      from fact_segmentstates_agg_h1
      where segmentid <> '*'
      and d1_periodid = p_d1_periodid
      union
      select to_char(a.id), b.periodid, 1, 1, 1
      from dim_status_segments a, table(period.tuples(l_day_start, l_day_end, 'H1')) b
      
      
      
      
    )
    group by segmentid, h1_periodid
  )
  group by segmentid
  order by 1;

  if stuples.count > 0 then
    for i in 1..stuples.count loop
      pipe row ( segment_day_tuple
      ( stuples(i).segmentid
      , stuples(i).d1_periodid
      , stuples(i).oper_h0
      , stuples(i).oper_h1
      , stuples(i).oper_h2
      , stuples(i).oper_h3
      , stuples(i).oper_h4
      , stuples(i).oper_h5
      , stuples(i).oper_h6
      , stuples(i).oper_h7
      , stuples(i).oper_h8
      , stuples(i).oper_h9
      , stuples(i).oper_h10
      , stuples(i).oper_h11
      , stuples(i).oper_h12
      , stuples(i).oper_h13
      , stuples(i).oper_h14
      , stuples(i).oper_h15
      , stuples(i).oper_h16
      , stuples(i).oper_h17
      , stuples(i).oper_h18
      , stuples(i).oper_h19
      , stuples(i).oper_h20
      , stuples(i).oper_h21
      , stuples(i).oper_h22
      , stuples(i).oper_h23
      , stuples(i).tech_h0
      , stuples(i).tech_h1
      , stuples(i).tech_h2
      , stuples(i).tech_h3
      , stuples(i).tech_h4
      , stuples(i).tech_h5
      , stuples(i).tech_h6
      , stuples(i).tech_h7
      , stuples(i).tech_h8
      , stuples(i).tech_h9
      , stuples(i).tech_h10
      , stuples(i).tech_h11
      , stuples(i).tech_h12
      , stuples(i).tech_h13
      , stuples(i).tech_h14
      , stuples(i).tech_h15
      , stuples(i).tech_h16
      , stuples(i).tech_h17
      , stuples(i).tech_h18
      , stuples(i).tech_h19
      , stuples(i).tech_h20
      , stuples(i).tech_h21
      , stuples(i).tech_h22
      , stuples(i).tech_h23
      , stuples(i).safe_h0
      , stuples(i).safe_h1
      , stuples(i).safe_h2
      , stuples(i).safe_h3
      , stuples(i).safe_h4
      , stuples(i).safe_h5
      , stuples(i).safe_h6
      , stuples(i).safe_h7
      , stuples(i).safe_h8
      , stuples(i).safe_h9
      , stuples(i).safe_h10
      , stuples(i).safe_h11
      , stuples(i).safe_h12
      , stuples(i).safe_h13
      , stuples(i).safe_h14
      , stuples(i).safe_h15
      , stuples(i).safe_h16
      , stuples(i).safe_h17
      , stuples(i).safe_h18
      , stuples(i).safe_h19
      , stuples(i).safe_h20
      , stuples(i).safe_h21
      , stuples(i).safe_h22
      , stuples(i).safe_h23 ) );
    end loop;
  end if;
end;


function day_dcv_throughput(p_d1_periodid in number) return dcv_throughput_day_table pipelined is
cursor c_day_dcv_throughput is
  select a.areaid
  , b.symbolicname as statistical
  , p_d1_periodid as d1_periodid
  , 0 as  value_h0
  , 0 as  value_h1
  , 0 as  value_h2
  , 0 as  value_h3
  , 0 as  value_h4
  , 0 as  value_h5
  , 0 as  value_h6
  , 0 as  value_h7
  , 0 as  value_h8
  , 0 as  value_h9
  , 0 as  value_h10
  , 0 as  value_h11
  , 0 as  value_h12
  , 0 as  value_h13
  , 0 as  value_h14
  , 0 as  value_h15
  , 0 as  value_h16
  , 0 as  value_h17
  , 0 as  value_h18
  , 0 as  value_h19
  , 0 as  value_h20
  , 0 as  value_h21
  , 0 as  value_h22
  , 0 as  value_h23
  from (select distinct areaid from dim_iscs order by 1) a
  , (select distinct symbolicname, description from dim_statistical
     where sourceprocessid like 'BSC%' and symbolicname like 'Carts%' order by 1) b
  order by 1,2;

type dcv_tuples is table of c_day_dcv_throughput%rowtype;
dtuples dcv_tuples := dcv_tuples();

begin
  select areaid
  , statistical
  , d1_periodid
  , sum(case when period.hourofday(period.startts(h1_periodid)) = 0 then sum_value else 0 end) as value_h0
  , sum(case when period.hourofday(period.startts(h1_periodid)) = 1 then sum_value else 0 end) as value_h1
  , sum(case when period.hourofday(period.startts(h1_periodid)) = 2 then sum_value else 0 end) as value_h2
  , sum(case when period.hourofday(period.startts(h1_periodid)) = 3 then sum_value else 0 end) as value_h3
  , sum(case when period.hourofday(period.startts(h1_periodid)) = 4 then sum_value else 0 end) as value_h4
  , sum(case when period.hourofday(period.startts(h1_periodid)) = 5 then sum_value else 0 end) as value_h5
  , sum(case when period.hourofday(period.startts(h1_periodid)) = 6 then sum_value else 0 end) as value_h6
  , sum(case when period.hourofday(period.startts(h1_periodid)) = 7 then sum_value else 0 end) as value_h7
  , sum(case when period.hourofday(period.startts(h1_periodid)) = 8 then sum_value else 0 end) as value_h8
  , sum(case when period.hourofday(period.startts(h1_periodid)) = 9 then sum_value else 0 end) as value_h9
  , sum(case when period.hourofday(period.startts(h1_periodid)) = 10 then sum_value else 0 end) as value_h10
  , sum(case when period.hourofday(period.startts(h1_periodid)) = 11 then sum_value else 0 end) as value_h11
  , sum(case when period.hourofday(period.startts(h1_periodid)) = 12 then sum_value else 0 end) as value_h12
  , sum(case when period.hourofday(period.startts(h1_periodid)) = 13 then sum_value else 0 end) as value_h13
  , sum(case when period.hourofday(period.startts(h1_periodid)) = 14 then sum_value else 0 end) as value_h14
  , sum(case when period.hourofday(period.startts(h1_periodid)) = 15 then sum_value else 0 end) as value_h15
  , sum(case when period.hourofday(period.startts(h1_periodid)) = 16 then sum_value else 0 end) as value_h16
  , sum(case when period.hourofday(period.startts(h1_periodid)) = 17 then sum_value else 0 end) as value_h17
  , sum(case when period.hourofday(period.startts(h1_periodid)) = 18 then sum_value else 0 end) as value_h18
  , sum(case when period.hourofday(period.startts(h1_periodid)) = 19 then sum_value else 0 end) as value_h19
  , sum(case when period.hourofday(period.startts(h1_periodid)) = 20 then sum_value else 0 end) as value_h20
  , sum(case when period.hourofday(period.startts(h1_periodid)) = 21 then sum_value else 0 end) as value_h21
  , sum(case when period.hourofday(period.startts(h1_periodid)) = 22 then sum_value else 0 end) as value_h22
  , sum(case when period.hourofday(period.startts(h1_periodid)) = 23 then sum_value else 0 end) as value_h23
  bulk collect into dtuples from
  ( select areaid, statistical, h1_periodid, d1_periodid, sum_value
    from fact_extmetrics_agg_h1
    where d1_periodid = p_d1_periodid
    and subsystem_type like 'BSC%'
    and statistical like 'Carts%'
    union
    select a.areaid, b.symbolicname as statistical, p_d1_periodid as h1_periodid, p_d1_periodid as d1_periodid, 0 as sum_value
    from (select distinct areaid from dim_iscs order by 1) a
    , (select distinct symbolicname, description from dim_statistical
       where sourceprocessid like 'BSC%' and symbolicname like 'Carts%' order by 1) b
  )
  group by areaid, statistical, d1_periodid
  order by 1,2;

  if dtuples.count > 0 then
    for i in 1..dtuples.count loop
      pipe row ( dcv_throughput_day_tuple
      ( dtuples(i).areaid
      , dtuples(i).statistical
      , dtuples(i).d1_periodid
      , dtuples(i).value_h0
      , dtuples(i).value_h1
      , dtuples(i).value_h2
      , dtuples(i).value_h3
      , dtuples(i).value_h4
      , dtuples(i).value_h5
      , dtuples(i).value_h6
      , dtuples(i).value_h7
      , dtuples(i).value_h8
      , dtuples(i).value_h9
      , dtuples(i).value_h10
      , dtuples(i).value_h11
      , dtuples(i).value_h12
      , dtuples(i).value_h13
      , dtuples(i).value_h14
      , dtuples(i).value_h15
      , dtuples(i).value_h16
      , dtuples(i).value_h17
      , dtuples(i).value_h18
      , dtuples(i).value_h19
      , dtuples(i).value_h20
      , dtuples(i).value_h21
      , dtuples(i).value_h22
      , dtuples(i).value_h23 ) );
    end loop;
  end if;
end;




end dashboard;
/