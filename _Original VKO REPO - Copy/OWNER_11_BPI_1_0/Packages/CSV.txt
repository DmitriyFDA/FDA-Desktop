create or replace package CSV is
function comma_count(p_str in varchar2) return number DETERMINISTIC;
function is_string_in_csv(p_str in varchar2, p_csv in varchar2) return varchar2 DETERMINISTIC;
function string_count_in_csv(p_str in varchar2, p_csv in varchar2) return number DETERMINISTIC;
function tag_count_in_csv(p_str in varchar2, p_csv in varchar2) return number DETERMINISTIC;
function vals(p_csv IN VARCHAR2) RETURN V_TABLE PIPELINED;
function sorted(p_csv IN VARCHAR2) RETURN varchar2 DETERMINISTIC;
function distincted(p_csv IN VARCHAR2) RETURN varchar2 DETERMINISTIC;
function combine_distinct(p_csv1 IN VARCHAR2, p_csv2 IN VARCHAR2) RETURN varchar2 DETERMINISTIC;
function get_first_tag_value_after(p_csv IN VARCHAR2, p_tag IN VARCHAR2, p_after IN VARCHAR2 := '') return varchar2 DETERMINISTIC;
function get_all_tag_values_between(p_csv IN VARCHAR2, p_tag IN VARCHAR2, p_after IN VARCHAR2 := '', p_before IN VARCHAR2 := '') return varchar2 DETERMINISTIC;
end CSV;
/




package body csv is

function comma_count(p_str in varchar2) return number deterministic is
n1 number(9) := 0;
n2 number(9) := 0;
begin
  if p_str is null then return 0; end if;
  n1 := length(p_str);
  n2 := length(replace(p_str, ','));
  return (n1 - n2);
exception when others then
  return -1;
end;





function is_string_in_csv(p_str in varchar2, p_csv in varchar2) return varchar2 deterministic is
l_str varchar2(4000);
l_csv varchar2(32767);
begin
  l_str := trim(replace(replace(p_str, chr(10), ''), chr(13), ''));
  l_csv := trim(replace(replace(p_csv, chr(10), ''), chr(13), ''));
  if (l_str is null) then return 'N'; end if;
  if (l_csv is null) then return 'N';  end if;
  if (l_str = l_csv) then return 'Y';  end if;
  l_str := ','||l_str||',';
  l_csv := ','||l_csv||',';
  if (instr(l_csv, l_str) > 0) then
    return 'Y';
  else
    return 'N';
  end if;
end;





function string_count_in_csv(p_str in varchar2, p_csv in varchar2) return number deterministic is
l_str varchar2(4000);
l_csv varchar2(32767);
l_count number(5) := 0;
n pls_integer;
begin
  l_str := trim(replace(replace(p_str, chr(10), ''), chr(13), ''));
  l_csv := trim(replace(replace(p_csv, chr(10), ''), chr(13), ''));
  if l_str is null then return 0; end if;
  if l_csv is null then return 0;  end if;
  if l_str = l_csv then return 1;  end if;
  l_csv := ','||l_csv||',';
  n := instr(l_csv, l_str);
  while n > 0 loop
    l_count := l_count + 1;
    n := instr(l_csv, l_str, n+1);
  end loop;
  return l_count;
end;










function tag_count_in_csv(p_str in varchar2, p_csv in varchar2) return number deterministic is
l_str varchar2(4000);
l_csv varchar2(32767);
l_count number(5) := 0;
n pls_integer;
begin
  l_str := trim(replace(replace(p_str, chr(10), ''), chr(13), ''));
  l_csv := trim(replace(replace(p_csv, chr(10), ''), chr(13), ''));
  if l_str is null then return 0; end if;
  if l_csv is null then return 0;  end if;
  if l_str = l_csv then return 1;  end if;
  l_str := ','||l_str||'=';
  l_csv := ','||l_csv||',';
  n := instr(l_csv, l_str);
  while n > 0 loop
    l_count := l_count + 1;
    n := instr(l_csv, l_str, n+1);
  end loop;
  return l_count;
end;









function vals(p_csv in varchar2) return v_table pipelined is
l_str varchar2(4000) := '';
l_csv varchar2(32767);
l_count number := 0;
l_offset pls_integer := 1;
l_comma_pos pls_integer := 1;
begin
  l_csv := trim(replace(replace(p_csv, chr(10), ''), chr(13), ''));
  if l_csv is null or l_csv = '' then
    l_comma_pos := 0;
  else
    if substr(l_csv, length(l_csv), 1) != ',' then
      l_csv := l_csv||',';
    end if;
  end if;
  while l_comma_pos > 0 loop
    l_comma_pos := instr(l_csv, ',', l_offset);
    l_count := l_count + 1;
    if l_comma_pos > 0 then
      l_str := trim(substr(l_csv, l_offset, l_comma_pos - l_offset));
      l_str := replace(replace(l_str, chr(10), ''), chr(13), '');
      pipe row ( v_rec ( l_count, l_str) );
      l_offset := l_comma_pos + 1;
    end if;
  end loop;
end;






function sorted(p_csv in varchar2) return varchar2 deterministic is
l_csv varchar2(32767) := '';
begin
  for c_rec in (select val from table(csv.vals(p_csv)) order by 1) loop
    l_csv := l_csv||c_rec.val||',';
  end loop;
  l_csv := substr(l_csv, 1, length(l_csv) - 1); 
  return l_csv;
end;





function distincted(p_csv in varchar2) return varchar2 deterministic is
l_csv varchar2(32767) := '';
begin
  for c_rec in (select distinct val from table(csv.vals(p_csv)) where val is not null) loop
    l_csv := l_csv||c_rec.val||',';
  end loop;
  l_csv := substr(l_csv, 1, length(l_csv) - 1); 
  return l_csv;
end;







function combine_distinct(p_csv1 in varchar2, p_csv2 in varchar2) return varchar2 deterministic is
begin
  return sorted(distincted(p_csv1||','||p_csv2));
end;






function get_first_tag_value_after(p_csv in varchar2, p_tag in varchar2, p_after in varchar2 := '') return varchar2 deterministic is
l_pos_after number := 1;
l_str varchar2(4000) := '';
begin
  if trim(p_after) is not null then
    l_pos_after := instr(p_csv, p_after);
  end if;
  if l_pos_after > 0 then
    for c_rec in (select val from table(csv.vals(substr(p_csv, l_pos_after)))) loop
      if c_rec.val like p_tag||'=%' then
        if l_str is null then
          l_str := trim(replace(c_rec.val, p_tag||'=', ''));
        end if;
      end if;
    end loop;
  end if;
  return l_str;
end;











function get_all_tag_values_between(p_csv in varchar2, p_tag in varchar2, p_after in varchar2 := '', p_before in varchar2 := '') return varchar2 deterministic is
l_pos_after number := 1;
l_pos_before number := length(p_csv);
l_len number := length(p_csv);
l_str varchar2(4000) := '';
begin
  if trim(p_after) is not null then
    l_pos_after := instr(p_csv, p_after);
  end if;
  if trim(p_before) is not null then
    l_pos_before := instr(p_csv, p_before, l_pos_after + length(p_after));
    if l_pos_before > l_pos_after then
      l_len := l_pos_before - l_pos_after;
    end if;
  end if;
  
  if l_pos_after > 0 then
    for c_rec in (select val from table(csv.vals(substr(p_csv, l_pos_after, l_len)))) loop
      
      if c_rec.val like p_tag||'=%' then
        l_str := l_str||trim(replace(c_rec.val, p_tag||'=', ''))||',';
      end if;
    end loop;
  end if;
  l_str := substr(l_str, 1, length(l_str) - 1); 
  return l_str;
end;











end csv;
/