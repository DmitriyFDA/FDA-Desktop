create or replace PACKAGE ACL_APPLICATION_CONTROL IS

G_CON_PACKAGE CONSTANT ACL_CONSTANT.ST_PROC_NAME := 'ACL_Application_Control';

/* ACL_001: To handle a request regarding control of APPLICATION ELEMENTs */
PROCEDURE HANDLE_REQUEST
 (I_AET_ID_CUST IN ACL_APPLICATION_ELEMENTS.ID_CUST%TYPE
 ,I_ACE_ID_CUST IN ACL_AET_CONTROL_REQUEST_TYPES.ID_CUST%TYPE
 ,I_ERROR_DESCRIPTION IN ACL_APPLICATION_PROCESSES.reason_end%TYPE := null
 ,O_SUCCESS OUT BOOLEAN
 );
/* ACL_006: Determine Application Element Status */
PROCEDURE GET_STATUS
 (I_AET_ID_CUST IN ACL_APPLICATION_ELEMENTS.ID_CUST%TYPE
 ,O_ASM_ID_CUST OUT ACL_AET_STATUSES_DOM.ID_CUST%TYPE
 ,O_ERROR_DESCRIPTION OUT ACL_APPLICATION_PROCESSES.REASON_END%TYPE
 );
/* ACL_007: Determine Application Element Status value */
FUNCTION GET_STATUS_VALUE
 (I_AET_ID_CUST IN ACL_APPLICATION_ELEMENTS.ID_CUST%TYPE
 )
 RETURN acl_aet_statuses_dom%rowtype;
/* ACL_011: Perform job task to perform start of application element */
PROCEDURE DO_JOB_TASK
 (I_APS_ID IN ACL_APPLICATION_PROCESSES.ID%TYPE
 ,I_ACT_ID IN ACL_AET_CONTROL_REQUESTS.ID%TYPE
 ,I_PROCEDURE_CALL IN ACL_APPLICATION_ELEMENTS.PROCEDURE_CALL%TYPE
 );
/* ACL_018: Commit, then check whether current process (job) has to stop */
PROCEDURE COMMIT_AND_CHECK_HALT_SIGNAL;
/* ACL_019: Rollback,then check whether current process (job) has to stop */
PROCEDURE ROLLBACK_AND_CHECK_HALT_SIGNAL;
/* ACL_020: To determine the operational status of the APPLICATION */
FUNCTION DETERM_APP_OPERATIONAL_STATUS
 (I_AET_ID_CUST IN ACL_APPLICATION_ELEMENTS.ID_CUST%TYPE
 )
 RETURN BOOLEAN;
/* ACL_021: To check whether the current process (job) has to stop */
PROCEDURE CHECK_HALT_SIGNAL;
/* ACL_036: Is the session indicated still alive? */
FUNCTION SESSION_ALIVE
 (I_UNIQUE_SESSION_ID IN ACL_CONSTANT.st_unique_session_id
 )
 RETURN BOOLEAN;
/* ACL_040: Is the session indicated still alive? */
FUNCTION IS_SESSION_ALIVE
 (I_UNIQUE_SESSION_ID IN ACL_CONSTANT.st_unique_session_id
 )
 RETURN VARCHAR2;
/* ACL_041: Get application element status (for use in queries etc.) */
FUNCTION SELECT_STATUS
 (I_AET_ID_CUST IN ACL_APPLICATION_ELEMENTS.ID_CUST%TYPE
 )
 RETURN acl_aet_statuses_dom.id_cust%type;
/* ACL_042:Invoke an ACL function; to be called by App.Monitoring console */
FUNCTION INVOKE
 (VERB IN ACL_AET_CONTROL_REQUEST_TYPES.ID_CUST%TYPE
 ,OBJECT_NAME IN ACL_CONSTANT.st_AppMon_ObjectName := NULL
 )
 RETURN ACL_CONSTANT.st_AppMon_Return_Value;
/* ACL_044: List Application Elements */
FUNCTION LIST_APP_ELEMENTS
 RETURN VARCHAR2;
/* ACL_045 Execute an APPLICATION ELEMENT's Stop procedure call */
PROCEDURE EXEC_PROCEDURE_CALL
 (I_AET_ID_CUST IN ACL_APPLICATION_ELEMENTS.ID_CUST%TYPE
 ,I_PROCEDURE_CALL IN VARCHAR2
 );
/* ACL_046: Check for existence of scheduler job */
FUNCTION SCHEDULER_JOB_EXISTS
 (I_JOB_NAME ACL_APPLICATION_PROCESSES.JOB_NAME%TYPE
 )
 RETURN BOOLEAN;
/* ACL_050: Update Application process statistics */
PROCEDURE UPDATE_APS_STATS;
/* ACL_051: register process execution */
PROCEDURE REGISTER_PROCESS;

/* ACL_052: Check whether current session is a job */
FUNCTION current_session_is_job
 RETURN BOOLEAN;

/* ACL_0330: Set Detailed State */
PROCEDURE SET_DETAILED_STATE
 (I_DSD_NAME  IN ACL_DETAILED_STATE_DEFINITIONS.NAME%TYPE
 ,I_AET_ID    IN ACL_AET_DETAILED_STATES.AET_ID%TYPE
 );
 
/* ACL_0331: Clear Detailed State */
PROCEDURE CLEAR_DETAILED_STATE
 (I_DSD_NAME  IN ACL_DETAILED_STATE_DEFINITIONS.NAME%TYPE
 ,I_AET_ID    IN ACL_AET_DETAILED_STATES.AET_ID%TYPE
 );

/* ACL_0325: Check if all auto jobs are started on the db */
FUNCTION all_auto_jobs_started RETURN VARCHAR2;

END ACL_APPLICATION_CONTROL;
/



package body acl_application_control is


g_rt_aps_current_process acl_application_processes%rowtype;

g_act_id_stopping_request acl_aet_control_requests.id%type;

g_app_not_operational_logged boolean := false;

g_select_status_without_change boolean := false;


procedure assemble_request_parameters
 (i_aet_id_cust in acl_application_elements.id_cust%type
 ,i_ace_id_cust in acl_aet_control_request_types.id_cust%type
 ,o_rt_aet out acl_application_elements%rowtype
 ,o_rt_ace out acl_aet_control_request_types%rowtype
 );

procedure issue_aet_control_request
 (i_rt_aet in acl_application_elements%rowtype
 ,i_rt_ace in acl_aet_control_request_types%rowtype
 ,i_act_id in acl_aet_control_requests.id%type
 ,i_error_description in acl_application_processes.reason_end%type := null
 );

procedure start_job_aet
 (i_rt_aet in acl_application_elements%rowtype
 ,i_act_id in acl_aet_control_requests.id%type
 );

procedure start_non_job_aet
 (i_rt_aet in acl_application_elements%rowtype
 ,i_act_id in acl_aet_control_requests.id%type
 );

procedure preregister_process
 (i_rt_aet in acl_application_elements%rowtype
 ,i_act_id in acl_aet_control_requests.id%type
 ,o_rt_aps out acl_application_processes%rowtype
 );

procedure register_process
 (i_aps_id in acl_application_processes.id%type := null
 );

procedure deregister_process
 (i_act_id in acl_aet_control_requests.id%type := null
 ,i_aps_id in acl_application_processes.id%type
 ,i_reason_end in acl_application_processes.reason_end%type
 ,i_ind_finished_normally in acl_application_processes.ind_finished_normally%type := acl_constant.get_yesno_no
 );

function get_job_record
 (i_job_name in acl_user_jobs_v.job_name%type
 )
 return acl_user_jobs_v%rowtype;

function get_unique_session_identifier
 return acl_constant.st_unique_session_id;

procedure get_session_identifiers
 (i_audsid in acl_sessions_v.audsid%type := sys_context('userenv', 'sessionid') 
 ,i_db_instance in acl_sessions_v.inst_id%type := sys_context('userenv', 'instance') 
 ,io_sid in out acl_sessions_v.sid%type
 ,o_serial# out acl_sessions_v.serial#%type
 ,o_program out acl_sessions_v.program%type
 );

procedure submit_job
 (i_job_plsql_block in acl_application_elements.procedure_call%type
 ,i_rt_aet in acl_application_elements%rowtype
 ,i_aps_id in acl_application_processes.id%type
 ,i_act_id in acl_aet_control_requests.id%type
 );

procedure check_halt_signal_internal
 (i_aet_id in acl_application_elements.id%type := null
 );

function get_latest_request_type
 (i_rt_aet in acl_application_elements%rowtype
 )
 return acl_aet_control_requests%rowtype;

function get_job_process_status
 (i_rt_aet in acl_application_elements%rowtype
 )
 return acl_aet_statuses_dom%rowtype;

function get_switch_status
 (i_rt_aet in acl_application_elements%rowtype
 )
 return acl_aet_statuses_dom%rowtype;

procedure stop_app_element
 (i_rt_aet in acl_application_elements%rowtype
 ,i_act_id in acl_aet_control_requests.id%type
 );

procedure stop_switch
 (i_rt_aet in acl_application_elements%rowtype
 ,i_act_id in acl_aet_control_requests.id%type
 );

procedure stop_job
 (i_rt_aet in acl_application_elements%rowtype
 ,i_act_id in acl_aet_control_requests.id%type
 );

procedure remove_job
 (i_job_name in acl_application_processes.job_name%type
 );

procedure start_switch
 (i_rt_aet in acl_application_elements%rowtype
 ,i_act_id in acl_aet_control_requests.id%type
 );

procedure start_application
 (i_act_id in acl_aet_control_requests.id%type
 );

procedure stop_application
 (i_act_id in acl_aet_control_requests.id%type
 );

procedure abort_app_element
 (i_rt_aet in acl_application_elements%rowtype
 ,i_act_id in acl_aet_control_requests.id%type
 ,i_error_description in acl_application_processes.reason_end%type := null
 );

procedure abort_switch
 (i_rt_aet in acl_application_elements%rowtype
 ,i_act_id in acl_aet_control_requests.id%type
 );

procedure abort_job
 (i_rt_aet in acl_application_elements%rowtype
 ,i_act_id in acl_aet_control_requests.id%type
 ,i_error_description in acl_application_processes.reason_end%type := null
 );

procedure kill_process_session
 (i_rt_aps in acl_application_processes%rowtype
 ,i_act_id in acl_aet_control_requests.id%type
 ,i_ind_allow_immediate_abort in acl_application_elements.ind_allow_immediate_abort%type
 );

procedure abort_application
 (i_act_id in acl_aet_control_requests.id%type
 ,i_error_description in acl_application_processes.reason_end%type := null
 );

function get_objectname_property_value
 (i_object_name in acl_constant.st_appmon_objectname
 ,i_property in acl_constant.st_appmon_objectname
 )
 return acl_constant.st_appmon_return_value;
procedure wait_until_end_of_execution
 (i_rt_aet in acl_application_elements%rowtype
 ,i_rt_aps in acl_application_processes%rowtype
 ,i_wait_interval in acl_parameter_values.value%type
 ,i_wait_timeout in acl_parameter_values.value%type
 );

procedure update_aps_stats
 (i_aps_id in acl_application_processes.id%type
 );

function get_job_process_status_no_chng
 (i_rt_aet in acl_application_elements%rowtype
 )
 return acl_aet_statuses_dom%rowtype;



procedure handle_request
 (i_aet_id_cust in acl_application_elements.id_cust%type
 ,i_ace_id_cust in acl_aet_control_request_types.id_cust%type
 ,i_error_description in acl_application_processes.reason_end%type := null
 ,o_success out boolean
 )
 is

l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.Handle_request';

l_act_upd_count pls_integer;

l_param_error boolean := false;

l_rt_act acl_aet_control_requests%rowtype;

l_rt_aet acl_application_elements%rowtype;

l_rt_ace acl_aet_control_request_types%rowtype;
pragma autonomous_transaction;











































begin
   viu_module.enter_module( i_module          => l_con_proc_name
                          , i_debug_info      => '  i_aet_id_cust = "' || i_aet_id_cust || '" ' || 'i_ace_id_cust = "' || i_ace_id_cust
                                                 || '"  i_error_description = "'||i_error_description||'"'
                          );
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   l_rt_act.element       := i_aet_id_cust;
   l_rt_act.request       := i_ace_id_cust;
   l_rt_act.date_created  := acl_common.default_timestamp;
   acl_act_tapi_pck.act_insert_row( io_rt_act      => l_rt_act );
   
   
   
   
   

   commit;
   
   
   acl_application_control.assemble_request_parameters( i_aet_id_cust      => i_aet_id_cust
                                                      , i_ace_id_cust      => i_ace_id_cust
                                                      , o_rt_aet           => l_rt_aet
                                                      , o_rt_ace           => l_rt_ace
                                                      );
   
   
   
   
   
   
   
   
   
   
   
   
   
   l_rt_act.aet_id        := l_rt_aet.id;
   l_rt_act.ace_id        := l_rt_ace.id;
   l_act_upd_count        := acl_act_tapi_pck.act_update_row( i_act_id       => l_rt_act.id
                                                            , io_rt_act      => l_rt_act
                                                            );
   
   
   
   
   acl_application_control.issue_aet_control_request( i_rt_aet            => l_rt_aet
                                                    , i_rt_ace            => l_rt_ace
                                                    , i_act_id            => l_rt_act.id
                                                    , i_error_description => i_error_description
                                                    );

   
   
   
   
   if l_rt_ace.id in (acl_constant.g_con_ace_name_start
                     ,acl_constant.g_con_ace_name_stop
                     ,acl_constant.g_con_ace_name_abort
                     )
   then
      acl_application_control.clear_detailed_state(i_dsd_name  => null
                                                  ,i_aet_id    => l_rt_aet.id
                                                   );
   end if;
   
   
   commit;
   
   
   o_success              := true;

   viu_module.leave_module( i_module      => l_con_proc_name );

exception
   
   
   
   
   when others
   then
   
   
   
   
   
   
   
   
   
      rollback;   
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );
      
      
      
      viu_info.handle_info;
      


end handle_request;

procedure assemble_request_parameters
 (i_aet_id_cust in acl_application_elements.id_cust%type
 ,i_ace_id_cust in acl_aet_control_request_types.id_cust%type
 ,o_rt_aet out acl_application_elements%rowtype
 ,o_rt_ace out acl_aet_control_request_types%rowtype
 )
 is

l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.Assemble_Request_Parameters';


l_found boolean;







































begin
   viu_module.enter_module( i_module          => l_con_proc_name
                          , i_debug_info      => 'i_aet_id_cust = "' || i_aet_id_cust || '" ' || 'i_ace_id_cust = "' || i_ace_id_cust || '"'
                          );
   
   
   

   
   
   
   
   
   
   
   
   
   
   l_found  := acl_ace_tapi_pck.ace_select_row_uk2( i_ace_id_cust      => i_ace_id_cust
                                                  , o_rt_ace           => o_rt_ace
                                                  );

   if not l_found
   then
      viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_aclunknownapprequesttype
                         , i_calling_procedure      => l_con_proc_name
                         , i_severity               => viu_info.c_severity_error
                         , i_info_arguments         => i_ace_id_cust
                         , i_additional_data        => 'i_aet_id_cust = '||i_aet_id_cust
                         );
   end if;

   
   
   if     o_rt_ace.id = acl_constant.g_con_ace_name_list_applicatio
   then
      
      
      if not i_aet_id_cust is null
      then
         viu_info.operator_info( i_ifo_nr                 => viu_constant.c_ifo_aclunexpectedparamvalue
                               , i_calling_procedure      => l_con_proc_name
                               , i_severity               => viu_info.severity_error
                               , i_info_arguments         =>    'i_aet_id_cust'
                                                             || '##'
                                                             || l_con_proc_name
                                                             || '##'
                                                             || i_aet_id_cust
                                                             || '##'
                                                             || 'Value must be NULL'
                               , i_additional_data        => '  i_aet_id_cust = "' || i_aet_id_cust || '" ' || 'i_ace_id_cust = "' || i_ace_id_cust || '"'
                                );
      end if;
   
   
            
            
   
   
   else
      
      
      
      
      
      
      
      
      
      l_found  := acl_aet_tapi_pck.aet_select_row_uk2( i_aet_id_cust      => i_aet_id_cust
                                                     , o_rt_aet           => o_rt_aet
                                                     );

      if not l_found
      then
         viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_aclunknownappelement
                            , i_calling_procedure      => l_con_proc_name
                            , i_severity               => viu_info.c_severity_error
                            , i_info_arguments         => i_aet_id_cust
                            , i_additional_data        => 'i_aet_id_cust = "' || i_aet_id_cust || '" ' || 'i_ace_id_cust = "' || i_ace_id_cust || '"'
                            );
      end if;

      
      
      
      
      
      
      
      
      
      
      
      
      
      if     o_rt_ace.id = acl_constant.g_con_ace_name_get_status
         and o_rt_aet.aet_type = acl_constant.g_con_aet_type_application
      then
         viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_aclillegalapprequesttype
                            , i_calling_procedure      => l_con_proc_name
                            , i_severity               => viu_info.c_severity_error
                            , i_info_arguments         => i_ace_id_cust || '##' || i_aet_id_cust
                            , i_additional_data        => 'i_aet_id_cust = "' || i_aet_id_cust || '" ' || 'i_ace_id_cust = "' || i_ace_id_cust || '"'
                            );
      end if;

   end if;
   
   
   
         
         
   
   
   viu_module.leave_module( i_module      => l_con_proc_name );

exception
   when others
   then
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );
      
      
      
      viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
      
end assemble_request_parameters;

procedure issue_aet_control_request
 (i_rt_aet in acl_application_elements%rowtype
 ,i_rt_ace in acl_aet_control_request_types%rowtype
 ,i_act_id in acl_aet_control_requests.id%type
 ,i_error_description in acl_application_processes.reason_end%type := null
 )
 is

l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.Issue_AET_Control_request';


l_is_application boolean;

l_unexpected_request_type boolean;













































begin
   viu_module.enter_module( i_module          => l_con_proc_name
                          , i_debug_info      =>    'i_rt_ace.id_cust = "'
                                                 || i_rt_ace.id_cust
                                                 || '"  i_rt_ace.id_cust = "'
                                                 || i_rt_ace.id_cust
                                                 || '"  i_act_id = '
                                                 || to_char( i_act_id )
                                                 || '"  i_error_description = "'||i_error_description||'"'
                          );
   
   
   
   
   acl_aet_tapi_pck.aet_lock_row( i_aet_id      => i_rt_aet.id );
   
   
   
   
   l_is_application  := ( i_rt_aet.aet_type = acl_constant.g_con_aet_type_application );

   
   
   
   
   
   
      
      
   
   
   
   
   
   
   

   
   viu_info.operator_info( i_ifo_nr                 => viu_constant.c_ifo_aclrequestissued
                         , i_calling_procedure      => l_con_proc_name
                         , i_severity               => viu_info.severity_notification
                         , i_info_arguments         =>    i_rt_ace.name
                                                       || '##'
                                                       || i_rt_aet.id_cust
                                                       || '##'
                                                       || i_rt_aet.name
                                                       || '##'
                                                       || to_char( i_act_id)
                         , i_additional_data        => 'i_error_description = "'||i_error_description||'"'
                         );


   if l_is_application
   then   
      
      
      <<application_request>>
      case i_rt_ace.id
          
      when acl_constant.g_con_ace_name_start
      then
         acl_application_control.start_non_job_aet( i_rt_aet      => i_rt_aet
                                                  , i_act_id      => i_act_id
                                                  );   
      
      
      
      when acl_constant.g_con_ace_name_stop
      then
         
         acl_application_control.stop_application( i_act_id => i_act_id);
      
      
      
      when acl_constant.g_con_ace_name_abort
      then
         
         acl_application_control.abort_application( i_act_id => i_act_id
                                                  , i_error_description => i_error_description
                                                  );
      
      
      else
            l_unexpected_request_type  := true;
      end case application_request;   
   
   
   else   
          

      if i_rt_aet.aet_type = acl_constant.g_con_aet_type_background_job   
      then
         <<appl_element_job_request>>
         case i_rt_ace.id
               
            when acl_constant.g_con_ace_name_start
            then
               
               acl_application_control.start_job_aet( i_rt_aet      => i_rt_aet
                                                    , i_act_id      => i_act_id
                                                    );   
               
               
               
            when acl_constant.g_con_ace_name_stop
            then
               
               acl_application_control.stop_app_element( i_rt_aet      => i_rt_aet
                                                       , i_act_id      => i_act_id
                                                       );
               
               
               
            when acl_constant.g_con_ace_name_abort
            then
               
               acl_application_control.abort_app_element( i_rt_aet            => i_rt_aet
                                                        , i_act_id            => i_act_id
                                                        , i_error_description => i_error_description
                                                        );
            else
               l_unexpected_request_type  := true;
         end case appl_element_job_request;   
         
         

     elsif i_rt_aet.aet_type = acl_constant.g_con_aet_type_switch
     then
         
         <<appl_element_switch_request>>
         case i_rt_ace.id
               
            when acl_constant.g_con_ace_name_start
            then
               
               acl_application_control.start_non_job_aet( i_rt_aet      => i_rt_aet
                                                        , i_act_id      => i_act_id
                                                        );   
            
            
            
            when acl_constant.g_con_ace_name_stop
            then
               
               acl_application_control.stop_app_element( i_rt_aet      => i_rt_aet
                                                       , i_act_id      => i_act_id
                                                       );
            
            
            
            when acl_constant.g_con_ace_name_abort
            then
               
               acl_application_control.abort_app_element( i_rt_aet      => i_rt_aet
                                                        , i_act_id      => i_act_id
                                                        );
            else
               l_unexpected_request_type  := true;
         end case appl_element_switch_request;   
      else
         
         viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_aclwrongaettype
                            , i_calling_procedure      => l_con_proc_name
                            , i_severity               => viu_info.c_severity_error
                            , i_info_arguments         => i_rt_aet.aet_type
                            , i_additional_data        => 'i_rt_ace.ID: ' || to_char( i_rt_ace.id )
                                                          || '. i_rt_aet.id_cust: ' || i_rt_aet.id_cust
                            );
      end if;
   
   
   end if;

   
   
   
   
   
   
   
   
   
   if l_unexpected_request_type
   then
      viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_aclunexpectedrequesttype
                         , i_calling_procedure      => l_con_proc_name
                         , i_severity               => viu_info.c_severity_error
                         , i_info_arguments         =>    i_rt_ace.id_cust
                                                       || '##'
                                                       || i_rt_aet.id_cust
                         , i_additional_data        =>    'i_act_id = '
                                                       || to_char( i_act_id )
                                                       || '"  i_error_description = "'||i_error_description||'"'
                         );
   end if;

   
   viu_module.leave_module( i_module      => l_con_proc_name );

exception
   when others
   then
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );
      
      
      
      viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
      
end issue_aet_control_request;

procedure start_job_aet
 (i_rt_aet in acl_application_elements%rowtype
 ,i_act_id in acl_aet_control_requests.id%type
 )
 is

l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.Start_Job_AET';


l_job_task acl_user_jobs_v.job_action%type;

l_rt_asm acl_aet_statuses_dom%rowtype;

l_rt_aps acl_application_processes%rowtype;

l_found boolean;

l_upd_count pls_integer;

l_sqlerrm varchar2(4000);
   






























begin
   viu_module.enter_module( i_module     => l_con_proc_name
                          , i_debug_info => 'i_rt_aet.id_cust = "' || i_rt_aet.id_cust || '"  i_act_id = "' || to_char( i_act_id ) || '"'
                          );

   

   
   l_rt_asm  := get_status_value( i_aet_id_cust => i_rt_aet.id_cust );

   
   if l_rt_asm.id = acl_constant.g_con_asm_name_started
   then
      
      
      viu_info.operator_info( i_ifo_nr            => viu_constant.c_ifo_aclappelementrunsalready
                            , i_calling_procedure => l_con_proc_name
                            , i_severity          => viu_info.c_severity_notification
                            , i_info_arguments    => i_rt_aet.id_cust
                            , i_additional_data   =>    'i_rt_aet.id_cust = "' || i_rt_aet.id_cust
                                                     || '"  i_act_id = "' || to_char( i_act_id ) || '"'
                            );
   else
      
      acl_application_control.preregister_process( i_rt_aet => i_rt_aet
                                                 , i_act_id => i_act_id
                                                 , o_rt_aps => l_rt_aps
                                                 );

      l_job_task  := 'BEGIN '|| i_rt_aet.procedure_call|| ' END;';

      
      
      commit;

      begin
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         

         execute immediate 'BEGIN RETURN; ' || i_rt_aet.procedure_call || ' END;';

         
         
         acl_application_control.exec_procedure_call( i_aet_id_cust    => i_rt_aet.id_cust
                                                    , i_procedure_call => i_rt_aet.start_procedure_call
                                                    );

         
         l_found              := acl_aps_tapi_pck.aps_select_row_upd( i_aps_id => l_rt_aps.id
                                                                    , o_rt_aps => l_rt_aps
                                                                    );

         
         acl_application_control.clear_detailed_state( i_dsd_name => null 
                                                     , i_aet_id   => i_rt_aet.id
                                                     );

         
         acl_application_control.submit_job( i_job_plsql_block => l_job_task
                                           , i_rt_aet          => i_rt_aet
                                           , i_aps_id          => l_rt_aps.id
                                           , i_act_id          => i_act_id
                                           );

      exception
         when others
         then

            l_sqlerrm := sqlerrm;

            viu_info.handle_info;

            rollback; 
                      

            
            
            

            
            viu_info.operator_info(  i_ifo_nr            => viu_constant.c_ifo_acldebuginfo
                                   , i_calling_procedure => l_con_proc_name
                                   , i_severity          => viu_info.severity_error
                                   , i_additional_data   => 'Procedure call = "'||i_rt_aet.procedure_call
                                                            ||'" i_aps_id = "'||to_char(l_rt_aps.id)
                                                            ||'" i_act_id = "'||to_char(i_act_id)
                                                            ||'" SQLERRM = "'||l_sqlerrm||'"'
                                  );

            acl_application_control.deregister_process( i_aps_id     => l_rt_aps.id
                                                      , i_reason_end => acl_constant.g_con_aps_reason_startfailed
                                                      );
            
            commit;

            
            l_found := acl_aps_tapi_pck.aps_select_row( i_aps_id => l_rt_aps.id
                                                      , o_rt_aps => l_rt_aps
                                                      );
      end;
      
      
      
      l_upd_count := acl_aps_tapi_pck.aps_update_row( i_aps_id  => l_rt_aps.id
                                                    , io_rt_aps => l_rt_aps
                                                    );
   end if;

   viu_module.leave_module( i_module => l_con_proc_name );
exception
   when others
   then
      viu_module.leave_module( i_module     => l_con_proc_name
                             , i_debug_info => sqlerrm
                             );
      
      
      viu_info.raise_info( i_calling_procedure => l_con_proc_name );
      
end start_job_aet;

procedure start_non_job_aet
 (i_rt_aet in acl_application_elements%rowtype
 ,i_act_id in acl_aet_control_requests.id%type
 )
 is

l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.Start_non_job_AET';


l_rt_asm acl_aet_statuses_dom%rowtype;
   




































begin
   viu_module.enter_module( i_module          => l_con_proc_name
                          , i_debug_info      => 'i_rt_aet.id_cust = "' || i_rt_aet.id_cust || '"  i_act_id = "' || to_char( i_act_id ) || '"'
                          );















   case i_rt_aet.aet_type
      when acl_constant.g_con_aet_type_switch   
      then
         
         acl_application_control.start_switch( i_rt_aet      => i_rt_aet
                                             , i_act_id      => i_act_id
                                             );
      
   when acl_constant.g_con_aet_type_application   
      then
         acl_application_control.start_application( i_act_id      => i_act_id );
   end case;

   
   viu_module.leave_module( i_module      => l_con_proc_name );

exception
   when others
   then
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );
      
      
      viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
      
end start_non_job_aet;

procedure get_status
 (i_aet_id_cust in acl_application_elements.id_cust%type
 ,o_asm_id_cust out acl_aet_statuses_dom.id_cust%type
 ,o_error_description out acl_application_processes.reason_end%type
 )
 is


cursor c_aps_latest_of_aet
 (i_aet_id in acl_application_processes.aet_id%type
 )
 is
select *
from   (select   *
        from     acl_application_processes aps
        where    aps.aet_id = i_aet_id
        order by aps.date_created desc
               , aps.id           desc
       )
where rownum = 1 
;

l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.Get_Status';


l_found boolean;

l_rt_ace acl_aet_control_request_types%rowtype;

l_rt_aet acl_application_elements%rowtype;

l_rt_asm acl_aet_statuses_dom%rowtype;

l_rt_aps_latest_of_aet c_aps_latest_of_aet%rowtype;
   




































begin
   viu_module.enter_module( i_module          => l_con_proc_name
                          , i_debug_info      => '  i_aet_id_cust = "' || i_aet_id_cust || '"'
                          );
   
   
   
   
   
   
   
   
   
   
   
   
   
   g_select_status_without_change := true;

   l_rt_asm := acl_application_control.get_status_value( i_aet_id_cust => i_aet_id_cust );

   g_select_status_without_change := false;
   
   
   
   
   
   
   
   
   
   
   
   if l_rt_asm.id = acl_constant.g_con_asm_name_error
   then
      l_found := acl_aet_tapi_pck.aet_select_row_uk2(  i_aet_id_cust => i_aet_id_cust
                                                     , o_rt_aet      => l_rt_aet
                                                    );

      open  c_aps_latest_of_aet ( i_aet_id => l_rt_aet.id);
      fetch c_aps_latest_of_aet into l_rt_aps_latest_of_aet;
      close c_aps_latest_of_aet;

      o_error_description := l_rt_aps_latest_of_aet.reason_end;

   end if;
   
   
   
   o_asm_id_cust  := l_rt_asm.id_cust;
   
   
   viu_module.leave_module( i_module      => l_con_proc_name );

exception
   when others
   then
      
      
      
      
      
      
      
      
      
      
      
      
      o_asm_id_cust       := null;
      o_error_description := null;
      
      g_select_status_without_change := false;
      
      if c_aps_latest_of_aet%isopen
      then
         close c_aps_latest_of_aet;
      end if;
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );
      
      
      
      viu_info.handle_info;

end get_status;

function get_status_value
 (i_aet_id_cust in acl_application_elements.id_cust%type
 )
 return acl_aet_statuses_dom%rowtype
 is

l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.Get_Status_Value';


l_asm_id acl_aet_statuses_dom.id%type;

l_rt_ace acl_aet_control_request_types%rowtype;

l_rt_aet acl_application_elements%rowtype;

l_rt_asm acl_aet_statuses_dom%rowtype;

l_found boolean;
pragma autonomous_transaction;

   







































begin
   viu_module.enter_module( i_module          => l_con_proc_name
                          , i_debug_info      => '  i_aet_id_cust = "' || i_aet_id_cust || '"'
                          );

   
   
   
   
   
   
   
   
   
   


   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   

   
   l_found        := acl_ace_tapi_pck.ace_select_row( i_ace_id      => acl_constant.g_con_ace_name_get_status
                                                    , o_rt_ace      => l_rt_ace
                                                    );
   
   acl_application_control.assemble_request_parameters( i_aet_id_cust      => i_aet_id_cust
                                                      , i_ace_id_cust      => l_rt_ace.id_cust
                                                      , o_rt_aet           => l_rt_aet
                                                      , o_rt_ace           => l_rt_ace
                                                      );
   
   
   
   
   
   
   
   
   

   
   
   
   
   
   case l_rt_aet.aet_type
      
   when acl_constant.g_con_aet_type_switch
      then
         l_rt_asm  := acl_application_control.get_switch_status( i_rt_aet => l_rt_aet );
      
   when acl_constant.g_con_aet_type_background_job
   then
      if g_select_status_without_change
      then
         l_rt_asm  := acl_application_control.get_job_process_status_no_chng( i_rt_aet => l_rt_aet );
      else
         l_rt_asm  := acl_application_control.get_job_process_status( i_rt_aet => l_rt_aet );
      end if;
   end case;

   
   
   
   
      
   if l_rt_asm.id is null
   then
      l_asm_id  := acl_constant.g_con_asm_name_stopped;
      l_found   := acl_asm_tapi_pck.asm_select_row( i_asm_id      => l_asm_id
                                                  , o_rt_asm      => l_rt_asm
                                                  );

      
      if not l_found
      then
         viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_aclstatusnotfound
                            , i_calling_procedure      => l_con_proc_name
                            , i_severity               => viu_info.severity_error
                            , i_info_arguments         => to_char( l_asm_id )
                            , i_additional_data        => '  i_aet_id_cust = "' || i_aet_id_cust || '"'
                            );
      end if;
   
   end if;

   
   viu_module.leave_module( i_module      => l_con_proc_name );
   
   
   commit;
   
   return l_rt_asm;

exception
   when others
   then
      rollback; 
      
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );
      
      
      
      viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
end get_status_value;

procedure preregister_process
 (i_rt_aet in acl_application_elements%rowtype
 ,i_act_id in acl_aet_control_requests.id%type
 ,o_rt_aps out acl_application_processes%rowtype
 )
 is

l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.PreRegister_Process';
   






























begin
   viu_module.enter_module( i_module          => l_con_proc_name
                          , i_debug_info      => 'i_rt_aet.id_cust = "' || i_rt_aet.id_cust || '"  i_act_id = "' || to_char( i_act_id ) || '"'
                          );
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   o_rt_aps.aet_id               := i_rt_aet.id;
   o_rt_aps.job_name             := i_rt_aet.name;
   o_rt_aps.act_id_initiated_by  := i_act_id;
   o_rt_aps.ind_registered       := acl_constant.g_con_yesno_no;
   o_rt_aps.ind_controlled       := acl_constant.g_con_yesno_yes;
   o_rt_aps.date_created         := acl_common.default_timestamp;
   o_rt_aps.date_modified        := acl_common.default_timestamp;
   o_rt_aps.status               := acl_constant.g_con_aps_status_preregistered;
   
   acl_aps_tapi_pck.aps_insert_row( io_rt_aps      => o_rt_aps );
   
   viu_module.leave_module( i_module      => l_con_proc_name );

exception
   when others
   then
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );
      
      
      
      viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
      
end preregister_process;

procedure register_process
 (i_aps_id in acl_application_processes.id%type := null
 )
 is

l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.Register_Process';


l_time_of_first_execution acl_application_processes.executed_first_time%type;

l_found boolean;

l_upd_count pls_integer;

l_rt_ujbv acl_user_jobs_v%rowtype;

l_rt_aet acl_application_elements%rowtype;
   










































begin
   viu_module.enter_module( i_module          => l_con_proc_name
                          , i_debug_info      => 'i_aps_id = "' || to_char( i_aps_id ) || '"'
                          );









   
   
   
   
   
   
   
   

   







   l_found := acl_aps_tapi_pck.aps_select_row_upd( i_aps_id      => i_aps_id
                                                 , o_rt_aps      => g_rt_aps_current_process
                                                 );

   if    ( not l_found )
      or g_rt_aps_current_process.status = acl_constant.g_con_aps_status_deregistered
   then
      viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_aclappprocessnotfound
                         , i_calling_procedure      => l_con_proc_name
                         , i_severity               => viu_info.c_severity_error
                         , i_info_arguments         => to_char( i_aps_id )
                         );
   end if;

   
   l_found := acl_aet_tapi_pck.aet_select_row( i_aet_id      => g_rt_aps_current_process.aet_id
                                             , o_rt_aet      => l_rt_aet
                                             );
   
   
   
   
   
   
   
   
   
   
   
   
   
   

   
   
   
   

   
   

   
   
   
   l_time_of_first_execution := nvl( g_rt_aps_current_process.executed_first_time
                                   , acl_common.default_timestamp
                                   );

   
   select csnv.module
        , csnv.os_user
        , csnv.proxy_user
        , csnv.proxy_userid
        , csnv.session_user                                   database_user
        , csnv.session_userid
        , csnv.audsid
        , csnv.external_name
        , csnv.isdba
        , csnv.host
        , csnv.terminal
        , csnv.ip_address
        , csnv.authentication_type     
        , csnv.authentication_method
        , csnv.instance
        , nvl( csnv.client_info
             , l_rt_aet.name
             )                                                application_info
        , acl_common.default_timestamp                        date_modified
        , l_time_of_first_execution                           executed_first_time
        , acl_common.default_timestamp                        timestamp_latest_execution
        , acl_constant.g_con_yesno_yes                        ind_registered
        , acl_constant.g_con_yesno_yes                        ind_controlled
        , acl_constant.g_con_yesno_no                         ind_job_terminated
        , acl_constant.g_con_aps_status_registered            status
        , to_timestamp( null )                                stopped
        , to_timestamp( null )                                aborted
        , ''                                                  ind_dead
        , ''                                                  reason_end
   into   g_rt_aps_current_process.module
        , g_rt_aps_current_process.os_user
        , g_rt_aps_current_process.proxy_user
        , g_rt_aps_current_process.proxy_userid
        , g_rt_aps_current_process.database_user
        , g_rt_aps_current_process.session_userid
        , g_rt_aps_current_process.audsid
        , g_rt_aps_current_process.external_name
        , g_rt_aps_current_process.ind_dba
        , g_rt_aps_current_process.host
        , g_rt_aps_current_process.terminal
        , g_rt_aps_current_process.ip_address
        , g_rt_aps_current_process.authentication_type   
        , g_rt_aps_current_process.authentication_method
        , g_rt_aps_current_process.db_instance
        , g_rt_aps_current_process.application_info
        , g_rt_aps_current_process.date_modified
        , g_rt_aps_current_process.executed_first_time
        , g_rt_aps_current_process.timestamp_latest_execution
        , g_rt_aps_current_process.ind_registered
        , g_rt_aps_current_process.ind_controlled
        , g_rt_aps_current_process.ind_job_terminated
        , g_rt_aps_current_process.status
        , g_rt_aps_current_process.stopped
        , g_rt_aps_current_process.aborted
        , g_rt_aps_current_process.ind_dead
        , g_rt_aps_current_process.reason_end
   from   acl_current_session_v  csnv;

   
   l_rt_ujbv  := acl_application_control.get_job_record( i_job_name => g_rt_aps_current_process.job_name );

   
   
   
   if l_rt_ujbv.job_name is null
   then
      viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_acljobretrievalfailed
                         , i_calling_procedure      => l_con_proc_name
                         , i_severity               => viu_info.c_severity_error
                         , i_info_arguments         =>    to_char( g_rt_aps_current_process.job_name )
                                                       || '##'
                                                       || to_char( g_rt_aps_current_process.db_instance )
                         , i_additional_data        => 'i_aps_id = "' || to_char( i_aps_id ) || '"'
                         );
   else
      g_rt_aps_current_process.job_block  := l_rt_ujbv.job_action;
   end if;

   
   
   
   
   g_rt_aps_current_process.unique_session_id  := acl_application_control.get_unique_session_identifier;
   
   
   
   
   
   
   g_rt_aps_current_process.sid                := null;
   g_rt_aps_current_process.audsid             := null;
   g_rt_aps_current_process.db_instance        := null;
   
   acl_application_control.get_session_identifiers( i_audsid           => g_rt_aps_current_process.audsid
                                                  , i_db_instance      => g_rt_aps_current_process.db_instance
                                                  , io_sid             => g_rt_aps_current_process.sid
                                                  , o_serial#          => g_rt_aps_current_process.serial#
                                                  , o_program          => g_rt_aps_current_process.program
                                                  );
   
   
   
   l_upd_count := acl_aps_tapi_pck.aps_update_row ( i_aps_id       => i_aps_id
                                                  , io_rt_aps      => g_rt_aps_current_process
                                                  );

   
   
   
   
   
   
   
   
   
   if l_upd_count = 0
   then
      
      viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_updatefailed
                         , i_calling_procedure      => l_con_proc_name
                         , i_severity               => viu_info.c_severity_error
                         , i_additional_data        => 'i_aps_id = "' || to_char( i_aps_id ) || '"'
                         , i_info_arguments         => 'ACL_APPLICATION_PROCESSES'
                         );
   end if;

   
   viu_module.leave_module( i_module      => l_con_proc_name );


exception
   when others
   then
      
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );
      
      
      
      viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
      
end register_process;

procedure deregister_process
 (i_act_id in acl_aet_control_requests.id%type := null
 ,i_aps_id in acl_application_processes.id%type
 ,i_reason_end in acl_application_processes.reason_end%type
 ,i_ind_finished_normally in acl_application_processes.ind_finished_normally%type := acl_constant.get_yesno_no
 )
 is

l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.DeRegister_Process';


l_found boolean;

l_upd_count pls_integer;

l_rt_aps acl_application_processes%rowtype;

l_rt_aet acl_application_elements%rowtype;

l_severity viu_info_logs.severity%type;

   




































begin
   viu_module.enter_module( i_module          => l_con_proc_name
                          , i_debug_info      =>    'i_act_id = "'
                                                 || to_char( i_act_id )
                                                 || '"  i_aps_id = "'
                                                 || to_char( i_aps_id )
                                                 || '"  i_reason_end = "'
                                                 || i_reason_end
                                                 || '"  i_ind_finished_normally = "'
                                                 || i_ind_finished_normally
                                                 || '"'
                          );

   if i_aps_id is not null
   then
      
      l_found                         := acl_aps_tapi_pck.aps_select_row_upd( i_aps_id      => i_aps_id
                                                                            , o_rt_aps      => l_rt_aps
                                                                            );

      
      
      
      
      
      if not l_found
      then
         viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_aclappprocessnotfound
                            , i_severity               => viu_info.severity_error
                            , i_calling_procedure      => l_con_proc_name
                            , i_additional_data        =>    'i_act_id = "'
                                                          || to_char( i_act_id )
                                                          || '"  i_aps_id = "'
                                                          || to_char( i_aps_id )
                                                          || '"  i_reason_end = "'
                                                          || i_reason_end
                                                          || '"  i_ind_finished_normally = "'
                                                          || i_ind_finished_normally
                                                          || '"'
                            );
      end if;

      
      
      l_found := acl_aet_tapi_pck.aet_select_row( i_aet_id    => l_rt_aps.aet_id
                                                , o_rt_aet    => l_rt_aet
                                                );

      l_rt_aps.reason_end             := i_reason_end;
      l_rt_aps.status                 := acl_constant.g_con_aps_status_deregistered;
      l_rt_aps.date_modified          := acl_common.default_timestamp;
      l_rt_aps.ind_finished_normally  :=
                        case
                           when i_ind_finished_normally = acl_constant.g_con_yesno_yes
                              then acl_constant.g_con_yesno_yes
                           else acl_constant.g_con_yesno_no
                        end;

      if i_ind_finished_normally = acl_constant.g_con_yesno_yes
      then
         
         acl_application_control.clear_detailed_state( i_dsd_name  => null
                                                     , i_aet_id    => l_rt_aet.id
                                                     );
      end if;

      case l_rt_aps.reason_end
         when acl_constant.g_con_aps_reason_aborted
         then
            l_rt_aps.aborted            := acl_common.default_timestamp;
            l_rt_aps.act_id_aborted_by  := i_act_id;
            
            viu_info.operator_info( i_ifo_nr                 => viu_constant.c_ifo_aclprocessaborted
                                  , i_calling_procedure      => l_con_proc_name
                                  , i_severity               => viu_info.severity_warning
                                  , i_info_arguments         =>    l_rt_aet.id_cust
                                                                || '##'
                                                                || l_rt_aps.reason_end
                                                                || '##'
                                                                || to_char( i_aps_id )
                                                                || '##'
                                                                || to_char( i_act_id )
                                  , i_additional_data        =>    'i_ind_finished_normally = "'
                                                                || i_ind_finished_normally
                                  );
         when acl_constant.g_con_aps_reason_stopped
         then
            l_rt_aps.stopped            := acl_common.default_timestamp;
            l_rt_aps.act_id_stopped_by  := i_act_id;
         
         
         
         
         when acl_constant.g_con_aps_reason_completed
         then
            viu_info.operator_info( i_ifo_nr                 => viu_constant.c_ifo_aclprocessstopped
                                  , i_calling_procedure      => l_con_proc_name
                                  , i_severity               => viu_info.severity_notification
                                  , i_info_arguments         =>    l_rt_aet.id_cust
                                                                || '##'
                                                                || l_rt_aps.reason_end
                                                                || '##'
                                                                || to_char( i_aps_id )
                                                                || '##'   
                                  );

         else   
            if i_ind_finished_normally = acl_constant.g_con_yesno_yes
            then
               l_severity := viu_info.severity_notification;
            else
               l_severity := viu_info.severity_error;
            end if;
         
            viu_info.operator_info( i_ifo_nr                 => viu_constant.c_ifo_aclprocessstopped
                                  , i_calling_procedure      => l_con_proc_name
                                  , i_severity               => l_severity
                                  , i_info_arguments         =>    l_rt_aet.id_cust
                                                                || '##'
                                                                || l_rt_aps.reason_end
                                                                || '##'
                                                                || to_char( i_aps_id )
                                                                || '##'   
                                  );
      end case;

      l_upd_count                     := acl_aps_tapi_pck.aps_update_row( i_aps_id       => i_aps_id
                                                                        , io_rt_aps      => l_rt_aps
                                                                        );
   end if;

   viu_module.leave_module( i_module      => l_con_proc_name );

exception
   when others
   then
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );

      
      viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
end deregister_process;

procedure do_job_task
 (i_aps_id in acl_application_processes.id%type
 ,i_act_id in acl_aet_control_requests.id%type
 ,i_procedure_call in acl_application_elements.procedure_call%type
 )
 is

l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.Do_Job_Task';


l_rt_aet acl_application_elements%rowtype;

l_rt_aet_application acl_application_elements%rowtype;

l_found boolean;

l_proceed_execution boolean := true;

l_upd_count integer;
   







































procedure exec_autonomous
 (i_plsql_block in varchar2
 );



procedure exec_autonomous
 (i_plsql_block in varchar2
 )
 is

l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.Exec_Autonomous';
pragma autonomous_transaction;

   

































































begin
   viu_module.enter_module( i_module          => l_con_proc_name
                          , i_debug_info      =>    '"i_plsql_block = "'
                                                 || i_plsql_block
                                                 || '"'
                          );

   execute immediate ( i_plsql_block );
   
   
   
   
   
   
   
   
   
   
   
   
   

   viu_module.leave_module( i_module      => l_con_proc_name );

exception
   when others
   then
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );
      
      
      
      viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
      
end exec_autonomous;
begin
   viu_module.enter_module( i_module          => l_con_proc_name
                          , i_debug_info      =>    'i_aps_id = "'
                                                 || to_char( i_aps_id )
                                                 || '"  i_act_id = "'
                                                 || to_char( i_act_id )
                                                 || '"  i_procedure_call = "'
                                                 || i_procedure_call
                                                 || '"'
                          );

   







   begin
      
      l_found       := acl_aps_tapi_pck.aps_select_row_upd( i_aps_id      => i_aps_id
                                                          , o_rt_aps      => acl_application_control.g_rt_aps_current_process
                                                          );

      if not l_found
      then
         viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_aclappprocessnotfound
                            , i_severity               => viu_info.severity_error
                            , i_calling_procedure      => l_con_proc_name
                            , i_info_arguments         => to_char( i_aps_id ) || '##' || 'Application Process not found'
                            );
      elsif     l_found
            and acl_application_control.g_rt_aps_current_process.status = acl_constant.g_con_aps_status_deregistered
      then
         viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_aclappprocessnotfound
                            , i_severity               => viu_info.severity_error
                            , i_calling_procedure      => l_con_proc_name
                            , i_info_arguments         =>    to_char( i_aps_id )
                                                          || '##'
                                                          || 'Application Process status = '
                                                          || acl_constant.g_con_aps_status_deregistered
                            );
      end if;

      l_found       := acl_aet_tapi_pck.aet_select_row( i_aet_id      => acl_application_control.g_rt_aps_current_process.aet_id
                                                      , o_rt_aet      => l_rt_aet
                                                      );

      
      acl_application_control.register_process( i_aps_id => i_aps_id );

      
      commit;

      
      if acl_aet_tapi_pck.aet_select_row( i_aet_id => l_rt_aet.aet_id_part_of
                                        , o_rt_aet => l_rt_aet_application
                                        )
      then
         
         
         if l_rt_aet_application.asm_id is not null
         then
            
            
            l_proceed_execution  := acl_application_control.determ_app_operational_status( i_aet_id_cust => l_rt_aet_application.id_cust );
         end if;
      end if;

      if l_proceed_execution
      then
         viu_info.operator_info( i_ifo_nr                 => viu_constant.c_ifo_acljobexecution
                               , i_calling_procedure      => l_con_proc_name
                               , i_severity               => viu_info.c_severity_debug
                               , i_info_arguments         =>    l_rt_aet.id_cust
                                                             || '##'
                                                             || l_rt_aet.name
                                                             || '##'
                                                             || to_char(g_rt_aps_current_process.id)
                               , i_additional_data        =>    'i_aps_id = "'
                                                             || to_char( i_aps_id )
                                                             || '"  i_act_id = "'
                                                             || to_char( i_act_id )
                                                             || '"  Application Element (name) = "'
                                                             || l_rt_aet.name
                                                             || '"  i_procedure_call = "'
                                                             || i_procedure_call
                                                             || '"'
                               );

         
         exec_autonomous (i_plsql_block => i_procedure_call );

         
         if l_rt_aet.repeat_interval is not null
         then
            acl_application_control.update_aps_stats( i_aps_id => i_aps_id);
         end if;
      end if;

      
      if l_rt_aet.repeat_interval is null
      then
         
         acl_application_control.deregister_process( i_aps_id                => i_aps_id
                                                   , i_reason_end            => acl_constant.g_con_aps_reason_completed
                                                   , i_ind_finished_normally => acl_constant.g_con_yesno_yes
                                                   );

      else
         
         acl_application_control.check_halt_signal_internal( i_aet_id      => l_rt_aet.id );
      end if;

      
      commit;
      
   exception
      
      
      
      
      
      
      
      
      
      when viu_constant.exc_aclprocessstopped
      then
         
         
         
         
         
         if l_rt_aet.repeat_interval is not null
         then
            acl_application_control.update_aps_stats( i_aps_id => i_aps_id);
         end if;

         acl_application_control.deregister_process( i_act_id          => acl_application_control.g_act_id_stopping_request
                                                   , i_aps_id          => i_aps_id
                                                   , i_reason_end      => acl_constant.g_con_aps_reason_stopped
                                                   , i_ind_finished_normally => acl_constant.g_con_yesno_yes
                                                   );
         commit;

         viu_info.handle_info;

         
         acl_application_control.remove_job( i_job_name => l_rt_aet.name);

      when others
      then
         
         rollback; 

         
         acl_application_control.deregister_process( i_aps_id          => i_aps_id
                                                   , i_reason_end      => acl_constant.g_con_aps_reason_fatalerror
                                                   );
         
         
         if l_rt_aet.id is not null
         then
             acl_application_control.set_detailed_state(i_dsd_name  => acl_constant.g_con_dsd_name_appl_element
                                                       ,i_aet_id    => l_rt_aet.id
                                                       );
         end if;

         commit; 

         viu_info.handle_info;

         
         acl_application_control.remove_job( i_job_name => l_rt_aet.name);

   end;

   viu_module.leave_module( i_module      => l_con_proc_name );
exception
   when others
   then
      
      
      viu_info.handle_info;

      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );
end do_job_task;

function get_job_record
 (i_job_name in acl_user_jobs_v.job_name%type
 )
 return acl_user_jobs_v%rowtype
 is

l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.Get_Job_record';


l_rt_ujbv acl_user_jobs_v%rowtype;

l_found boolean;


cursor c_get_job
 (i_job_name in acl_user_jobs_v.job_name%type
 )
 is
select ujbv.*
from   acl_user_jobs_v ujbv
where  upper(ujbv.job_name) = upper(i_job_name)
;
   










































begin
   viu_module.enter_module( i_module          => l_con_proc_name
                          , i_debug_info      => 'i_job_name = "' || to_char( i_job_name ) || '"'
                          );

   
   open c_get_job( i_job_name      => i_job_name );

   
   
   fetch c_get_job
   into  l_rt_ujbv;

   l_found  := c_get_job%found;

   
   close c_get_job;

   
   if not l_found
   then
      viu_info.operator_info( i_ifo_nr                 => viu_constant.c_ifo_acljobretrievalfailed
                            , i_calling_procedure      => l_con_proc_name
                            , i_severity               => viu_info.c_severity_notification
                            , i_info_arguments         => to_char( i_job_name )
                            );
   end if;

   
   viu_module.leave_module( i_module      => l_con_proc_name );
   return l_rt_ujbv;

exception
   when others
   then
      if c_get_job%isopen
      then
         close c_get_job;
      end if;

      
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );
      
      
      
      viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
      
end get_job_record;

function get_unique_session_identifier
 return acl_constant.st_unique_session_id
 is

l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.Get_Unique_Session_Identifier';
   



















































begin
   viu_module.enter_module( i_module      => l_con_proc_name );
   
   viu_module.leave_module( i_module      => l_con_proc_name );
   
   
   
   return dbms_session.unique_session_id;

exception
   when others
   then
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );
      
      
      
      viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
end get_unique_session_identifier;

procedure get_session_identifiers
 (i_audsid in acl_sessions_v.audsid%type := sys_context('userenv', 'sessionid') 
 ,i_db_instance in acl_sessions_v.inst_id%type := sys_context('userenv', 'instance') 
 ,io_sid in out acl_sessions_v.sid%type
 ,o_serial# out acl_sessions_v.serial#%type
 ,o_program out acl_sessions_v.program%type
 )
 is

l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.Get_Session_Identifiers';
   































































begin
   viu_module.enter_module( i_module          => l_con_proc_name
                          , i_debug_info      => 'i_audsid = "' || to_char( i_audsid ) || '"  i_db_instance = "' || to_char( i_db_instance ) || '"'
                          );

   
   
   
   begin
      select ssn.sid
           , ssn.serial#
           , ssn.program
      into   io_sid
           , o_serial#
           , o_program
      from   acl_sessions_v ssn
      where  (    ssn.audsid = nvl( i_audsid
                                  , sys_context( 'userenv'
                                               , 'sessionid'
                                               )
                                  )
               or sys_context( 'userenv'
                             , 'sessionid'
                             ) is null   
                                      )
      and    ssn.inst_id = nvl( i_db_instance
                              , sys_context( 'userenv'
                                           , 'instance'
                                           )
                              )
      and    ssn.sid = nvl( io_sid
                          , sys_context( 'userenv'
                                       , 'SID'
                                       )
                          );
   exception
      when no_data_found
      then
         viu_info.operator_info( i_ifo_nr                 => viu_constant.c_ifo_aclsessionnotfound
                               , i_calling_procedure      => l_con_proc_name
                               , i_severity               => viu_info.c_severity_notification
                               , i_info_arguments         =>    to_char( to_char( i_audsid )) || '##'
                                                             || to_char( i_db_instance )
                               );
   end;

   
   viu_module.leave_module( i_module      => l_con_proc_name );



exception
   when others
   then
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );
      
      
      
      viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
end get_session_identifiers;

procedure submit_job
 (i_job_plsql_block in acl_application_elements.procedure_call%type
 ,i_rt_aet in acl_application_elements%rowtype
 ,i_aps_id in acl_application_processes.id%type
 ,i_act_id in acl_aet_control_requests.id%type
 )
 is

l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.Submit_Job';

exc_invalid_repeat_interval exception;
pragma exception_init(exc_invalid_repeat_interval, -1870);
exc_invalid_jobname exception;
pragma exception_init(exc_invalid_jobname, -27452);
pragma autonomous_transaction;

   




































begin
   viu_module.enter_module( i_module  => l_con_proc_name
                          , i_debug_info =>  'i_job_plsql_block = "'
                                          || i_job_plsql_block
                                          || '"  i_rt_aet.id  = "'
                                          || to_char( i_rt_aet.id )
                                          || '"  i_aps_id  = "'
                                          || to_char( i_aps_id )
                                          || '"  i_act_id  = "'
                                          || to_char( i_act_id )
                                          || '"' );

   
   
   
   
   
   
   
   
   
   
   begin
      dbms_scheduler.create_job( job_name  => i_rt_aet.name
                               , job_type  => acl_constant.g_con_job_type_stored_proc
                               , job_action => 'Acl_Application_Control.Do_Job_Task'
                               , number_of_arguments => 3
                               , start_date => acl_common.default_timestamp_with_tz
                               , repeat_interval => i_rt_aet.repeat_interval
                               , end_date  => null
                               , job_class => acl_constant.g_con_job_class_default
                               , enabled   => false
                               , auto_drop => false
                               , comments  => i_rt_aet.description
                               );
      dbms_scheduler.set_job_argument_value( job_name           => i_rt_aet.name
                                           , argument_position  => 1
                                           , argument_value     => to_char(i_aps_id)
                                           );
      dbms_scheduler.set_job_argument_value( job_name           => i_rt_aet.name
                                           , argument_position  => 2
                                           , argument_value     => to_char(i_act_id)
                                           );
      dbms_scheduler.set_job_argument_value( job_name           => i_rt_aet.name
                                           , argument_position  => 3
                                           , argument_value     => i_job_plsql_block
                                           );
      dbms_scheduler.set_attribute( name      => i_rt_aet.name
                                  , attribute => 'restartable'
                                  , value     => true
                                  );
      dbms_scheduler.enable( name      => i_rt_aet.name );
   exception
      when exc_invalid_jobname
      then
         viu_info.raise_info
                        ( i_ifo_nr  => viu_constant.c_ifo_aclfailedtostartjob
                        , i_calling_procedure => l_con_proc_name
                        , i_severity => viu_info.severity_error
                        , i_additional_data => 'Invalid jobname (e.g. whitespace not allowed): '
                                        || i_rt_aet.name
                                        || '. i_job_plsql_block: '
                                        || i_job_plsql_block
                                        || '. repeat_interval: '
                                        || i_rt_aet.repeat_interval
                                        || '. id_cust: '
                                        || i_rt_aet.id_cust
                                        || '. i_aps_id: '
                                        || to_char(i_aps_id)
                                        || '. i_act_id: '
                                        || to_char(i_act_id)
                        );
      when exc_invalid_repeat_interval
      then
         viu_info.raise_info( i_ifo_nr  => viu_constant.c_ifo_aclfailedtostartjob
                            , i_calling_procedure => l_con_proc_name
                            , i_severity => viu_info.severity_error
                            , i_additional_data => 'Invalid repeat interval: '
                                            || i_rt_aet.repeat_interval
                                            || '. i_job_plsql_block: '
                                            || i_job_plsql_block
                                            || '. jobname: '
                                            || i_rt_aet.name
                                            || '. id_cust: '
                                            || i_rt_aet.id_cust
                                            || '. i_aps_id: '
                                            || to_char(i_aps_id)
                                            || '. i_act_id: '
                                            || to_char(i_act_id)
                            );
      when others
      then
         viu_info.raise_info( i_ifo_nr  => viu_constant.c_ifo_aclfailedtostartjob
                            , i_calling_procedure => l_con_proc_name
                            , i_severity => viu_info.severity_error
                            , i_info_arguments => null
                            , i_additional_data => 'Repeat interval: '
                                            || i_rt_aet.repeat_interval
                                            || '. i_job_plsql_block: '
                                            || i_job_plsql_block
                                            || '. jobname: '
                                            || i_rt_aet.name
                                            || '. id_cust: '
                                            || i_rt_aet.id_cust
                                            || '. i_aps_id: '
                                            || to_char(i_aps_id)
                                            || '. i_act_id: '
                                            || to_char(i_act_id)
                            );
   end;

   
   
   viu_info.operator_info
                ( i_ifo_nr  => viu_constant.c_ifo_acljobstarted
                , i_calling_procedure => l_con_proc_name
                , i_severity => viu_info.c_severity_notification
                , i_info_arguments => i_rt_aet.id_cust
                                || '##'
                                || acl_common.timestamp_to_varchar( acl_common.default_timestamp )
                , i_additional_data => 'i_job_plsql_block = "'
                                || i_job_plsql_block
                                || '"  i_rt_aet.id  = "'
                                || to_char( i_rt_aet.id )
                                || '"  i_aps_id  = "'
                                || to_char( i_aps_id )
                                || '"  i_act_id  = "'
                                || to_char( i_act_id )
                                || '"'
                );
   
   
   commit;
   viu_module.leave_module( i_module  => l_con_proc_name );

exception
   when others
   then
      rollback;                                   
      viu_module.leave_module( i_module  => l_con_proc_name, i_debug_info => sqlerrm );
      
      
      
      viu_info.raise_info( i_calling_procedure => l_con_proc_name );

end submit_job;

procedure commit_and_check_halt_signal
 is

l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.Commit_and_Check_Halt_signal';
   











































begin
   viu_module.enter_module( i_module      => l_con_proc_name );
   
   commit;
   check_halt_signal_internal;
   
   viu_module.leave_module( i_module      => l_con_proc_name );

exception
   
   when others
   then
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );
      
      
      viu_info.raise_info( i_calling_procedure      => l_con_proc_name );

end commit_and_check_halt_signal;

procedure rollback_and_check_halt_signal
 is

l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.Rollback_and_Check_Halt_signal';
   











































begin
   viu_module.enter_module( i_module      => l_con_proc_name );
   
   rollback;
   check_halt_signal_internal;
   
   viu_module.leave_module( i_module      => l_con_proc_name );

exception
   
   when others
   then
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );
      
      
      viu_info.raise_info( i_calling_procedure      => l_con_proc_name );

end rollback_and_check_halt_signal;

function determ_app_operational_status
 (i_aet_id_cust in acl_application_elements.id_cust%type
 )
 return boolean
 is


cursor c_get_enabling_switch
 (i_aet_id_application in acl_application_elements.id%type
 )
 is
select aet_swh.*
from   acl_application_elements aet_swh   
     , acl_application_elements aet_atn   
where  aet_atn.id = i_aet_id_application
and    aet_atn.aet_type = acl_constant.g_con_aet_type_application
and    aet_atn.asm_id is not null
and    aet_swh.aet_id_part_of = aet_atn.id
and    aet_swh.aet_id_enable = aet_atn.id
and    aet_swh.aet_type = acl_constant.g_con_aet_type_switch
;

l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.Determ_App_Operational_Status';


l_found boolean;

l_op_status boolean;

l_rt_aet_application acl_application_elements%rowtype;

l_rt_aet_switch c_get_enabling_switch%rowtype;

l_atn_asm_id acl_application_elements.asm_id%type;

l_swh_asm_id acl_aet_statuses.asm_id%type;


cursor c_get_enabling_statuses
 (i_aet_id_application in acl_application_elements.id%type
 )
 is
select aet_atn.asm_id               atn_asm_id   
     , ass.asm_id                   ass_asm_id   
from   acl_application_elements   aet_atn   
     , acl_application_elements   aet_swh   
     , acl_aet_statuses           ass
where  aet_atn.id                 = i_aet_id_application
and    aet_swh.aet_id_part_of     = aet_atn.id
and    aet_swh.aet_id_enable      = aet_atn.id
and    aet_swh.aet_type           = acl_constant.g_con_aet_type_switch
and    ass.aet_id             (+) = aet_swh.id



;
   



































































begin
   viu_module.enter_module( i_module          => l_con_proc_name
                          , i_debug_info      => 'i_aet_id_cust = "' || i_aet_id_cust || '"'
                          );
   
   
   
   
   
   
   
   
   l_found  := acl_aet_tapi_pck.aet_select_row_uk2( i_aet_id_cust      => i_aet_id_cust
                                                  , o_rt_aet      => l_rt_aet_application
                                                  );

   
   
   
   
   
   if    ( not l_found )
      or l_rt_aet_application.aet_type <> acl_constant.g_con_aet_type_application
   then
      viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_aclappelementnotfound
                         , i_calling_procedure      => l_con_proc_name
                         , i_severity               => viu_info.severity_error
                         , i_info_arguments         => i_aet_id_cust
                         , i_additional_data        => 'No APPLICATION with ID_CUST given: '
                                                       || 'i_aet_id_cust = "' || i_aet_id_cust
                                                       || '" aet_type found = "'|| l_rt_aet_application.aet_type
                         );
   end if;

   
   
   
   
   
   
   
   open c_get_enabling_switch( i_aet_id_application      => l_rt_aet_application.id );

   fetch c_get_enabling_switch
   into  l_rt_aet_switch;

   
   l_found  := c_get_enabling_switch%found;

   
   close c_get_enabling_switch;

   
   if not l_found
   then
      
      
      
      viu_info.operator_info( i_ifo_nr                 => viu_constant.c_ifo_aclnoswitchfound
                            , i_calling_procedure      => l_con_proc_name
                            , i_severity               => viu_info.severity_warning
                            , i_info_arguments         => l_rt_aet_application.id_cust
                            , i_additional_data        => 'i_aet_id_cust = "' || i_aet_id_cust || '"'
                            );
      
      l_op_status  := null;
   else
          
      
      
      
           
      open c_get_enabling_statuses( i_aet_id_application      => l_rt_aet_application.id );

      
      l_op_status  := true;

      
      <<enabling_statuses>>
      loop
         fetch c_get_enabling_statuses
         into  l_atn_asm_id   
             , l_swh_asm_id   
                           ;

         l_found  := c_get_enabling_statuses%found;

         if l_found
         then
                   
            
            
            if    l_swh_asm_id <> l_atn_asm_id
               or l_swh_asm_id is null
            then
               l_op_status  := false;
            end if;
         end if;

         
         exit enabling_statuses when not l_found
                                 or ( not l_op_status );
      
      end loop enabling_statuses;

      close c_get_enabling_statuses;
   
   
   end if;

   
   if l_op_status
   then
      
      
      g_app_not_operational_logged := false;
   elsif not l_op_status
   then
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if not g_app_not_operational_logged               
      then
         
         viu_info.operator_info( i_ifo_nr                 => viu_constant.c_ifo_aclappnotoperational
                               , i_calling_procedure      => l_con_proc_name
                               , i_severity               => viu_info.severity_warning
                               , i_info_arguments         =>    l_rt_aet_application.id_cust
                                                             || '##'
                                                             || l_rt_aet_application.name
                               , i_additional_data        =>    'i_aet_id_cust = "' ||  i_aet_id_cust || '"'
                               );
         
         g_app_not_operational_logged := true;
      end if;
   end if;

   
   viu_module.leave_module( i_module      => l_con_proc_name );
   
   return l_op_status;

exception
   when others
   then
      
      if c_get_enabling_switch%isopen
      then
         close c_get_enabling_switch;
      end if;

      
      if c_get_enabling_statuses%isopen
      then
         close c_get_enabling_statuses;
      end if;

      
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );
      
      
      
      viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
      
end determ_app_operational_status;

procedure check_halt_signal
 is

l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.Check_Halt_signal';
   

































begin
   viu_module.enter_module( i_module      => l_con_proc_name );
   
   
   
   acl_application_control.check_halt_signal_internal;
   
   viu_module.leave_module( i_module      => l_con_proc_name );

exception
   
   when others
   then
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );
      
      
      viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
end check_halt_signal;

procedure check_halt_signal_internal
 (i_aet_id in acl_application_elements.id%type := null
 )
 is

l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.Check_Halt_signal_Internal';


l_rt_act acl_aet_control_requests%rowtype;

l_rt_aet acl_application_elements%rowtype;

l_found boolean;

l_aet_id acl_application_elements.id%type;
   




































































begin
   viu_module.enter_module( i_module          => l_con_proc_name
                          , i_debug_info      => 'i_aet_id = "' || to_char( i_aet_id ) || '"'
                          );
   

   
   l_aet_id  := nvl( i_aet_id
                   , g_rt_aps_current_process.aet_id
                   );

   if l_aet_id is null
   then
      
      viu_info.operator_info( i_ifo_nr                 => viu_constant.c_ifo_aclillegalcheckhalt
                            , i_calling_procedure      => l_con_proc_name
                            , i_severity               => viu_info.severity_error
                            , i_additional_data        =>    'l_rt_act.id = "' || to_char( l_rt_act.id )
                                                          || '"  l_aet_id = "' || to_char( l_aet_id ) || '"'
                            );

   else
      
      l_found   := acl_aet_tapi_pck.aet_select_row( i_aet_id      => l_aet_id
                                                  , o_rt_aet      => l_rt_aet
                                                  );

      if not l_found
      then
         viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_aclappelementnotfound
                            , i_calling_procedure      => l_con_proc_name
                            , i_severity               => viu_info.severity_error
                            , i_info_arguments         => to_char( l_aet_id )
                            , i_additional_data        =>    'l_rt_act.id = "' || to_char( l_rt_act.id )
                                                          || '"  l_aet_id = "' || to_char( l_aet_id ) || '"'
                            );
      end if;

      l_rt_act  := acl_application_control.get_latest_request_type( i_rt_aet      => l_rt_aet );

      
      
      
      
      if l_rt_act.ace_id in( acl_constant.g_con_ace_name_stop, acl_constant.g_con_ace_name_abort )
      then
         







         acl_application_control.g_act_id_stopping_request  := l_rt_act.id;

         viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_aclprocessstopped
                            , i_calling_procedure      => l_con_proc_name
                            , i_severity               => viu_info.severity_notification
                            , i_info_arguments         =>    l_rt_aet.id_cust
                                                          || '##'
                                                          || acl_constant.g_con_aps_reason_stopped
                                                          || '##'
                                                          || to_char(g_rt_aps_current_process.id)
                                                          || '##'
                                                          || l_rt_act.id
                            , i_additional_data        =>    'l_rt_act.id = "' || to_char( l_rt_act.id )
                                                          || '"  l_aet_id = "' || to_char( l_aet_id ) || '"'
                            );
      end if;
   end if;

   viu_module.leave_module( i_module      => l_con_proc_name );
exception
   when others
   then
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );

      
      viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
end check_halt_signal_internal;

function get_latest_request_type
 (i_rt_aet in acl_application_elements%rowtype
 )
 return acl_aet_control_requests%rowtype
 is

l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.Get_Latest_Request_Type';


l_rt_act acl_aet_control_requests%rowtype;


cursor c_get_latest_relevant_request
 (i_aet_id in acl_application_elements.id%type
 )
 is
select   *
from    ( select act.*
          from   acl_application_elements atn   
               , acl_application_elements aet   
               , acl_aet_control_requests act
          where  aet.aet_id_part_of =  atn.id
          and    aet.id             =  i_aet_id
          and    act.aet_id         =  atn.id
          and    atn.aet_type       =  acl_constant.g_con_aet_type_application
          and    act.ace_id         in ( acl_constant.g_con_ace_name_start
                                       , acl_constant.g_con_ace_name_stop
                                       , acl_constant.g_con_ace_name_abort
                                       )
          union all
          select act.*
          from   acl_application_elements aet   
               , acl_aet_control_requests act
          where  aet.id         =  i_aet_id
          and    act.aet_id     =  aet.id
          and    aet.aet_type   <> acl_constant.g_con_aet_type_application
          and    act.ace_id     in ( acl_constant.g_con_ace_name_start
                                   , acl_constant.g_con_ace_name_stop
                                   , acl_constant.g_con_ace_name_abort
                                   )
        )
order by date_created desc
       , id desc
;
   

























































begin
   viu_module.enter_module( i_module          => l_con_proc_name
                          , i_debug_info      => 'i_rt_aet.id = "' || to_char( i_rt_aet.id ) || '"'
                          );

   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   open c_get_latest_relevant_request( i_aet_id      => i_rt_aet.id );

   fetch c_get_latest_relevant_request
   into  l_rt_act;

   close c_get_latest_relevant_request;

      
   
   
   
      
   viu_module.leave_module( i_module      => l_con_proc_name );
   
   return l_rt_act;

exception
   when others
   then
      if c_get_latest_relevant_request%isopen
      then
         close c_get_latest_relevant_request;
      end if;

      
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );
      
      
      
      viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
      
end get_latest_request_type;

function get_job_process_status
 (i_rt_aet in acl_application_elements%rowtype
 )
 return acl_aet_statuses_dom%rowtype
 is


cursor c_get_job
 (i_job_name in acl_user_jobs_v.job_name%type
 )
 is
select ujbv.*
from   acl_user_jobs_v ujbv
where  upper(ujbv.job_name) = upper(i_job_name)
;

cursor c_aps_latest_of_aet
 (i_aet_id in acl_application_processes.aet_id%type
 )
 is
select *
from   (select   *
        from     acl_application_processes aps
        where    aps.aet_id = i_aet_id
        order by aps.date_created desc
               , aps.id           desc
       )
where rownum = 1 
;

l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.Get_Job_Process_Status';


l_rt_aps_latest_of_aet c_aps_latest_of_aet%rowtype;

l_job_found boolean;

l_found boolean;

l_rt_ujbv c_get_job%rowtype;
l_aet_job_count pls_integer := 0;
l_aps_upd_count pls_integer;

l_rt_asm acl_aet_statuses_dom%rowtype;

l_rt_aps acl_application_processes%rowtype;

l_asm_id acl_aet_statuses_dom.id%type;
l_change_done boolean := false;

cursor c_get_active_aet_processes
 (i_aet_id in acl_application_elements.id%type
 )
 is


select   aps.*
from     acl_application_processes aps
where    aps.aet_id = i_aet_id
and      aps.status <> acl_constant.g_con_aps_status_deregistered
for update
order by aps.id
;
   













































begin
   viu_module.enter_module( i_module          => l_con_proc_name
                          , i_debug_info      => 'i_rt_aet.id = "' || to_char( i_rt_aet.id ) || '"'
                          );

   
   
   
   
   
   
   
   
   
   
   
   
   savepoint lock_aps;
   
   <<loop_aet_processes>>
   for rec_aps in c_get_active_aet_processes( i_aet_id      => i_rt_aet.id )
   loop
      open c_get_job( i_job_name => rec_aps.job_name );
      
      fetch c_get_job
      into  l_rt_ujbv;
      
      l_job_found  := c_get_job%found;
      
      close c_get_job;

      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if    ( not l_job_found )     
         or (     l_job_found       
              and l_rt_ujbv.state in ( acl_constant.g_con_job_state_broken
                                     , acl_constant.g_con_job_state_chain_stalled
                                     , acl_constant.g_con_job_state_completed
                                     , acl_constant.g_con_job_state_disabled
                                     , acl_constant.g_con_job_state_failed
                                     , acl_constant.g_con_job_state_stopped
                                     , acl_constant.g_con_job_state_succeeded
                                     )
            )
      then
         
         
         l_found := acl_aps_tapi_pck.aps_select_row( i_aps_id => rec_aps.id
                                                   , o_rt_aps => l_rt_aps
                                                   );

         l_rt_aps.ind_dead            := acl_constant.g_con_yesno_yes;
         l_rt_aps.ind_job_terminated  := acl_constant.g_con_yesno_yes;
         
         l_aps_upd_count             := acl_aps_tapi_pck.aps_update_row( i_aps_id       => l_rt_aps.id
                                                                       , io_rt_aps      => l_rt_aps
                                                                       );
         
         if not l_job_found  
         then
            acl_application_control.deregister_process( i_act_id          => null
                                                      , i_aps_id          => rec_aps.id
                                                      , i_reason_end      => acl_constant.g_con_aps_reason_unknown
                                                      );
         else  
            
            acl_application_control.remove_job( i_job_name => rec_aps.job_name);
            
            if l_rt_ujbv.state in ( acl_constant.g_con_job_state_broken
                                     , acl_constant.g_con_job_state_chain_stalled
                                     )
            then
              acl_application_control.deregister_process( i_act_id          => null
                                                        , i_aps_id          => rec_aps.id
                                                        , i_reason_end      => 'dbms_scheduler: ' || l_rt_ujbv.state
                                                        );
            else
              acl_application_control.deregister_process( i_act_id          => null
                                                        , i_aps_id          => rec_aps.id
                                                        , i_reason_end      => 'dbms_scheduler: ' || l_rt_ujbv.state
                                                        , i_ind_finished_normally => acl_constant.g_con_yesno_yes
                                                        );
            end if;
                                                      

         end if;

         
         
         l_change_done := true;
      else
         
         
         
         
         l_aet_job_count  := l_aet_job_count + 1;

      end if;

      
   end loop loop_aet_processes;
   
   
   
   if l_change_done
   then
      commit;
   else
      rollback to savepoint lock_aps;
   end if;

   
   
   
   
   
   
   
   
   
   
   if l_aet_job_count = 0
   then
      l_asm_id  := acl_constant.g_con_asm_name_stopped;
   
   elsif l_aet_job_count = 1
   then
      l_asm_id  := acl_constant.g_con_asm_name_started;
   
   elsif l_aet_job_count > 1
   then
      l_asm_id  := acl_constant.g_con_asm_name_started;
      
      viu_info.operator_info( i_ifo_nr                 => viu_constant.c_ifo_aclmultiplejobsfound
                            , i_calling_procedure      => l_con_proc_name
                            , i_severity               => viu_info.severity_error
                            , i_info_arguments         => to_char( l_aet_job_count ) || '##' || i_rt_aet.id_cust
                            , i_additional_data        => 'i_rt_aet.id = "' || to_char( i_rt_aet.id ) || '"'
                            );
   end if;

   
   
   
   
   
   
   
   
   if l_asm_id = acl_constant.g_con_asm_name_stopped
   then
      open  c_aps_latest_of_aet ( i_aet_id => i_rt_aet.id);
      fetch c_aps_latest_of_aet into l_rt_aps_latest_of_aet;
      close c_aps_latest_of_aet;
      
      
      
      
      if l_rt_aps_latest_of_aet.ind_finished_normally = acl_constant.g_con_yesno_no
      then
         l_asm_id            := acl_constant.g_con_asm_name_error;
         
         
         acl_application_control.set_detailed_state(i_dsd_name  => acl_constant.g_con_dsd_name_appl_element
                                                   ,i_aet_id    => i_rt_aet.id
                                                   );
      end if;
   end if;
   
   
   
   l_found  := acl_asm_tapi_pck.asm_select_row( i_asm_id      => l_asm_id
                                              , o_rt_asm      => l_rt_asm
                                              );

   
   if not l_found
   then
      viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_aclstatusnotfound
                         , i_calling_procedure      => l_con_proc_name
                         , i_severity               => viu_info.severity_error
                         , i_info_arguments         => to_char( l_asm_id )
                         , i_additional_data        => 'i_rt_aet.id = "' || to_char( i_rt_aet.id ) || '"'
                         );
   end if;

   
   viu_module.leave_module( i_module      => l_con_proc_name );
   
   return l_rt_asm;

exception
   
   when others
   then
      
      if c_get_job%isopen
      then
         close c_get_job;
      end if;
      
      if c_aps_latest_of_aet%isopen
      then
         close c_aps_latest_of_aet;
      end if;
      
      
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );
      
      
      
      viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
      
end get_job_process_status;

function get_job_process_status_no_chng
(i_rt_aet  in  acl_application_elements%rowtype
)
return acl_aet_statuses_dom%rowtype
is
   l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.Get_Job_Process_Status_No_Chng';
   
   cursor c_get_job
   (i_job_name  acl_user_jobs_v.job_name%type
   )
   is
      select ujbv.*
      from   acl_user_jobs_v ujbv
      where  upper(ujbv.job_name) = upper(i_job_name)
   ;
   
   cursor c_get_active_aet_processes
   (i_aet_id  acl_application_elements.id%type
   )
   is
      
      
      
      select   aps.*
      from     acl_application_processes aps
      where    aps.aet_id = i_aet_id
      and      aps.status <> acl_constant.g_con_aps_status_deregistered
      order by aps.date_created asc
      ,        aps.id           asc
   ;
   
   l_rt_ujbv                 c_get_job%rowtype;
   l_rt_asm                  acl_aet_statuses_dom%rowtype;        
   
   l_job_found               boolean;                             
   l_found                   boolean;                             
   l_aet_job_count           pls_integer  := 0;
   l_asm_id                  acl_aet_statuses_dom.id%type;        
   l_ind_finished_normally   boolean      := true;
   l_aps_id_pre_registered   acl_application_processes.id%type;
   l_aps_id_last             acl_application_processes.id%type;
   
















































begin
   viu_module.enter_module( i_module     => l_con_proc_name
                          , i_debug_info => 'i_rt_aet.id = "' || to_char( i_rt_aet.id ) || '"'
                          );

   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   <<loop_aet_processes>>
   for rec_aps in c_get_active_aet_processes( i_aet_id => i_rt_aet.id )
   loop
      open c_get_job( i_job_name => rec_aps.job_name );
      fetch c_get_job into l_rt_ujbv;
      l_job_found := c_get_job%found;
      close c_get_job;
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if  not l_job_found
      and rec_aps.ind_registered = acl_constant.g_con_yesno_no
      and rec_aps.status         = acl_constant.g_con_aps_status_preregistered
      then
         l_aps_id_pre_registered := rec_aps.id;
         
      
      elsif (    not l_job_found
             and (   rec_aps.ind_registered <> acl_constant.g_con_yesno_no
                  or rec_aps.status         <> acl_constant.g_con_aps_status_preregistered
                 )
            )
      
      or (     l_job_found
           and l_rt_ujbv.state in ( acl_constant.g_con_job_state_broken
                                  , acl_constant.g_con_job_state_chain_stalled
                                  )
         )
      then
         l_ind_finished_normally := false;
         
      
      elsif l_rt_ujbv.state in ( acl_constant.g_con_job_state_completed
                                , acl_constant.g_con_job_state_disabled
                                , acl_constant.g_con_job_state_failed
                                , acl_constant.g_con_job_state_stopped
                                , acl_constant.g_con_job_state_succeeded
                                )
      then
         l_ind_finished_normally := true;
         
      else
         
         
         
         
         l_aet_job_count  := l_aet_job_count + 1;
      end if;
      
      l_aps_id_last := rec_aps.id;
   end loop loop_aet_processes;

   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   if l_aet_job_count = 0
   then
      if nvl(l_aps_id_pre_registered,-1) = l_aps_id_last
      then
         l_asm_id  := acl_constant.g_con_asm_name_started;
      elsif l_ind_finished_normally
      then
         l_asm_id := acl_constant.g_con_asm_name_stopped;
      else
         l_asm_id := acl_constant.g_con_asm_name_error;
      end if;
   elsif l_aet_job_count = 1
   then
      l_asm_id  := acl_constant.g_con_asm_name_started;
   
   elsif l_aet_job_count > 1
   then
      l_asm_id  := acl_constant.g_con_asm_name_started;
      
      viu_info.operator_info( i_ifo_nr                 => viu_constant.c_ifo_aclmultiplejobsfound
                            , i_calling_procedure      => l_con_proc_name
                            , i_severity               => viu_info.severity_error
                            , i_info_arguments         => to_char( l_aet_job_count ) || '##' || i_rt_aet.id_cust
                            , i_additional_data        => 'i_rt_aet.id = "' || to_char( i_rt_aet.id ) || '"'
                            );
   end if;

   
   
   
   l_found  := acl_asm_tapi_pck.asm_select_row( i_asm_id      => l_asm_id
                                              , o_rt_asm      => l_rt_asm
                                              );

   
   if not l_found
   then
      viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_aclstatusnotfound
                         , i_calling_procedure      => l_con_proc_name
                         , i_severity               => viu_info.severity_error
                         , i_info_arguments         => to_char( l_asm_id )
                         , i_additional_data        => 'i_rt_aet.id = "' || to_char( i_rt_aet.id ) || '"'
                         );
   end if;

   
   viu_module.leave_module( i_module      => l_con_proc_name );
   
   return l_rt_asm;

exception
   when others
   then
      
      if c_get_job%isopen
      then
         close c_get_job;
      end if;
      
      viu_module.leave_module( i_module     => l_con_proc_name
                             , i_debug_info => sqlerrm
                             );
      
      viu_info.raise_info( i_calling_procedure => l_con_proc_name );
      
end get_job_process_status_no_chng;

function get_switch_status
 (i_rt_aet in acl_application_elements%rowtype
 )
 return acl_aet_statuses_dom%rowtype
 is

l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.Get_Switch_Status';


l_found boolean;

l_rt_ass acl_aet_statuses%rowtype;

l_rt_asm acl_aet_statuses_dom%rowtype;
   






































begin
   viu_module.enter_module( i_module          => l_con_proc_name
                          , i_debug_info      => 'i_rt_aet.id = "' || to_char( i_rt_aet.id ) || '"'
                          );
   
   
   
   
   
   
   
   
   l_found  := acl_ass_tapi_pck.ass_select_row_uk1( i_ass_aet_id      => i_rt_aet.id
                                                  , o_rt_ass          => l_rt_ass
                                                  );

   
   
   
   
   
   if l_found
   then
      l_found  := acl_asm_tapi_pck.asm_select_row( i_asm_id      => l_rt_ass.asm_id
                                                 , o_rt_asm      => l_rt_asm
                                                 );

      
      if not l_found
      then
         viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_aclstatusnotfound
                            , i_calling_procedure      => l_con_proc_name
                            , i_severity               => viu_info.severity_error
                            , i_info_arguments         => to_char( l_rt_ass.asm_id )
                            , i_additional_data        => 'i_rt_aet.id = "' || to_char( i_rt_aet.id ) || '"'
                            );
      end if;
   
   end if;

   
   viu_module.leave_module( i_module      => l_con_proc_name );
   
   return l_rt_asm;
exception
   
   when others
   then
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );
      
      
      
      viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
      
end get_switch_status;

procedure stop_app_element
 (i_rt_aet in acl_application_elements%rowtype
 ,i_act_id in acl_aet_control_requests.id%type
 )
 is

l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.Stop_App_Element';
   





































begin
   viu_module.enter_module( i_module          => l_con_proc_name
                          , i_debug_info      => 'i_rt_aet.id = "' || to_char( i_rt_aet.id ) || '"  i_act_id = "' || to_char( i_act_id ) || '"'
                          );

   
   
   
   
   
   
   
   
   
   
   
   case i_rt_aet.aet_type
      when acl_constant.g_con_aet_type_switch   
      then
         acl_application_control.stop_switch( i_rt_aet      => i_rt_aet
                                            , i_act_id      => i_act_id
                                            );
      when acl_constant.g_con_aet_type_background_job   
      then
         acl_application_control.stop_job( i_rt_aet      => i_rt_aet
                                         , i_act_id      => i_act_id
                                         );
      else
         viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_aclunexpectedparamvalue
                            , i_calling_procedure      => l_con_proc_name
                            , i_severity               => viu_info.severity_error
                            , i_info_arguments         =>    'i_rt_aet.aet_type' || '##'
                                                          || l_con_proc_name     || '##'
                                                          || i_rt_aet.aet_type   || '##'
                            , i_additional_data        =>    'i_rt_aet.id = "' || to_char( i_rt_aet.id )
                                                          || '"  i_act_id = "' || to_char( i_act_id ) || '"'
                            );
   end case;

   
   viu_module.leave_module( i_module      => l_con_proc_name );

exception
   
   when others
   then
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );
      
      
      
      viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
      
end stop_app_element;

procedure stop_switch
 (i_rt_aet in acl_application_elements%rowtype
 ,i_act_id in acl_aet_control_requests.id%type
 )
 is

l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.Stop_Switch';


l_found boolean;

l_rt_asm acl_aet_statuses_dom%rowtype;

l_rt_ass acl_aet_statuses%rowtype;

l_upd_count pls_integer;
   

































begin
   viu_module.enter_module( i_module          => l_con_proc_name
                          , i_debug_info      => 'i_rt_aet.id = "' || to_char( i_rt_aet.id ) || '"  i_act_id = "' || to_char( i_act_id ) || '"'
                          );
   
   
   
   
   
   
   l_rt_asm  := acl_application_control.get_switch_status( i_rt_aet      => i_rt_aet );

   
   
   
   
   
   
   
   
   
   
   
   
   if l_rt_asm.id is null
   then
      
      l_rt_ass.asm_id            := acl_constant.g_con_asm_name_stopped;
      l_rt_ass.act_id            := i_act_id;
      l_rt_ass.aet_id            := i_rt_aet.id;
      l_rt_ass.timestamp_change  := acl_common.default_timestamp;
      
      acl_ass_tapi_pck.ass_insert_row( io_rt_ass      => l_rt_ass );
   
   elsif l_rt_asm.id = acl_constant.g_con_asm_name_started
   then
      
      
      
      
      
            
            
      l_found := acl_ass_tapi_pck.ass_select_row_upd_uk1( i_ass_aet_id      => i_rt_aet.id
                                                        , o_rt_ass          => l_rt_ass
                                                        );

      if not l_found
      then
         viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_aclaetstatusrecnotfound
                            , i_calling_procedure      => l_con_proc_name
                            , i_severity               => viu_info.severity_error
                            , i_info_arguments         => i_rt_aet.id_cust
                            , i_additional_data        =>    'i_rt_aet.id = "' || to_char( i_rt_aet.id )
                                                          || '"  i_act_id = "' || to_char( i_act_id ) || '"'
                            );
      end if;

      
      l_rt_ass.asm_id            := acl_constant.g_con_asm_name_stopped;
      l_rt_ass.act_id            := i_act_id;
      l_rt_ass.timestamp_change  := acl_common.default_timestamp;
      
      l_upd_count                := acl_ass_tapi_pck.ass_update_row( i_ass_id       => l_rt_ass.id
                                                                   , io_rt_ass      => l_rt_ass
                                                                   );
   
   
   elsif l_rt_asm.id = acl_constant.g_con_asm_name_stopped
   then
      
      
      
      viu_info.operator_info( i_ifo_nr                 => viu_constant.c_ifo_aclappelalreadyinstate
                            , i_calling_procedure      => l_con_proc_name
                            , i_severity               => viu_info.severity_notification
                            , i_info_arguments         =>    to_char( i_act_id )|| '##'
                                                          || i_rt_aet.id_cust || '##'
                                                          || l_rt_asm.id_cust
                            );
   
   else   
      viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_aclunexpectedstatus
                         , i_calling_procedure      => l_con_proc_name
                         , i_severity               => viu_info.severity_error
                         , i_info_arguments         => l_rt_asm.id_cust
                         , i_additional_data        =>    'i_rt_aet.id = "' || to_char( i_rt_aet.id )
                                                       || '"  i_act_id = "' || to_char( i_act_id ) || '"'
                         );
   end if;

   
   
   viu_module.leave_module( i_module      => l_con_proc_name );

exception
   
   when others
   then
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );
      
      
      
      viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
      
end stop_switch;

procedure stop_job
 (i_rt_aet in acl_application_elements%rowtype
 ,i_act_id in acl_aet_control_requests.id%type
 )
 is

l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.Stop_Job';

l_job_exists boolean;

l_found boolean;

l_rt_asm acl_aet_statuses_dom%rowtype;

l_rt_ass acl_aet_statuses%rowtype;

l_rt_aps acl_application_processes%rowtype;

l_rt_ujbv acl_user_jobs_v%rowtype;


cursor c_get_active_aet_processes
 (i_aet_id in acl_application_elements.id%type
 )
 is


select   aps.*
from     acl_application_processes aps
where    aps.aet_id = i_aet_id
and      aps.status <> acl_constant.g_con_aps_status_deregistered
order by aps.id
;
   






























begin
   viu_module.enter_module( i_module          => l_con_proc_name
                          , i_debug_info      => 'i_rt_aet.id = "' || to_char( i_rt_aet.id ) || '"  i_act_id = "' || to_char( i_act_id ) || '"'
                          );

   
   

   
   l_rt_asm  := acl_application_control.get_job_process_status( i_rt_aet      => i_rt_aet );

   if l_rt_asm.id <> acl_constant.g_con_asm_name_started
   then
      
      l_job_exists := acl_application_control.scheduler_job_exists( i_job_name => i_rt_aet.name);

      if l_job_exists
      then
         acl_application_control.remove_job( i_job_name => i_rt_aet.name);
      end if;

      
      viu_info.operator_info( i_ifo_nr                 => viu_constant.c_ifo_aclappelalreadyinstate
                            , i_calling_procedure      => l_con_proc_name
                            , i_severity               => viu_info.severity_notification
                            , i_info_arguments         =>    to_char( i_act_id ) || '##'
                                                          || i_rt_aet.id_cust || '##'
                                                          || l_rt_asm.id_cust
                            , i_additional_data        => case when l_job_exists
                                                               then 'Scheduler job still existed'
                                                               else null
                                                          end
                            );

      
   else
      

      
      
      
      
      for rec_aps in c_get_active_aet_processes( i_aet_id => i_rt_aet.id )
      loop

         
         l_found := acl_aps_tapi_pck.aps_select_row_upd( i_aps_id => rec_aps.id
                                                       , o_rt_aps => l_rt_aps
                                                       );

         
         l_rt_ujbv  := acl_application_control.get_job_record( i_job_name   => l_rt_aps.job_name );

         if l_rt_ujbv.is_job_executing_now = acl_constant.g_con_yesno_yes
         then
            
            
            
            
            
            
            
            
            

            
            if i_rt_aet.stop_signal is not null
            then
               acl_application_control.exec_procedure_call( i_aet_id_cust    => i_rt_aet.id_cust
                                                          , i_procedure_call => i_rt_aet.stop_signal
                                                          );
            else
               
               commit;
            end if;

            
            acl_application_control.wait_until_end_of_execution
               ( i_rt_aet        => i_rt_aet
               , i_rt_aps        => l_rt_aps
               , i_wait_interval => acl_common.get_parameter_value ( i_prr_name => acl_constant.g_con_pve_signal_wait_interval)
               , i_wait_timeout  => acl_common.get_parameter_value ( i_prr_name => acl_constant.g_con_pve_max_signal_wait_time)
               );
         end if;

         
         acl_application_control.remove_job( i_job_name => l_rt_aps.job_name );

         viu_info.operator_info( i_ifo_nr                 => viu_constant.c_ifo_acljobstopped
                               , i_calling_procedure      => l_con_proc_name
                               , i_severity               => viu_info.severity_notification
                               , i_info_arguments         =>    to_char( l_rt_aps.job_name )
                                                             || '##'
                                                             || i_rt_aet.id_cust
                                                             || '##'
                                                             || to_char( l_rt_aps.id )
                               , i_additional_data        =>    'i_rt_aet.id = "' || to_char( i_rt_aet.id )
                                                             || '"  i_act_id = "' || to_char( i_act_id ) || '"'
                               );

         
         acl_application_control.deregister_process( i_act_id                => i_act_id
                                                   , i_aps_id                => l_rt_aps.id
                                                   , i_reason_end            => acl_constant.g_con_aps_reason_stopped
                                                   , i_ind_finished_normally => acl_constant.g_con_yesno_yes
                                                   );

         
         commit;

      end loop;

      
      acl_application_control.exec_procedure_call( i_aet_id_cust    => i_rt_aet.id_cust
                                                 , i_procedure_call => i_rt_aet.stop_procedure_call
                                                 );
   end if;

   viu_module.leave_module( i_module      => l_con_proc_name );
exception
   
   when others
   then
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );

      
      viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
      
end stop_job;

procedure remove_job
 (i_job_name in acl_application_processes.job_name%type
 )
 is

l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.Remove_Job';


l_found boolean;
l_sqlerrm varchar2(4000);


l_exc_job_not_in_user_jobqueue exception;
pragma exception_init(l_exc_job_not_in_user_jobqueue, -27475);

l_exc_job_is_running exception;
pragma exception_init(l_exc_job_is_running, -27478);
   












































begin






   viu_module.enter_module( i_module          => l_con_proc_name
                          , i_debug_info      => 'i_job_name = "' || to_char( i_job_name ) || '"'
                          );

   
   begin
      dbms_scheduler.drop_job( job_name => i_job_name );
   exception
      
      
      
      when l_exc_job_not_in_user_jobqueue
      then
         
         
         
         
         
         
         
         
         
         
         
         

         l_sqlerrm  := sqlerrm;
         
         viu_info.operator_info( i_ifo_nr                 => viu_constant.c_ifo_acljobtoremovenotinqueue
                               , i_calling_procedure      => l_con_proc_name
                               , i_severity               => viu_info.severity_error
                               , i_info_arguments         => to_char( i_job_name ) || '##"' || l_sqlerrm || '"'
                               );
      when l_exc_job_is_running
      then
          
          
          
          begin
             dbms_scheduler.stop_job( job_name => i_job_name );
          exception
             when others
             then
                
                null;
          end;

          dbms_scheduler.drop_job( job_name => i_job_name );
   end;

   
   viu_module.leave_module( i_module      => l_con_proc_name );

exception
   
   when others
   then
      
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );
      
      
      
      viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
      
end remove_job;

procedure start_switch
 (i_rt_aet in acl_application_elements%rowtype
 ,i_act_id in acl_aet_control_requests.id%type
 )
 is

l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.Start_Switch';


l_found boolean;

l_rt_asm acl_aet_statuses_dom%rowtype;

l_rt_ass acl_aet_statuses%rowtype;

l_upd_count pls_integer;
   


































begin
   viu_module.enter_module( i_module          => l_con_proc_name
                          , i_debug_info      => 'i_rt_aet.id = "' || to_char( i_rt_aet.id ) || '"  i_act_id = "' || to_char( i_act_id ) || '"'
                          );
   
   
   
   
   
   
   
   
   
   l_rt_asm  := acl_application_control.get_switch_status( i_rt_aet      => i_rt_aet );

   
   
   
   
   
   
   
   
   
   if l_rt_asm.id is null
   then
      
      l_rt_ass.asm_id            := acl_constant.g_con_asm_name_started;
      l_rt_ass.act_id            := i_act_id;
      l_rt_ass.aet_id            := i_rt_aet.id;
      l_rt_ass.timestamp_change  := acl_common.default_timestamp;
      
      acl_ass_tapi_pck.ass_insert_row( io_rt_ass      => l_rt_ass );
   
   elsif l_rt_asm.id = acl_constant.g_con_asm_name_stopped
   then
      
      
      
      
      
            
            
      l_found                    := acl_ass_tapi_pck.ass_select_row_upd_uk1( i_ass_aet_id      => i_rt_aet.id
                                                                           , o_rt_ass          => l_rt_ass
                                                                           );

      if not l_found
      then
         viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_aclaetstatusrecnotfound
                            , i_calling_procedure      => l_con_proc_name
                            , i_severity               => viu_info.severity_error
                            , i_info_arguments         => i_rt_aet.id_cust
                            , i_additional_data        =>    'i_rt_aet.id = "' || to_char( i_rt_aet.id )
                                                          || '"  i_act_id = "' || to_char( i_act_id ) || '"'
                            );
      end if;

      
      l_rt_ass.asm_id            := acl_constant.g_con_asm_name_started;
      l_rt_ass.act_id            := i_act_id;
      l_rt_ass.timestamp_change  := acl_common.default_timestamp;
      
      l_upd_count                := acl_ass_tapi_pck.ass_update_row( i_ass_id       => l_rt_ass.id
                                                                   , io_rt_ass      => l_rt_ass
                                                                   );
   
   
   elsif l_rt_asm.id = acl_constant.g_con_asm_name_started
   then
      
      
      
      viu_info.operator_info( i_ifo_nr                 => viu_constant.c_ifo_aclappelalreadyinstate
                            , i_calling_procedure      => l_con_proc_name
                            , i_severity               => viu_info.severity_notification
                            , i_info_arguments         => to_char( i_act_id ) || '##' || i_rt_aet.id_cust || '##' || l_rt_asm.id_cust
                            , i_additional_data        =>    'i_rt_aet.id = "' || to_char( i_rt_aet.id )
                                                          || '"  i_act_id = "' || to_char( i_act_id ) || '"'
                            );
   
   else   
      viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_aclunexpectedstatus
                         , i_calling_procedure      => l_con_proc_name
                         , i_severity               => viu_info.severity_error
                         , i_info_arguments         => l_rt_asm.id_cust
                         , i_additional_data        =>    'i_rt_aet.id = "' || to_char( i_rt_aet.id )
                                                       || '"  i_act_id = "' || to_char( i_act_id ) || '"'
                         );
   end if;

   
   
   viu_module.leave_module( i_module      => l_con_proc_name );

exception
   
   when others
   then
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );
      
      
      
      viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
      
end start_switch;

procedure start_application
 (i_act_id in acl_aet_control_requests.id%type
 )
 is

l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.Start_Application';


l_found boolean;

l_rt_act acl_aet_control_requests%rowtype;

l_rt_aet acl_application_elements%rowtype;

l_rt_ace acl_aet_control_request_types%rowtype;


cursor c_app_elements_of_app_to_start
 (i_aet_id_application in acl_application_elements.id%type
 )
 is
select   aet.*
from     acl_application_elements aet
where    aet.aet_id_part_of  = i_aet_id_application
and      aet.aet_type       != acl_constant.g_con_aet_type_subapplication
and      aet.startup_type    = acl_constant.g_con_aet_startup_type_auto
order    by aet.startup_sequence asc nulls last
;
   




























begin
   viu_module.enter_module( i_module          => l_con_proc_name
                          , i_debug_info      => 'i_act_id = "' || to_char( i_act_id ) || '"'
                          );

      
   l_found  := acl_act_tapi_pck.act_select_row( i_act_id      => i_act_id
                                              , o_rt_act      => l_rt_act
                                              );

   if not l_found
   then
      viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_aclunexpectedparamvalue
                         , i_calling_procedure      => l_con_proc_name
                         , i_severity               => viu_info.severity_error
                         , i_info_arguments         =>    'i_act_id'
                                                       || '##'
                                                       || l_con_proc_name
                                                       || '##'
                                                       || to_char( i_act_id )
                                                       || '##'
                                                       || 'AET CONTROL REQUEST not found'
                         );
   end if;

   
   l_found  := acl_aet_tapi_pck.aet_select_row( i_aet_id      => l_rt_act.aet_id
                                              , o_rt_aet      => l_rt_aet
                                              );

   
   l_found  := acl_ace_tapi_pck.ace_select_row( i_ace_id      => l_rt_act.ace_id
                                              , o_rt_ace      => l_rt_ace
                                              );

   
   if l_rt_ace.id = acl_constant.g_con_ace_name_start
   then

      if l_rt_aet.aet_type = acl_constant.g_con_aet_type_application
      then
         
         acl_application_control.exec_procedure_call( i_aet_id_cust    => l_rt_aet.id_cust
                                                    , i_procedure_call => l_rt_aet.start_procedure_call
                                                    );

         
         
         <<app_elem_loop>>
         for rec_aet in c_app_elements_of_app_to_start( i_aet_id_application      => l_rt_aet.id )
         loop

            
            acl_application_control.issue_aet_control_request( i_rt_aet      => rec_aet
                                                             , i_rt_ace      => l_rt_ace
                                                             , i_act_id      => i_act_id
                                                             );
         end loop app_elem_loop;
      else   
         viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_aclunexpectedparamvalue
                            , i_calling_procedure      => l_con_proc_name
                            , i_severity               => viu_info.severity_error
                            , i_info_arguments         =>    'l_rt_aet.aet_type'
                                                          || '##'
                                                          || l_con_proc_name
                                                          || '##'
                                                          || l_rt_aet.aet_type
                                                          || '##'
                                                          || 'Application Element must be of type Application'
                            );
      end if;

   else   
      viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_aclunexpectedrequesttype
                         , i_calling_procedure      => l_con_proc_name
                         , i_severity               => viu_info.severity_error
                         , i_info_arguments         =>    l_rt_ace.id_cust
                                                       || '##'
                                                       || l_rt_aet.id_cust
                         , i_additional_data        => 'i_act_id = "' || to_char( i_act_id ) || '"'
                         );
   end if;

   viu_module.leave_module( i_module      => l_con_proc_name );

exception
   when others
   then
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );

      
      viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
end start_application;

procedure stop_application
 (i_act_id in acl_aet_control_requests.id%type
 )
 is

l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.Stop_Application';


l_found boolean;

l_rt_act acl_aet_control_requests%rowtype;

l_rt_aet acl_application_elements%rowtype;

l_rt_ace acl_aet_control_request_types%rowtype;


cursor c_app_elements_of_app_to_stop
 (i_aet_id_application in acl_application_elements.id%type
 )
 is
select   aet.*
from     acl_application_elements aet
where    aet.aet_id_part_of = i_aet_id_application
and      aet.aet_type      != acl_constant.g_con_aet_type_subapplication
order by aet.shutdown_sequence asc nulls last
;
   





























begin
   viu_module.enter_module( i_module          => l_con_proc_name
                          , i_debug_info      => 'i_act_id = "' || to_char( i_act_id ) || '"'
                          );
   
   
   
   
   
   
   
      
   l_found  := acl_act_tapi_pck.act_select_row( i_act_id      => i_act_id
                                              , o_rt_act      => l_rt_act
                                              );

   if not l_found
   then
      viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_aclunexpectedparamvalue
                         , i_calling_procedure      => l_con_proc_name
                         , i_severity               => viu_info.severity_error
                         , i_info_arguments         =>    'i_act_id'
                                                       || '##'
                                                       || l_con_proc_name
                                                       || '##'
                                                       || to_char( i_act_id )
                                                       || '##'
                                                       || 'AET CONTROL REQUEST not found'
                         );
   end if;

   
   l_found  := acl_aet_tapi_pck.aet_select_row( i_aet_id      => l_rt_act.aet_id
                                              , o_rt_aet      => l_rt_aet
                                              );
   
   
   
   l_found  := acl_ace_tapi_pck.ace_select_row( i_ace_id      => l_rt_act.ace_id
                                              , o_rt_ace      => l_rt_ace
                                              );

   
   
   if l_rt_ace.id = acl_constant.g_con_ace_name_stop
   then
      
      if l_rt_aet.aet_type = acl_constant.g_con_aet_type_application
      then

         
         
         
         <<app_elem_loop>>
         for rec_aet in c_app_elements_of_app_to_stop( i_aet_id_application      => l_rt_aet.id )
         loop
            
            
            
            
            
            acl_application_control.issue_aet_control_request( i_rt_aet      => rec_aet
                                                             , i_rt_ace      => l_rt_ace
                                                             , i_act_id      => i_act_id
                                                             );
         end loop app_elem_loop;
      else   
         viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_aclunexpectedparamvalue
                            , i_calling_procedure      => l_con_proc_name
                            , i_severity               => viu_info.severity_error
                            , i_info_arguments         =>       'l_rt_aet.aet_type'
                                                          || '##'
                                                          || l_con_proc_name
                                                          || '##'
                                                          || l_rt_aet.aet_type
                                                          || '##'
                                                          || 'Application Element must be of type Application'
                            );
      end if;
   
   else   
      viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_aclunexpectedrequesttype
                         , i_calling_procedure      => l_con_proc_name
                         , i_severity               => viu_info.severity_error
                         , i_info_arguments         =>    l_rt_ace.id_cust
                                                       || '##'
                                                       || l_rt_aet.id_cust
                         , i_additional_data        => 'i_act_id = "' || to_char( i_act_id ) || '"'
                         );
   end if;

   
   viu_module.leave_module( i_module      => l_con_proc_name );

exception
   
   when others
   then
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );
      
      
      
      viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
      
end stop_application;

procedure abort_app_element
 (i_rt_aet in acl_application_elements%rowtype
 ,i_act_id in acl_aet_control_requests.id%type
 ,i_error_description in acl_application_processes.reason_end%type := null
 )
 is

l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.Abort_App_Element';
   

















































begin
   viu_module.enter_module( i_module          => l_con_proc_name
                          , i_debug_info      =>    'i_rt_aet.id = "' || to_char( i_rt_aet.id ) || '"  i_act_id = "' || to_char( i_act_id )
                                                 || '"  i_error_description = "'||i_error_description||'"'
                          );

   
   
   
   
   
   
   
   
   
   
   
   
   
   
   case i_rt_aet.aet_type
      when acl_constant.g_con_aet_type_switch   
      then
         acl_application_control.abort_switch( i_rt_aet      => i_rt_aet
                                             , i_act_id      => i_act_id
                                             );
      when acl_constant.g_con_aet_type_background_job   
      then
         acl_application_control.abort_job( i_rt_aet            => i_rt_aet
                                          , i_act_id            => i_act_id
                                          , i_error_description => i_error_description
                                          );
      else
         viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_aclunexpectedparamvalue
                            , i_calling_procedure      => l_con_proc_name
                            , i_severity               => viu_info.severity_error
                            , i_info_arguments         =>    'i_rt_aet.aet_type' || '##'
                                                          || l_con_proc_name     || '##'
                                                          || i_rt_aet.aet_type   || '##'
                            , i_additional_data        =>    'i_rt_aet.id = "' || to_char( i_rt_aet.id )
                                                          || '"  i_act_id = "' || to_char( i_act_id )
                                                          || '"  i_error_description = "'||i_error_description||'"'
                            );
   end case;

   
   viu_module.leave_module( i_module      => l_con_proc_name );

exception
   
   when others
   then
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );
      
      
      
      viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
      
end abort_app_element;

procedure abort_switch
 (i_rt_aet in acl_application_elements%rowtype
 ,i_act_id in acl_aet_control_requests.id%type
 )
 is

l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.Abort_Switch';
   


























begin
   viu_module.enter_module( i_module          => l_con_proc_name
                          , i_debug_info      => 'i_rt_aet.id = "' || to_char( i_rt_aet.id ) || '"  i_act_id = "' || to_char( i_act_id ) || '"'
                          );
   
   
   
   
   
   
   
   
   
   

   
   acl_application_control.stop_switch( i_rt_aet      => i_rt_aet
                                      , i_act_id      => i_act_id
                                      );
   
   viu_module.leave_module( i_module      => l_con_proc_name );

exception
   
   when others
   then
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );
      
      
      
      viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
      
end abort_switch;

procedure abort_job
 (i_rt_aet in acl_application_elements%rowtype
 ,i_act_id in acl_aet_control_requests.id%type
 ,i_error_description in acl_application_processes.reason_end%type := null
 )
 is


cursor c_aps_latest_of_aet
 (i_aet_id in acl_application_processes.aet_id%type
 )
 is
select *
from   (select   *
        from     acl_application_processes aps
        where    aps.aet_id = i_aet_id
        order by aps.date_created desc
               , aps.id           desc
       )
where rownum = 1 
;

l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.Abort_Job';


l_rt_aps c_aps_latest_of_aet%rowtype;

l_rec_count pls_integer := 0;

l_rt_ujbv acl_user_jobs_v%rowtype;


cursor c_get_active_aet_processes
 (i_aet_id in acl_application_elements.id%type
 )
 is


select   aps.*
from     acl_application_processes aps
where    aps.aet_id = i_aet_id
and      aps.status <> acl_constant.g_con_aps_status_deregistered
order by aps.id
;
   















































begin
   viu_module.enter_module( i_module          => l_con_proc_name
                          , i_debug_info      => 'i_rt_aet.id = "' || to_char( i_rt_aet.id )
                                                 || '"  i_act_id = "' || to_char( i_act_id )
                                                 || '"  i_error_description = "'||i_error_description||'"'
                          );
   
   
   
   
   
   
   
   acl_application_control.stop_job( i_rt_aet      => i_rt_aet
                                   , i_act_id      => i_act_id
                                   );

   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   if acl_application_control.get_job_process_status( i_rt_aet => i_rt_aet ).id
                                               <> acl_constant.g_con_asm_name_started
   then 
      if i_error_description is not null
      then
         open c_aps_latest_of_aet ( i_aet_id => i_rt_aet.id);
         fetch c_aps_latest_of_aet into l_rt_aps;
         
         
         
         
         
         close c_aps_latest_of_aet;
         acl_application_control.deregister_process( i_act_id                => i_act_id
                                                   , i_aps_id                => l_rt_aps.id
                                                   , i_reason_end            => i_error_description
                                                   );
         
         commit;
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
      end if;
   
   
   
   
   else 
        
           
           
      
      
      <<active_aps_loop>>
      for rec_aps in c_get_active_aet_processes( i_aet_id      => i_rt_aet.id )
      loop
         
         
         
         
         
         if acl_application_control.session_alive( i_unique_session_id      => rec_aps.unique_session_id )
         then
                       
            
            
            
            
            acl_application_control.kill_process_session( i_rt_aps                         => rec_aps
                                                        , i_act_id                         => i_act_id
                                                        , i_ind_allow_immediate_abort      => i_rt_aet.ind_allow_immediate_abort
                                                        );
         end if;

                 
         
         
         l_rt_ujbv    := acl_application_control.get_job_record( i_job_name  => rec_aps.job_name );
         
         
         
         
                
         if l_rt_ujbv.job_name is not null
         then
            acl_application_control.remove_job( i_job_name => rec_aps.job_name );
            
            l_rt_ujbv    := acl_application_control.get_job_record( i_job_name => rec_aps.job_name );

            
            if l_rt_ujbv.job_name is not null
            then
               viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_acljobremovedstillexists
                                  , i_calling_procedure      => l_con_proc_name
                                  , i_severity               => viu_info.severity_warning
                                  , i_info_arguments         =>    to_char( rec_aps.job_name )
                                                                || '##'
                                                                || to_char( rec_aps.id )
                                                                || '##'
                                                                || i_rt_aet.id_cust
                                  );
            end if;
         end if;

         
         
         
         
         
         
         
         
         
         
         if i_error_description is null
         then
            acl_application_control.deregister_process( i_act_id                => i_act_id
                                                      , i_aps_id                => rec_aps.id
                                                      , i_reason_end            => acl_constant.g_con_aps_reason_aborted
                                                      , i_ind_finished_normally => acl_constant.g_con_yesno_yes
                                                      );
         else
            acl_application_control.deregister_process( i_act_id                => i_act_id
                                                      , i_aps_id                => rec_aps.id
                                                      , i_reason_end            => i_error_description
                                                      );
         end if;
         
         
         
         commit;
         
         
         l_rec_count  := c_get_active_aet_processes%rowcount;
      
      end loop active_aps_loop;
      
      
      
      
      
      
      if l_rec_count > 1
      then
         viu_info.operator_info( i_ifo_nr                 => viu_constant.c_ifo_aclmultiplejobsfound
                               , i_calling_procedure      => l_con_proc_name
                               , i_severity               => viu_info.severity_error
                               , i_info_arguments         => to_char( l_rec_count ) || '##' || i_rt_aet.id_cust
                               , i_additional_data        =>    'i_rt_aet.id = "' || to_char( i_rt_aet.id )
                                                             || '"  i_act_id = "' || to_char( i_act_id )
                                                             || '"  i_error_description = "'||i_error_description||'"'
                               );
      end if;
      
      
   end if;

   
   
   viu_module.leave_module( i_module      => l_con_proc_name );

exception
   
   when others
   then
      
      if c_aps_latest_of_aet%isopen
      then
        close c_aps_latest_of_aet;
      end if;
      
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );
      
      
      
      viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
      
end abort_job;

function session_alive
 (i_unique_session_id in acl_constant.st_unique_session_id
 )
 return boolean
 is

l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.Session_Alive';

l_liveliness boolean := null;

l_sqlerrm varchar2(4000);
   




















































begin
   viu_module.enter_module( i_module          => l_con_proc_name
                          , i_debug_info      => 'i_unique_session_id = "' || i_unique_session_id || '"'
                          );

   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
      
   if i_unique_session_id is not null
   then
      begin
         l_liveliness  := dbms_session.is_session_alive( i_unique_session_id );
      exception
         when others
         then
            l_sqlerrm     := sqlerrm;
            viu_info.operator_info( i_ifo_nr                 => viu_constant.c_ifo_aclunexpectedparamvalue
                                  , i_calling_procedure      => l_con_proc_name
                                  , i_severity               => viu_info.severity_error
                                  , i_info_arguments         =>    'i_unique_session_id'
                                                                || '##'
                                                                || l_con_proc_name
                                                                || '##'
                                                                || i_unique_session_id
                                                                || '##'
                                                                || 'Invalid Session ID causing error: "'
                                                                || l_sqlerrm
                                                                || '"'
                                  );
            
            l_liveliness  := null;
      end;
   end if;

   viu_module.leave_module( i_module      => l_con_proc_name );
   
   return l_liveliness;
   
exception
   
   when others
   then
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );
      
      
      
      viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
      
end session_alive;

procedure kill_process_session
 (i_rt_aps in acl_application_processes%rowtype
 ,i_act_id in acl_aet_control_requests.id%type
 ,i_ind_allow_immediate_abort in acl_application_elements.ind_allow_immediate_abort%type
 )
 is

l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.Kill_Process_session';


l_found boolean;

l_rt_aet acl_application_elements%rowtype;


l_exc_insufficient_privileges exception;
pragma exception_init(l_exc_insufficient_privileges, -1031);
   





















































begin
   viu_module.enter_module( i_module          => l_con_proc_name
                          , i_debug_info      =>    'i_rt_aps.id = "'
                                                 || to_char( i_rt_aps.id )
                                                 || '"  i_act_id = "'
                                                 || to_char( i_act_id )
                                                 || '"  i_ind_allow_immediate_abort = "'
                                                 || i_ind_allow_immediate_abort
                                                 || '"'
                          );

   
   
   
   
   
   
   
   if i_rt_aps.ind_controlled = acl_constant.g_con_yesno_yes
   then
      

      
      

      l_found := acl_aet_tapi_pck.aet_select_row( i_aet_id   => i_rt_aps.aet_id
                                                , o_rt_aet   => l_rt_aet
                                                );

      
      
      
      if acl_application_control.session_alive( i_unique_session_id      => i_rt_aps.unique_session_id )
      then
         
         
         
         
         
         
         
         
                  
                  
                  
                  
                  
         if    i_ind_allow_immediate_abort is null
            or i_ind_allow_immediate_abort not in( acl_constant.g_con_yesno_yes, acl_constant.g_con_yesno_no )
         then
            viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_aclunexpectedparamvalue
                               , i_calling_procedure      => l_con_proc_name
                               , i_severity               => viu_info.severity_error
                               , i_info_arguments         =>    'i_ind_allow_immediate_abort'
                                                             || '##'
                                                             || l_con_proc_name
                                                             || '##'
                                                             || i_ind_allow_immediate_abort
                                                             || '##'
                               , i_additional_data        =>    'i_rt_aps.id = "'
                                                             || to_char( i_rt_aps.id )
                                                             || '"  i_act_id = "'
                                                             || to_char( i_act_id )
                                                             || '"  i_ind_allow_immediate_abort = "'
                                                             || i_ind_allow_immediate_abort
                                                             || '"'
                               );
         end if;

         
         
         if i_rt_aps.sid is null
         then
            viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_aclunexpectedparamvalue
                               , i_calling_procedure      => l_con_proc_name
                               , i_severity               => viu_info.severity_error
                               , i_info_arguments         =>    'i_rt_aps.sid'
                                                             || '##'
                                                             || l_con_proc_name
                                                             || '##'
                                                             || i_rt_aps.sid
                                                             || '##'
                                                             || 'Input value SID is NULL'
                               , i_additional_data        =>    'i_rt_aps.id = "'
                                                             || to_char( i_rt_aps.id )
                                                             || '"  i_act_id = "'
                                                             || to_char( i_act_id )
                                                             || '"  i_ind_allow_immediate_abort = "'
                                                             || i_ind_allow_immediate_abort
                                                             || '"'
                               );
         end if;

         
         
         if i_rt_aps.serial# is null
         then
            viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_aclunexpectedparamvalue
                               , i_calling_procedure      => l_con_proc_name
                               , i_severity               => viu_info.severity_error
                               , i_info_arguments         =>    'i_rt_aps.serial'
                                                             || '##'
                                                             || l_con_proc_name
                                                             || '##'
                                                             || i_rt_aps.serial#
                                                             || '##'
                                                             || 'Input value SERIAL# is NULL'
                               , i_additional_data        =>    'i_rt_aps.id = "'
                                                             || to_char( i_rt_aps.id )
                                                             || '"  i_act_id = "'
                                                             || to_char( i_act_id )
                                                             || '"  i_ind_allow_immediate_abort = "'
                                                             || i_ind_allow_immediate_abort
                                                             || '"'
                               );
         end if;

         
         declare
            l_con_proc_name2     constant acl_constant.st_proc_name := 'Acl_Userpriv_Utils.Kill_Session';
         begin
            acl_userpriv_utils.kill_session( i_sid                => i_rt_aps.sid
                                           , i_serial#            => i_rt_aps.serial#
                                           , i_ind_immediate      => i_ind_allow_immediate_abort
                                           );
         exception
            when l_exc_insufficient_privileges
            then
               
               
               
               
               
               
               viu_info.operator_info( i_ifo_nr                 => viu_constant.c_ifo_aclinsufficientprivs
                                     , i_calling_procedure      => l_con_proc_name
                                     , i_severity               => viu_info.severity_warning
                                     , i_info_arguments         => l_con_proc_name2
                                     , i_additional_data        =>    'Application Element = '
                                                                   || l_rt_aet.id_cust
                                                                   || '"  i_rt_aps.id = "'
                                                                   || to_char( i_rt_aps.id )
                                                                   || '"  i_act_id = "'
                                                                   || to_char( i_act_id )
                                                                   || '"  i_ind_allow_immediate_abort = "'
                                                                   || i_ind_allow_immediate_abort
                                                                   || '"'
                                     );
            
            when others
            then
               viu_info.handle_info;
         end;

         
         
         
         
         
         
         
         if acl_application_control.session_alive( i_unique_session_id      => i_rt_aps.unique_session_id )
         then
            viu_info.operator_info( i_ifo_nr                 => viu_constant.c_ifo_aclkilledsessionaliveyet
                                  , i_calling_procedure      => l_con_proc_name
                                  , i_severity               => viu_info.severity_warning
                                  , i_info_arguments         =>    to_char( i_rt_aps.id )
                                                                || '##'
                                                                || l_rt_aet.id_cust
                                                                || '##'
                                                                || i_rt_aps.unique_session_id
                                                                || '##'
                                                                || i_rt_aps.sid
                                                                || '##'
                                                                || i_rt_aps.serial#
                                  , i_additional_data        =>    'i_rt_aps.id = "'
                                                                || to_char( i_rt_aps.id )
                                                                || '"  i_act_id = "'
                                                                || to_char( i_act_id )
                                                                || '"  i_ind_allow_immediate_abort = "'
                                                                || i_ind_allow_immediate_abort
                                                                || '"'
                                  );
         end if;
      else   
         
         null;
      end if;
   
   else   
            
      
      
      
      
      
      viu_info.operator_info( i_ifo_nr                 => viu_constant.c_ifo_aclcantkilluncontrolled
                            , i_calling_procedure      => l_con_proc_name
                            , i_severity               => viu_info.severity_error
                            , i_info_arguments         => to_char( i_rt_aps.id )
                            , i_additional_data        =>    'i_rt_aps.id = "'
                                                          || to_char( i_rt_aps.id )
                                                          || '"  i_act_id = "'
                                                          || to_char( i_act_id )
                                                          || '"  i_ind_allow_immediate_abort = "'
                                                          || i_ind_allow_immediate_abort
                                                          || '"'
                            );
   end if;

   


   
   viu_module.leave_module( i_module      => l_con_proc_name );

exception
   when others
   then
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );
      
      
      
      viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
      
end kill_process_session;

procedure abort_application
 (i_act_id in acl_aet_control_requests.id%type
 ,i_error_description in acl_application_processes.reason_end%type := null
 )
 is

l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.Abort_Application';


l_found boolean;

l_rt_act acl_aet_control_requests%rowtype;

l_rt_aet acl_application_elements%rowtype;

l_rt_ace acl_aet_control_request_types%rowtype;


cursor c_app_elements_of_app_to_stop
 (i_aet_id_application in acl_application_elements.id%type
 )
 is
select   aet.*
from     acl_application_elements aet
where    aet.aet_id_part_of = i_aet_id_application
and      aet.aet_type      != acl_constant.g_con_aet_type_subapplication
order by aet.shutdown_sequence asc nulls last
;
   










































begin
   viu_module.enter_module( i_module          => l_con_proc_name
                          , i_debug_info      => 'i_act_id = "' || to_char( i_act_id )
                                                 || '"  i_error_description = "'||i_error_description||'"'

                          );
   
   
   
   
   
   
   
      
   l_found  := acl_act_tapi_pck.act_select_row( i_act_id      => i_act_id
                                              , o_rt_act      => l_rt_act
                                              );

   if not l_found
   then
      viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_aclunexpectedparamvalue
                         , i_calling_procedure      => l_con_proc_name
                         , i_severity               => viu_info.severity_error
                         , i_info_arguments         =>    'i_act_id'
                                                       || '##'
                                                       || l_con_proc_name
                                                       || '##'
                                                       || to_char( i_act_id )
                                                       || '##'
                                                       || 'AET CONTROL REQUEST not found'
                         );
   end if;

   
   l_found  := acl_aet_tapi_pck.aet_select_row( i_aet_id      => l_rt_act.aet_id
                                              , o_rt_aet      => l_rt_aet
                                              );
   
   
   
   l_found  := acl_ace_tapi_pck.ace_select_row( i_ace_id      => l_rt_act.ace_id
                                              , o_rt_ace      => l_rt_ace
                                              );

   
   
   if l_rt_ace.id = acl_constant.g_con_ace_name_abort
   then
      
      if l_rt_aet.aet_type = acl_constant.g_con_aet_type_application
      then

         
         
            
         <<app_elem_loop>>
         for rec_aet in c_app_elements_of_app_to_stop( i_aet_id_application      => l_rt_aet.id )
         loop
            
            
            
            
            
            acl_application_control.issue_aet_control_request( i_rt_aet            => rec_aet
                                                             , i_rt_ace            => l_rt_ace
                                                             , i_act_id            => i_act_id
                                                             , i_error_description => i_error_description
                                                             );
         end loop app_elem_loop;
      else   
         viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_aclunexpectedparamvalue
                            , i_calling_procedure      => l_con_proc_name
                            , i_severity               => viu_info.severity_error
                            , i_info_arguments         =>    'l_rt_aet.aet_type'
                                                          || '##'
                                                          || l_con_proc_name
                                                          || '##'
                                                          || l_rt_aet.aet_type
                                                          || '##'
                                                          || 'Must be application here'
                            , i_additional_data        =>    'i_act_id = "' || to_char( i_act_id )
                                                          || '"  i_error_description = "' || i_error_description
                                                          || '"'
                            );
      end if;
   
   else   
      viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_aclunexpectedrequesttype
                         , i_calling_procedure      => l_con_proc_name
                         , i_severity               => viu_info.severity_error
                         , i_info_arguments         =>    l_rt_ace.id_cust
                                                       || '##'
                                                       || l_rt_aet.id_cust
                         , i_additional_data        =>    'i_act_id = "' || to_char( i_act_id )
                                                       || '"  i_error_description = "' || i_error_description
                                                       || '"'
                         );
   end if;

   
   viu_module.leave_module( i_module      => l_con_proc_name );

exception
   
   when others
   then
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );
      
      
      
      viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
      
end abort_application;

function is_session_alive
 (i_unique_session_id in acl_constant.st_unique_session_id
 )
 return varchar2
 is

l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.Is_Session_Alive';

l_returnval varchar2(240);
   
































begin
   viu_module.enter_module( i_module          => l_con_proc_name
                          , i_debug_info      => 'i_unique_session_id = "' || i_unique_session_id || '"'
                          );

   
   
   
   
   

   l_returnval := case acl_application_control.session_alive ( i_unique_session_id => i_unique_session_id)
                     when true
                        then acl_constant.g_con_yesno_yes
                     when false
                        then acl_constant.g_con_yesno_no
                     else null
                  end;

   viu_module.leave_module( i_module      => l_con_proc_name );
   
   return l_returnval;
   
exception
   
   when others
   then
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );
      
      
      
      viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
      
end is_session_alive;

function select_status
 (i_aet_id_cust in acl_application_elements.id_cust%type
 )
 return acl_aet_statuses_dom.id_cust%type
 is

l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.Select_status';


l_rt_asm acl_aet_statuses_dom%rowtype;
l_retval acl_aet_statuses_dom.id_cust%type;
































begin
   viu_module.enter_module( i_module          => l_con_proc_name
                          , i_debug_info      => '  i_aet_id_cust = "' || i_aet_id_cust || '"'
                          );

   
   
   
   
   
   
   
   
   
   
   
   g_select_status_without_change := true;

   l_retval := get_status_value( i_aet_id_cust => i_aet_id_cust ).id_cust;

   g_select_status_without_change := false;

   viu_module.leave_module( i_module          => l_con_proc_name );

   return l_retval;

exception
   when others
   then
      
      g_select_status_without_change := false;
      
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );
      
      
      
      viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
end select_status;

function invoke
 (verb in acl_aet_control_request_types.id_cust%type
 ,object_name in acl_constant.st_appmon_objectname := null
 )
 return acl_constant.st_appmon_return_value
 is

l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.Invoke';


l_objectname_sep acl_parameter_values.value%type;

l_return_value acl_constant.st_appmon_return_value;

l_property acl_constant.st_appmon_objectname;

l_application acl_constant.st_appmon_return_value;

l_applicationelement acl_constant.st_appmon_return_value;

l_rt_aet acl_application_elements%rowtype;

l_rt_atn acl_application_elements%rowtype;

l_rt_asm acl_aet_statuses_dom%rowtype;

l_aet_id_cust acl_application_elements.id_cust%type;

l_rt_ace acl_aet_control_request_types%rowtype;

l_error_description acl_application_processes.reason_end%type;

l_found boolean;

l_success boolean;

cursor c_list_subapp
 is
select   aet.id_cust
,        aet.name
from     acl_application_elements aet
where    aet.aet_type = acl_constant.g_con_aet_type_subapplication
order by id;

























































































begin
   viu_module.enter_module( i_module          => l_con_proc_name
                          , i_debug_info      => 'verb = "' || verb
                                                 || '"  object_name = "'||object_name
                                                 || '"'
                          );
   
   
   
   
   
   
   
   
   
   
   
   
   
      
   l_found := acl_ace_tapi_pck.ace_select_row_uk2 ( i_ace_id_cust => verb
                                                  , o_rt_ace      => l_rt_ace
                                                  );
						  
   if not l_found
   then
      viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_aclunknownapprequesttype
                         , i_calling_procedure      => l_con_proc_name
                         , i_severity               => viu_info.c_severity_error
                         , i_info_arguments         => verb
                         , i_additional_data        => 'object_name = "' || object_name || '"'
                         );
   end if;
   
   
   
   if object_name is not null
   then
      
      l_property := acl_common.get_parameter_value ( i_prr_name => acl_constant.g_con_pve_appmon_atn_property);
      
      l_application := acl_application_control.get_objectname_property_value ( i_object_name => object_name
                                                                             , i_property    => l_property
                                                                             );
      
      l_property := acl_common.get_parameter_value ( i_prr_name => acl_constant.g_con_pve_appmon_aet_property);
      
      l_applicationelement := acl_application_control.get_objectname_property_value ( i_object_name => object_name
                                                                                    , i_property    => l_property
                                                                                    );
      
      if l_application is null
      then
         
         viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_aclunexpectedparamvalue
                            , i_calling_procedure      => l_con_proc_name
                            , i_severity               => viu_info.severity_error
                            , i_info_arguments         =>    'Property "Application"'
                                                          || '##' || l_con_proc_name
                                                          || '##' || ' '
                                                          || '##' || 'property not specified (NULL)'
                            , i_additional_data        =>    'verb = "' || verb
                                                          || '"; object_name = "' || object_name||'"'
                            );
      else  
         
         
         
         
         
         
         l_found := acl_aet_tapi_pck.aet_select_row_uk2 ( i_aet_id_cust => l_application
                                                        , o_rt_aet      => l_rt_atn
                                                        );
         if    not l_found
            or l_rt_atn.aet_type not in ( acl_constant.g_con_aet_type_application
                                        , acl_constant.g_con_aet_type_subapplication
                                        )
         then
            viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_aclunexpectedparamvalue
                               , i_calling_procedure      => l_con_proc_name
                               , i_severity               => viu_info.severity_error
                               , i_info_arguments         =>    'Property "Application"'
                                                             || '##' || l_con_proc_name
                                                             || '##' || l_application
                                                             || '##' || 'no such Application exists'
                               , i_additional_data        =>    'verb = "' || verb
                                                             || '"; object_name = "' || object_name||'"'
                               );
         else 
            if  l_applicationelement is not null
            and l_rt_atn.aet_type = acl_constant.g_con_aet_type_application
            then
               
               l_found := acl_aet_tapi_pck.aet_select_row_uk2 ( i_aet_id_cust => l_applicationelement
                                                              , o_rt_aet      => l_rt_aet
                                                              );
               if    not l_found
                  or l_rt_aet.aet_id_part_of <> l_rt_atn.id 
               then
                  viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_aclappelemnotinappl
                                     , i_calling_procedure      => l_con_proc_name
                                     , i_severity               => viu_info.severity_error
                                     , i_info_arguments         => l_applicationelement || '##' || l_application
                                     , i_additional_data        =>    'verb = "' || verb
                                                                   || '"; object_name = "' || object_name||'"'
                                     );
               end if;
            end if;
         end if;
      end if;
      
      
      
      
      
      
      
      if l_applicationelement is null
      then
         l_aet_id_cust := l_application;
      else
         l_aet_id_cust := l_applicationelement;
      end if;

   end if;
   
   
   
   
   if l_rt_ace.id = acl_constant.g_con_ace_name_get_status
   then
      if l_rt_atn.aet_type = acl_constant.g_con_aet_type_application
      then
         acl_application_control.get_status ( i_aet_id_cust       => l_aet_id_cust
                                            , o_asm_id_cust       => l_return_value
                                            , o_error_description => l_error_description
                                            );

         
         
         
         
         

         if l_error_description is not null
         then
            l_found := acl_asm_tapi_pck.asm_select_row_uk2 ( i_asm_id_cust => l_return_value
                                                           , o_rt_asm      => l_rt_asm
                                                           );
            l_return_value := l_return_value||' '||l_error_description;

         end if;
      else 
      	 l_return_value := acl_interface.invoke ( i_name        => l_rt_atn.name
      	                                        , i_verb        => verb
      	                                        , i_object_name => object_name
      	                                        );
      end if;

      
      
      
      
   
   elsif l_rt_ace.id = acl_constant.g_con_ace_name_list_applicatio
   then
      
      
      if object_name is not null
      then
         viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_aclunexpectedparamvalue
                            , i_calling_procedure      => l_con_proc_name
                            , i_severity               => viu_info.severity_error
                            , i_info_arguments         =>    'object_name'
                                                          || '##' || l_con_proc_name
                                                          || '##' || object_name
                                                          || '##' || 'object_name must be NULL with "list" command'
                            , i_additional_data        =>    'verb = "' || verb
                                                          || '"; object_name = "' || object_name||'"'
                            );
      end if;
      
      
      
      l_return_value := acl_application_control.list_app_elements;

      
      l_objectname_sep     := acl_common.get_parameter_value( i_prr_name => acl_constant.g_con_pve_appmon_objname_sep );

      
      

      for r_list_subapp in c_list_subapp
      loop
         l_return_value := l_return_value ||
                           l_objectname_sep ||
                           acl_interface.invoke( i_name        => r_list_subapp.name
      	                                       , i_verb        => verb
      	                                       , i_object_name => object_name
      	                                       );
      end loop;
      
      
      
      
      
      
   
   elsif l_rt_ace.id = acl_constant.g_con_ace_name_applicationinfo
   then
      
      
      if object_name is not null
      then
         viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_aclunexpectedparamvalue
                            , i_calling_procedure      => l_con_proc_name
                            , i_severity               => viu_info.severity_error
                            , i_info_arguments         =>    'object_name'
                                                          || '##' || l_con_proc_name
                                                          || '##' || object_name
                                                          || '##' || 'object_name must be NULL with "applicationinfo" command'
                            , i_additional_data        =>    'verb = "' || verb
                                                          || '"; object_name = "' || object_name||'"'
                            );
      end if;
      
      declare
         l_msg xmltype;
      begin
         


         execute immediate 'BEGIN :l_msg := acl_diagnostic_data.get_state_overview; END;'
         using   out l_msg;
         l_return_value := l_msg.getclobval;
      end;
      
      
   else
      
      
      
      
      
      
      
      
      
      
      if l_aet_id_cust is null
      then
         
         
      
         for r_appl in ( select id_cust
                           from acl_application_elements
                          where aet_type = acl_constant.g_con_aet_type_application )
         loop
                 
            
            l_found := acl_aet_tapi_pck.aet_select_row_uk2 ( i_aet_id_cust => r_appl.id_cust
                                                           , o_rt_aet      => l_rt_atn
                                                           );
         
             acl_application_control.handle_request ( i_aet_id_cust => r_appl.id_cust
                                                    , i_ace_id_cust => l_rt_ace.id_cust
                                                    , o_success     => l_success
                                                    );
         end loop;
         
      else
          if l_rt_atn.aet_type = acl_constant.g_con_aet_type_application
          then
             if l_applicationelement is null
             then
                for r_list_subapp in c_list_subapp
                loop
                   l_return_value := acl_interface.invoke( i_name        => r_list_subapp.name
                                                         , i_verb        => verb
                                                         , i_object_name => replace( object_name
                                                                                   , l_application
                                                                                   , r_list_subapp.id_cust
                                                                                   )
                                                         );
                end loop;
             end if;

             acl_application_control.handle_request ( i_aet_id_cust => l_aet_id_cust
                                                    , i_ace_id_cust => l_rt_ace.id_cust
                                                    , o_success     => l_success
                                                    );
          else 
             l_return_value := acl_interface.invoke( i_name        => l_rt_atn.name
                                                   , i_verb        => verb
                                                   , i_object_name => object_name
                                                   );
          end if;

          
          
          
          
          
          
          
      end if;
   end if;

   
   viu_info.operator_info( i_ifo_nr                 => viu_constant.c_ifo_aclrequestissued
                         , i_calling_procedure      => l_con_proc_name
                         , i_severity               => viu_info.severity_notification
                         , i_info_arguments         =>    verb
                                                       || '##'
                                                       || object_name
                                                       || '##'
                                                       || l_rt_atn.name
                                                       || '##'
                                                       || 'NULL'
                         );

   viu_module.leave_module( i_module      => l_con_proc_name );

   return l_return_value;
exception
   
   
   
   
   when others
   then
      
      
      viu_info.handle_info;
      
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );
      
      return null;
      
end invoke;

function get_objectname_property_value
 (i_object_name in acl_constant.st_appmon_objectname
 ,i_property in acl_constant.st_appmon_objectname
 )
 return acl_constant.st_appmon_return_value
 is

l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.Get_ObjectName_Property_Value';


l_delimiter acl_parameter_values_v.pve_value%type;

l_property_separator acl_parameter_values_v.pve_value%type;

l_first_property_indicator acl_parameter_values_v.pve_value%type;

l_property_value acl_constant.st_appmon_objectname;

l_property_tag acl_parameter_values_v.pve_value%type;

l_pos binary_integer;














































begin
   viu_module.enter_module( i_module          => l_con_proc_name
                          , i_debug_info      => 'i_object_name = "' || i_object_name
                                                 || '"  i_property = "'||i_property
                          );
   
   if i_object_name is null
   then
      viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_aclunexpectedparamvalue
                         , i_calling_procedure      => l_con_proc_name
                         , i_severity               => viu_info.severity_error
                         , i_info_arguments         =>    'i_object_name'
                                                       || '##' || l_con_proc_name
                                                       || '##' || i_object_name
                                                       || '##' || 'No object name specified (NULL)'
                         );
   end if;
   
   if i_property is null
   then
      viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_aclunexpectedparamvalue
                         , i_calling_procedure      => l_con_proc_name
                         , i_severity               => viu_info.severity_error
                         , i_info_arguments         =>    'i_property'
                                                       || '##' || l_con_proc_name
                                                       || '##' || i_property
                                                       || '##' || 'No property name specified (NULL)'
                         );
   end if;
   
   
   l_property_separator       := acl_common.get_parameter_value ( i_prr_name => acl_constant.g_con_pve_appmon_property_sep );
   l_first_property_indicator := acl_common.get_parameter_value ( i_prr_name => acl_constant.g_con_pve_appmon_ind_first_pro );
   
   
   if l_property_separator is null
   then
      viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_aclunexpectedparamvalue
                         , i_calling_procedure      => l_con_proc_name
                         , i_severity               => viu_info.severity_error
                         , i_info_arguments         =>    acl_constant.g_con_pve_appmon_property_sep
                                                       || '##' || l_con_proc_name
                                                       || '##' || l_property_separator
                                                       || '##' || 'Parameter "'||acl_constant.g_con_pve_appmon_property_sep
                                                               || '" is empty (NULL)'
                         );
   end if;
   if l_first_property_indicator is null
   then
      viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_aclunexpectedparamvalue
                         , i_calling_procedure      => l_con_proc_name
                         , i_severity               => viu_info.severity_error
                         , i_info_arguments         =>    acl_constant.g_con_pve_appmon_ind_first_pro
                                                       || '##' || l_con_proc_name
                                                       || '##' || l_first_property_indicator
                                                       || '##' || 'Parameter "'||acl_constant.g_con_pve_appmon_ind_first_pro
                                                               || '" is empty (NULL)'
                         );
   end if;
   
   
   l_property_value := i_object_name;
   
   
   
   
   
   l_pos := instr(l_property_value, l_first_property_indicator);
   
   if    l_pos is null
      or l_pos = 0
   then
      viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_aclunexpectedparamvalue
                         , i_calling_procedure      => l_con_proc_name
                         , i_severity               => viu_info.severity_error
                         , i_info_arguments         =>    'i_object_name'
                                                       || '##' || l_con_proc_name
                                                       || '##' || i_object_name
                                                       || '##' || 'No indicator "'||l_first_property_indicator
                                                               || '" found in objectName'
                         );
   end if;

   
   
   l_property_value := substr(l_property_value, l_pos + length(l_first_property_indicator) );
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   l_property_value := l_property_separator || l_property_value;
   
   
   
   l_property_tag := l_property_separator || i_property;

   
   
   
   
   l_pos := instr(l_property_value, l_property_tag);
   
   if    l_pos is null
      or l_pos = 0
   then
      
      
      
      
      l_property_value := '';
      
      
      
      
      viu_info.operator_info( i_ifo_nr                 => viu_constant.c_ifo_aclunexpectedparamvalue
                            , i_calling_procedure      => l_con_proc_name
                            , i_severity               => viu_info.severity_debug
                            , i_info_arguments         =>    'i_object_name'
                                                          || '##' || l_con_proc_name
                                                          || '##' || i_object_name
                                                          || '##' || 'Property "'||i_property
                                                                  || '" not found in objectName (maybe optional)'
                            );
   else 
      
      
      l_property_value := substr(l_property_value, l_pos + length(l_property_tag) );
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      l_pos := instr(l_property_value, l_property_separator);
      if    l_pos is null  
         or l_pos = 0      
      then
         null; 
      
      elsif l_pos = 1      
      then
         l_property_value := '';
      else 
         l_property_value := substr(l_property_value, 1, l_pos-1);
      end if;
      
   end if;

   
   viu_module.leave_module( i_module => l_con_proc_name );
   
   return l_property_value;
   
exception
   when others
   then
      
      
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );
      
      
      
      viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
      
end get_objectname_property_value;

function list_app_elements
 return varchar2
 is

l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.List_App_Elements';


l_objectname_list acl_constant.st_appmon_return_value;

l_objectname_init acl_parameter_values.value%type;

l_objectname_sep acl_parameter_values.value%type;

l_objectname acl_constant.st_appmon_objectname;

l_dbname acl_constant.st_db_global_name;

l_domain acl_parameter_values.value%type;

l_found boolean;

l_rt_ace acl_aet_control_request_types%rowtype;

l_rt_aet acl_application_elements%rowtype;

l_appmon_domain_tag acl_parameter_values.value%type;

l_appmon_description_tag acl_parameter_values.value%type;

l_appmon_atn_tag acl_parameter_values.value%type;

l_appmon_aet_tag acl_parameter_values.value%type;

l_appmon_host_tag acl_parameter_values.value%type;

l_appmon_mandate_tag acl_parameter_values.value%type;

l_appmon_aet_value acl_application_elements.id_cust%type;

l_appmon_atn_value acl_application_elements.id_cust%type;

l_appmon_mandate_value acl_aet_weights.id_cust%type;


cursor c_list_app_elements
 is
select   atn.id_cust        application
,        atn.name           application_name
,        aet.id_cust        application_element
,        aet.description    application_element_dtn
,        awt.id_cust        mandate
from     acl_application_elements   aet   
,        acl_application_elements   atn   
,        acl_aet_weights            awt
where    aet.aet_id_part_of   =  atn.id
and      aet.awt_id           =  awt.id
          
          
          
          
and      aet.aet_type         <> acl_constant.g_con_aet_type_application
and      atn.aet_type         =  acl_constant.g_con_aet_type_application
order by application
,        application_element
;













































begin








   viu_module.enter_module( i_module          => l_con_proc_name);







   
   l_found        := acl_ace_tapi_pck.ace_select_row( i_ace_id      => acl_constant.g_con_ace_name_list_applicatio
                                                    , o_rt_ace      => l_rt_ace
                                                    );
   
   acl_application_control.assemble_request_parameters( i_aet_id_cust      => ''
                                                      , i_ace_id_cust      => l_rt_ace.id_cust
                                                      , o_rt_aet           => l_rt_aet
                                                      , o_rt_ace           => l_rt_ace
                                                      );








   l_domain     := acl_common.get_parameter_value( i_prr_name => acl_constant.g_con_pve_app_mon_domain );
   l_dbname     := acl_common.get_db_name;







   l_objectname_sep     := acl_common.get_parameter_value( i_prr_name => acl_constant.g_con_pve_appmon_objname_sep );

   
   l_objectname_init    := acl_common.get_parameter_value( i_prr_name => acl_constant.g_con_pve_appmon_init_objname );
   
   
   
   
   
   
   l_appmon_domain_tag      := acl_common.get_parameter_value( i_prr_name => acl_constant.g_con_pve_appmon_domain_tag );
   l_appmon_atn_tag         := acl_common.get_parameter_value( i_prr_name => acl_constant.g_con_pve_appmon_atn_tag );
   l_appmon_aet_tag         := acl_common.get_parameter_value( i_prr_name => acl_constant.g_con_pve_appmon_aet_tag );
   l_appmon_host_tag        := acl_common.get_parameter_value( i_prr_name => acl_constant.g_con_pve_appmon_host_tag );
   l_appmon_mandate_tag     := acl_common.get_parameter_value( i_prr_name => acl_constant.g_con_pve_appmon_mandate_tag );
   l_appmon_description_tag := acl_common.get_parameter_value( i_prr_name => acl_constant.g_con_pve_appmon_adn_tag );

   
   if    nvl(instr(l_objectname_init, l_appmon_domain_tag     ), 0) = 0
      or nvl(instr(l_objectname_init, l_appmon_atn_tag        ), 0) = 0
      or nvl(instr(l_objectname_init, l_appmon_aet_tag        ), 0) = 0
      or nvl(instr(l_objectname_init, l_appmon_host_tag       ), 0) = 0
      or nvl(instr(l_objectname_init, l_appmon_mandate_tag    ), 0) = 0
      or nvl(instr(l_objectname_init, l_appmon_description_tag), 0) = 0
   then
      viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_aclinitobjecttagsmissing
                         , i_calling_procedure      => l_con_proc_name
                         , i_severity               => viu_info.c_severity_error
                         , i_additional_data        => ' initial objectName (template) = "' || l_objectname_init || '" '
                         );
   end if;








   <<list_aet_loop>>
   for rec_list_aet in c_list_app_elements
   loop














      l_objectname := l_objectname_init; 


















       
       
       
       
      l_objectname := replace(l_objectname, l_appmon_domain_tag , l_domain                        );
      l_objectname := replace(l_objectname, l_appmon_atn_tag    , rec_list_aet.application        );
      l_objectname := replace(l_objectname, l_appmon_aet_tag    , rec_list_aet.application_element);
      l_objectname := replace(l_objectname, l_appmon_host_tag   , l_dbname                        );
      l_objectname := replace(l_objectname, l_appmon_mandate_tag, rec_list_aet.mandate            );

      l_objectname := replace( l_objectname
                             , l_appmon_description_tag
                             , rec_list_aet.application_element_dtn || ' (' || rec_list_aet.application_name || ')'
                             );

      
      
      
      
      if c_list_app_elements%rowcount = 1
      then
        l_objectname_list := l_objectname;
      else
        l_objectname_list := l_objectname_list||l_objectname_sep||l_objectname;
      end if;
      
   end loop list_aet_loop;
   
   
   
   
   viu_module.leave_module( i_module          => l_con_proc_name );
   
   return l_objectname_list;
   
exception
   when others
   then
      
      
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );
      
      
      
      viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
      
end list_app_elements;

procedure exec_procedure_call
 (i_aet_id_cust in acl_application_elements.id_cust%type
 ,i_procedure_call in varchar2
 )
 is

l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.exec_procedure_call';

l_procedure_call acl_application_elements.stop_procedure_call%type;
l_sqlerrm varchar2(4000);
   
























begin
   viu_module.enter_module( i_module          => l_con_proc_name
                          , i_debug_info      => 'i_aet_id_cust = "' || i_aet_id_cust
                          );

   
   if i_procedure_call is not null
   then
      
      l_procedure_call  :=     'BEGIN '
	                   ||     i_procedure_call
			   || ' END;'
                           ;

      begin
         
         execute immediate (l_procedure_call);

         
         commit;

      exception
         when others
         then
            l_sqlerrm := sqlerrm;

            viu_info.handle_info;

            rollback;
            
            
            viu_info.operator_info(  i_ifo_nr             => viu_constant.c_ifo_acldebuginfo
                                   , i_calling_procedure  => l_con_proc_name
                                   , i_severity           => viu_info.severity_error
                                   , i_additional_data    => 'Procedure call = "'||i_procedure_call
                                                             ||'" SQLERRM = "'||l_sqlerrm||'"'
                                  );

      end;
   end if;

   viu_module.leave_module( i_module      => l_con_proc_name );

exception
   when others
   then
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );

      
      viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
end exec_procedure_call;


function scheduler_job_exists
 (i_job_name acl_application_processes.job_name%type
 )
 return boolean
 is

cursor c_user_scheduler_jobs
 (i_job_name in user_scheduler_jobs.job_name%type
 )
 is
select 1
from   user_scheduler_jobs
where  upper(job_name) = upper(i_job_name);

l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.Scheduler_Job_Exists';

r_user_scheduler_jobs c_user_scheduler_jobs%rowtype;

l_result boolean;




























begin
   viu_module.enter_module( i_module          => l_con_proc_name
                          , i_debug_info      => 'i_job_name = "' || i_job_name || '"'
                          );

   open c_user_scheduler_jobs( i_job_name => i_job_name);
   fetch c_user_scheduler_jobs into r_user_scheduler_jobs;

   l_result := c_user_scheduler_jobs%found;

   close c_user_scheduler_jobs;

   viu_module.leave_module( i_module      => l_con_proc_name );

   return l_result;
exception
   
   when others
   then
   	if c_user_scheduler_jobs%isopen
   	then
   		close c_user_scheduler_jobs;
   	end if;

      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );

      
      viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
      
end scheduler_job_exists;
procedure wait_until_end_of_execution
 (i_rt_aet in acl_application_elements%rowtype
 ,i_rt_aps in acl_application_processes%rowtype
 ,i_wait_interval in acl_parameter_values.value%type
 ,i_wait_timeout in acl_parameter_values.value%type
 )
 is

l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.Wait_Until_End_Of_Execution';

l_rt_aps acl_application_processes%rowtype;
l_found boolean;
l_start_time timestamp;
l_continue boolean;
   






























begin
   viu_module.enter_module( i_module          => l_con_proc_name
                          , i_debug_info      =>    'i_rt_aps.id = "'
                                                 || to_char( i_rt_aps.id )
                                                 || '"  i_rt_aps.job_name = "'
                                                 || i_rt_aps.job_name
                                                 || '"'
                          );

   
   if i_rt_aet.aet_type = acl_constant.g_con_aet_type_background_job
   then

   	  
   	  if i_rt_aps.reason_end is null
   	  then

        
        l_continue := true;

        
        l_start_time := acl_common.default_timestamp;

        while l_continue
        loop
           
           
           acl_common.sleep(i_wait_interval);

           
           if extract(second from (acl_common.default_timestamp - l_start_time)) > i_wait_timeout
           then
           	  
              l_continue := false;
           else
              
              l_found := acl_aps_tapi_pck.aps_select_row( i_aps_id => i_rt_aps.id
                                                        , o_rt_aps => l_rt_aps
                                                        );

              
              if l_rt_aps.reason_end is not null
              or not l_found
              then
                 l_continue := false;
              end if;
           end if;
        end loop;
      end if;
   else
   	  
      viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_aclwrongaettype
                         , i_calling_procedure => l_con_proc_name
                         , i_severity          => viu_info.c_severity_error
                         , i_info_arguments    => i_rt_aet.aet_type
                         );
   end if;

   viu_module.leave_module( i_module      => l_con_proc_name );

exception
   when others
   then
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );

      
      viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
end wait_until_end_of_execution;

procedure update_aps_stats
 (i_aps_id in acl_application_processes.id%type
 )
 is

l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.Update_APS_Stats';


l_found boolean;

l_upd_count pls_integer;
   
























begin
   viu_module.enter_module( i_module          => l_con_proc_name
                          , i_debug_info      =>    '  i_aps_id = "'
                                                 || to_char( i_aps_id )
                                                 || '"'
                          );
   l_found  := acl_aps_tapi_pck.aps_select_row_upd( i_aps_id      => i_aps_id
                                                   , o_rt_aps      => acl_application_control.g_rt_aps_current_process
                                                  );
   
   acl_application_control.g_rt_aps_current_process.date_modified
               := acl_common.default_timestamp;
   
   
   g_rt_aps_current_process.number_of_executions
       := nvl(g_rt_aps_current_process.number_of_executions, 0) + 1;
   
   
   acl_application_control.g_rt_aps_current_process.latest_execution_time
               := acl_common.default_timestamp - acl_application_control.g_rt_aps_current_process.timestamp_latest_execution;
               
   
   if g_rt_aps_current_process.number_of_executions = 1
   then
      
      acl_application_control.g_rt_aps_current_process.total_execution_time := numtodsinterval(0,'SECOND');
   end if;
   acl_application_control.g_rt_aps_current_process.total_execution_time :=
                  (  acl_application_control.g_rt_aps_current_process.total_execution_time
                   + acl_application_control.g_rt_aps_current_process.latest_execution_time
                  );
               
   
   
   
   
   l_upd_count := acl_aps_tapi_pck.aps_update_row ( i_aps_id      => i_aps_id
                                                  , io_rt_aps      => acl_application_control.g_rt_aps_current_process
                                                  );

   viu_module.leave_module( i_module      => l_con_proc_name );

exception
   when others
   then
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => sqlerrm
                             );

      
      viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
end update_aps_stats;

procedure update_aps_stats
 is

l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.Update_APS_Stats';

l_found boolean;
l_rt_aet acl_application_elements%rowtype;
   pragma autonomous_transaction;
   


























begin
   viu_module.enter_module( i_module => l_con_proc_name );

   l_found := acl_aet_tapi_pck.aet_select_row
                 ( i_aet_id => acl_application_control.g_rt_aps_current_process.aet_id
                 , o_rt_aet => l_rt_aet
                 );

   
   if l_rt_aet.repeat_interval is null
   then
      acl_application_control.update_aps_stats
         ( i_aps_id => acl_application_control.g_rt_aps_current_process.id
         );
   else
      viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_aclwrongaettype
                         , i_calling_procedure      => l_con_proc_name
                         , i_severity               => viu_info.c_severity_error
                         , i_info_arguments         => l_rt_aet.aet_type
                                                       || '##' || l_rt_aet.id_cust
                                                       || '##' || l_rt_aet.procedure_call
                                                       || '##' || 'NULL'
                         , i_additional_data        => 'Interval should be NULL'
                         );
   end if;

   
   commit;

   viu_module.leave_module( i_module => l_con_proc_name );
exception
   when others
   then
      
      rollback;

      viu_module.leave_module( i_module => l_con_proc_name
                             , i_debug_info => sqlerrm
                             );

      
      viu_info.raise_info( i_calling_procedure => l_con_proc_name );
end update_aps_stats;

procedure register_process
 is

l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.Register_Process';

l_rt_aet acl_application_elements%rowtype;
l_found boolean;
   pragma autonomous_transaction;
   































begin
   viu_module.enter_module( i_module => l_con_proc_name );

   l_found := acl_aet_tapi_pck.aet_select_row
                 ( i_aet_id => acl_application_control.g_rt_aps_current_process.aet_id
                 , o_rt_aet => l_rt_aet
                 );

   
   if l_rt_aet.repeat_interval is null
   then
      acl_application_control.register_process
         ( i_aps_id => acl_application_control.g_rt_aps_current_process.id
         );
   else
      viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_aclwrongaettype
                         , i_calling_procedure      => l_con_proc_name
                         , i_severity               => viu_info.c_severity_error
                         , i_info_arguments         => l_rt_aet.aet_type
                                                       || '##' || l_rt_aet.id_cust
                                                       || '##' || l_rt_aet.procedure_call
                                                       || '##' || 'NULL'
                         , i_additional_data        => 'Interval should be NULL'
                         );
   end if;

   
   commit;

   viu_module.leave_module( i_module => l_con_proc_name );
exception
   when others
   then
      
      rollback;

      viu_module.leave_module( i_module => l_con_proc_name
                             , i_debug_info => sqlerrm
                             );

      
      viu_info.raise_info( i_calling_procedure => l_con_proc_name );
end register_process;


procedure set_detailed_state
 (i_dsd_name  in acl_detailed_state_definitions.name%type
 ,i_aet_id    in acl_aet_detailed_states.aet_id%type
  )
  is
  l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.Set_Detailed_State';
  l_aet_id        acl_application_elements.id%type;
  l_rt_ads        acl_aet_detailed_states%rowtype;
  l_rt_dsd        acl_detailed_state_definitions%rowtype;
  
  l_ads_found     boolean;
  l_dsd_found     boolean;
  
  l_ads_upd_count pls_integer;
  
 



















































begin
  viu_module.enter_module( i_module => l_con_proc_name );
  
  
  l_aet_id  := nvl( i_aet_id
                  , g_rt_aps_current_process.aet_id
                  );

  if l_aet_id is null
  then
    
    viu_info.operator_info( i_ifo_nr                 => viu_constant.c_ifo_aclappelementnotfound
                          , i_calling_procedure      => l_con_proc_name
                          , i_severity               => viu_info.severity_error
                          , i_additional_data        => 'l_aet_id = '|| to_char( l_aet_id )
                          );
  else

     
     l_dsd_found := acl_dsd_tapi_pck.dsd_select_row_uk_1
                                   (i_dsd_name => i_dsd_name
                                   ,o_rt_dsd   => l_rt_dsd
                                   );
     
     if l_dsd_found
     then
        
        l_ads_found := acl_ads_tapi_pck.ads_select_row_upd_uk_1
                                       (i_ads_dsd_id   => l_rt_dsd.id
                                       ,i_ads_aet_id   => l_aet_id
                                       ,o_rt_ads       => l_rt_ads
                                       );
        if l_ads_found
        then
           if l_rt_ads.ind_status != 'Y'
           then
             l_rt_ads.ind_status  := 'Y';
             l_ads_upd_count      := acl_ads_tapi_pck.ads_update_row( i_ads_id       => l_rt_ads.id
                                                                    , io_rt_ads      => l_rt_ads
                                                                    );
             
             viu_info.operator_info( i_ifo_nr               => viu_constant.c_ifo_transactionsuccessfull
                                   , i_calling_procedure      => l_con_proc_name
                                   , i_severity               => viu_info.severity_notification
                                   , i_additional_data        => 'The Detailed State for Name = "'|| i_dsd_name ||'", AET_ID = "' || l_aet_id ||'" is set. (Status = "'||l_rt_ads.ind_status ||'")'
                                   , i_info_arguments         => 'SET_DETAILED_STATE'
                                   );
           end if;
        else
           
           viu_info.operator_info( i_ifo_nr               => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure      => l_con_proc_name
                               , i_severity               => viu_info.severity_notification
                               , i_additional_data        => 'AET_ID  = "' || l_aet_id ||'" Not found in AET Detailed States for given Detailed State Definition '|| l_rt_ads.id
                               , i_info_arguments         => 'SET_DETAILED_STATE'
                             );
        end if;
     else
        
        viu_info.operator_info( i_ifo_nr               => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure      => l_con_proc_name
                            , i_severity               => viu_info.severity_notification
                            , i_additional_data        => 'Name  = "' || i_dsd_name ||'" Not found in Detailed State Definitions'
                            , i_info_arguments         => 'SET_DETAILED_STATE'
                          );
     end if;
  end if;
  
  viu_module.leave_module( i_module => l_con_proc_name );
exception
  when others
  then
    viu_module.leave_module( i_module => l_con_proc_name
                           , i_debug_info => sqlerrm
                           );
    
    viu_info.raise_info( i_calling_procedure => l_con_proc_name );
end set_detailed_state;



procedure clear_detailed_state
 (i_dsd_name  in acl_detailed_state_definitions.name%type
 ,i_aet_id    in acl_aet_detailed_states.aet_id%type
 )
  is
  l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.Clear_Detailed_State';
  l_aet_id        acl_application_elements.id%type;
  l_rt_ads        acl_aet_detailed_states%rowtype;
  l_rt_dsd        acl_detailed_state_definitions%rowtype;
  
  l_ads_found     boolean;
  l_dsd_found     boolean;
  
  l_ads_upd_count pls_integer;

  
  cursor c_active_dsds( i_aet_id in acl_application_elements.id%type )
  is
    select dsd.id
    ,      dsd.name
    from   acl_aet_detailed_states ads
    ,      acl_detailed_state_definitions dsd
    where  aet_id     = i_aet_id
    and    ads.dsd_id = dsd.id
    and    ads.ind_status = acl_constant.g_con_yesno_yes;

  
  


























































begin
   viu_module.enter_module( i_module => l_con_proc_name );
   
   
   l_aet_id  := nvl( i_aet_id
                   , g_rt_aps_current_process.aet_id
                   );

   if l_aet_id is null
   then
      
      viu_info.operator_info( i_ifo_nr                 => viu_constant.c_ifo_aclappelementnotfound
                            , i_calling_procedure      => l_con_proc_name
                            , i_severity               => viu_info.severity_error
                            , i_additional_data        => 'l_aet_id = '|| to_char( l_aet_id )
                            );
   else

      if i_dsd_name is not null
      then

         
         l_dsd_found := acl_dsd_tapi_pck.dsd_select_row_uk_1
                                        (i_dsd_name => i_dsd_name
                                        ,o_rt_dsd   => l_rt_dsd
                                        );

         
         if l_dsd_found
         then
            
            l_ads_found := acl_ads_tapi_pck.ads_select_row_upd_uk_1
                                            (i_ads_dsd_id   => l_rt_dsd.id
                                            ,i_ads_aet_id   => l_aet_id
                                            ,o_rt_ads       => l_rt_ads
                                            );
            if l_ads_found
            then
               if l_rt_ads.ind_status != 'N'
               then
                  l_rt_ads.ind_status  := 'N';
                  l_ads_upd_count      := acl_ads_tapi_pck.ads_update_row( i_ads_id       => l_rt_ads.id
                                                                         , io_rt_ads      => l_rt_ads
                                                                         );
                  
                  viu_info.operator_info( i_ifo_nr               => viu_constant.c_ifo_transactionsuccessfull
                                        , i_calling_procedure      => l_con_proc_name
                                        , i_severity               => viu_info.severity_notification
                                        , i_additional_data        => 'The Detailed State for Name = "'|| i_dsd_name ||'", AET_ID = "' || l_aet_id ||'" is cleared. (Status = "'||l_rt_ads.ind_status ||'")'
                                        , i_info_arguments         => 'CLEAR_DETAILED_STATE'
                                        );
               end if;
            else
               
               viu_info.operator_info( i_ifo_nr               => viu_constant.c_ifo_updatefailed
                                     , i_calling_procedure      => l_con_proc_name
                                     , i_severity               => viu_info.severity_notification
                                     , i_additional_data        => 'AET_ID  = "' || l_aet_id ||'" Not found in AET Detailed States for given Detailed State Definition '|| l_rt_ads.id
                                     , i_info_arguments         => 'CLEAR_DETAILED_STATE'
                                     );
            end if;
         else
            
            viu_info.operator_info( i_ifo_nr               => viu_constant.c_ifo_updatefailed
                                  , i_calling_procedure      => l_con_proc_name
                                  , i_severity               => viu_info.severity_notification
                                  , i_additional_data        => 'Name  = "' || i_dsd_name ||'" Not found in Detailed State Definitions'
                                  , i_info_arguments         => 'CLEAR_DETAILED_STATE'
                                  );
         end if;

      else 

         for r_dsd in c_active_dsds( i_aet_id => l_aet_id)
         loop

            if acl_ads_tapi_pck.ads_select_row_upd_uk_1
                                            (i_ads_dsd_id   => r_dsd.id
                                            ,i_ads_aet_id   => l_aet_id
                                            ,o_rt_ads       => l_rt_ads
                                            )
            then

               l_rt_ads.ind_status  := 'N';
               l_ads_upd_count      := acl_ads_tapi_pck.ads_update_row( i_ads_id       => l_rt_ads.id
                                                                      , io_rt_ads      => l_rt_ads
                                                                      );
               
               viu_info.operator_info( i_ifo_nr               => viu_constant.c_ifo_transactionsuccessfull
                                     , i_calling_procedure      => l_con_proc_name
                                     , i_severity               => viu_info.severity_notification
                                     , i_additional_data        => 'The Detailed State for Name = "'|| r_dsd.name ||'", AET_ID = "' || l_aet_id ||'" is cleared. (Status = "'||l_rt_ads.ind_status ||'")'
                                     , i_info_arguments         => 'CLEAR_DETAILED_STATE'
                                     );

            end if;
         end loop;

      end if;
   end if;
  
  viu_module.leave_module( i_module => l_con_proc_name );
exception
  when others
  then
    viu_module.leave_module( i_module => l_con_proc_name
                           , i_debug_info => sqlerrm
                           );
    
    viu_info.raise_info( i_calling_procedure => l_con_proc_name );
end clear_detailed_state;

procedure hdl_packageinitialization
is

   l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.HDL_PACKAGEINITIALIZATION';

pragma autonomous_transaction;
begin
   viu_module.enter_module( i_module => l_con_proc_name );
   
   dbms_session.set_nls('nls_territory', 'America');
   dbms_session.set_nls('nls_language', 'American');
   commit;
   viu_module.leave_module( i_module => l_con_proc_name );
exception
   when others
   then
      rollback;
      viu_module.leave_module( i_module => l_con_proc_name );
      raise;
end hdl_packageinitialization;

   
   function current_session_is_job
   return boolean
   is
      l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.current_session_is_job';

      l_result                 boolean;
   begin
      viu_module.enter_module( i_module => l_con_proc_name );
      
      
      l_result := ( g_rt_aps_current_process.aet_id is not null );

      viu_module.leave_module( i_module => l_con_proc_name );
      
      return l_result;

   exception
      when others
      then
         viu_module.leave_module( i_module => l_con_proc_name );

         viu_info.raise_info( i_calling_procedure => l_con_proc_name );

   end current_session_is_job;

   function all_auto_jobs_started
   return varchar2
   is
      l_con_proc_name constant acl_constant.st_proc_name := g_con_package||'.all_auto_jobs_started';

      
      l_ok varchar2(1);
   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      select case
                when nr_started_auto_jobs = nr_auto_jobs
                then acl_constant.g_con_yesno_yes
                else acl_constant.g_con_yesno_no
             end
      into   l_ok
      from   (select count(*) nr_auto_jobs
              ,      sum( case
                             when ujb.state in ( acl_constant.g_con_job_state_running
                                               , acl_constant.g_con_job_state_scheduled
                                               )
                             then 1
                             else 0
                          end
                        ) nr_started_auto_jobs
              from   acl_application_elements aet
                     left outer join acl_user_jobs_v ujb on ujb.aet_id = aet.id
              where  aet.aet_type     = acl_constant.g_con_aet_type_background_job
              and    aet.startup_type = acl_constant.g_con_aet_startup_type_auto
             );

      viu_module.leave_module( i_module => l_con_proc_name );
      return l_ok;
   exception
      when others
      then
         viu_module.leave_module( i_module => l_con_proc_name );

         viu_info.raise_info( i_calling_procedure => l_con_proc_name );

   end all_auto_jobs_started;

begin
    
    hdl_packageinitialization;

end acl_application_control;
/