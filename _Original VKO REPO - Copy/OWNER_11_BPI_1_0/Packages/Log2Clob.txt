create or replace package Log2Clob is
procedure clearLog;
procedure logLine(i_text in varchar2);
function listLog return clob;
function count_in_table (i_table in varchar2, i_where in varchar2 default null) return number;
procedure check_count_in_table (p_table in varchar2, p_where in varchar2 default null
, p_expected in number, p_errors in out number);
procedure check_count_in_table_GT (p_table in varchar2, p_where in varchar2 default null
, p_expected in number, p_errors in out number);
procedure check_count_in_table_BETWEEN (p_table in varchar2, p_where in varchar2 default null
, p_expected_lower in number, p_expected_upper in number, p_errors in out number);
procedure log_success_or_failure(p_errors number);
procedure heading(i_heading in varchar2);
end;
/




package body log2clob is
g_log clob; 

procedure clearlog is
begin
  g_log := '';
end;

procedure logline(i_text in varchar2) is
begin
  g_log := g_log||i_text||chr(10);
end;

function listlog return clob is
begin
  return g_log;
end;

function count_in_table (i_table in varchar2, i_where in varchar2 default null) return number is
l_cnt number;
l_stm varchar2(2000) := 'select count(*) from '||i_table;
begin
  if trim(i_where) is not null then
    l_stm := l_stm||' where '||i_where;
  end if;
  execute immediate l_stm into l_cnt;
  return l_cnt;
end;

procedure check_count_in_table (p_table in varchar2, p_where in varchar2 default null
, p_expected in number, p_errors in out number) is
l_cnt number;
l_msg varchar2(2000) := '';
begin
  l_cnt := count_in_table(p_table, p_where);
  l_msg := 'Expected '||to_char(p_expected)||' rows in '||p_table;
  if trim(p_where) is not null then
    l_msg := l_msg||' where '||p_where;
  end if;
  l_msg := l_msg||'. Got '||to_char(l_cnt);
  logline(l_msg);
  if l_cnt <> p_expected then
    p_errors := p_errors + 1;
    logline('!!!!! PREVIOUS CHECK WENT WRONG !!!!!');
  end if;
end;

procedure check_count_in_table_gt (p_table in varchar2, p_where in varchar2 default null
, p_expected in number, p_errors in out number) is
l_cnt number;
l_msg varchar2(2000) := '';
begin
  l_cnt := count_in_table(p_table, p_where);
  l_msg := 'Expected more than '||to_char(p_expected)||' rows in '||p_table;
  if trim(p_where) is not null then
    l_msg := l_msg||' where '||p_where;
  end if;
  l_msg := l_msg||'. Got '||to_char(l_cnt);
  logline(l_msg);
  if l_cnt <= p_expected then
    p_errors := p_errors + 1;
    logline('!!!!! PREVIOUS CHECK WENT WRONG !!!!!');
  end if;
end;

procedure check_count_in_table_between (p_table in varchar2, p_where in varchar2 default null
, p_expected_lower in number, p_expected_upper in number, p_errors in out number) is
l_cnt number;
l_msg varchar2(2000) := '';
begin
  l_cnt := count_in_table(p_table, p_where);
  l_msg := 'Expected more than '||to_char(p_expected_lower)|| ' and less than '||to_char(p_expected_upper) ||' rows in '||p_table;
  if trim(p_where) is not null then
    l_msg := l_msg||' where '||p_where;
  end if;
  l_msg := l_msg||'. Got '||to_char(l_cnt);
  logline(l_msg);
  if l_cnt <= p_expected_lower or l_cnt >= p_expected_upper  then
    p_errors := p_errors + 1;
    logline('!!!!! PREVIOUS CHECK WENT WRONG !!!!!');
  end if;
end;

procedure log_success_or_failure(p_errors number) is
begin
  logline(chr(10)||to_char(p_errors)||' total errors.'||chr(10));
  if p_errors = 0 then
    logline('*****************************************************');
    logline('***************** S U C C E S S *********************');
    logline('*****************************************************');
  else
    logline('*****************************************************');
    logline('***************** F A I L U R E *********************');
    logline('*****************************************************');
  end if;
end;

procedure heading(i_heading in varchar2) is
l_length number;
l_text varchar2(2000) := '***  '||trim(i_heading)||'  ***' ;
begin
  l_length := length(l_text);
  logline('');
  logline(rpad('*', l_length, '*'));
  logline(l_text);
  logline(rpad('*', l_length, '*'));
end;

begin
  clearlog;
end;
/