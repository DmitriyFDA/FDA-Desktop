create or replace package BPI_PARTITION_MAINTENANCE is

-- Public constant declarations
G_CON_PACKAGE CONSTANT VARCHAR2(61) := 'BPI_PARTITION_MAINTENANCE';
C_DROP_ERRORMESSAGE constant varchar2(100) := 'An error occured during deletion of a partition.';
C_GENERAL_ERRORMESSAGE constant varchar2(100) := 'An error occured during maintenance of partitions.';

-- Overall procedures used to manage partitioning
procedure DropPartitionByName(i_partition_name in varchar2, i_table_name in varchar2, i_table_owner in varchar2);
procedure DayPartitionMaintenance(i_table_name in varchar2, i_retention in number);
procedure Refresh_BPI_PARTITIONS (i_table_name in varchar2, i_table_owner in varchar2, o_errcode out number, o_errmsg out varchar2);
procedure Refresh_ALL_BPI_PARTITIONS;
procedure PartitionMaintenance;

end BPI_PARTITION_MAINTENANCE;
/




package body bpi_partition_maintenance
is


procedure droppartitionbyname( i_partition_name in varchar2
                             , i_table_name     in varchar2
                             , i_table_owner    in varchar2
                             )
is
   l_con_proc constant varchar2(61) := g_con_package||'.DropPartitionByName';

   l_statement   varchar2(2000) := '';
   l_errcode     number := 0;
   l_version     number := 0;
   exc_invalid_identifier exception;
   type t_indexname      is table of all_indexes.index_name%type;
   l_index_name  t_indexname;
   pragma exception_init( exc_invalid_identifier, -904);
begin
   bpi_trace.enter_module( i_module => l_con_proc );

   begin
      l_statement :=   'ALTER TABLE '||i_table_owner||'.'||i_table_name
                     ||' DROP PARTITION '||i_partition_name
                     ||' UPDATE GLOBAL INDEXES';
      bpi_log.debug_info( i_con_proc  => l_con_proc
                        , i_data      => 'L_STATEMENT = '||l_statement
                        );
      execute immediate l_statement;
   exception
      when others then
         viu_info.operator_info( i_ifo_nr             => viu_constant.c_ifo_hkpcantdeletepartition
                               , i_calling_procedure  => l_con_proc
                               , i_severity           => viu_info.c_severity_error
                               , i_info_arguments     => i_partition_name||', '||i_table_name||', '||i_table_owner
                               , i_additional_data    => l_statement||', ERROR = '||sqlerrm||chr(10)||dbms_utility.format_error_backtrace
                               );
   end;
   
   $if dbms_db_version.version > 11 $then
      begin
         select index_name
         bulk collect into l_index_name
         from all_indexes
         where owner = i_table_owner
         and table_name = i_table_name
         and orphaned_entries = 'YES';

         if l_index_name.exists(1)
         then
            for i in l_index_name.first .. l_index_name.last
            loop
               begin
                   l_statement :=   'ALTER INDEX '||i_table_owner||'.'||l_index_name(i)
                                  ||' COALESCE CLEANUP';
                   execute immediate l_statement;
                   dbms_stats.set_table_stats(ownname          => i_table_owner
                                             ,tabname          => i_table_name
                                             , no_invalidate   => false
                                             , force           => false);
               exception
                  when others then
                     bpi_log.handle_error( i_con_proc  => l_con_proc
                                         , i_msg       => l_statement
                                         );
               end;
            end loop;
         end if;
      exception
       when exc_invalid_identifier then null;  
       when others then
          bpi_log.handle_error( i_con_proc  => l_con_proc);
      end;
   $end
   
   bpi_trace.leave_module( i_module => l_con_proc);
end;

procedure daypartitionmaintenance(i_table_name in varchar2, i_retention in number) is
l_errcode number := 0;
l_errmsg viu_info_logs.additional_data%type;
l_owner varchar2(30) := '';
l_last_allowed_date date;
l_partition_date date;
l_registered_partition_count number := 0;
l_ts_string varchar2(100) := '';
l_ts1 timestamp := sys_extract_utc(systimestamp);
l_dropped number := 0;
l_con_proc_name constant varchar2(61) := g_con_package||'.DayPartitionMaintenance';
begin
  viu_module.enter_module(i_module => l_con_proc_name, i_debug_info => to_char(sys_extract_utc(systimestamp)));
  begin

    
     l_owner := sys_context('USERENV','CURRENT_USER');

    
    refresh_bpi_partitions (i_table_name, l_owner, l_errcode, l_errmsg);

    
    if l_errcode = 0 then
      select trunc(sysdate) - i_retention + 1 into l_last_allowed_date from dual;
      for c_rec in (select * from bpi_partitions where table_name = upper(i_table_name) and interval = 'YES') loop
        l_registered_partition_count := l_registered_partition_count + 1;
        l_ts_string := substr(c_rec.hv_clob,1,100);
        l_partition_date := null;
        if substr(l_ts_string,1,9) = 'TIMESTAMP' then
          begin
            l_partition_date := to_date(substr(l_ts_string,12,10), 'YYYY-MM-DD');
          exception when others then
            l_errmsg := sqlerrm||chr(10)||dbms_utility.format_error_backtrace;
            l_partition_date := null;
          end;
        end if;
        if l_partition_date is null then
          viu_info.operator_info( i_ifo_nr       => viu_constant.c_ifo_bpidebuginfo
                          , i_calling_procedure  => l_con_proc_name
                          , i_severity           => viu_info.c_severity_warning
                          , i_additional_data    => l_owner||'.'||i_table_name||', partition '||c_rec.partition_name
                                                ||', has undetermined partition date: '||l_ts_string||': '||l_errmsg
                          );
        else
          if l_partition_date < l_last_allowed_date then
            droppartitionbyname(c_rec.partition_name, i_table_name, l_owner);
            l_dropped := l_dropped + 1;
          end if;
        end if;
      end loop;

      viu_info.operator_info( i_ifo_nr           => viu_constant.c_ifo_bpidebuginfo
                          , i_calling_procedure  => l_con_proc_name
                          , i_severity           => viu_info.c_severity_notification
                          , i_additional_data    => l_owner||'.'||i_table_name||': Retention='||to_char(i_retention)
    			  							    ||', Last allowed date='||to_char(l_last_allowed_date)
    			  							    ||', Registered partition count='||to_char(l_registered_partition_count)
                          );

      
      refresh_bpi_partitions (i_table_name, l_owner, l_errcode, l_errmsg);

      for ptn in ( select *
                   from   bpi_partitions
                   where  interval   = 'YES'
                   and    row_count  = 0
                   and    table_name = i_table_name
                 )
      loop
        begin
          dbms_stats.copy_table_stats( ownname      => l_owner
                                     , tabname      => i_table_name
                                     , srcpartname  => 'P1'
                                     , dstpartname  => ptn.partition_name
                                     , scale_factor => 0.1
                                     , flags        => null
                                     , force        => true
                                     );
        exception
          when others then
            viu_info.handle_info( i_ifo_nr             => viu_constant.c_ifo_bpidebuginfo
                                , i_calling_procedure  => l_con_proc_name
                                , i_severity           => viu_info.c_severity_warning
                                , i_additional_data    => 'Cannot copy statistics to partition '||l_owner||'.'||i_table_name||'.'||ptn.partition_name||'. Error: '||sqlerrm||chr(10)||dbms_utility.format_error_backtrace
                                );
        end;
      end loop;

      
      refresh_bpi_partitions (i_table_name, l_owner, l_errcode, l_errmsg);

      viu_info.operator_info( i_ifo_nr           => viu_constant.c_ifo_bpidebuginfo
                          , i_calling_procedure  => l_con_proc_name
                          , i_severity           => viu_info.c_severity_notification
                          , i_additional_data    => 'Partition maintenance done for '||l_owner||'.'||i_table_name
                          ||'. Dropped '||to_char(l_dropped)||' partitions. '
                          ||chr(10)||'Duration: '||to_char(sys_extract_utc(systimestamp) - l_ts1)||'. '
                          );
    else
      viu_info.operator_info( i_ifo_nr                 => viu_constant.c_ifo_hkppartitionmainterror
                       , i_calling_procedure      => l_con_proc_name
                       , i_severity               => viu_info.c_severity_error
                       , i_info_arguments         => l_owner||'.'||i_table_name||','||to_char(i_retention)
                       , i_additional_data        => ', ERROR in table BPI_PARTITIONS: '||l_errmsg
                       );
    end if;
  exception when others then
    viu_info.operator_info( i_ifo_nr                 => viu_constant.c_ifo_hkppartitionmainterror
                       , i_calling_procedure      => l_con_proc_name
                       , i_severity               => viu_info.c_severity_error
                       , i_info_arguments         => l_owner||'.'||i_table_name||','||to_char(i_retention)
                       , i_additional_data        => ', ERROR: '||sqlerrm||chr(10)||dbms_utility.format_error_backtrace
                       );
  end;
  viu_module.leave_module(i_module => l_con_proc_name);
end;


procedure refresh_bpi_partitions (i_table_name in varchar2, i_table_owner in varchar2, o_errcode out number, o_errmsg out varchar2) is
l_owner varchar2(30);
begin
  o_errmsg := '';
  o_errcode := 0;
  begin

    if i_table_owner is null then
      
      l_owner := sys_context('USERENV','CURRENT_USER');
    else
      l_owner := upper(i_table_owner);
    end if;

    if i_table_name is null then
      
      delete from bpi_partitions;

      
      
      

      insert into bpi_partitions (table_name, partition_name, partition_position, partition_column, interval, row_count, hv_clob)
      select a.table_name, a.partition_name, a.partition_position, b.del_field, a.interval, nvl(a.num_rows, 0), to_lob(a.high_value)
      from dba_tab_partitions a, bpi_housekeep_parameters b
      where a.table_owner = l_owner and a.table_name = b.table_name(+) and b.cleanup_method(+)='P';

      commit;
    else
      delete from bpi_partitions where table_name = upper(i_table_name);

      
      
      
      
      insert into bpi_partitions (table_name, partition_name, partition_position, partition_column, interval, row_count, hv_clob)
      select a.table_name, a.partition_name, a.partition_position, b.del_field, a.interval, nvl(a.num_rows, 0), to_lob(a.high_value)
      from dba_tab_partitions a, bpi_housekeep_parameters b
      where a.table_owner = l_owner and a.table_name = upper(i_table_name) and a.table_name = b.table_name(+) and b.cleanup_method(+)='P';

      commit;
    end if;

  exception when others then
    o_errmsg := sqlerrm||chr(10)||dbms_utility.format_error_backtrace;
    o_errcode := 1;
  end;
end;











procedure refresh_all_bpi_partitions is
l_con_proc_name constant varchar2(61) := g_con_package||'.Refresh_ALL_BPI_PARTITIONS';
l_errcode number;
l_errmsg varchar2(4000);
begin
  bpi_partition_maintenance.refresh_bpi_partitions(null, null, l_errcode, l_errmsg);
  if l_errcode = 0 then
    l_errmsg := 'Completed successfully.';
  end if;
  viu_info.operator_info(  i_ifo_nr             => viu_constant.c_ifo_bpidebuginfo
   	                    , i_calling_procedure  => l_con_proc_name
               			, i_severity           => viu_info.c_severity_notification
               			, i_additional_data    => l_con_proc_name||': '||l_errmsg
                       	);
  
  
  
  commit;
  
end;


procedure partitionmaintenance is


l_ts1 timestamp := sys_extract_utc(systimestamp);
l_errcode number;
l_errmsg viu_info_logs.additional_data%type;
cursor c_housekeep_parameters is
select trim(table_name) as table_name, trim(del_retention_unit)as part_type, del_retention
from bpi_housekeep_parameters where trim(cleanup_method) = 'P';
l_con_proc_name constant varchar2(61) := g_con_package||'.PartitionMaintenance';
begin
  viu_module.enter_module( i_module          => l_con_proc_name
                         , i_debug_info      => 'Starting PartitionMaintenance at '||to_char(sysdate,'YYYY-MM-DD HH24:MI:SS')
                         );
  l_ts1 := systimestamp;

  viu_info.operator_info( i_ifo_nr             => viu_constant.c_ifo_bpidebuginfo
                        , i_calling_procedure  => l_con_proc_name
                        , i_severity           => viu_info.c_severity_notification
                        , i_additional_data    => 'Partition maintenance started. Initiated by user '||user||'.'
                        );

  for c_rec in c_housekeep_parameters loop
    case c_rec.part_type
    when 'D' then
      viu_info.operator_info( i_ifo_nr             => viu_constant.c_ifo_bpidebuginfo
                            , i_calling_procedure  => l_con_proc_name
                            , i_severity           => viu_info.c_severity_notification
                            , i_additional_data    => 'Partitioning (day partitioning) ' || c_rec.table_name
                            );
      daypartitionmaintenance( i_table_name => c_rec.table_name
                             , i_retention => c_rec.del_retention );
    
    else
      viu_info.operator_info(  i_ifo_nr             => viu_constant.c_ifo_bpidebuginfo
      	                    , i_calling_procedure  => l_con_proc_name
                   			, i_severity           => viu_info.c_severity_error
                   			, i_additional_data    => 'BPI_HOUSEKEEP_PARAMETERS.DEL_RETENTION_UNIT is incorrect: '||c_rec.part_type||'. Can only be D [Day] for CLEANUP_METHOD = P.'
                          	);
    end case;
  end loop;
  
  refresh_bpi_partitions (null, null, l_errcode, l_errmsg);
  if l_errcode != 0 then
    viu_info.operator_info( i_ifo_nr             => viu_constant.c_ifo_bpidebuginfo
                          , i_calling_procedure  => l_con_proc_name
                          , i_severity           => viu_info.c_severity_warning
                          , i_additional_data    => 'Warning: Update of BPI_PARTITIONS failed: '||l_errmsg
                          );
  end if;
  viu_info.operator_info( i_ifo_nr             => viu_constant.c_ifo_bpidebuginfo
                        , i_calling_procedure  => l_con_proc_name
                        , i_severity           => viu_info.c_severity_notification
                        , i_additional_data    => 'Partition maintenance finished. Initiated by user '||user||'. Total duration: '||to_char(sys_extract_utc(systimestamp) - l_ts1)
                        );

  
  
  
  commit;
  
  viu_module.leave_module(i_module => l_con_proc_name);
end;

end bpi_partition_maintenance;
/