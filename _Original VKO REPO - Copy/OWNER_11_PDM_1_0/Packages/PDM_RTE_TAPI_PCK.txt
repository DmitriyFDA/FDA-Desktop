create or replace PACKAGE pdm_rte_tapi_pck
IS
-- Table API package for table pdm_resource_types
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:01)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'PDM_RTE_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'PDM_RESOURCE_TYPES';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION rte_select_row( i_rte_ID   IN  pdm_resource_types.ID%TYPE
                       , o_rt_rte   OUT pdm_resource_types%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION rte_select_row_uk1( i_rte_ID_CUST   IN  pdm_resource_types.ID_CUST%TYPE
                           , o_rt_rte  OUT pdm_resource_types%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION rte_select_row_upd( i_rte_ID   IN  pdm_resource_types.ID%TYPE
                           , o_rt_rte   OUT pdm_resource_types%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION rte_select_row_upd_uk1( i_rte_ID_CUST   IN  pdm_resource_types.ID_CUST%TYPE
                               , o_rt_rte  OUT pdm_resource_types%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE rte_lock_row( i_rte_ID   IN  pdm_resource_types.ID%TYPE )
;

PROCEDURE rte_lock_row_nowait( i_rte_ID   IN  pdm_resource_types.ID%TYPE )
;


END pdm_rte_tapi_pck;
/




package body pdm_rte_tapi_pck
is




function rte_select_row( i_rte_id   in  pdm_resource_types.id%type
                       , o_rt_rte   out pdm_resource_types%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rte_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_rte ( i_rte_id   in  pdm_resource_types.id%type )
      is 
           select *
             from pdm_resource_types rte
            where rte.id = i_rte_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_rte( i_rte_id => i_rte_id );
         fetch c_rte into o_rt_rte;
         l_found := c_rte%found;
         close c_rte;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_rte%isopen
         then
            close c_rte;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end rte_select_row;

function rte_select_row_uk1( i_rte_id_cust   in  pdm_resource_types.id_cust%type
                           , o_rt_rte  out pdm_resource_types%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rte_select_row_uk1';
   l_found                boolean      := false;
begin
   declare
      cursor c_rte ( i_rte_id_cust   in  pdm_resource_types.id_cust%type )
      is
         select *
           from pdm_resource_types rte
          where rte.id_cust = i_rte_id_cust ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_rte(i_rte_id_cust => i_rte_id_cust);
         fetch c_rte into o_rt_rte;
         l_found := c_rte%found;
         close c_rte;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_rte%isopen
      then
         close c_rte;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end rte_select_row_uk1;

function rte_select_row_upd( i_rte_id   in  pdm_resource_types.id%type
                           , o_rt_rte   out pdm_resource_types%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rte_select_row_upd';
   l_found                boolean      := false;

   cursor c_rte ( i_rte_id   in  pdm_resource_types.id%type )
   is
           select *
             from pdm_resource_types rte
            where rte.id = i_rte_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_rte( i_rte_id => i_rte_id );
   fetch c_rte into o_rt_rte;
   l_found := c_rte%found;
   close c_rte;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_rte%isopen
      then
         close c_rte;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end rte_select_row_upd;

function rte_select_row_upd_uk1( i_rte_id_cust   in  pdm_resource_types.id_cust%type
                               , o_rt_rte  out pdm_resource_types%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rte_select_row_upd_uk1';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := rte_select_row_uk1( i_rte_id_cust   =>  i_rte_id_cust
                                   , o_rt_rte => o_rt_rte );
      if l_found
      then
         
         l_found := rte_select_row_upd( i_rte_id => o_rt_rte.id
                                      , o_rt_rte => o_rt_rte );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end rte_select_row_upd_uk1;

procedure rte_lock_row( i_rte_id   in  pdm_resource_types.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rte_lock_row';
begin
  declare
     cursor c_rte ( i_rte_id   in  pdm_resource_types.id%type )
     is
             select ''
               from pdm_resource_types rte
              where rte.id = i_rte_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_rte_id is not null
         then
            begin
                
                rte_lock_row_nowait( i_rte_id => i_rte_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_rte( i_rte_id => i_rte_id );
                  close c_rte;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_rte%isopen
         then
            close c_rte;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end rte_lock_row;

procedure rte_lock_row_nowait( i_rte_id   in  pdm_resource_types.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.rte_lock_row_nowait';
begin
   declare
      cursor c_rte ( i_rte_id   in  pdm_resource_types.id%type )
      is
              select ''
                from pdm_resource_types rte
               where rte.id = i_rte_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_rte_id is not null
         then
            
            open c_rte( i_rte_id => i_rte_id );

            close c_rte;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_rte%isopen
        then
           close c_rte;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_rte_id||'"' );
   end;                                                          
end rte_lock_row_nowait;


end pdm_rte_tapi_pck;
/