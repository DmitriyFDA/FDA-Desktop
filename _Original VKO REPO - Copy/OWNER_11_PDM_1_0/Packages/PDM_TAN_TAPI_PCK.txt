create or replace PACKAGE pdm_tan_tapi_pck
IS
-- Table API package for table pdm_tpl_actions
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:02)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'PDM_TAN_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'PDM_TPL_ACTIONS';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION tan_select_row( i_tan_ID   IN  pdm_tpl_actions.ID%TYPE
                       , o_rt_tan   OUT pdm_tpl_actions%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION tan_select_row_uk1( i_tan_TPE_ID   IN  pdm_tpl_actions.TPE_ID%TYPE
                           , i_tan_TYPE   IN  pdm_tpl_actions.TYPE%TYPE
                           , o_rt_tan  OUT pdm_tpl_actions%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION tan_select_row_uk2( i_tan_TPE_ID   IN  pdm_tpl_actions.TPE_ID%TYPE
                           , i_tan_IND_PRIMARY   IN  pdm_tpl_actions.IND_PRIMARY%TYPE
                           , o_rt_tan  OUT pdm_tpl_actions%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION tan_select_row_upd( i_tan_ID   IN  pdm_tpl_actions.ID%TYPE
                           , o_rt_tan   OUT pdm_tpl_actions%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION tan_select_row_upd_uk1( i_tan_TPE_ID   IN  pdm_tpl_actions.TPE_ID%TYPE
                               , i_tan_TYPE   IN  pdm_tpl_actions.TYPE%TYPE
                               , o_rt_tan  OUT pdm_tpl_actions%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION tan_select_row_upd_uk2( i_tan_TPE_ID   IN  pdm_tpl_actions.TPE_ID%TYPE
                               , i_tan_IND_PRIMARY   IN  pdm_tpl_actions.IND_PRIMARY%TYPE
                               , o_rt_tan  OUT pdm_tpl_actions%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE tan_lock_row( i_tan_ID   IN  pdm_tpl_actions.ID%TYPE )
;

PROCEDURE tan_lock_row_nowait( i_tan_ID   IN  pdm_tpl_actions.ID%TYPE )
;

PROCEDURE tan_insert_row ( io_rt_tan  IN OUT pdm_tpl_actions%ROWTYPE )
;

FUNCTION tan_update_row( i_tan_ID   IN     pdm_tpl_actions.ID%TYPE
                       , io_rt_tan  IN OUT pdm_tpl_actions%ROWTYPE )
RETURN NUMBER
;

FUNCTION tan_delete_row( i_tan_ID   IN  pdm_tpl_actions.ID%TYPE )
RETURN BOOLEAN
;

FUNCTION tan_seq1_nextval
RETURN pdm_tpl_actions.ID%TYPE
;


END pdm_tan_tapi_pck;
/




package body pdm_tan_tapi_pck
is




function tan_select_row( i_tan_id   in  pdm_tpl_actions.id%type
                       , o_rt_tan   out pdm_tpl_actions%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tan_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_tan ( i_tan_id   in  pdm_tpl_actions.id%type )
      is 
           select *
             from pdm_tpl_actions tan
            where tan.id = i_tan_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_tan( i_tan_id => i_tan_id );
         fetch c_tan into o_rt_tan;
         l_found := c_tan%found;
         close c_tan;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_tan%isopen
         then
            close c_tan;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end tan_select_row;

function tan_select_row_uk1( i_tan_tpe_id   in  pdm_tpl_actions.tpe_id%type
                           , i_tan_type   in  pdm_tpl_actions.type%type
                           , o_rt_tan  out pdm_tpl_actions%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tan_select_row_uk1';
   l_found                boolean      := false;
begin
   declare
      cursor c_tan ( i_tan_tpe_id   in  pdm_tpl_actions.tpe_id%type
                   , i_tan_type   in  pdm_tpl_actions.type%type )
      is
         select *
           from pdm_tpl_actions tan
          where tan.tpe_id = i_tan_tpe_id 
            and tan.type = i_tan_type ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_tan(i_tan_tpe_id => i_tan_tpe_id, i_tan_type => i_tan_type);
         fetch c_tan into o_rt_tan;
         l_found := c_tan%found;
         close c_tan;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_tan%isopen
      then
         close c_tan;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end tan_select_row_uk1;

function tan_select_row_uk2( i_tan_tpe_id   in  pdm_tpl_actions.tpe_id%type
                           , i_tan_ind_primary   in  pdm_tpl_actions.ind_primary%type
                           , o_rt_tan  out pdm_tpl_actions%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tan_select_row_uk2';
   l_found                boolean      := false;
begin
   declare
      cursor c_tan ( i_tan_tpe_id   in  pdm_tpl_actions.tpe_id%type
                   , i_tan_ind_primary   in  pdm_tpl_actions.ind_primary%type )
      is
         select *
           from pdm_tpl_actions tan
          where tan.tpe_id = i_tan_tpe_id 
            and tan.ind_primary = i_tan_ind_primary ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_tan(i_tan_tpe_id => i_tan_tpe_id, i_tan_ind_primary => i_tan_ind_primary);
         fetch c_tan into o_rt_tan;
         l_found := c_tan%found;
         close c_tan;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_tan%isopen
      then
         close c_tan;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end tan_select_row_uk2;

function tan_select_row_upd( i_tan_id   in  pdm_tpl_actions.id%type
                           , o_rt_tan   out pdm_tpl_actions%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tan_select_row_upd';
   l_found                boolean      := false;

   cursor c_tan ( i_tan_id   in  pdm_tpl_actions.id%type )
   is
           select *
             from pdm_tpl_actions tan
            where tan.id = i_tan_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_tan( i_tan_id => i_tan_id );
   fetch c_tan into o_rt_tan;
   l_found := c_tan%found;
   close c_tan;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_tan%isopen
      then
         close c_tan;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end tan_select_row_upd;

function tan_select_row_upd_uk1( i_tan_tpe_id   in  pdm_tpl_actions.tpe_id%type
                               , i_tan_type   in  pdm_tpl_actions.type%type
                               , o_rt_tan  out pdm_tpl_actions%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tan_select_row_upd_uk1';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := tan_select_row_uk1( i_tan_tpe_id   =>  i_tan_tpe_id
                                   , i_tan_type   =>  i_tan_type
                                   , o_rt_tan => o_rt_tan );
      if l_found
      then
         
         l_found := tan_select_row_upd( i_tan_id => o_rt_tan.id
                                      , o_rt_tan => o_rt_tan );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end tan_select_row_upd_uk1;

function tan_select_row_upd_uk2( i_tan_tpe_id   in  pdm_tpl_actions.tpe_id%type
                               , i_tan_ind_primary   in  pdm_tpl_actions.ind_primary%type
                               , o_rt_tan  out pdm_tpl_actions%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tan_select_row_upd_uk2';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := tan_select_row_uk2( i_tan_tpe_id   =>  i_tan_tpe_id
                                   , i_tan_ind_primary   =>  i_tan_ind_primary
                                   , o_rt_tan => o_rt_tan );
      if l_found
      then
         
         l_found := tan_select_row_upd( i_tan_id => o_rt_tan.id
                                      , o_rt_tan => o_rt_tan );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end tan_select_row_upd_uk2;

procedure tan_lock_row( i_tan_id   in  pdm_tpl_actions.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tan_lock_row';
begin
  declare
     cursor c_tan ( i_tan_id   in  pdm_tpl_actions.id%type )
     is
             select ''
               from pdm_tpl_actions tan
              where tan.id = i_tan_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_tan_id is not null
         then
            begin
                
                tan_lock_row_nowait( i_tan_id => i_tan_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_tan( i_tan_id => i_tan_id );
                  close c_tan;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_tan%isopen
         then
            close c_tan;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end tan_lock_row;

procedure tan_lock_row_nowait( i_tan_id   in  pdm_tpl_actions.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tan_lock_row_nowait';
begin
   declare
      cursor c_tan ( i_tan_id   in  pdm_tpl_actions.id%type )
      is
              select ''
                from pdm_tpl_actions tan
               where tan.id = i_tan_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_tan_id is not null
         then
            
            open c_tan( i_tan_id => i_tan_id );

            close c_tan;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_tan%isopen
        then
           close c_tan;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_tan_id||'"' );
   end;                                                          
end tan_lock_row_nowait;

function tan_perform_update( i_tan_id   in     pdm_tpl_actions.id%type
                           , io_rt_tan  in out pdm_tpl_actions%rowtype )
return number
;

function tan_perform_delete( i_tan_id   in  pdm_tpl_actions.id%type )
return boolean
;

procedure tan_insert_row ( io_rt_tan  in out pdm_tpl_actions%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tan_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into pdm_tpl_actions( id
                                , tpe_id
                                , type
                                , ind_primary )
              values ( io_rt_tan.id
                     , io_rt_tan.tpe_id
                     , io_rt_tan.type
                     , io_rt_tan.ind_primary )
           returning id
                   , tpe_id
                   , type
                   , ind_primary
                into io_rt_tan.id
                   , io_rt_tan.tpe_id
                   , io_rt_tan.type
                   , io_rt_tan.ind_primary;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_tan.id||'"'
                                                             ||', TPE_ID = "'||io_rt_tan.tpe_id||'"'
                                                             ||', TYPE = "'||io_rt_tan.type||'"'
                                                             ||', IND_PRIMARY = "'||io_rt_tan.ind_primary||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end tan_insert_row;

function tan_perform_update( i_tan_id   in     pdm_tpl_actions.id%type
                           , io_rt_tan  in out pdm_tpl_actions%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tan_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update pdm_tpl_actions
            set id = io_rt_tan.id
              , tpe_id = io_rt_tan.tpe_id
              , type = io_rt_tan.type
              , ind_primary = io_rt_tan.ind_primary
          where id = i_tan_id
      returning id
              , tpe_id
              , type
              , ind_primary
           into io_rt_tan.id
              , io_rt_tan.tpe_id
              , io_rt_tan.type
              , io_rt_tan.ind_primary;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_tan.id||'"'
                                                             ||', TPE_ID = "'||io_rt_tan.tpe_id||'"'
                                                             ||', TYPE = "'||io_rt_tan.type||'"'
                                                             ||', IND_PRIMARY = "'||io_rt_tan.ind_primary||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end tan_perform_update;

function tan_perform_delete( i_tan_id   in  pdm_tpl_actions.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tan_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from pdm_tpl_actions
          where id = i_tan_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_tan_id||'"' );
   end;                                                          
end tan_perform_delete;

function tan_update_row( i_tan_id   in     pdm_tpl_actions.id%type
                       , io_rt_tan  in out pdm_tpl_actions%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tan_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         tan_lock_row( i_tan_id   =>  i_tan_id );

         
         l_rowcount := 
            tan_perform_update( i_tan_id   =>  i_tan_id
                              , io_rt_tan  => io_rt_tan );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_tan.id||'"'
                                                          ||', TPE_ID = "'||io_rt_tan.tpe_id||'"'
                                                          ||', TYPE = "'||io_rt_tan.type||'"'
                                                          ||', IND_PRIMARY = "'||io_rt_tan.ind_primary||'"'                                                           , 1, 4000));
   end;                                                          
end tan_update_row;

function tan_delete_row( i_tan_id   in  pdm_tpl_actions.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tan_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         tan_lock_row( i_tan_id   =>  i_tan_id );

         
         l_deleted := tan_perform_delete( i_tan_id   =>  i_tan_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_tan_id||'"' );
   end;                                                          
end tan_delete_row;

function tan_seq1_nextval
return pdm_tpl_actions.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tan_seq1_nextval';
   l_tan_id  pdm_tpl_actions.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select pdm_tan_seq1.nextval 
           into l_tan_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_tan_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end tan_seq1_nextval;


end pdm_tan_tapi_pck;
/