create or replace PACKAGE pdm_tpn_tapi_pck
IS
-- Table API package for table pdm_tpl_process_specifications
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:02)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'PDM_TPN_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'PDM_TPL_PROCESS_SPECIFICATIONS';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION tpn_select_row( i_tpn_ID   IN  pdm_tpl_process_specifications.ID%TYPE
                       , o_rt_tpn   OUT pdm_tpl_process_specifications%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION tpn_select_row_upd( i_tpn_ID   IN  pdm_tpl_process_specifications.ID%TYPE
                           , o_rt_tpn   OUT pdm_tpl_process_specifications%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE tpn_lock_row( i_tpn_ID   IN  pdm_tpl_process_specifications.ID%TYPE )
;

PROCEDURE tpn_lock_row_nowait( i_tpn_ID   IN  pdm_tpl_process_specifications.ID%TYPE )
;

PROCEDURE tpn_insert_row ( io_rt_tpn  IN OUT pdm_tpl_process_specifications%ROWTYPE )
;

FUNCTION tpn_update_row( i_tpn_ID   IN     pdm_tpl_process_specifications.ID%TYPE
                       , io_rt_tpn  IN OUT pdm_tpl_process_specifications%ROWTYPE )
RETURN NUMBER
;

FUNCTION tpn_delete_row( i_tpn_ID   IN  pdm_tpl_process_specifications.ID%TYPE )
RETURN BOOLEAN
;

FUNCTION tpn_seq1_nextval
RETURN pdm_tpl_process_specifications.ID%TYPE
;


END pdm_tpn_tapi_pck;
/




package body pdm_tpn_tapi_pck
is




function tpn_select_row( i_tpn_id   in  pdm_tpl_process_specifications.id%type
                       , o_rt_tpn   out pdm_tpl_process_specifications%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tpn_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_tpn ( i_tpn_id   in  pdm_tpl_process_specifications.id%type )
      is 
           select *
             from pdm_tpl_process_specifications tpn
            where tpn.id = i_tpn_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_tpn( i_tpn_id => i_tpn_id );
         fetch c_tpn into o_rt_tpn;
         l_found := c_tpn%found;
         close c_tpn;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_tpn%isopen
         then
            close c_tpn;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end tpn_select_row;

function tpn_select_row_upd( i_tpn_id   in  pdm_tpl_process_specifications.id%type
                           , o_rt_tpn   out pdm_tpl_process_specifications%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tpn_select_row_upd';
   l_found                boolean      := false;

   cursor c_tpn ( i_tpn_id   in  pdm_tpl_process_specifications.id%type )
   is
           select *
             from pdm_tpl_process_specifications tpn
            where tpn.id = i_tpn_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_tpn( i_tpn_id => i_tpn_id );
   fetch c_tpn into o_rt_tpn;
   l_found := c_tpn%found;
   close c_tpn;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_tpn%isopen
      then
         close c_tpn;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end tpn_select_row_upd;

procedure tpn_lock_row( i_tpn_id   in  pdm_tpl_process_specifications.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tpn_lock_row';
begin
  declare
     cursor c_tpn ( i_tpn_id   in  pdm_tpl_process_specifications.id%type )
     is
             select ''
               from pdm_tpl_process_specifications tpn
              where tpn.id = i_tpn_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_tpn_id is not null
         then
            begin
                
                tpn_lock_row_nowait( i_tpn_id => i_tpn_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_tpn( i_tpn_id => i_tpn_id );
                  close c_tpn;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_tpn%isopen
         then
            close c_tpn;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end tpn_lock_row;

procedure tpn_lock_row_nowait( i_tpn_id   in  pdm_tpl_process_specifications.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tpn_lock_row_nowait';
begin
   declare
      cursor c_tpn ( i_tpn_id   in  pdm_tpl_process_specifications.id%type )
      is
              select ''
                from pdm_tpl_process_specifications tpn
               where tpn.id = i_tpn_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_tpn_id is not null
         then
            
            open c_tpn( i_tpn_id => i_tpn_id );

            close c_tpn;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_tpn%isopen
        then
           close c_tpn;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_tpn_id||'"' );
   end;                                                          
end tpn_lock_row_nowait;

function tpn_perform_update( i_tpn_id   in     pdm_tpl_process_specifications.id%type
                           , io_rt_tpn  in out pdm_tpl_process_specifications%rowtype )
return number
;

function tpn_perform_delete( i_tpn_id   in  pdm_tpl_process_specifications.id%type )
return boolean
;

procedure tpn_insert_row ( io_rt_tpn  in out pdm_tpl_process_specifications%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tpn_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into pdm_tpl_process_specifications( id
                                , tpp_id
                                , evt_id
                                , tle_id
                                , esn_id
                                , pns_id
                                , version
                                , date_created )
              values ( io_rt_tpn.id
                     , io_rt_tpn.tpp_id
                     , io_rt_tpn.evt_id
                     , io_rt_tpn.tle_id
                     , io_rt_tpn.esn_id
                     , io_rt_tpn.pns_id
                     , io_rt_tpn.version
                     , io_rt_tpn.date_created )
           returning id
                   , tpp_id
                   , evt_id
                   , tle_id
                   , esn_id
                   , pns_id
                   , version
                   , date_created
                into io_rt_tpn.id
                   , io_rt_tpn.tpp_id
                   , io_rt_tpn.evt_id
                   , io_rt_tpn.tle_id
                   , io_rt_tpn.esn_id
                   , io_rt_tpn.pns_id
                   , io_rt_tpn.version
                   , io_rt_tpn.date_created;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_tpn.id||'"'
                                                             ||', TPP_ID = "'||io_rt_tpn.tpp_id||'"'
                                                             ||', EVT_ID = "'||io_rt_tpn.evt_id||'"'
                                                             ||', TLE_ID = "'||io_rt_tpn.tle_id||'"'
                                                             ||', ESN_ID = "'||io_rt_tpn.esn_id||'"'
                                                             ||', PNS_ID = "'||io_rt_tpn.pns_id||'"'
                                                             ||', VERSION = "'||io_rt_tpn.version||'"'
                                                             ||', DATE_CREATED = "'||io_rt_tpn.date_created||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end tpn_insert_row;

function tpn_perform_update( i_tpn_id   in     pdm_tpl_process_specifications.id%type
                           , io_rt_tpn  in out pdm_tpl_process_specifications%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tpn_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update pdm_tpl_process_specifications
            set id = io_rt_tpn.id
              , tpp_id = io_rt_tpn.tpp_id
              , evt_id = io_rt_tpn.evt_id
              , tle_id = io_rt_tpn.tle_id
              , esn_id = io_rt_tpn.esn_id
              , pns_id = io_rt_tpn.pns_id
              , version = io_rt_tpn.version
              , date_created = io_rt_tpn.date_created
          where id = i_tpn_id
      returning id
              , tpp_id
              , evt_id
              , tle_id
              , esn_id
              , pns_id
              , version
              , date_created
           into io_rt_tpn.id
              , io_rt_tpn.tpp_id
              , io_rt_tpn.evt_id
              , io_rt_tpn.tle_id
              , io_rt_tpn.esn_id
              , io_rt_tpn.pns_id
              , io_rt_tpn.version
              , io_rt_tpn.date_created;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_tpn.id||'"'
                                                             ||', TPP_ID = "'||io_rt_tpn.tpp_id||'"'
                                                             ||', EVT_ID = "'||io_rt_tpn.evt_id||'"'
                                                             ||', TLE_ID = "'||io_rt_tpn.tle_id||'"'
                                                             ||', ESN_ID = "'||io_rt_tpn.esn_id||'"'
                                                             ||', PNS_ID = "'||io_rt_tpn.pns_id||'"'
                                                             ||', VERSION = "'||io_rt_tpn.version||'"'
                                                             ||', DATE_CREATED = "'||io_rt_tpn.date_created||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end tpn_perform_update;

function tpn_perform_delete( i_tpn_id   in  pdm_tpl_process_specifications.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tpn_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from pdm_tpl_process_specifications
          where id = i_tpn_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_tpn_id||'"' );
   end;                                                          
end tpn_perform_delete;

function tpn_update_row( i_tpn_id   in     pdm_tpl_process_specifications.id%type
                       , io_rt_tpn  in out pdm_tpl_process_specifications%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tpn_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         tpn_lock_row( i_tpn_id   =>  i_tpn_id );

         
         l_rowcount := 
            tpn_perform_update( i_tpn_id   =>  i_tpn_id
                              , io_rt_tpn  => io_rt_tpn );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_tpn.id||'"'
                                                          ||', TPP_ID = "'||io_rt_tpn.tpp_id||'"'
                                                          ||', EVT_ID = "'||io_rt_tpn.evt_id||'"'
                                                          ||', TLE_ID = "'||io_rt_tpn.tle_id||'"'
                                                          ||', ESN_ID = "'||io_rt_tpn.esn_id||'"'
                                                          ||', PNS_ID = "'||io_rt_tpn.pns_id||'"'
                                                          ||', VERSION = "'||io_rt_tpn.version||'"'
                                                          ||', DATE_CREATED = "'||io_rt_tpn.date_created||'"'                                                           , 1, 4000));
   end;                                                          
end tpn_update_row;

function tpn_delete_row( i_tpn_id   in  pdm_tpl_process_specifications.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tpn_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         tpn_lock_row( i_tpn_id   =>  i_tpn_id );

         
         l_deleted := tpn_perform_delete( i_tpn_id   =>  i_tpn_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_tpn_id||'"' );
   end;                                                          
end tpn_delete_row;

function tpn_seq1_nextval
return pdm_tpl_process_specifications.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tpn_seq1_nextval';
   l_tpn_id  pdm_tpl_process_specifications.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select pdm_tpn_seq1.nextval 
           into l_tpn_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_tpn_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end tpn_seq1_nextval;


end pdm_tpn_tapi_pck;
/