create or replace PACKAGE pdm_pen_tapi_pck
IS
-- Table API package for table pdm_process_expressions
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:00)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'PDM_PEN_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'PDM_PROCESS_EXPRESSIONS';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION pen_select_row( i_pen_PCS_ID   IN  pdm_process_expressions.PCS_ID%TYPE
 , i_pen_ESN_ID   IN  pdm_process_expressions.ESN_ID%TYPE
                       , o_rt_pen   OUT pdm_process_expressions%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION pen_select_row_upd( i_pen_PCS_ID   IN  pdm_process_expressions.PCS_ID%TYPE
                           , i_pen_ESN_ID   IN  pdm_process_expressions.ESN_ID%TYPE
                           , o_rt_pen   OUT pdm_process_expressions%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE pen_lock_row( i_pen_PCS_ID   IN  pdm_process_expressions.PCS_ID%TYPE
 , i_pen_ESN_ID   IN  pdm_process_expressions.ESN_ID%TYPE )
;

PROCEDURE pen_lock_row_nowait( i_pen_PCS_ID   IN  pdm_process_expressions.PCS_ID%TYPE
 , i_pen_ESN_ID   IN  pdm_process_expressions.ESN_ID%TYPE )
;

PROCEDURE pen_insert_row ( io_rt_pen  IN OUT pdm_process_expressions%ROWTYPE )
;

FUNCTION pen_update_row( i_pen_PCS_ID   IN     pdm_process_expressions.PCS_ID%TYPE
                        , i_pen_ESN_ID   IN     pdm_process_expressions.ESN_ID%TYPE
                       , io_rt_pen  IN OUT pdm_process_expressions%ROWTYPE )
RETURN NUMBER
;

FUNCTION pen_delete_row( i_pen_PCS_ID   IN  pdm_process_expressions.PCS_ID%TYPE
                         , i_pen_ESN_ID   IN  pdm_process_expressions.ESN_ID%TYPE )
RETURN BOOLEAN
;


END pdm_pen_tapi_pck;
/




package body pdm_pen_tapi_pck
is




function pen_select_row( i_pen_pcs_id   in  pdm_process_expressions.pcs_id%type
 , i_pen_esn_id   in  pdm_process_expressions.esn_id%type
                       , o_rt_pen   out pdm_process_expressions%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pen_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_pen ( i_pen_pcs_id   in  pdm_process_expressions.pcs_id%type
 , i_pen_esn_id   in  pdm_process_expressions.esn_id%type )
      is 
           select *
             from pdm_process_expressions pen
            where pen.pcs_id = i_pen_pcs_id 
              and pen.esn_id = i_pen_esn_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_pen( i_pen_pcs_id => i_pen_pcs_id, i_pen_esn_id => i_pen_esn_id );
         fetch c_pen into o_rt_pen;
         l_found := c_pen%found;
         close c_pen;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_pen%isopen
         then
            close c_pen;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pen_select_row;

function pen_select_row_upd( i_pen_pcs_id   in  pdm_process_expressions.pcs_id%type
                           , i_pen_esn_id   in  pdm_process_expressions.esn_id%type
                           , o_rt_pen   out pdm_process_expressions%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pen_select_row_upd';
   l_found                boolean      := false;

   cursor c_pen ( i_pen_pcs_id   in  pdm_process_expressions.pcs_id%type
                , i_pen_esn_id   in  pdm_process_expressions.esn_id%type )
   is
           select *
             from pdm_process_expressions pen
            where pen.pcs_id = i_pen_pcs_id 
                and pen.esn_id = i_pen_esn_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_pen( i_pen_pcs_id => i_pen_pcs_id
, i_pen_esn_id => i_pen_esn_id );
   fetch c_pen into o_rt_pen;
   l_found := c_pen%found;
   close c_pen;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_pen%isopen
      then
         close c_pen;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end pen_select_row_upd;

procedure pen_lock_row( i_pen_pcs_id   in  pdm_process_expressions.pcs_id%type
 , i_pen_esn_id   in  pdm_process_expressions.esn_id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pen_lock_row';
begin
  declare
     cursor c_pen ( i_pen_pcs_id   in  pdm_process_expressions.pcs_id%type
 , i_pen_esn_id   in  pdm_process_expressions.esn_id%type )
     is
             select ''
               from pdm_process_expressions pen
              where pen.pcs_id = i_pen_pcs_id 
                and pen.esn_id = i_pen_esn_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_pen_pcs_id is not null
            or i_pen_esn_id is not null
         then
            begin
                
                pen_lock_row_nowait( i_pen_pcs_id => i_pen_pcs_id
, i_pen_esn_id => i_pen_esn_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_pen( i_pen_pcs_id => i_pen_pcs_id, i_pen_esn_id => i_pen_esn_id );
                  close c_pen;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_pen%isopen
         then
            close c_pen;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end pen_lock_row;

procedure pen_lock_row_nowait( i_pen_pcs_id   in  pdm_process_expressions.pcs_id%type
 , i_pen_esn_id   in  pdm_process_expressions.esn_id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pen_lock_row_nowait';
begin
   declare
      cursor c_pen ( i_pen_pcs_id   in  pdm_process_expressions.pcs_id%type
 , i_pen_esn_id   in  pdm_process_expressions.esn_id%type )
      is
              select ''
                from pdm_process_expressions pen
               where pen.pcs_id = i_pen_pcs_id 
                 and pen.esn_id = i_pen_esn_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_pen_pcs_id is not null
         or i_pen_esn_id is not null
         then
            
            open c_pen( i_pen_pcs_id => i_pen_pcs_id, i_pen_esn_id => i_pen_esn_id );

            close c_pen;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_pen%isopen
        then
           close c_pen;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'PCS_ID = "'||i_pen_pcs_id||'"'
                                                       ||', ESN_ID = "'||i_pen_esn_id||'"' );
   end;                                                          
end pen_lock_row_nowait;

function pen_perform_update( i_pen_pcs_id   in     pdm_process_expressions.pcs_id%type
 , i_pen_esn_id   in     pdm_process_expressions.esn_id%type
                           , io_rt_pen  in out pdm_process_expressions%rowtype )
return number
;

function pen_perform_delete( i_pen_pcs_id   in  pdm_process_expressions.pcs_id%type
 , i_pen_esn_id   in  pdm_process_expressions.esn_id%type )
return boolean
;

procedure pen_insert_row ( io_rt_pen  in out pdm_process_expressions%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pen_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into pdm_process_expressions( pcs_id
                                , esn_id )
              values ( io_rt_pen.pcs_id
                     , io_rt_pen.esn_id )
           returning pcs_id
                   , esn_id
                into io_rt_pen.pcs_id
                   , io_rt_pen.esn_id;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('PCS_ID = "'||io_rt_pen.pcs_id||'"'
                                                             ||', ESN_ID = "'||io_rt_pen.esn_id||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pen_insert_row;

function pen_perform_update( i_pen_pcs_id   in     pdm_process_expressions.pcs_id%type
 , i_pen_esn_id   in     pdm_process_expressions.esn_id%type
                           , io_rt_pen  in out pdm_process_expressions%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pen_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update pdm_process_expressions
            set pcs_id = io_rt_pen.pcs_id
              , esn_id = io_rt_pen.esn_id
          where pcs_id = i_pen_pcs_id
            and esn_id = i_pen_esn_id
      returning pcs_id
              , esn_id
           into io_rt_pen.pcs_id
              , io_rt_pen.esn_id;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('PCS_ID = "'||io_rt_pen.pcs_id||'"'
                                                             ||', ESN_ID = "'||io_rt_pen.esn_id||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pen_perform_update;

function pen_perform_delete( i_pen_pcs_id   in  pdm_process_expressions.pcs_id%type
 , i_pen_esn_id   in  pdm_process_expressions.esn_id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pen_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from pdm_process_expressions
          where pcs_id = i_pen_pcs_id
            and esn_id = i_pen_esn_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'PCS_ID = "'||i_pen_pcs_id||'"'
                                                         ||', ESN_ID = "'||i_pen_esn_id||'"' );
   end;                                                          
end pen_perform_delete;

function pen_update_row( i_pen_pcs_id   in     pdm_process_expressions.pcs_id%type
                        , i_pen_esn_id   in     pdm_process_expressions.esn_id%type
                       , io_rt_pen  in out pdm_process_expressions%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pen_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         pen_lock_row( i_pen_pcs_id   =>  i_pen_pcs_id
 , i_pen_esn_id   =>  i_pen_esn_id );

         
         l_rowcount := 
            pen_perform_update( i_pen_pcs_id   =>  i_pen_pcs_id
 , i_pen_esn_id   =>  i_pen_esn_id
                              , io_rt_pen  => io_rt_pen );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('PCS_ID = "'||io_rt_pen.pcs_id||'"'
                                                          ||', ESN_ID = "'||io_rt_pen.esn_id||'"'                                                           , 1, 4000));
   end;                                                          
end pen_update_row;

function pen_delete_row( i_pen_pcs_id   in  pdm_process_expressions.pcs_id%type
                         , i_pen_esn_id   in  pdm_process_expressions.esn_id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pen_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         pen_lock_row( i_pen_pcs_id   =>  i_pen_pcs_id
          , i_pen_esn_id   =>  i_pen_esn_id );

         
         l_deleted := pen_perform_delete( i_pen_pcs_id   =>  i_pen_pcs_id
 , i_pen_esn_id   =>  i_pen_esn_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'PCS_ID = "'||i_pen_pcs_id||'"'
                                                      ||', ESN_ID = "'||i_pen_esn_id||'"' );
   end;                                                          
end pen_delete_row;


end pdm_pen_tapi_pck;
/