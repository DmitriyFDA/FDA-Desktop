create or replace PACKAGE pdm_eon_tapi_pck
IS
-- Table API package for table pdm_evaluate_operations
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:40:58)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'PDM_EON_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'PDM_EVALUATE_OPERATIONS';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION eon_select_row( i_eon_ID   IN  pdm_evaluate_operations.ID%TYPE
                       , o_rt_eon   OUT pdm_evaluate_operations%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION eon_select_row_uk1( i_eon_OTE_ID   IN  pdm_evaluate_operations.OTE_ID%TYPE
                           , i_eon_AGP_ID   IN  pdm_evaluate_operations.AGP_ID%TYPE
                           , i_eon_VALUE   IN  pdm_evaluate_operations.VALUE%TYPE
                           , o_rt_eon  OUT pdm_evaluate_operations%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION eon_select_row_upd( i_eon_ID   IN  pdm_evaluate_operations.ID%TYPE
                           , o_rt_eon   OUT pdm_evaluate_operations%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION eon_select_row_upd_uk1( i_eon_OTE_ID   IN  pdm_evaluate_operations.OTE_ID%TYPE
                               , i_eon_AGP_ID   IN  pdm_evaluate_operations.AGP_ID%TYPE
                               , i_eon_VALUE   IN  pdm_evaluate_operations.VALUE%TYPE
                               , o_rt_eon  OUT pdm_evaluate_operations%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE eon_lock_row( i_eon_ID   IN  pdm_evaluate_operations.ID%TYPE )
;

PROCEDURE eon_lock_row_nowait( i_eon_ID   IN  pdm_evaluate_operations.ID%TYPE )
;

PROCEDURE eon_insert_row ( io_rt_eon  IN OUT pdm_evaluate_operations%ROWTYPE )
;

FUNCTION eon_update_row( i_eon_ID   IN     pdm_evaluate_operations.ID%TYPE
                       , io_rt_eon  IN OUT pdm_evaluate_operations%ROWTYPE )
RETURN NUMBER
;

FUNCTION eon_delete_row( i_eon_ID   IN  pdm_evaluate_operations.ID%TYPE )
RETURN BOOLEAN
;

FUNCTION eon_seq1_nextval
RETURN pdm_evaluate_operations.ID%TYPE
;


END pdm_eon_tapi_pck;
/




package body pdm_eon_tapi_pck
is




function eon_select_row( i_eon_id   in  pdm_evaluate_operations.id%type
                       , o_rt_eon   out pdm_evaluate_operations%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.eon_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_eon ( i_eon_id   in  pdm_evaluate_operations.id%type )
      is 
           select *
             from pdm_evaluate_operations eon
            where eon.id = i_eon_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_eon( i_eon_id => i_eon_id );
         fetch c_eon into o_rt_eon;
         l_found := c_eon%found;
         close c_eon;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_eon%isopen
         then
            close c_eon;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end eon_select_row;

function eon_select_row_uk1( i_eon_ote_id   in  pdm_evaluate_operations.ote_id%type
                           , i_eon_agp_id   in  pdm_evaluate_operations.agp_id%type
                           , i_eon_value   in  pdm_evaluate_operations.value%type
                           , o_rt_eon  out pdm_evaluate_operations%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.eon_select_row_uk1';
   l_found                boolean      := false;
begin
   declare
      cursor c_eon ( i_eon_ote_id   in  pdm_evaluate_operations.ote_id%type
                   , i_eon_agp_id   in  pdm_evaluate_operations.agp_id%type
                   , i_eon_value   in  pdm_evaluate_operations.value%type )
      is
         select *
           from pdm_evaluate_operations eon
          where eon.ote_id = i_eon_ote_id 
            and eon.agp_id = i_eon_agp_id 
            and ( eon.value = i_eon_value or (eon.value is null  and i_eon_value is null  ));
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_eon(i_eon_ote_id => i_eon_ote_id, i_eon_agp_id => i_eon_agp_id, i_eon_value => i_eon_value);
         fetch c_eon into o_rt_eon;
         l_found := c_eon%found;
         close c_eon;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_eon%isopen
      then
         close c_eon;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end eon_select_row_uk1;

function eon_select_row_upd( i_eon_id   in  pdm_evaluate_operations.id%type
                           , o_rt_eon   out pdm_evaluate_operations%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.eon_select_row_upd';
   l_found                boolean      := false;

   cursor c_eon ( i_eon_id   in  pdm_evaluate_operations.id%type )
   is
           select *
             from pdm_evaluate_operations eon
            where eon.id = i_eon_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_eon( i_eon_id => i_eon_id );
   fetch c_eon into o_rt_eon;
   l_found := c_eon%found;
   close c_eon;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_eon%isopen
      then
         close c_eon;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end eon_select_row_upd;

function eon_select_row_upd_uk1( i_eon_ote_id   in  pdm_evaluate_operations.ote_id%type
                               , i_eon_agp_id   in  pdm_evaluate_operations.agp_id%type
                               , i_eon_value   in  pdm_evaluate_operations.value%type
                               , o_rt_eon  out pdm_evaluate_operations%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.eon_select_row_upd_uk1';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := eon_select_row_uk1( i_eon_ote_id   =>  i_eon_ote_id
                                   , i_eon_agp_id   =>  i_eon_agp_id
                                   , i_eon_value   =>  i_eon_value
                                   , o_rt_eon => o_rt_eon );
      if l_found
      then
         
         l_found := eon_select_row_upd( i_eon_id => o_rt_eon.id
                                      , o_rt_eon => o_rt_eon );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end eon_select_row_upd_uk1;

procedure eon_lock_row( i_eon_id   in  pdm_evaluate_operations.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.eon_lock_row';
begin
  declare
     cursor c_eon ( i_eon_id   in  pdm_evaluate_operations.id%type )
     is
             select ''
               from pdm_evaluate_operations eon
              where eon.id = i_eon_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_eon_id is not null
         then
            begin
                
                eon_lock_row_nowait( i_eon_id => i_eon_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_eon( i_eon_id => i_eon_id );
                  close c_eon;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_eon%isopen
         then
            close c_eon;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end eon_lock_row;

procedure eon_lock_row_nowait( i_eon_id   in  pdm_evaluate_operations.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.eon_lock_row_nowait';
begin
   declare
      cursor c_eon ( i_eon_id   in  pdm_evaluate_operations.id%type )
      is
              select ''
                from pdm_evaluate_operations eon
               where eon.id = i_eon_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_eon_id is not null
         then
            
            open c_eon( i_eon_id => i_eon_id );

            close c_eon;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_eon%isopen
        then
           close c_eon;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_eon_id||'"' );
   end;                                                          
end eon_lock_row_nowait;

function eon_perform_update( i_eon_id   in     pdm_evaluate_operations.id%type
                           , io_rt_eon  in out pdm_evaluate_operations%rowtype )
return number
;

function eon_perform_delete( i_eon_id   in  pdm_evaluate_operations.id%type )
return boolean
;

procedure eon_insert_row ( io_rt_eon  in out pdm_evaluate_operations%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.eon_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into pdm_evaluate_operations( id
                                , ote_id
                                , agp_id
                                , evt_id
                                , value
                                , status )
              values ( io_rt_eon.id
                     , io_rt_eon.ote_id
                     , io_rt_eon.agp_id
                     , io_rt_eon.evt_id
                     , io_rt_eon.value
                     , io_rt_eon.status )
           returning id
                   , ote_id
                   , agp_id
                   , evt_id
                   , value
                   , status
                into io_rt_eon.id
                   , io_rt_eon.ote_id
                   , io_rt_eon.agp_id
                   , io_rt_eon.evt_id
                   , io_rt_eon.value
                   , io_rt_eon.status;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_eon.id||'"'
                                                             ||', OTE_ID = "'||io_rt_eon.ote_id||'"'
                                                             ||', AGP_ID = "'||io_rt_eon.agp_id||'"'
                                                             ||', EVT_ID = "'||io_rt_eon.evt_id||'"'
                                                             ||', VALUE = "'||io_rt_eon.value||'"'
                                                             ||', STATUS = "'||io_rt_eon.status||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end eon_insert_row;

function eon_perform_update( i_eon_id   in     pdm_evaluate_operations.id%type
                           , io_rt_eon  in out pdm_evaluate_operations%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.eon_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update pdm_evaluate_operations
            set id = io_rt_eon.id
              , ote_id = io_rt_eon.ote_id
              , agp_id = io_rt_eon.agp_id
              , evt_id = io_rt_eon.evt_id
              , value = io_rt_eon.value
              , status = io_rt_eon.status
          where id = i_eon_id
      returning id
              , ote_id
              , agp_id
              , evt_id
              , value
              , status
           into io_rt_eon.id
              , io_rt_eon.ote_id
              , io_rt_eon.agp_id
              , io_rt_eon.evt_id
              , io_rt_eon.value
              , io_rt_eon.status;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_eon.id||'"'
                                                             ||', OTE_ID = "'||io_rt_eon.ote_id||'"'
                                                             ||', AGP_ID = "'||io_rt_eon.agp_id||'"'
                                                             ||', EVT_ID = "'||io_rt_eon.evt_id||'"'
                                                             ||', VALUE = "'||io_rt_eon.value||'"'
                                                             ||', STATUS = "'||io_rt_eon.status||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end eon_perform_update;

function eon_perform_delete( i_eon_id   in  pdm_evaluate_operations.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.eon_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from pdm_evaluate_operations
          where id = i_eon_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_eon_id||'"' );
   end;                                                          
end eon_perform_delete;

function eon_update_row( i_eon_id   in     pdm_evaluate_operations.id%type
                       , io_rt_eon  in out pdm_evaluate_operations%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.eon_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         eon_lock_row( i_eon_id   =>  i_eon_id );

         
         l_rowcount := 
            eon_perform_update( i_eon_id   =>  i_eon_id
                              , io_rt_eon  => io_rt_eon );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_eon.id||'"'
                                                          ||', OTE_ID = "'||io_rt_eon.ote_id||'"'
                                                          ||', AGP_ID = "'||io_rt_eon.agp_id||'"'
                                                          ||', EVT_ID = "'||io_rt_eon.evt_id||'"'
                                                          ||', VALUE = "'||io_rt_eon.value||'"'
                                                          ||', STATUS = "'||io_rt_eon.status||'"'                                                           , 1, 4000));
   end;                                                          
end eon_update_row;

function eon_delete_row( i_eon_id   in  pdm_evaluate_operations.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.eon_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         eon_lock_row( i_eon_id   =>  i_eon_id );

         
         l_deleted := eon_perform_delete( i_eon_id   =>  i_eon_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_eon_id||'"' );
   end;                                                          
end eon_delete_row;

function eon_seq1_nextval
return pdm_evaluate_operations.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.eon_seq1_nextval';
   l_eon_id  pdm_evaluate_operations.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select pdm_eon_seq1.nextval 
           into l_eon_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_eon_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end eon_seq1_nextval;


end pdm_eon_tapi_pck;
/