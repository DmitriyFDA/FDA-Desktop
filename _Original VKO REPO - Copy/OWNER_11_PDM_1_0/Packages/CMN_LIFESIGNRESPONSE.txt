create or replace PACKAGE cmn_lifesignresponse
IS
   PROCEDURE hdl_response( i_message in xmltype);

   FUNCTION create_response( i_target_processid IN VARCHAR2, i_target_instanceid IN VARCHAR2, i_signature IN NUMBER, i_event_time_str IN VARCHAR2 )
      RETURN XMLTYPE;
END cmn_lifesignresponse;
/




package body cmn_lifesignresponse
is
   














   g_con_package   constant varchar2( 20 ) := 'cmn_lifesignresponse';

   function create_response(
      i_target_processid   in   varchar2
    , i_target_instanceid  in   varchar2
    , i_signature          in   number
    , i_event_time_str     in   varchar2
   )
      return xmltype
   is
      l_con_proc_name   constant cmn_constant.st_proc_name   := g_con_package || '.create_response';
      l_header                   clob;
      l_msg_clob                 clob;
      l_msg_xml                  xmltype;
      l_current_time             varchar2( 30 );
      l_lpy_id                   cmn_lifesign_parties.id%type;
      l_resp_interval            cmn_parameter_values.value%type;
      l_allowed_misses           cmn_parameter_values.value%type;
      l_rt_lpy                   cmn_lifesign_parties%rowtype;
      l_rt_lrr                   cmn_lifesign_req_received%rowtype;
      l_event_time               cmn_constant.st_timestamp;
   begin
      viu_module.enter_module( i_module      => l_con_proc_name );
      l_header    :=   cmn_interface.create_header( i_target_process_id_cust  => i_target_processid
                      				                 , i_target_instance_id_cust => i_target_instanceid
                                                  );

      l_msg_clob                    := cmn_constant.g_con_xml_encoding || '<LifeSignResponse>' || l_header;

      dbms_lob.append( dest_lob      => l_msg_clob
                     , src_lob       =>    '<Signature>'
                                        || i_signature
                                        || '</Signature>'
                                        || '</LifeSignResponse>'
                     );
      l_msg_xml                     := xmltype( l_msg_clob );
      l_lpy_id                      :=
                               cmn_lifesign.get_lifesign_party_id( i_id_cust          => i_target_processid
                                                                 , i_instance_id_cust => i_target_instanceid );

      if l_lpy_id is null
      then
         
         l_resp_interval             :=
            cmn_common.get_parameter_value
                                        ( i_prr_name      => cmn_constant.g_con_pve_lsn_def_resp_interva );
         l_allowed_misses            :=
            cmn_common.get_parameter_value
                                          ( i_prr_name      => cmn_constant.g_con_pve_lsn_allowed_misses );
         
         l_rt_lpy.ind_initiator      := 'Y';
         l_rt_lpy.response_interval  := l_resp_interval;
         l_rt_lpy.allowed_misses     := l_allowed_misses;
         cmn_lpy_tapi_pck.lpy_insert_row( io_rt_lpy      => l_rt_lpy );
         l_lpy_id                    := l_rt_lpy.id;
      end if;

      
      l_rt_lrr.lpy_id               := l_lpy_id;
      l_rt_lrr.sequence             := i_signature;
      l_event_time                  :=
                                  cmn_common.varchar_to_timestamp( i_timestamp      => i_event_time_str );
      l_rt_lrr.event_time           := l_event_time;
      l_current_time                :=
                 l_msg_xml.extract( '/LifeSignResponse/Header/MessageTime/text()' ).getstringval
                                                                                                ( );
      l_rt_lrr.event_time_response  :=
                                    cmn_common.varchar_to_timestamp( i_timestamp      => l_current_time );
      cmn_lrr_tapi_pck.lrr_insert_row( io_rt_lrr      => l_rt_lrr );
      viu_module.leave_module( i_module      => l_con_proc_name );
      return l_msg_xml;
   exception
      when others
      then
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => 'exception'
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
   end;

   function get_signature( i_message in xmltype )
      return varchar2
   is
      l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.get_signature';
      l_signature                varchar2( 4000 );
   begin
      viu_module.enter_module( i_module      => l_con_proc_name );
      l_signature  := i_message.extract( '/LifeSignResponse/Signature/text()' ).getstringval( );
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => l_signature
                             );
      return l_signature;
   exception
      when others
      then
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => 'exception'
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
   end get_signature;

   function get_source_processid( i_message in xmltype )
      return varchar2
   is
      l_con_proc_name   constant cmn_constant.st_proc_name
                                                        := g_con_package || '.get_source_processid';
      l_source_processid         cmn_parties.id_cust%type;
   begin
      viu_module.enter_module( i_module      => l_con_proc_name );
      l_source_processid  :=
           i_message.extract( '/LifeSignResponse/Header/Source/ProcessID/text()' ).getstringval
                                                                                               ( );
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => l_source_processid
                             );
      return l_source_processid;
   exception
      when others
      then
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => 'exception'
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
   end get_source_processid;

   function get_source_instanceid( i_message in xmltype )
      return varchar2
   is
      l_con_proc_name   constant cmn_constant.st_proc_name
                                                        := g_con_package || '.get_source_instanceid';
      l_source_instanceid         cmn_parties.instance_id_cust%type;
   begin
      viu_module.enter_module( i_module      => l_con_proc_name );
      l_source_instanceid  := cmn_xml_util.extract_value (i_xml   => i_message
                                                         ,i_xpath => '/LifeSignResponse/Header/Source/InstanceID'
                                                         );
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => l_source_instanceid
                             );
      return l_source_instanceid;
   exception
      when others
      then
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => 'exception'
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
   end get_source_instanceid;

   function get_message_time( i_message in xmltype )
      return varchar2
   is
      l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.get_message_time';
      l_message_time             varchar2( 240 );
   begin
      viu_module.enter_module( i_module      => l_con_proc_name );
      l_message_time  :=
                i_message.extract( '/LifeSignResponse/Header/MessageTime/text()' ).getstringval
                                                                                               ( );
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => l_message_time
                             );
      return l_message_time;
   exception
      when others
      then
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
   end get_message_time;

   procedure hdl_response( i_message in xmltype )
   is
      cursor c_lrs
       (b_sequence in cmn_lifesign_req_sent.sequence%type
       ,b_lpy_id in cmn_lifesign_req_sent.lpy_id%type
       )
       is
      



      select *
      from   cmn_lifesign_req_sent
      where  sequence = b_sequence
      and    lpy_id   = b_lpy_id
      and    response_received is null
      order by event_time desc;
      
      l_con_proc_name   constant cmn_constant.st_proc_name      := g_con_package || '.hdl_response';
      l_rt_lrs                   cmn_lifesign_req_sent%rowtype;
      l_rt_lpy                   cmn_lifesign_parties%rowtype;
      l_lpy_id                   cmn_lifesign_parties.id%type;
      l_event_time_response      cmn_lifesign_req_sent.event_time_response%type;
      l_plsql_block              varchar2( 240 );
      l_rows_updated             number;
   begin
      viu_module.enter_module( i_module      => l_con_proc_name );
      l_lpy_id              := cmn_lifesign.get_lifesign_party_id( i_id_cust          => get_source_processid( i_message )
                                                                 , i_instance_id_cust => get_source_instanceid( i_message )
                                                                 );
      l_event_time_response := cmn_common.varchar_to_timestamp( get_message_time( i_message ));

      if cmn_lpy_tapi_pck.lpy_select_row( i_lpy_id      => l_lpy_id
                                        , o_rt_lpy      => l_rt_lpy
                                        )
      then
         open c_lrs( b_sequence => get_signature(i_message)
                   , b_lpy_id   => l_lpy_id);
         fetch c_lrs
         into  l_rt_lrs;

         if c_lrs%found
         then
            close c_lrs;
            if     not cmn_lifesign.lpy_healthy( i_lpy_id      => l_lpy_id )
               and l_rt_lpy.init_procedure is not null
            then
               
               l_plsql_block  := 'BEGIN ' || l_rt_lpy.init_procedure || '; END;';

               execute immediate ( l_plsql_block );
            end if;

            
            
            
            l_rt_lrs.event_time_response := l_event_time_response;
            l_rt_lrs.response_received   := cmn_common.default_timestamp;

            l_rows_updated     := cmn_lrs_tapi_pck.lrs_update_row( i_lrs_id       => l_rt_lrs.id
                                                                 , io_rt_lrs      => l_rt_lrs
                                                                 );
         else
            close c_lrs;
            


            viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_cmnrequestforresponseerr
                               , i_calling_procedure      => l_con_proc_name
                               , i_severity               => viu_info.c_severity_error
                               , i_additional_data        =>    'LifeSign party: '
                                                             || get_source_processid( i_message )
                                                             || ', Instance: '
                                                             || get_source_instanceid( i_message )
                                                             || ', Message sequence: '
                                                             || get_signature( i_message )
                               );
         end if;

         
         cmn_lifesign.record_lpy_healthiness( i_lpy_id     => l_rt_lpy.id
                                            , i_event_time => l_event_time_response);

      end if;

      viu_module.leave_module( i_module      => l_con_proc_name );
   exception
      when others
      then
         if c_lrs%isopen
         then
            close c_lrs;
         end if;

         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
         viu_info.raise_info( );
   end hdl_response;
end cmn_lifesignresponse;
/