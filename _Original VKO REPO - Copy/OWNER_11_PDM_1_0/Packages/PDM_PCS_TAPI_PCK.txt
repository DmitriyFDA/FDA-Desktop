create or replace PACKAGE pdm_pcs_tapi_pck
IS
-- Table API package for table pdm_processes
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:00)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'PDM_PCS_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'PDM_PROCESSES';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION pcs_select_row( i_pcs_ID   IN  pdm_processes.ID%TYPE
                       , o_rt_pcs   OUT pdm_processes%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION pcs_select_row_uk1( i_pcs_PSN_ID   IN  pdm_processes.PSN_ID%TYPE
                           , i_pcs_TYPE   IN  pdm_processes.TYPE%TYPE
                           , o_rt_pcs  OUT pdm_processes%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION pcs_select_row_upd( i_pcs_ID   IN  pdm_processes.ID%TYPE
                           , o_rt_pcs   OUT pdm_processes%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION pcs_select_row_upd_uk1( i_pcs_PSN_ID   IN  pdm_processes.PSN_ID%TYPE
                               , i_pcs_TYPE   IN  pdm_processes.TYPE%TYPE
                               , o_rt_pcs  OUT pdm_processes%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE pcs_lock_row( i_pcs_ID   IN  pdm_processes.ID%TYPE )
;

PROCEDURE pcs_lock_row_nowait( i_pcs_ID   IN  pdm_processes.ID%TYPE )
;

PROCEDURE pcs_insert_row ( io_rt_pcs  IN OUT pdm_processes%ROWTYPE )
;

FUNCTION pcs_update_row( i_pcs_ID   IN     pdm_processes.ID%TYPE
                       , io_rt_pcs  IN OUT pdm_processes%ROWTYPE )
RETURN NUMBER
;

FUNCTION pcs_delete_row( i_pcs_ID   IN  pdm_processes.ID%TYPE )
RETURN BOOLEAN
;

FUNCTION pcs_seq1_nextval
RETURN pdm_processes.ID%TYPE
;


END pdm_pcs_tapi_pck;
/




package body pdm_pcs_tapi_pck
is




function pcs_select_row( i_pcs_id   in  pdm_processes.id%type
                       , o_rt_pcs   out pdm_processes%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pcs_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_pcs ( i_pcs_id   in  pdm_processes.id%type )
      is 
           select *
             from pdm_processes pcs
            where pcs.id = i_pcs_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_pcs( i_pcs_id => i_pcs_id );
         fetch c_pcs into o_rt_pcs;
         l_found := c_pcs%found;
         close c_pcs;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_pcs%isopen
         then
            close c_pcs;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pcs_select_row;

function pcs_select_row_uk1( i_pcs_psn_id   in  pdm_processes.psn_id%type
                           , i_pcs_type   in  pdm_processes.type%type
                           , o_rt_pcs  out pdm_processes%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pcs_select_row_uk1';
   l_found                boolean      := false;
begin
   declare
      cursor c_pcs ( i_pcs_psn_id   in  pdm_processes.psn_id%type
                   , i_pcs_type   in  pdm_processes.type%type )
      is
         select *
           from pdm_processes pcs
          where pcs.psn_id = i_pcs_psn_id 
            and pcs.type = i_pcs_type ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_pcs(i_pcs_psn_id => i_pcs_psn_id, i_pcs_type => i_pcs_type);
         fetch c_pcs into o_rt_pcs;
         l_found := c_pcs%found;
         close c_pcs;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_pcs%isopen
      then
         close c_pcs;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pcs_select_row_uk1;

function pcs_select_row_upd( i_pcs_id   in  pdm_processes.id%type
                           , o_rt_pcs   out pdm_processes%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pcs_select_row_upd';
   l_found                boolean      := false;

   cursor c_pcs ( i_pcs_id   in  pdm_processes.id%type )
   is
           select *
             from pdm_processes pcs
            where pcs.id = i_pcs_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_pcs( i_pcs_id => i_pcs_id );
   fetch c_pcs into o_rt_pcs;
   l_found := c_pcs%found;
   close c_pcs;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_pcs%isopen
      then
         close c_pcs;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end pcs_select_row_upd;

function pcs_select_row_upd_uk1( i_pcs_psn_id   in  pdm_processes.psn_id%type
                               , i_pcs_type   in  pdm_processes.type%type
                               , o_rt_pcs  out pdm_processes%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pcs_select_row_upd_uk1';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := pcs_select_row_uk1( i_pcs_psn_id   =>  i_pcs_psn_id
                                   , i_pcs_type   =>  i_pcs_type
                                   , o_rt_pcs => o_rt_pcs );
      if l_found
      then
         
         l_found := pcs_select_row_upd( i_pcs_id => o_rt_pcs.id
                                      , o_rt_pcs => o_rt_pcs );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end pcs_select_row_upd_uk1;

procedure pcs_lock_row( i_pcs_id   in  pdm_processes.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pcs_lock_row';
begin
  declare
     cursor c_pcs ( i_pcs_id   in  pdm_processes.id%type )
     is
             select ''
               from pdm_processes pcs
              where pcs.id = i_pcs_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_pcs_id is not null
         then
            begin
                
                pcs_lock_row_nowait( i_pcs_id => i_pcs_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_pcs( i_pcs_id => i_pcs_id );
                  close c_pcs;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_pcs%isopen
         then
            close c_pcs;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end pcs_lock_row;

procedure pcs_lock_row_nowait( i_pcs_id   in  pdm_processes.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pcs_lock_row_nowait';
begin
   declare
      cursor c_pcs ( i_pcs_id   in  pdm_processes.id%type )
      is
              select ''
                from pdm_processes pcs
               where pcs.id = i_pcs_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_pcs_id is not null
         then
            
            open c_pcs( i_pcs_id => i_pcs_id );

            close c_pcs;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_pcs%isopen
        then
           close c_pcs;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_pcs_id||'"' );
   end;                                                          
end pcs_lock_row_nowait;

function pcs_perform_update( i_pcs_id   in     pdm_processes.id%type
                           , io_rt_pcs  in out pdm_processes%rowtype )
return number
;

function pcs_perform_delete( i_pcs_id   in  pdm_processes.id%type )
return boolean
;

procedure pcs_insert_row ( io_rt_pcs  in out pdm_processes%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pcs_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into pdm_processes( id
                                , psn_id
                                , type
                                , tps_id
                                , priority )
              values ( io_rt_pcs.id
                     , io_rt_pcs.psn_id
                     , io_rt_pcs.type
                     , io_rt_pcs.tps_id
                     , io_rt_pcs.priority )
           returning id
                   , psn_id
                   , type
                   , tps_id
                   , priority
                into io_rt_pcs.id
                   , io_rt_pcs.psn_id
                   , io_rt_pcs.type
                   , io_rt_pcs.tps_id
                   , io_rt_pcs.priority;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_pcs.id||'"'
                                                             ||', PSN_ID = "'||io_rt_pcs.psn_id||'"'
                                                             ||', TYPE = "'||io_rt_pcs.type||'"'
                                                             ||', TPS_ID = "'||io_rt_pcs.tps_id||'"'
                                                             ||', PRIORITY = "'||io_rt_pcs.priority||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pcs_insert_row;

function pcs_perform_update( i_pcs_id   in     pdm_processes.id%type
                           , io_rt_pcs  in out pdm_processes%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pcs_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update pdm_processes
            set id = io_rt_pcs.id
              , psn_id = io_rt_pcs.psn_id
              , type = io_rt_pcs.type
              , tps_id = io_rt_pcs.tps_id
              , priority = io_rt_pcs.priority
          where id = i_pcs_id
      returning id
              , psn_id
              , type
              , tps_id
              , priority
           into io_rt_pcs.id
              , io_rt_pcs.psn_id
              , io_rt_pcs.type
              , io_rt_pcs.tps_id
              , io_rt_pcs.priority;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_pcs.id||'"'
                                                             ||', PSN_ID = "'||io_rt_pcs.psn_id||'"'
                                                             ||', TYPE = "'||io_rt_pcs.type||'"'
                                                             ||', TPS_ID = "'||io_rt_pcs.tps_id||'"'
                                                             ||', PRIORITY = "'||io_rt_pcs.priority||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pcs_perform_update;

function pcs_perform_delete( i_pcs_id   in  pdm_processes.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pcs_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from pdm_processes
          where id = i_pcs_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_pcs_id||'"' );
   end;                                                          
end pcs_perform_delete;

function pcs_update_row( i_pcs_id   in     pdm_processes.id%type
                       , io_rt_pcs  in out pdm_processes%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pcs_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         pcs_lock_row( i_pcs_id   =>  i_pcs_id );

         
         l_rowcount := 
            pcs_perform_update( i_pcs_id   =>  i_pcs_id
                              , io_rt_pcs  => io_rt_pcs );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_pcs.id||'"'
                                                          ||', PSN_ID = "'||io_rt_pcs.psn_id||'"'
                                                          ||', TYPE = "'||io_rt_pcs.type||'"'
                                                          ||', TPS_ID = "'||io_rt_pcs.tps_id||'"'
                                                          ||', PRIORITY = "'||io_rt_pcs.priority||'"'                                                           , 1, 4000));
   end;                                                          
end pcs_update_row;

function pcs_delete_row( i_pcs_id   in  pdm_processes.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pcs_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         pcs_lock_row( i_pcs_id   =>  i_pcs_id );

         
         l_deleted := pcs_perform_delete( i_pcs_id   =>  i_pcs_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_pcs_id||'"' );
   end;                                                          
end pcs_delete_row;

function pcs_seq1_nextval
return pdm_processes.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pcs_seq1_nextval';
   l_pcs_id  pdm_processes.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select pdm_pcs_seq1.nextval 
           into l_pcs_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_pcs_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pcs_seq1_nextval;


end pdm_pcs_tapi_pck;
/
