create or replace PACKAGE pdm_tpt_tapi_pck
IS
-- Table API package for table pdm_tpl_products
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:02)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'PDM_TPT_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'PDM_TPL_PRODUCTS';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION tpt_select_row( i_tpt_ID   IN  pdm_tpl_products.ID%TYPE
                       , o_rt_tpt   OUT pdm_tpl_products%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION tpt_select_row_uk1( i_tpt_TFY_ID   IN  pdm_tpl_products.TFY_ID%TYPE
                           , i_tpt_ID_CUST   IN  pdm_tpl_products.ID_CUST%TYPE
                           , o_rt_tpt  OUT pdm_tpl_products%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION tpt_select_row_uk2( i_tpt_TFY_ID   IN  pdm_tpl_products.TFY_ID%TYPE
                           , i_tpt_SEQUENCE   IN  pdm_tpl_products.SEQUENCE%TYPE
                           , o_rt_tpt  OUT pdm_tpl_products%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION tpt_select_row_upd( i_tpt_ID   IN  pdm_tpl_products.ID%TYPE
                           , o_rt_tpt   OUT pdm_tpl_products%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION tpt_select_row_upd_uk1( i_tpt_TFY_ID   IN  pdm_tpl_products.TFY_ID%TYPE
                               , i_tpt_ID_CUST   IN  pdm_tpl_products.ID_CUST%TYPE
                               , o_rt_tpt  OUT pdm_tpl_products%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION tpt_select_row_upd_uk2( i_tpt_TFY_ID   IN  pdm_tpl_products.TFY_ID%TYPE
                               , i_tpt_SEQUENCE   IN  pdm_tpl_products.SEQUENCE%TYPE
                               , o_rt_tpt  OUT pdm_tpl_products%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE tpt_lock_row( i_tpt_ID   IN  pdm_tpl_products.ID%TYPE )
;

PROCEDURE tpt_lock_row_nowait( i_tpt_ID   IN  pdm_tpl_products.ID%TYPE )
;

PROCEDURE tpt_insert_row ( io_rt_tpt  IN OUT pdm_tpl_products%ROWTYPE )
;

FUNCTION tpt_update_row( i_tpt_ID   IN     pdm_tpl_products.ID%TYPE
                       , io_rt_tpt  IN OUT pdm_tpl_products%ROWTYPE )
RETURN NUMBER
;

FUNCTION tpt_delete_row( i_tpt_ID   IN  pdm_tpl_products.ID%TYPE )
RETURN BOOLEAN
;

FUNCTION tpt_seq1_nextval
RETURN pdm_tpl_products.ID%TYPE
;


END pdm_tpt_tapi_pck;
/





package body pdm_tpt_tapi_pck
is




function tpt_select_row( i_tpt_id   in  pdm_tpl_products.id%type
                       , o_rt_tpt   out pdm_tpl_products%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tpt_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_tpt ( i_tpt_id   in  pdm_tpl_products.id%type )
      is 
           select *
             from pdm_tpl_products tpt
            where tpt.id = i_tpt_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_tpt( i_tpt_id => i_tpt_id );
         fetch c_tpt into o_rt_tpt;
         l_found := c_tpt%found;
         close c_tpt;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_tpt%isopen
         then
            close c_tpt;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end tpt_select_row;

function tpt_select_row_uk1( i_tpt_tfy_id   in  pdm_tpl_products.tfy_id%type
                           , i_tpt_id_cust   in  pdm_tpl_products.id_cust%type
                           , o_rt_tpt  out pdm_tpl_products%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tpt_select_row_uk1';
   l_found                boolean      := false;
begin
   declare
      cursor c_tpt ( i_tpt_tfy_id   in  pdm_tpl_products.tfy_id%type
                   , i_tpt_id_cust   in  pdm_tpl_products.id_cust%type )
      is
         select *
           from pdm_tpl_products tpt
          where tpt.tfy_id = i_tpt_tfy_id 
            and tpt.id_cust = i_tpt_id_cust ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_tpt(i_tpt_tfy_id => i_tpt_tfy_id, i_tpt_id_cust => i_tpt_id_cust);
         fetch c_tpt into o_rt_tpt;
         l_found := c_tpt%found;
         close c_tpt;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_tpt%isopen
      then
         close c_tpt;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end tpt_select_row_uk1;

function tpt_select_row_uk2( i_tpt_tfy_id   in  pdm_tpl_products.tfy_id%type
                           , i_tpt_sequence   in  pdm_tpl_products.sequence%type
                           , o_rt_tpt  out pdm_tpl_products%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tpt_select_row_uk2';
   l_found                boolean      := false;
begin
   declare
      cursor c_tpt ( i_tpt_tfy_id   in  pdm_tpl_products.tfy_id%type
                   , i_tpt_sequence   in  pdm_tpl_products.sequence%type )
      is
         select *
           from pdm_tpl_products tpt
          where tpt.tfy_id = i_tpt_tfy_id 
            and tpt.sequence = i_tpt_sequence ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_tpt(i_tpt_tfy_id => i_tpt_tfy_id, i_tpt_sequence => i_tpt_sequence);
         fetch c_tpt into o_rt_tpt;
         l_found := c_tpt%found;
         close c_tpt;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_tpt%isopen
      then
         close c_tpt;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end tpt_select_row_uk2;

function tpt_select_row_upd( i_tpt_id   in  pdm_tpl_products.id%type
                           , o_rt_tpt   out pdm_tpl_products%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tpt_select_row_upd';
   l_found                boolean      := false;

   cursor c_tpt ( i_tpt_id   in  pdm_tpl_products.id%type )
   is
           select *
             from pdm_tpl_products tpt
            where tpt.id = i_tpt_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_tpt( i_tpt_id => i_tpt_id );
   fetch c_tpt into o_rt_tpt;
   l_found := c_tpt%found;
   close c_tpt;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_tpt%isopen
      then
         close c_tpt;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end tpt_select_row_upd;

function tpt_select_row_upd_uk1( i_tpt_tfy_id   in  pdm_tpl_products.tfy_id%type
                               , i_tpt_id_cust   in  pdm_tpl_products.id_cust%type
                               , o_rt_tpt  out pdm_tpl_products%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tpt_select_row_upd_uk1';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := tpt_select_row_uk1( i_tpt_tfy_id   =>  i_tpt_tfy_id
                                   , i_tpt_id_cust   =>  i_tpt_id_cust
                                   , o_rt_tpt => o_rt_tpt );
      if l_found
      then
         
         l_found := tpt_select_row_upd( i_tpt_id => o_rt_tpt.id
                                      , o_rt_tpt => o_rt_tpt );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end tpt_select_row_upd_uk1;

function tpt_select_row_upd_uk2( i_tpt_tfy_id   in  pdm_tpl_products.tfy_id%type
                               , i_tpt_sequence   in  pdm_tpl_products.sequence%type
                               , o_rt_tpt  out pdm_tpl_products%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tpt_select_row_upd_uk2';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := tpt_select_row_uk2( i_tpt_tfy_id   =>  i_tpt_tfy_id
                                   , i_tpt_sequence   =>  i_tpt_sequence
                                   , o_rt_tpt => o_rt_tpt );
      if l_found
      then
         
         l_found := tpt_select_row_upd( i_tpt_id => o_rt_tpt.id
                                      , o_rt_tpt => o_rt_tpt );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end tpt_select_row_upd_uk2;

procedure tpt_lock_row( i_tpt_id   in  pdm_tpl_products.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tpt_lock_row';
begin
  declare
     cursor c_tpt ( i_tpt_id   in  pdm_tpl_products.id%type )
     is
             select ''
               from pdm_tpl_products tpt
              where tpt.id = i_tpt_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_tpt_id is not null
         then
            begin
                
                tpt_lock_row_nowait( i_tpt_id => i_tpt_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_tpt( i_tpt_id => i_tpt_id );
                  close c_tpt;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_tpt%isopen
         then
            close c_tpt;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end tpt_lock_row;

procedure tpt_lock_row_nowait( i_tpt_id   in  pdm_tpl_products.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tpt_lock_row_nowait';
begin
   declare
      cursor c_tpt ( i_tpt_id   in  pdm_tpl_products.id%type )
      is
              select ''
                from pdm_tpl_products tpt
               where tpt.id = i_tpt_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_tpt_id is not null
         then
            
            open c_tpt( i_tpt_id => i_tpt_id );

            close c_tpt;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_tpt%isopen
        then
           close c_tpt;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_tpt_id||'"' );
   end;                                                          
end tpt_lock_row_nowait;

function tpt_perform_update( i_tpt_id   in     pdm_tpl_products.id%type
                           , io_rt_tpt  in out pdm_tpl_products%rowtype )
return number
;

function tpt_perform_delete( i_tpt_id   in  pdm_tpl_products.id%type )
return boolean
;

procedure tpt_insert_row ( io_rt_tpt  in out pdm_tpl_products%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tpt_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into pdm_tpl_products( id
                                , tfy_id
                                , id_cust
                                , sequence
                                , esn_id )
              values ( io_rt_tpt.id
                     , io_rt_tpt.tfy_id
                     , io_rt_tpt.id_cust
                     , io_rt_tpt.sequence
                     , io_rt_tpt.esn_id )
           returning id
                   , tfy_id
                   , id_cust
                   , sequence
                   , esn_id
                into io_rt_tpt.id
                   , io_rt_tpt.tfy_id
                   , io_rt_tpt.id_cust
                   , io_rt_tpt.sequence
                   , io_rt_tpt.esn_id;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_tpt.id||'"'
                                                             ||', TFY_ID = "'||io_rt_tpt.tfy_id||'"'
                                                             ||', ID_CUST = "'||io_rt_tpt.id_cust||'"'
                                                             ||', SEQUENCE = "'||io_rt_tpt.sequence||'"'
                                                             ||', ESN_ID = "'||io_rt_tpt.esn_id||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end tpt_insert_row;

function tpt_perform_update( i_tpt_id   in     pdm_tpl_products.id%type
                           , io_rt_tpt  in out pdm_tpl_products%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tpt_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update pdm_tpl_products
            set id = io_rt_tpt.id
              , tfy_id = io_rt_tpt.tfy_id
              , id_cust = io_rt_tpt.id_cust
              , sequence = io_rt_tpt.sequence
              , esn_id = io_rt_tpt.esn_id
          where id = i_tpt_id
      returning id
              , tfy_id
              , id_cust
              , sequence
              , esn_id
           into io_rt_tpt.id
              , io_rt_tpt.tfy_id
              , io_rt_tpt.id_cust
              , io_rt_tpt.sequence
              , io_rt_tpt.esn_id;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_tpt.id||'"'
                                                             ||', TFY_ID = "'||io_rt_tpt.tfy_id||'"'
                                                             ||', ID_CUST = "'||io_rt_tpt.id_cust||'"'
                                                             ||', SEQUENCE = "'||io_rt_tpt.sequence||'"'
                                                             ||', ESN_ID = "'||io_rt_tpt.esn_id||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end tpt_perform_update;

function tpt_perform_delete( i_tpt_id   in  pdm_tpl_products.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tpt_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from pdm_tpl_products
          where id = i_tpt_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_tpt_id||'"' );
   end;                                                          
end tpt_perform_delete;

function tpt_update_row( i_tpt_id   in     pdm_tpl_products.id%type
                       , io_rt_tpt  in out pdm_tpl_products%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tpt_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         tpt_lock_row( i_tpt_id   =>  i_tpt_id );

         
         l_rowcount := 
            tpt_perform_update( i_tpt_id   =>  i_tpt_id
                              , io_rt_tpt  => io_rt_tpt );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_tpt.id||'"'
                                                          ||', TFY_ID = "'||io_rt_tpt.tfy_id||'"'
                                                          ||', ID_CUST = "'||io_rt_tpt.id_cust||'"'
                                                          ||', SEQUENCE = "'||io_rt_tpt.sequence||'"'
                                                          ||', ESN_ID = "'||io_rt_tpt.esn_id||'"'                                                           , 1, 4000));
   end;                                                          
end tpt_update_row;

function tpt_delete_row( i_tpt_id   in  pdm_tpl_products.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tpt_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         tpt_lock_row( i_tpt_id   =>  i_tpt_id );

         
         l_deleted := tpt_perform_delete( i_tpt_id   =>  i_tpt_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_tpt_id||'"' );
   end;                                                          
end tpt_delete_row;

function tpt_seq1_nextval
return pdm_tpl_products.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.tpt_seq1_nextval';
   l_tpt_id  pdm_tpl_products.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select pdm_tpt_seq1.nextval 
           into l_tpt_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_tpt_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end tpt_seq1_nextval;


end pdm_tpt_tapi_pck;
/