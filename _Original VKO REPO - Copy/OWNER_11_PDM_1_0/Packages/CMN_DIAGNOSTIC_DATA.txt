create or replace PACKAGE cmn_diagnostic_data
IS
   /* Send version data. */
   PROCEDURE send_version_data( i_pty_id_cust cmn_parties.id_cust%TYPE);

   /* Send application logging data to MIS system */
   PROCEDURE send_application_log(i_pty_id_cust cmn_parties.id_cust%TYPE);
   -- 
   /* Returns an ApplicationLogData message */
   FUNCTION get_application_log_message
     (i_viu_ilg IN viu_info_logs%ROWTYPE)
    RETURN XMLTYPE;
   --
END cmn_diagnostic_data;
/



package body cmn_diagnostic_data
is

   
   g_con_package   constant varchar2( 20 ) := 'cmn_diagnostic_data';

   g_con_mae_severity_fatal   constant varchar2(100) := 'FATAL';
   g_con_mae_severity_error   constant varchar2(100) := 'ERROR';
   g_con_mae_severity_warning constant varchar2(100) := 'WARNING';
   g_con_mae_severity_info    constant varchar2(100) := 'INFO';
   g_con_mae_severity_debug   constant varchar2(100) := 'DEBUG';
   g_con_msg_xmlroot          constant varchar2(240) := '1.0" encoding="UTF-8';


   
   procedure send_version_data( i_pty_id_cust cmn_parties.id_cust%type)
   




















   is
      l_con_proc_name  constant cmn_constant.st_proc_name
                                                         := g_con_package || '.send_version_data';
      l_message        xmltype;
      l_pty_type       cmn_parties.type%type;
   begin
      viu_module.enter_module( i_module      => l_con_proc_name );

      
      l_pty_type := cmn_common.get_parameter_value( i_prr_name => cmn_constant.g_con_pve_cmn_party_ident );

      
      select acl_diagnostic_data.get_version_data(pty.id_cust)
      into   l_message
      from   cmn_parties pty
      where  pty.type = l_pty_type;

      
      cmn_interface.send_message( i_message => l_message
                                , i_pty_id_cust => i_pty_id_cust
                                );

      viu_module.leave_module( i_module      => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
         viu_info.handle_info;
   end send_version_data;

    














    function get_application_log_message
     (i_viu_ilg in viu_info_logs%rowtype)
    return xmltype
     is
      l_con_proc constant cmn_constant.st_proc_name := g_con_package || '.get_application_log_message';
      
      l_message  xmltype;
      l_severity varchar2(240);
      l_pty_type cmn_parties.type%type;
      l_log_message  varchar2(1000);

    begin
       viu_module.enter_module(i_module => l_con_proc);
       
       l_pty_type := cmn_common.get_parameter_value( i_prr_name => cmn_constant.g_con_pve_cmn_party_ident );
       
       case
         when i_viu_ilg.severity = viu_info.c_severity_error
         then
           l_severity := g_con_mae_severity_error;
         when i_viu_ilg.severity = viu_info.c_severity_warning
         then
           l_severity := g_con_mae_severity_warning;
         when i_viu_ilg.severity = viu_info.c_severity_notification
         then
           l_severity := g_con_mae_severity_info;
         when i_viu_ilg.severity > viu_info.c_severity_notification
         then
           l_severity := g_con_mae_severity_debug;
         else
           l_severity := g_con_mae_severity_error;
       end case;
       
       
       
       
       
       
       
       
       
       l_log_message := substr(   viu_translation.complete_text_of_info('IFO'
                                                                       ,i_viu_ilg.ifo_nr
                                                                       ,substr(i_viu_ilg.info_arguments
                                                                              ,1
                                                                              ,1000
                                                                              )
                                                                       )
                               || ' (AdditionalData:'
                               || substr(i_viu_ilg.additional_data
                                        ,1
                                        ,1000
                                        )
                               || ')'
                              ,1
                              ,1000
                              );
       
       
       select xmlroot
              ( xmlelement
                ( "ApplicationLogData"
                , xmlelement( "EventTime", cmn_common.timestamp_to_varchar( i_viu_ilg.datetime_created))
                , xmlelement( "LogMessageSource"
                            , xmlelement( "Host", rtrim (upper(nvl(trim(sys_context('USERENV','SERVER_HOST')), sys_context('USERENV','IP_ADDRESS'))), chr('0')))
                            , xmlelement( "ProcessID", pty.id_cust)
                            , xmlelement( "SubComponent", i_viu_ilg.calling_procedure)
                            , nvl2
                              ( i_viu_ilg.sessionid
                              , xmlelement( "SessionID", to_char(i_viu_ilg.sessionid))
                              , null
                              )
                            )
                , nvl2
                  ( i_viu_ilg.ifo_nr
                  , xmlelement( "LogMessageID", to_char(i_viu_ilg.ifo_nr))
                  , null
                  )
                , xmlelement( "LogMessageSeverity", l_severity)
                , xmlelement( "LogMessage", l_log_message)
                )
              , version g_con_msg_xmlroot
              )
       into   l_message
       from   cmn_parties pty, global_name
       where  pty.type = l_pty_type;
       
       viu_module.leave_module(i_module => l_con_proc);
       
       return(l_message);
       
    exception
       when others
       then
          viu_module.leave_module( i_module          => l_con_proc
                                 , i_debug_info      => sqlerrm
                                 );
          viu_info.raise_info( i_calling_procedure   => l_con_proc);
    end get_application_log_message;
    
    




























    procedure send_application_log
     (i_pty_id_cust cmn_parties.id_cust%type)
    is
       l_con_proc     constant cmn_constant.st_proc_name := g_con_package || '.send_application_log';

       type rct_ilg            is ref cursor;
       type object_tt          is table of user_objects.object_name%type index by pls_integer;
       type ilg_count_tt       is table of number index by pls_integer;

       
       cursor c_object_check( b_object_name in user_objects.object_name%type )
       is
       select 1
       from   user_objects
       where  upper( b_object_name ) = upper( object_name )
       and    object_type in ( cmn_constant.g_con_object_type_view
                             , cmn_constant.g_con_object_type_table
                             );

       l_max_severity          cmn_parameter_values.value%type;
       l_message               xmltype;
       c_ilg_new               rct_ilg;
       l_tt_objects            object_tt;
       l_rt_object_check       c_object_check%rowtype;
       l_found                 boolean;
       l_rt_info_logs          viu_info_logs%rowtype;
       l_dml                   varchar2(1000);
       l_tt_info_log_count     ilg_count_tt;
       l_ifo_nr                viu_info_logs.ifo_nr%type;
       l_increment             integer;

       
       l_query1                varchar2(4000) :=    ' SELECT *'
                                                 || ' FROM   ';
       l_query2                varchar2(4000) :=    ' ilg'
                                                 || ' WHERE  /* Do not modify the next statement as it uses the function based index */'
                                                 || ' NVL2(ilg.DATETIME_REPORTED,NULL,''N'') = ''N'''
                                                 || ' FOR UPDATE';

        
    begin
       viu_module.enter_module( i_module      => l_con_proc);
       
       
       l_tt_objects(1) := 'VIU_INFO_LOGS';
       l_tt_objects(2) := 'VIU_INFO_LOGS_V_PRV';

       
       l_max_severity := cmn_common.get_parameter_value( i_prr_name => cmn_constant.g_con_pve_send_log_max_sev );

       
       for i in 1 .. l_tt_objects.count
       loop
          
          open  c_object_check( b_object_name => l_tt_objects(i) );
          fetch c_object_check
          into  l_rt_object_check;

          l_found := c_object_check%found;

          close c_object_check;

          if l_found
          then

             
             open  c_ilg_new for l_query1 || l_tt_objects(i) || l_query2;
             fetch c_ilg_new
             into  l_rt_info_logs;

             while c_ilg_new%found
             loop
                
                
                
                l_dml := 'UPDATE ' || l_tt_objects(i) || ' SET datetime_reported = :time WHERE id = :id';

		        execute immediate l_dml using cmn_common.default_timestamp, l_rt_info_logs.id;

                
                if l_rt_info_logs.severity <= l_max_severity
                then
                   
                   l_message := get_application_log_message( i_viu_ilg => l_rt_info_logs );

                   
                   begin
                      cmn_interface.send_message( i_message     => l_message
                                                , i_pty_id_cust => i_pty_id_cust
                                                );
                   exception
                      when others
                      then
                         if l_rt_info_logs.ifo_nr = viu_constant.c_ifo_cmnmessagenotsent
                         then
                            
                            l_ifo_nr    := regexp_replace( l_rt_info_logs.additional_data
                                                         , '^IFO_NR: (\d+), COUNT: \d+$'
                                                         , '\1', 1, 1, ''
                                                         );

                            
                            l_increment := to_number( regexp_replace( l_rt_info_logs.additional_data
                                                                    , '^IFO_NR: \d+, COUNT: (\d+)$'
                                                                    , '\1', 1, 1, ''
                                                                    )
                                                    );
                         else
                            
                            l_ifo_nr    := l_rt_info_logs.ifo_nr;
                            l_increment := 1;
                         end if;

                         
                         l_tt_info_log_count(l_ifo_nr) := case
                                                             when l_tt_info_log_count.exists(l_ifo_nr)
                                                             then l_tt_info_log_count(l_ifo_nr) + l_increment
                                                             else l_increment
                                                          end;
                   end;
                end if;

                
                fetch c_ilg_new
                into  l_rt_info_logs;
             end loop;

             close c_ilg_new;
          end if;

          
          commit;
       end loop;

       
       l_ifo_nr := l_tt_info_log_count.first;

       while l_ifo_nr is not null
       loop
          viu_info.operator_info( i_ifo_nr                 => viu_constant.c_ifo_cmnmessagenotsent
                                , i_calling_procedure      => l_con_proc
                                , i_severity               => viu_info.c_severity_warning
                                , i_additional_data        =>    'IFO_NR: '
                                                              || l_ifo_nr
                                                              || ', COUNT: '
                                                              || l_tt_info_log_count(l_ifo_nr)
                                );

          l_ifo_nr := l_tt_info_log_count.next(l_ifo_nr);
       end loop;

       commit;  

       viu_module.leave_module(i_module => l_con_proc);

    exception
       when cmn_constant.exc_internal_error
       then
          








          if c_object_check%isopen
          then
             close c_object_check;
          end if;

          rollback;
          
          
          
          
          
          
          viu_info.operator_info( i_ifo_nr                 => viu_constant.c_ifo_cmninternalerror
                                , i_calling_procedure      => l_con_proc
                                , i_severity               => viu_info.c_severity_error
                                );
          viu_module.leave_module( i_module          => l_con_proc
                                 , i_debug_info      => sqlerrm
                                );
          viu_info.handle_info;

       when others
       then
          if c_object_check%isopen
          then
             close c_object_check;
          end if;

          rollback;

          viu_module.leave_module( i_module          => l_con_proc
                                 , i_debug_info      => sqlerrm
                                 );

          
          viu_info.handle_info;
    end send_application_log;


end cmn_diagnostic_data;
/