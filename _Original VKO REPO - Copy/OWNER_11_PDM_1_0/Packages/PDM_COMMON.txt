create or replace PACKAGE pdm_common
IS
   SUBTYPE interval_type IS INTERVAL DAY(9) TO SECOND(6);

   FUNCTION build_signal( i_signal_identifier IN VARCHAR2 )
   RETURN   VARCHAR2;
   
   PROCEDURE stop_signal( i_signal_identifier IN VARCHAR2);

   FUNCTION interval_to_seconds(i_interval IN interval_type)
   RETURN NUMBER;

   FUNCTION select_last_pet( i_evt_id IN     pdm_package_events.evt_id%TYPE
                           , i_pae_id IN     pdm_package_events.pae_id%TYPE
                           , o_rt_pet    OUT pdm_package_events%ROWTYPE
                           )
   RETURN BOOLEAN;

   -- Procedure to create a package event for a package and an event
   PROCEDURE create_package_event( io_rt_pet                IN OUT pdm_package_events%ROWTYPE
                                 , i_ind_check_existing_pet IN     BOOLEAN
                                 );

   FUNCTION pae_select_and_lock_pi_id( i_pae_pi_id           IN  pdm_packages.pi_id%type
                                     , i_pae_place_of_birth  IN  pdm_packages.place_of_birth%type
                                     , o_rt_pae              OUT pdm_packages%rowtype
                                     )
   RETURN BOOLEAN;

   FUNCTION pae_select_and_lock_pid( i_pae_pid IN  pdm_packages.pid%type
                                   , o_rt_pae  OUT pdm_packages%rowtype
                                   )
   RETURN BOOLEAN;

   FUNCTION pae_lock_and_select( i_pi_id          IN  pdm_packages.pi_id%TYPE
                               , i_place_of_birth IN  pdm_packages.place_of_birth%TYPE
                               , i_pid            IN  pdm_packages.pid%TYPE
                               , o_rt_pae         OUT pdm_packages%ROWTYPE
                               )
   RETURN BOOLEAN;

   -- Function that retrieves a package attribute value
   FUNCTION pbe_select_value( i_pae_id   IN pdm_packages.id%TYPE
                            , i_adn_path IN pdm_attribute_definitions.path%TYPE
                            )
   RETURN pdm_attribute_definitions.value%TYPE;

   -- Function that determines whether a node exists in a message
   FUNCTION node_exists(
      i_message IN   XMLTYPE
    , i_xpath   IN   VARCHAR2
   )
      RETURN boolean;

   FUNCTION get_process_id(i_ptr_name IN cmn_parameters.name%type)
      RETURN cmn_constant.st_processid;

   -- Function to create a generic XML message header
   FUNCTION create_header( i_target_process_id_cust IN VARCHAR2
                         , i_target_instance_id     IN VARCHAR2
                         )
      RETURN XMLTYPE;

   -- Function that retrieves a package eval operation based on an alternative unique key
   -- (TAPI extension)
   FUNCTION PEO_SELECT_ROW_UK2
   (  i_EON_ID                 IN  PDM_PACKAGE_EVAL_OPERATIONS.EON_ID%TYPE
    , i_PAE_ID                 IN  PDM_PACKAGE_EVAL_OPERATIONS.PAE_ID%TYPE
    , i_DEACTIVATED_BY_PET_ID  IN  PDM_PACKAGE_EVAL_OPERATIONS.DEACTIVATED_BY_PET_ID%TYPE
    , o_rt_PEO                 OUT PDM_PACKAGE_EVAL_OPERATIONS%ROWTYPE
   )
   RETURN BOOLEAN;

   -- Function retrieves concatenated values and splits them into separate values
   FUNCTION groupvalue_split(
      i_list        VARCHAR2
    , i_separator   VARCHAR2 := pdm_constant.g_con_eon_value_separator
   )
   RETURN PDM_NT_PBE_VALUES pipelined;

   -- Function to create a BagData element
   FUNCTION create_bagdata( i_it_mae_values IN pdm_attributes.it_mae_name_values
                          )
      RETURN XMLTYPE;

   FUNCTION pae_select( i_pi_id          IN  pdm_packages.pi_id%TYPE
                      , i_place_of_birth IN  pdm_packages.place_of_birth%TYPE
                      , i_pid            IN  pdm_packages.pid%TYPE
                      , o_rt_pae         OUT pdm_packages%ROWTYPE
                      )
   RETURN BOOLEAN;
   
   FUNCTION pae_lock_select_via_pas( i_pae_id IN  pdm_packages.id%TYPE
                                   , i_evt_id IN  pdm_events.id%TYPE
                                   , o_rt_pae OUT pdm_packages%ROWTYPE
                                   )
   RETURN BOOLEAN;

   FUNCTION pd_id_differs( i_pae_pd_id_new IN pdm_packages.pd_id%TYPE
                         , i_pae_pd_id_old IN pdm_packages.pd_id%TYPE
                         )
   RETURN BOOLEAN;

   PROCEDURE parallel_execution_log( i_rt_pae          IN pdm_packages%ROWTYPE
                                   , i_additional_data IN VARCHAR2
                                   );

   PROCEDURE parallel_execution_sleep( i_rt_pae          IN pdm_packages%ROWTYPE
                                     , i_sleep_seconds   IN NUMBER
                                     , i_additional_data IN VARCHAR2
                                     );

   PROCEDURE create_evt_eme( i_event_time IN  cmn_constant.st_timestamp
                           , i_timestamp  IN  cmn_constant.st_timestamp
                           , i_ims_id     IN  cmn_ifc_messages.id%TYPE
                           , i_imd_id     IN  cmn_ifc_msg_definitions.id%TYPE
                           , o_rt_evt     OUT pdm_events%ROWTYPE
                           );

   PROCEDURE lock_package_access( i_pd_id  IN pdm_packages.pd_id%TYPE
                                , i_evt_id IN pdm_package_events.evt_id%TYPE
                                );

   FUNCTION use_mult_bagdata
   RETURN BOOLEAN;

   FUNCTION plk_select_primary_pae( i_pae_id_secondary IN  pdm_packages.id%TYPE
                                  , i_pln_id           IN  pdm_package_link_definitions.id%TYPE
                                  , o_rt_pae_primary   OUT pdm_packages%ROWTYPE
                                  )
   RETURN BOOLEAN;

   PROCEDURE plk_select_secondary_pae( i_pae_id_primary IN  pdm_packages.id%TYPE
                                     , i_pln_id         IN  pdm_package_link_definitions.id%TYPE
                                     , o_nt_pae_member  OUT pdm_nt_pae_id
                                     );

   FUNCTION select_first_pet( i_pae_id IN  pdm_packages.id%TYPE
                            , i_evt_id IN  pdm_events.id%TYPE
                            , o_rt_pet OUT pdm_package_events%ROWTYPE
                            )
   RETURN BOOLEAN;

   PROCEDURE hdl_functional_extensions ( i_rt_pae IN pdm_packages%ROWTYPE
                                       , i_rt_pet IN pdm_package_events%ROWTYPE
                                       , i_message_type IN cmn_ifc_msg_definitions.name%TYPE
                                       );
END pdm_common;
/




package body pdm_common
is
   




   g_con_package               constant varchar2( 30 )      := 'pdm_common';

   










   function build_signal( i_signal_identifier in varchar2 )
   return   varchar2
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.build_signal';
   
      l_result_signal          varchar2(4096);
      l_max_signal_length      number;
   begin
      viu_module.enter_module( i_module  => l_con_proc_name );
   
      
      l_result_signal := user || i_signal_identifier;
   
      
      l_max_signal_length := pdm_constant.g_con_max_signal_length;
      if length(l_result_signal) > l_max_signal_length
      then
         
         viu_info.raise_info( i_ifo_nr             => viu_constant.c_ifo_illegalsignallength
                            , i_calling_procedure  => l_con_proc_name
                            , i_severity           => viu_info.c_severity_error
                            , i_info_arguments     => nvl(l_result_signal, 'NULL')
                                                      || '## '
                                                      || nvl(to_char(l_max_signal_length), 'NULL')
                            );
      end if;
   
      viu_module.leave_module( i_module  => l_con_proc_name );
   
      return l_result_signal;
   
   exception
      when others
      then
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
   
         viu_info.raise_info( i_calling_procedure  => l_con_proc_name );
   end build_signal;

   











   procedure stop_signal( i_signal_identifier in varchar2)
   is
   
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.stop_signal';
      l_signal_name              varchar(4096);
   begin
      viu_module.enter_module( i_module => l_con_proc_name );
   
      
      l_signal_name := pdm_common.build_signal( i_signal_identifier => i_signal_identifier );
   
      
      dbms_alert.signal(l_signal_name, l_signal_name);
   
      viu_module.leave_module( i_module      => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module      => l_con_proc_name
                                , i_debug_info  => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure  => l_con_proc_name );
   end stop_signal;

   















   function interval_to_seconds(i_interval in interval_type)
   return number
   is
   
     l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package ||'.interval_to_seconds';
   
     l_result number;
   
   begin
      viu_module.enter_module( i_module => l_con_proc_name );
   
      
      l_result := extract (second from i_interval)
                  + 60
                    * ( extract (minute from i_interval)
                        + 60
                          * (extract (hour from i_interval) + 24 * extract (day from i_interval))
                      );
   
      viu_module.leave_module( i_module => l_con_proc_name );
   
      return l_result;
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
   
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end interval_to_seconds;

   













   function select_last_pet( i_evt_id in     pdm_package_events.evt_id%type
                           , i_pae_id in     pdm_package_events.pae_id%type
                           , o_rt_pet    out pdm_package_events%rowtype
                           )
   return boolean
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.select_last_pet';

      cursor c_pet( b_evt_id in pdm_package_events.evt_id%type
                  , b_pae_id in pdm_package_events.pae_id%type
                  )
      is
         select *
         from   pdm_package_events pet
         where  pet.evt_id = b_evt_id
         and    pet.pae_id = b_pae_id
         order by pet.id desc;

      l_found                  boolean;
   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      open c_pet( b_evt_id => i_evt_id
                , b_pae_id => i_pae_id
                );
      fetch c_pet into o_rt_pet;
      l_found := c_pet%found;
      close c_pet;

      viu_module.leave_module( i_module => l_con_proc_name );

      return l_found;
   exception
      when others
      then
         if c_pet%isopen
         then
            close c_pet;
         end if;

         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end select_last_pet;

   













   procedure create_package_event( io_rt_pet                in out pdm_package_events%rowtype
                                 , i_ind_check_existing_pet in     boolean
                                 )
   is
      l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.create_package_event';

      l_rt_pet                   pdm_package_events%rowtype;
      l_found                    boolean;
   begin
      viu_module.enter_module( i_module     => l_con_proc_name
                             , i_debug_info => 'event: ' || nvl(to_char(io_rt_pet.evt_id), 'NULL')
                                               || ', package: ' || nvl(to_char(io_rt_pet.pae_id), 'NULL')
                             );

      
      if i_ind_check_existing_pet
      then

         
         l_found := select_last_pet( i_evt_id => io_rt_pet.evt_id
                                   , i_pae_id => io_rt_pet.pae_id
                                   , o_rt_pet => l_rt_pet
                                   );

         if  l_found
         and io_rt_pet.id is null
         then
            io_rt_pet := l_rt_pet;
         end if;
      end if;

      
      
      if    not i_ind_check_existing_pet
         or not l_found
      then

         
         pdm_pet_tapi_pck.pet_insert_row( io_rt_pet => io_rt_pet );
      end if;

      viu_module.leave_module( i_module     => l_con_proc_name
                             , i_debug_info => 'id: ' || nvl(to_char(io_rt_pet.id), 'NULL')
                             );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end create_package_event;

   











   function pae_select_pi_id( i_pae_pi_id          in  pdm_packages.pi_id%type
                            , i_pae_place_of_birth in  pdm_packages.place_of_birth%type
                            , o_rt_pae             out pdm_packages%rowtype
                            )
   return boolean
   is
      l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.pae_select_pi_id';

      cursor c_pae ( i_pae_pi_id          in pdm_packages.pi_id%type
                   , i_pae_place_of_birth in pdm_packages.place_of_birth%type
                   )
      is
         select *
         from   pdm_packages       pae
         where  pae.pi_id          =  i_pae_pi_id
         and    pae.place_of_birth =  i_pae_place_of_birth
         ;
   
      l_found boolean;

   begin
      viu_module.enter_module (i_module => l_con_proc_name);

      open c_pae ( i_pae_pi_id          => i_pae_pi_id
                 , i_pae_place_of_birth => i_pae_place_of_birth
                 );
      fetch c_pae into o_rt_pae;
      l_found := c_pae%found;
      close c_pae;

      viu_module.leave_module( i_module     => l_con_proc_name);

      return l_found;
   exception
      when others
      then
         if c_pae%isopen
         then
            close c_pae;
         end if;

         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info(i_calling_procedure => l_con_proc_name);
   end pae_select_pi_id;

   
















   function pae_select_and_lock_pi_id( i_pae_pi_id           in  pdm_packages.pi_id%type
                                     , i_pae_place_of_birth  in  pdm_packages.place_of_birth%type
                                     , o_rt_pae              out pdm_packages%rowtype
                                     )
   return boolean
   is
      l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.pae_select_and_lock_pi_id';
      l_found           boolean := false;

      cursor c_pae (
         i_pae_pi_id            in pdm_packages.pi_id%type,
         i_pae_place_of_birth   in pdm_packages.place_of_birth%type)
      is
         select *
         from   pdm_packages pae
         where  pae.pi_id          =  i_pae_pi_id
         and    pae.place_of_birth =  i_pae_place_of_birth
         for update
         ;

   begin
      viu_module.enter_module (i_module => l_con_proc_name);

      begin
         open c_pae (i_pae_pi_id            => i_pae_pi_id,
                     i_pae_place_of_birth   => i_pae_place_of_birth);

         fetch c_pae into o_rt_pae;
         l_found := c_pae%found;
         close c_pae;
      end;

      viu_module.leave_module( i_module     => l_con_proc_name);

      return l_found;
   exception
      when others
      then
         if c_pae%isopen
         then
            close c_pae;
         end if;

         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info(i_calling_procedure => l_con_proc_name);
   end pae_select_and_lock_pi_id;

   











   function pae_select_pid( i_pae_pid in  pdm_packages.pid%type
                          , o_rt_pae  out pdm_packages%rowtype
                          )
   return boolean
   is
      l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.pae_select_pid';

      cursor c_pae (i_pae_pid in pdm_packages.pid%type)
      is
         select *
         from   pdm_packages pae
         where  pae.pid      = i_pae_pid
         ;
   
      l_found boolean;

   begin
      viu_module.enter_module (i_module => l_con_proc_name);

      open c_pae (i_pae_pid => i_pae_pid);
      fetch c_pae into o_rt_pae;
      l_found := c_pae%found;
      close c_pae;

      viu_module.leave_module( i_module     => l_con_proc_name);

      return l_found;
   exception
      when others
      then
         if c_pae%isopen
         then
            close c_pae;
         end if;

         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info(i_calling_procedure => l_con_proc_name);
   end pae_select_pid;

   















   function pae_select_and_lock_pid( i_pae_pid in  pdm_packages.pid%type
                                   , o_rt_pae  out pdm_packages%rowtype
                                   )
   return boolean
   is
      l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.pae_select_and_lock_pid';
      l_found           boolean := false;

      cursor c_pae (i_pae_pid in pdm_packages.pid%type)
      is
         select *
         from   pdm_packages pae
         where  pae.pid    =  i_pae_pid
         for update
         ;
   begin
      viu_module.enter_module (i_module => l_con_proc_name);

      begin
         open c_pae (i_pae_pid => i_pae_pid);
         fetch c_pae into o_rt_pae;
         l_found := c_pae%found;
         close c_pae;
      end;

      viu_module.leave_module( i_module     => l_con_proc_name);

      return l_found;
   exception
      when others
      then
         if c_pae%isopen
         then
            close c_pae;
         end if;

         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info(i_calling_procedure => l_con_proc_name);
   end pae_select_and_lock_pid;

   












   function pae_select( i_pi_id          in  pdm_packages.pi_id%type
                      , i_place_of_birth in  pdm_packages.place_of_birth%type
                      , i_pid            in  pdm_packages.pid%type
                      , o_rt_pae         out pdm_packages%rowtype
                      )
   return boolean
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.pae_select';

      l_found  boolean := false;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      if i_pi_id is not null
      then

         
         l_found := pdm_common.pae_select_pi_id ( i_pae_pi_id          => i_pi_id
                                                , i_pae_place_of_birth => i_place_of_birth
                                                , o_rt_pae             => o_rt_pae
                                                );

      
      elsif i_pid is not null
      then

         
         l_found := pdm_common.pae_select_pid ( i_pae_pid => i_pid
                                              , o_rt_pae  => o_rt_pae
                                              );
                            
      end if;
         
      viu_module.leave_module( i_module => l_con_proc_name );

      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => 'exception'
                                );

         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end pae_select;

   











   function pd_id_differs( i_pae_pd_id_new in pdm_packages.pd_id%type
                         , i_pae_pd_id_old in pdm_packages.pd_id%type
                         )
   return boolean
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.pd_id_differs';

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      viu_module.leave_module( i_module => l_con_proc_name );

      
      return        i_pae_pd_id_old <> i_pae_pd_id_new
             or (   i_pae_pd_id_old is     null
             	  and i_pae_pd_id_new is not null
                )
      ;

   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => 'exception'
                                );

         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end pd_id_differs;

   













   function pae_lock_select_via_pas( i_pae_id in  pdm_packages.id%type
                                   , i_evt_id in  pdm_events.id%type
                                   , o_rt_pae out pdm_packages%rowtype
                                   )
   return boolean
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.pae_lock_select_via_pas';

      l_pae_pd_id_old      pdm_packages.pd_id%type;
      l_dummy              boolean;
      l_found              boolean := false;
      l_pas_lock_completed boolean := false;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      l_dummy := pdm_pae_tapi_pck.pae_select_row( i_pae_id => i_pae_id
                                                , o_rt_pae => o_rt_pae
                                                );

      
      while not l_pas_lock_completed
      loop

         if o_rt_pae.pd_id is not null
         then

            
            pdm_common.lock_package_access( i_pd_id  => o_rt_pae.pd_id
                                          , i_evt_id => i_evt_id
                                          );

         end if;

         
         l_pae_pd_id_old := o_rt_pae.pd_id;

         
         l_found := pdm_pae_tapi_pck.pae_select_row_upd( i_pae_id => i_pae_id
                                                       , o_rt_pae => o_rt_pae
                                                       );

         
         if pd_id_differs( i_pae_pd_id_new => o_rt_pae.pd_id
                         , i_pae_pd_id_old => l_pae_pd_id_old
                         )
         then
         	
            
            commit;
      
            

         else
         
            
            l_pas_lock_completed := true;
         end if;

      end loop;

      viu_module.leave_module( i_module => l_con_proc_name );

      return l_found;

   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => 'exception'
                                );

         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end pae_lock_select_via_pas;

   















   function pae_lock_and_select( i_pi_id          in  pdm_packages.pi_id%type
                               , i_place_of_birth in  pdm_packages.place_of_birth%type
                               , i_pid            in  pdm_packages.pid%type
                               , o_rt_pae         out pdm_packages%rowtype
                               )
   return boolean
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.pae_lock_and_select';

      l_found  boolean := false;
      l_dummy  boolean;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      if i_pi_id is not null
      then

         
         l_found := pdm_common.pae_select_and_lock_pi_id
                            ( i_pae_pi_id          => i_pi_id
                            , i_pae_place_of_birth => i_place_of_birth
                            , o_rt_pae             => o_rt_pae
                            );

      
      elsif i_pid is not null
      then

         
         l_found := pdm_common.pae_select_and_lock_pid
                            ( i_pae_pid => i_pid
                            , o_rt_pae  => o_rt_pae
                            );
                            
         
         if     l_found
            and o_rt_pae.status <> pdm_constant.g_con_pae_status_open
         then

            
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_pidpackagenotopen
                               , i_calling_procedure => l_con_proc_name
                               , i_severity          => viu_info.severity_warning
                               , i_info_arguments    => i_pid
                               );
         end if;
         
      end if;

      viu_module.leave_module( i_module => l_con_proc_name );

      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => 'exception'
                                );

         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end pae_lock_and_select;

   











   function pbe_select_value( i_pae_id   in pdm_packages.id%type
                            , i_adn_path in pdm_attribute_definitions.path%type
                            )
   return pdm_attribute_definitions.value%type
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.pbe_select_value';

      cursor c_pbe_value( b_pae_id   pdm_packages.id%type
                        , b_adn_path pdm_attribute_definitions.path%type
                        )
      is
         select pbe.value
         from   pdm_v_pbe_active          pbe
         ,      pdm_attribute_definitions adn
         where  pbe.pae_id = b_pae_id
         and    pbe.adn_id = adn.id
         and    adn.path   = b_adn_path;

      l_pbe_value              pdm_attribute_definitions.value%type;
   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      open  c_pbe_value( b_pae_id   => i_pae_id
                       , b_adn_path => i_adn_path
                       );
      fetch c_pbe_value into l_pbe_value;
      close c_pbe_value;

      viu_module.leave_module( i_module => l_con_proc_name );
      return l_pbe_value;
   exception
      when others
      then
         if c_pbe_value%isopen
         then
            close c_pbe_value;
         end if;

         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end pbe_select_value;

   











   function node_exists(
      i_message in   xmltype
    , i_xpath   in   varchar2
   )
      return boolean
   is
      l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.node_exists';

      l_ind_exists               number;
      l_found                    boolean := false;
   begin
      viu_module.enter_module (i_module => l_con_proc_name);

      if i_message is not null
      then
         
         l_ind_exists := i_message.existsnode( i_xpath );

         
         l_found := ( nvl(l_ind_exists, pdm_constant.g_con_boolean_type_false)
                         = pdm_constant.g_con_boolean_type_true
                    );

      end if;

      viu_module.leave_module (i_module => l_con_proc_name);

      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info (i_calling_procedure => l_con_proc_name);
   end node_exists;

   


















   function get_source_process_id
      return cmn_constant.st_processid
   is
      l_con_proc_name       constant cmn_constant.st_proc_name       := g_con_package || '.get_source_process_id';
      l_pty_type                     cmn_parties.type%type;
      l_return                       cmn_constant.st_processid;
   begin
      viu_module.enter_module( i_module      => l_con_proc_name );

      l_pty_type := cmn_common.get_parameter_value( i_prr_name      => cmn_constant.g_con_pve_cmn_party_ident );

      select pty.id_cust
      into   l_return
      from   cmn_parties   pty
      where  pty.type = l_pty_type;

      viu_module.leave_module( i_module      => l_con_proc_name );

      return l_return;
   exception
      when others
      then
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => 'exception'
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
   end get_source_process_id;

   













   function get_process_id(i_ptr_name in cmn_parameters.name%type)
      return cmn_constant.st_processid
   is
      l_con_proc_name   constant cmn_constant.st_proc_name       := g_con_package || '.get_process_id';
      l_found                    boolean;

      
      cursor c_pty( b_pty_type in cmn_parameter_values.value%type )
      is
      select pty.id_cust id_cust
      from   cmn_parties pty
      where  pty.type = b_pty_type;

      r_pty                      c_pty%rowtype;
      l_ptr_value                cmn_parameter_values.value%type;
   begin
      viu_module.enter_module( i_module      => l_con_proc_name );

      l_ptr_value := cmn_common.get_parameter_value (i_prr_name => i_ptr_name);
      
      open  c_pty( b_pty_type => l_ptr_value );
      fetch c_pty
      into  r_pty;

      l_found := c_pty%found;

      close c_pty;

      if not l_found
      then
         
         viu_info.raise_info
            ( i_ifo_nr            => viu_constant.c_ifo_selectreturnednorecords
            , i_calling_procedure => l_con_proc_name
            , i_severity          => viu_info.c_severity_error
            , i_additional_data   => 'Parameter with NAME: ' || nvl(i_ptr_name, 'NULL')
            );
      end if;

      viu_module.leave_module( i_module      => l_con_proc_name );

      return r_pty.id_cust;
   exception
      when others
      then
         if c_pty%isopen
         then
            close c_pty;
         end if;

         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => 'exception'
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
   end get_process_id;

   















   function create_header( i_target_process_id_cust in varchar2
                         , i_target_instance_id     in varchar2
                         )
      return xmltype
   is
      l_con_proc_name    constant cmn_constant.st_proc_name := g_con_package || '.create_header';
      l_source_processid          cmn_constant.st_processid;
      l_header                    xmltype;
   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      l_source_processid := pdm_common.get_source_process_id;

      if l_source_processid is not null
      then
         select xmlelement( "Header"
                          , xmlelement( "Source", xmlelement( "ProcessID", l_source_processid ) )
                          , xmlelement( "Target"
                                      , xmlelement( "ProcessID", i_target_process_id_cust )
                                      , case
                                           when i_target_instance_id is not null
                                           then
                                              xmlelement( "InstanceID", i_target_instance_id )
                                        end
                                      )
                          )
         into   l_header
         from   dual;
      else
         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_cmnpartynotfound
                            , i_calling_procedure => l_con_proc_name
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => null
                            , i_additional_data   => null
                            );

      end if;

      viu_module.leave_module( i_module => l_con_proc_name );

      return l_header;

   exception
      when others
      then
         viu_module.leave_module( i_module => l_con_proc_name, i_debug_info => 'exception' );

         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end create_header;

   
































   function peo_select_row_uk2(
      i_eon_id                 in  pdm_package_eval_operations.eon_id%type
    , i_pae_id                 in  pdm_package_eval_operations.pae_id%type
    , i_deactivated_by_pet_id  in  pdm_package_eval_operations.deactivated_by_pet_id%type
    , o_rt_peo                 out pdm_package_eval_operations%rowtype
   )
   return boolean
   is
      con_proc  constant     varchar2(61) := g_con_package || '.peo_select_row_uk2';
      l_found                boolean      := false;

      cursor c_peo( b_eon_id in pdm_package_eval_operations.eon_id%type
                  , b_pae_id in pdm_package_eval_operations.pae_id%type
                  , b_deactivated_by_pet_id in pdm_package_eval_operations.deactivated_by_pet_id%type
                  )
      is
      select peo.*
      from   pdm_package_eval_operations peo
      where  peo.eon_id = b_eon_id
      and    peo.pae_id = b_pae_id
      and    (
                (     b_deactivated_by_pet_id is null
                  and peo.deactivated_by_pet_id is null
                )
                or
                (     b_deactivated_by_pet_id is not null
                  and peo.deactivated_by_pet_id = b_deactivated_by_pet_id
                )
             );
   begin
      viu_module.enter_module(i_module => con_proc);

      open c_peo( b_eon_id => i_eon_id
                , b_pae_id => i_pae_id
                , b_deactivated_by_pet_id => i_deactivated_by_pet_id
                );
      fetch c_peo
      into  o_rt_peo;

      l_found := c_peo%found;

      close c_peo;

      viu_module.leave_module(i_module => con_proc, i_debug_info => case l_found when true then 'found' else 'notfound' end);

      return l_found;
   exception
      when others then
         if c_peo%isopen
         then
            close c_peo;
         end if;

         viu_module.leave_module(i_module => con_proc, i_debug_info => sqlerrm);

         viu_info.raise_info(i_calling_procedure => con_proc);
   end peo_select_row_uk2;

   





















   function groupvalue_split(
      i_list        varchar2
    , i_separator   varchar2 := pdm_constant.g_con_eon_value_separator
   )
      return pdm_nt_pbe_values pipelined
   is
      l_idx     pls_integer;
      l_list    varchar2(32767):= i_list;
   begin
      loop
          l_idx := instr(l_list, i_separator);
          if l_idx > 0 then
              pipe row(substr(l_list, 1, l_idx-1));
              l_list := substr(l_list, l_idx+length(i_separator));
          else
              pipe row(l_list);
              exit;
          end if;
      end loop;

      return;
   end groupvalue_split;

   













































   function create_bagdata( i_it_mae_values in pdm_attributes.it_mae_name_values )
      return xmltype
   is
      l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.create_bagdata';

      l_element                  xmltype;
      l_bagdata                  xmltype;
      l_attr                     pdm_attribute_definitions.path%type;

      
      l_ind_remotecheckindetails varchar2(1) := cmn_constant.g_con_yesno_no;
      l_ind_bagreconciledata     varchar2(1) := cmn_constant.g_con_yesno_no;
      l_ind_handlinglocation     varchar2(1) := cmn_constant.g_con_yesno_no;
      l_ind_baggagedetails       varchar2(1) := cmn_constant.g_con_yesno_no;
      l_ind_groundtransport      varchar2(1) := cmn_constant.g_con_yesno_no;
      l_ind_bagsecscreening      varchar2(1) := cmn_constant.g_con_yesno_no;
      l_ind_bagsecscreeningext   varchar2(1) := cmn_constant.g_con_yesno_no;
      l_ind_loadingdata          varchar2(1) := cmn_constant.g_con_yesno_no;
      l_ind_processinginfo       varchar2(1) := cmn_constant.g_con_yesno_no;
      l_ind_processinginfoext    varchar2(1) := cmn_constant.g_con_yesno_no;
      l_ind_loadingdataext       varchar2(1) := cmn_constant.g_con_yesno_no;
      l_ind_currstorageloc       varchar2(1) := cmn_constant.g_con_yesno_no;
      l_ind_onhandbagsummary     varchar2(1) := cmn_constant.g_con_yesno_no;
      l_ind_ohdheader            varchar2(1) := cmn_constant.g_con_yesno_no;
      l_ind_ohddata              varchar2(1) := cmn_constant.g_con_yesno_no;
      l_ind_ohddatabagcontents   varchar2(1) := cmn_constant.g_con_yesno_no;
      l_ind_ohddatanames1        varchar2(1) := cmn_constant.g_con_yesno_no;
      l_ind_ohddatanames2        varchar2(1) := cmn_constant.g_con_yesno_no;
      l_ind_ohddatanames3        varchar2(1) := cmn_constant.g_con_yesno_no;
      l_ind_onhandbagsumext      varchar2(1) := cmn_constant.g_con_yesno_no;
      l_ind_inbflightinfoext     varchar2(1) := cmn_constant.g_con_yesno_no;

      l_mae_path_desc_pre        pdm_message_attributes.name%type;
      l_mae_path_desc_post       pdm_message_attributes.name%type;
      l_mae_path_cat_pre         pdm_message_attributes.name%type;
      l_mae_path_cat_post        pdm_message_attributes.name%type;
      l_mae_path_desc            pdm_message_attributes.name%type;
      l_mae_path_cat             pdm_message_attributes.name%type;

      
      l_xml_passengernames           xmltype;
      l_xml_exceptiondata            xmltype;
      l_xml_bede_exceptiondata       xmltype;
      l_xml_ohddatabagcontent_desc   xmltype;
      l_xml_ohddatabagcontent_all    xmltype;
      l_xml_ohddatabagcontents       xmltype;
      l_xml_airportcodedata          xmltype;
      l_xml_internalairlinedata      xmltype;
      l_xml_destinationstationid_all xmltype;
      l_xml_destinationhdlareaid_all xmltype;
      
      l_mae_bd_updatedindicator  pdm_package_attributes.value%type;
      l_mae_bd_baginfomsgident   pdm_package_attributes.value%type;
      l_mae_bd_datadictversionnr pdm_package_attributes.value%type;
      l_mae_bd_baggagesourceind  pdm_package_attributes.value%type;
      l_mae_bd_airportcode       pdm_package_attributes.value%type;
      l_mae_bd_partnumber        pdm_package_attributes.value%type;
      l_mae_bd_messagerefnr      pdm_package_attributes.value%type;
      l_mae_bd_ackreq            pdm_package_attributes.value%type;
      l_mae_bd_encryption        pdm_package_attributes.value%type;
      l_mae_bd_oofi_airline      pdm_package_attributes.value%type;
      l_mae_bd_oofi_flightnumber pdm_package_attributes.value%type;
      l_mae_bd_oofi_date         pdm_package_attributes.value%type;
      l_mae_bd_oofi_airportcode  pdm_package_attributes.value%type;
      l_mae_bd_oofi_classtravel  pdm_package_attributes.value%type;
      l_mae_bd_ifi_airline       pdm_package_attributes.value%type;
      l_mae_bd_ifi_flightnumber  pdm_package_attributes.value%type;
      l_mae_bd_ifi_date          pdm_package_attributes.value%type;
      l_mae_bd_ifi_origairpcode  pdm_package_attributes.value%type;
      l_mae_bd_ifi_classoftravel pdm_package_attributes.value%type;
      l_mae_bd_ifie_scheddoa     pdm_package_attributes.value%type;
      l_mae_bd_ifie_oss_status   pdm_package_attributes.value%type;
      l_mae_bd_of1_airline       pdm_package_attributes.value%type;
      l_mae_bd_of1_flightnumber  pdm_package_attributes.value%type;
      l_mae_bd_of1_date          pdm_package_attributes.value%type;
      l_mae_bd_of1_airportcode   pdm_package_attributes.value%type;
      l_mae_bd_of1_classoftravel pdm_package_attributes.value%type;
      l_mae_bd_of2_airline       pdm_package_attributes.value%type;
      l_mae_bd_of2_flightnumber  pdm_package_attributes.value%type;
      l_mae_bd_of2_date          pdm_package_attributes.value%type;
      l_mae_bd_of2_airportcode   pdm_package_attributes.value%type;
      l_mae_bd_of2_classoftravel pdm_package_attributes.value%type;
      l_mae_bd_of3_airline       pdm_package_attributes.value%type;
      l_mae_bd_of3_flightnumber  pdm_package_attributes.value%type;
      l_mae_bd_of3_date          pdm_package_attributes.value%type;
      l_mae_bd_of3_airportcode   pdm_package_attributes.value%type;
      l_mae_bd_of3_classoftravel pdm_package_attributes.value%type;
      l_mae_bd_of4_airline       pdm_package_attributes.value%type;
      l_mae_bd_of4_flightnumber  pdm_package_attributes.value%type;
      l_mae_bd_of4_date          pdm_package_attributes.value%type;
      l_mae_bd_of4_airportcode   pdm_package_attributes.value%type;
      l_mae_bd_of4_classoftravel pdm_package_attributes.value%type;
      l_mae_bd_of5_airline       pdm_package_attributes.value%type;
      l_mae_bd_of5_flightnumber  pdm_package_attributes.value%type;
      l_mae_bd_of5_date          pdm_package_attributes.value%type;
      l_mae_bd_of5_airportcode   pdm_package_attributes.value%type;
      l_mae_bd_of5_classoftravel pdm_package_attributes.value%type;
      l_mae_bd_lpc1              pdm_package_attributes.value%type;
      l_mae_bd_lpc_extension1    pdm_package_attributes.value%type;
      l_mae_bd_lpc2              pdm_package_attributes.value%type;
      l_mae_bd_lpc_extension2    pdm_package_attributes.value%type;
      l_mae_bd_lpc3              pdm_package_attributes.value%type;
      l_mae_bd_lpc_extension3    pdm_package_attributes.value%type;
      l_mae_bd_checkinlocid      pdm_package_attributes.value%type;
      l_mae_bd_checkinlocdesc    pdm_package_attributes.value%type;
      l_mae_bd_checkindatetime   pdm_package_attributes.value%type;
      l_mae_bd_carriagemedium    pdm_package_attributes.value%type;
      l_mae_bd_transportid       pdm_package_attributes.value%type;
      l_mae_bd_authtoload        pdm_package_attributes.value%type;
      l_mae_bd_seatnumber        pdm_package_attributes.value%type;
      l_mae_bd_passstatus        pdm_package_attributes.value%type;
      l_mae_bd_sequencenumber    pdm_package_attributes.value%type;
      l_mae_bd_securitynumber    pdm_package_attributes.value%type;
      l_mae_bd_passprofilests    pdm_package_attributes.value%type;
      l_mae_bd_authtotransport   pdm_package_attributes.value%type;
      l_mae_bd_brd_baggagestatus pdm_package_attributes.value%type;
      l_mae_bd_handlingterminal  pdm_package_attributes.value%type;
      l_mae_bd_handlingbayorpier pdm_package_attributes.value%type;
      l_mae_bd_handlinggate      pdm_package_attributes.value%type;
      l_mae_bd_handlingbhs       pdm_package_attributes.value%type;
      l_mae_bd_piecesorweightind pdm_package_attributes.value%type;
      l_mae_bd_numberofchecked   pdm_package_attributes.value%type;
      l_mae_bd_checkedweight     pdm_package_attributes.value%type;
      l_mae_bd_uncheckedweight   pdm_package_attributes.value%type;
      l_mae_bd_unit              pdm_package_attributes.value%type;
      l_mae_bd_length            pdm_package_attributes.value%type;
      l_mae_bd_width             pdm_package_attributes.value%type;
      l_mae_bd_height            pdm_package_attributes.value%type;
      l_mae_bd_bagtypecode       pdm_package_attributes.value%type;
      l_mae_bd_physicalclass     pdm_package_attributes.value%type;
      l_mae_bd_surname           pdm_package_attributes.value%type;
      l_mae_bd_givenname         pdm_package_attributes.value%type;
      l_mae_bd_nosamesurname     pdm_package_attributes.value%type;
      l_mae_bd_earliestdelivmom  pdm_package_attributes.value%type;
      l_mae_bd_latestdeliverymom pdm_package_attributes.value%type;
      l_mae_bd_addressorlocdesc  pdm_package_attributes.value%type;
      l_mae_bd_freqtravelleridnr pdm_package_attributes.value%type;
      l_mae_bd_tieridentifier    pdm_package_attributes.value%type;
      l_mae_bd_corporgroupname   pdm_package_attributes.value%type;
      l_mae_bd_automatedpnraddr  pdm_package_attributes.value%type;
      l_mae_bd_bagtagprinterid   pdm_package_attributes.value%type;
      l_mae_bd_defaultprinterid  pdm_package_attributes.value%type;
      l_mae_bd_instruction       pdm_package_attributes.value%type;
      l_mae_bd_bss_baggagestatus pdm_package_attributes.value%type;
      l_mae_bd_resultreason      pdm_package_attributes.value%type;
      l_mae_bd_securitymethod    pdm_package_attributes.value%type;
      l_mae_bd_autograph         pdm_package_attributes.value%type;
      l_mae_bd_freetext          pdm_package_attributes.value%type;
      l_mae_bd_si1_scrproc_id    pdm_package_attributes.value%type;
      l_mae_bd_si1_scrproc_name  pdm_package_attributes.value%type;
      l_mae_bd_si1_reqscrlvl     pdm_package_attributes.value%type;
      l_mae_bd_si1_reachedscrlvl pdm_package_attributes.value%type;
      l_mae_bd_si1_failedscrlvl  pdm_package_attributes.value%type;
      l_mae_bd_si1_scrstate      pdm_package_attributes.value%type;
      l_mae_bd_si1_pseudoid      pdm_package_attributes.value%type;
      l_mae_bd_si1_bagstatus     pdm_package_attributes.value%type;
      l_mae_bd_si2_scrproc_id    pdm_package_attributes.value%type;
      l_mae_bd_si2_scrproc_name  pdm_package_attributes.value%type;
      l_mae_bd_si2_reqscrlvl     pdm_package_attributes.value%type;
      l_mae_bd_si2_reachedscrlvl pdm_package_attributes.value%type;
      l_mae_bd_si2_failedscrlvl  pdm_package_attributes.value%type;
      l_mae_bd_si2_scrstate      pdm_package_attributes.value%type;
      l_mae_bd_si2_pseudoid      pdm_package_attributes.value%type;
      l_mae_bd_si2_bagstatus     pdm_package_attributes.value%type;
      l_mae_bd_si3_scrproc_id    pdm_package_attributes.value%type;
      l_mae_bd_si3_scrproc_name  pdm_package_attributes.value%type;
      l_mae_bd_si3_reqscrlvl     pdm_package_attributes.value%type;
      l_mae_bd_si3_reachedscrlvl pdm_package_attributes.value%type;
      l_mae_bd_si3_failedscrlvl  pdm_package_attributes.value%type;
      l_mae_bd_si3_scrstate      pdm_package_attributes.value%type;
      l_mae_bd_si3_pseudoid      pdm_package_attributes.value%type;
      l_mae_bd_si3_bagstatus     pdm_package_attributes.value%type;
      l_mae_bd_si4_scrproc_id    pdm_package_attributes.value%type;
      l_mae_bd_si4_scrproc_name  pdm_package_attributes.value%type;
      l_mae_bd_si4_reqscrlvl     pdm_package_attributes.value%type;
      l_mae_bd_si4_reachedscrlvl pdm_package_attributes.value%type;
      l_mae_bd_si4_failedscrlvl  pdm_package_attributes.value%type;
      l_mae_bd_si4_scrstate      pdm_package_attributes.value%type;
      l_mae_bd_si4_pseudoid      pdm_package_attributes.value%type;
      l_mae_bd_si4_bagstatus     pdm_package_attributes.value%type;
      l_mae_bd_si5_scrproc_id    pdm_package_attributes.value%type;
      l_mae_bd_si5_scrproc_name  pdm_package_attributes.value%type;
      l_mae_bd_si5_reqscrlvl     pdm_package_attributes.value%type;
      l_mae_bd_si5_reachedscrlvl pdm_package_attributes.value%type;
      l_mae_bd_si5_failedscrlvl  pdm_package_attributes.value%type;
      l_mae_bd_si5_scrstate      pdm_package_attributes.value%type;
      l_mae_bd_si5_pseudoid      pdm_package_attributes.value%type;
      l_mae_bd_si5_bagstatus     pdm_package_attributes.value%type;
      l_mae_bd_sr1_scrproc_id    pdm_package_attributes.value%type;
      l_mae_bd_sr1_scrproc_name  pdm_package_attributes.value%type;
      l_mae_bd_sr1_screeninglvl  pdm_package_attributes.value%type;
      l_mae_bd_sr1_result        pdm_package_attributes.value%type;
      l_mae_bd_sr1_pseudoid      pdm_package_attributes.value%type;
      l_mae_bd_sr1_prstarttime   pdm_package_attributes.value%type;
      l_mae_bd_sr1_prendtime     pdm_package_attributes.value%type;
      l_mae_bd_sr2_scrproc_id    pdm_package_attributes.value%type;
      l_mae_bd_sr2_scrproc_name  pdm_package_attributes.value%type;
      l_mae_bd_sr2_screeninglvl  pdm_package_attributes.value%type;
      l_mae_bd_sr2_result        pdm_package_attributes.value%type;
      l_mae_bd_sr2_pseudoid      pdm_package_attributes.value%type;
      l_mae_bd_sr2_prstarttime   pdm_package_attributes.value%type;
      l_mae_bd_sr2_prendtime     pdm_package_attributes.value%type;
      l_mae_bd_sr3_scrproc_id    pdm_package_attributes.value%type;
      l_mae_bd_sr3_scrproc_name  pdm_package_attributes.value%type;
      l_mae_bd_sr3_screeninglvl  pdm_package_attributes.value%type;
      l_mae_bd_sr3_result        pdm_package_attributes.value%type;
      l_mae_bd_sr3_pseudoid      pdm_package_attributes.value%type;
      l_mae_bd_sr3_prstarttime   pdm_package_attributes.value%type;
      l_mae_bd_sr3_prendtime     pdm_package_attributes.value%type;
      l_mae_bd_sr4_scrproc_id    pdm_package_attributes.value%type;
      l_mae_bd_sr4_scrproc_name  pdm_package_attributes.value%type;
      l_mae_bd_sr4_screeninglvl  pdm_package_attributes.value%type;
      l_mae_bd_sr4_result        pdm_package_attributes.value%type;
      l_mae_bd_sr4_pseudoid      pdm_package_attributes.value%type;
      l_mae_bd_sr4_prstarttime   pdm_package_attributes.value%type;
      l_mae_bd_sr4_prendtime     pdm_package_attributes.value%type;
      l_mae_bd_sr5_scrproc_id    pdm_package_attributes.value%type;
      l_mae_bd_sr5_scrproc_name  pdm_package_attributes.value%type;
      l_mae_bd_sr5_screeninglvl  pdm_package_attributes.value%type;
      l_mae_bd_sr5_result        pdm_package_attributes.value%type;
      l_mae_bd_sr5_pseudoid      pdm_package_attributes.value%type;
      l_mae_bd_sr5_prstarttime   pdm_package_attributes.value%type;
      l_mae_bd_sr5_prendtime     pdm_package_attributes.value%type;
      l_mae_bd_loadsequencenr    pdm_package_attributes.value%type;
      l_mae_bd_ld_stowdeviceid   pdm_package_attributes.value%type;
      l_mae_bd_ld_loadlocation   pdm_package_attributes.value%type;
      l_mae_bd_ld_baggagetype    pdm_package_attributes.value%type;
      l_mae_bd_ld_classoftravel  pdm_package_attributes.value%type;
      l_mae_bd_ld_airportcode1   pdm_package_attributes.value%type;
      l_mae_bd_ld_sealdcontainer pdm_package_attributes.value%type;
      l_mae_bd_ld_conairlinecode pdm_package_attributes.value%type;
      l_mae_bd_ld_conflightnr    pdm_package_attributes.value%type;
      l_mae_bd_ld_condepartdate  pdm_package_attributes.value%type;
      l_mae_bd_ld_airportcode2   pdm_package_attributes.value%type;
      l_mae_bd_lde_uldtypecode   pdm_package_attributes.value%type;
      l_mae_bd_lde_uldserialno   pdm_package_attributes.value%type;
      l_mae_bd_lde_uldownercode  pdm_package_attributes.value%type;
      l_mae_bd_lde_loadseqno     pdm_package_attributes.value%type;
      l_mae_bd_lde_xpos          pdm_package_attributes.value%type;
      l_mae_bd_lde_ypos          pdm_package_attributes.value%type;
      l_mae_bd_lde_zpos          pdm_package_attributes.value%type;
      l_mae_bd_baggagestatuscode pdm_package_attributes.value%type;
      l_mae_bd_baggagetagnumber  pdm_package_attributes.value%type;
      l_mae_bd_bie_instrtounload pdm_package_attributes.value%type;
      l_mae_bd_secondarycode     pdm_package_attributes.value%type;
      l_mae_bd_agentid           pdm_package_attributes.value%type;
      l_mae_bd_scannerid         pdm_package_attributes.value%type;
      l_mae_bd_datetime          pdm_package_attributes.value%type;
      l_mae_bd_readinglocation   pdm_package_attributes.value%type;
      l_mae_bd_senttolocation    pdm_package_attributes.value%type;
      l_mae_bd_pie_curstationid  pdm_package_attributes.value%type;
      l_mae_bd_pie_handheldid    pdm_package_attributes.value%type;
      l_mae_bd_pie_curhandlarea  pdm_package_attributes.value%type;
      l_mae_bd_pie_xpos          pdm_package_attributes.value%type;
      l_mae_bd_pie_ypos          pdm_package_attributes.value%type;
      l_mae_bd_pie_storagelocid  pdm_package_attributes.value%type;
      l_mae_bd_pie_uldtype       pdm_package_attributes.value%type;
      l_mae_bd_pie_uldserial     pdm_package_attributes.value%type;
      l_mae_bd_pie_uldownercode  pdm_package_attributes.value%type;
      l_mae_bd_pie_executedtask  pdm_package_attributes.value%type;
      l_mae_bd_pie_deststationid pdm_package_attributes.value%type;
      l_mae_bd_pie_desthandlarea pdm_package_attributes.value%type;
      l_mae_bd_pie_assignedtask  pdm_package_attributes.value%type;
      l_mae_bd_pie_activeprocess pdm_package_attributes.value%type;
      l_mae_bd_pie_batchid       pdm_package_attributes.value%type;
      l_mae_bd_pie_recogstate    pdm_package_attributes.value%type;
      l_mae_bd_pie_idstate       pdm_package_attributes.value%type;
      l_mae_bd_pie_idreason      pdm_package_attributes.value%type;
      l_mae_bd_pie_lasterror     pdm_package_attributes.value%type;
      l_mae_bd_pie_manualidtask  pdm_package_attributes.value%type;
      l_mae_bd_pie_opcontraction pdm_package_attributes.value%type;
      l_mae_bd_pie_opcontrmsg    pdm_package_attributes.value%type;
      l_mae_bd_pie_qualstate     pdm_package_attributes.value%type;
      l_mae_bd_pie_fb_timeliness pdm_package_attributes.value%type;
      l_mae_bd_pie_b_timeliness  pdm_package_attributes.value%type;
      l_mae_bd_pie_sysauthtoload pdm_package_attributes.value%type;
      l_mae_bd_pie_handler       pdm_package_attributes.value%type;
      l_mae_bd_pie_airline       pdm_package_attributes.value%type;
      l_mae_bd_pie_operatorid    pdm_package_attributes.value%type;
      l_mae_bd_pie_operatorhndlr pdm_package_attributes.value%type;
      l_mae_bd_pie_si_ppiname    pdm_package_attributes.value%type;
      l_mae_bd_pie_si_prodname   pdm_package_attributes.value%type;
      l_mae_bd_pie_ar_cpdname    pdm_package_attributes.value%type;
      l_mae_bd_pie_ar_ppi_name   pdm_package_attributes.value%type;
      l_mae_bd_pie_ar_ppi_versn  pdm_package_attributes.value%type;
      l_mae_bd_pie_ar_prodefname pdm_package_attributes.value%type;
      l_mae_bd_pie_ar_actname    pdm_package_attributes.value%type;
      l_mae_bd_ohh_teletypecode  pdm_package_attributes.value%type;
      l_mae_bd_ohh_messageorig   pdm_package_attributes.value%type;
      l_mae_bd_ohh_timerefgroup  pdm_package_attributes.value%type;
      l_mae_bd_ohh_filereference pdm_package_attributes.value%type;
      l_mae_bd_ohd_lpc           pdm_package_attributes.value%type;
      l_mae_bd_ohd_lpc_ext       pdm_package_attributes.value%type;
      l_mae_bd_ohd_bagcolour     pdm_package_attributes.value%type;
      l_mae_bd_ohd_bagtypecode   pdm_package_attributes.value%type;
      l_mae_bd_ohd_bagbrandname  pdm_package_attributes.value%type;
      l_mae_bd_ohd_bagmaterial   pdm_package_attributes.value%type;
      l_mae_bd_ohd_nm1_surname   pdm_package_attributes.value%type;
      l_mae_bd_ohd_nm1_initials  pdm_package_attributes.value%type;
      l_mae_bd_ohd_nm2_surname   pdm_package_attributes.value%type;
      l_mae_bd_ohd_nm2_initials  pdm_package_attributes.value%type;
      l_mae_bd_ohd_nm3_surname   pdm_package_attributes.value%type;
      l_mae_bd_ohd_nm3_initials  pdm_package_attributes.value%type;
      l_mae_bd_ohd_airline       pdm_package_attributes.value%type;
      l_mae_bd_ohd_flightnumber  pdm_package_attributes.value%type;
      l_mae_bd_ohd_date          pdm_package_attributes.value%type;
      l_mae_bd_ohd_freeforminfo  pdm_package_attributes.value%type;
      l_mae_bd_ohe_passengeraddr pdm_package_attributes.value%type;
      l_mae_bd_ohe_freqtravidnum pdm_package_attributes.value%type;
      l_mae_bd_ohe_tierident     pdm_package_attributes.value%type;
      l_mae_bd_scantimestamp     pdm_package_attributes.value%type;
      l_mae_bd_scanlocation      pdm_package_attributes.value%type;
      l_mae_bd_scanresult        pdm_package_attributes.value%type;

   begin
      viu_module.enter_module (i_module => l_con_proc_name);

      l_attr := i_it_mae_values.first;
      while l_attr is not null
      loop
         case l_attr
         when pdm_constant.g_con_mae_bd_updatedindicator
         then
            l_mae_bd_updatedindicator := i_it_mae_values(pdm_constant.g_con_mae_bd_updatedindicator).pbe_values(1);
         when pdm_constant.g_con_mae_bd_baginfomsgident
         then
            l_mae_bd_baginfomsgident := i_it_mae_values(pdm_constant.g_con_mae_bd_baginfomsgident).pbe_values(1);
         when pdm_constant.g_con_mae_bd_datadictversionnr
         then
            l_mae_bd_datadictversionnr := i_it_mae_values(pdm_constant.g_con_mae_bd_datadictversionnr).pbe_values(1);
         when pdm_constant.g_con_mae_bd_baggagesourceind
         then
            l_mae_bd_baggagesourceind := i_it_mae_values(pdm_constant.g_con_mae_bd_baggagesourceind).pbe_values(1);
         when pdm_constant.g_con_mae_bd_airportcode
         then
            l_mae_bd_airportcode := i_it_mae_values(pdm_constant.g_con_mae_bd_airportcode).pbe_values(1);
         when pdm_constant.g_con_mae_bd_partnumber
         then
            l_mae_bd_partnumber := i_it_mae_values(pdm_constant.g_con_mae_bd_partnumber).pbe_values(1);
         when pdm_constant.g_con_mae_bd_messagerefnr
         then
            l_mae_bd_messagerefnr := i_it_mae_values(pdm_constant.g_con_mae_bd_messagerefnr).pbe_values(1);
         when pdm_constant.g_con_mae_bd_ackreq
         then
            l_mae_bd_ackreq := i_it_mae_values(pdm_constant.g_con_mae_bd_ackreq).pbe_values(1);
         when pdm_constant.g_con_mae_bd_encryption
         then
            l_mae_bd_encryption := i_it_mae_values(pdm_constant.g_con_mae_bd_encryption).pbe_values(1);
         when pdm_constant.g_con_mae_bd_oofi_airline
         then
            l_mae_bd_oofi_airline := i_it_mae_values(pdm_constant.g_con_mae_bd_oofi_airline).pbe_values(1);
         when pdm_constant.g_con_mae_bd_oofi_flightnumber
         then
            l_mae_bd_oofi_flightnumber := i_it_mae_values(pdm_constant.g_con_mae_bd_oofi_flightnumber).pbe_values(1);
         when pdm_constant.g_con_mae_bd_oofi_date
         then
            l_mae_bd_oofi_date := i_it_mae_values(pdm_constant.g_con_mae_bd_oofi_date).pbe_values(1);
         when pdm_constant.g_con_mae_bd_oofi_airportcode
         then
            l_mae_bd_oofi_airportcode := i_it_mae_values(pdm_constant.g_con_mae_bd_oofi_airportcode).pbe_values(1);
         when pdm_constant.g_con_mae_bd_oofi_classtravel
         then
            l_mae_bd_oofi_classtravel := i_it_mae_values(pdm_constant.g_con_mae_bd_oofi_classtravel).pbe_values(1);
         when pdm_constant.g_con_mae_bd_ifi_airline
         then
            l_mae_bd_ifi_airline := i_it_mae_values(pdm_constant.g_con_mae_bd_ifi_airline).pbe_values(1);
         when pdm_constant.g_con_mae_bd_ifi_flightnumber
         then
            l_mae_bd_ifi_flightnumber := i_it_mae_values(pdm_constant.g_con_mae_bd_ifi_flightnumber).pbe_values(1);
         when pdm_constant.g_con_mae_bd_ifi_date
         then
            l_mae_bd_ifi_date := i_it_mae_values(pdm_constant.g_con_mae_bd_ifi_date).pbe_values(1);
         when pdm_constant.g_con_mae_bd_ifi_origairpcode
         then
            l_mae_bd_ifi_origairpcode := i_it_mae_values(pdm_constant.g_con_mae_bd_ifi_origairpcode).pbe_values(1);
         when pdm_constant.g_con_mae_bd_ifi_classoftravel
         then
            l_mae_bd_ifi_classoftravel := i_it_mae_values(pdm_constant.g_con_mae_bd_ifi_classoftravel).pbe_values(1);
         when pdm_constant.g_con_mae_bd_ifie_scheddoa
         then
            l_mae_bd_ifie_scheddoa := i_it_mae_values(pdm_constant.g_con_mae_bd_ifie_scheddoa).pbe_values(1);
         when pdm_constant.g_con_mae_bd_ifie_oss_status
         then
            l_mae_bd_ifie_oss_status := i_it_mae_values(pdm_constant.g_con_mae_bd_ifie_oss_status).pbe_values(1);
         when pdm_constant.g_con_mae_bd_of1_airline
         then
            l_mae_bd_of1_airline := i_it_mae_values(pdm_constant.g_con_mae_bd_of1_airline).pbe_values(1);
         when pdm_constant.g_con_mae_bd_of1_flightnumber
         then
            l_mae_bd_of1_flightnumber := i_it_mae_values(pdm_constant.g_con_mae_bd_of1_flightnumber).pbe_values(1);
         when pdm_constant.g_con_mae_bd_of1_date
         then
            l_mae_bd_of1_date := i_it_mae_values(pdm_constant.g_con_mae_bd_of1_date).pbe_values(1);
         when pdm_constant.g_con_mae_bd_of1_airportcode
         then
            l_mae_bd_of1_airportcode := i_it_mae_values(pdm_constant.g_con_mae_bd_of1_airportcode).pbe_values(1);
         when pdm_constant.g_con_mae_bd_of1_classoftravel
         then
            l_mae_bd_of1_classoftravel := i_it_mae_values(pdm_constant.g_con_mae_bd_of1_classoftravel).pbe_values(1);
         when pdm_constant.g_con_mae_bd_of2_airline
         then
            l_mae_bd_of2_airline := i_it_mae_values(pdm_constant.g_con_mae_bd_of2_airline).pbe_values(1);
         when pdm_constant.g_con_mae_bd_of2_flightnumber
         then
            l_mae_bd_of2_flightnumber := i_it_mae_values(pdm_constant.g_con_mae_bd_of2_flightnumber).pbe_values(1);
         when pdm_constant.g_con_mae_bd_of2_date
         then
            l_mae_bd_of2_date := i_it_mae_values(pdm_constant.g_con_mae_bd_of2_date).pbe_values(1);
         when pdm_constant.g_con_mae_bd_of2_airportcode
         then
            l_mae_bd_of2_airportcode := i_it_mae_values(pdm_constant.g_con_mae_bd_of2_airportcode).pbe_values(1);
         when pdm_constant.g_con_mae_bd_of2_classoftravel
         then
            l_mae_bd_of2_classoftravel := i_it_mae_values(pdm_constant.g_con_mae_bd_of2_classoftravel).pbe_values(1);
         when pdm_constant.g_con_mae_bd_of3_airline
         then
            l_mae_bd_of3_airline := i_it_mae_values(pdm_constant.g_con_mae_bd_of3_airline).pbe_values(1);
         when pdm_constant.g_con_mae_bd_of3_flightnumber
         then
            l_mae_bd_of3_flightnumber := i_it_mae_values(pdm_constant.g_con_mae_bd_of3_flightnumber).pbe_values(1);
         when pdm_constant.g_con_mae_bd_of3_date
         then
            l_mae_bd_of3_date := i_it_mae_values(pdm_constant.g_con_mae_bd_of3_date).pbe_values(1);
         when pdm_constant.g_con_mae_bd_of3_airportcode
         then
            l_mae_bd_of3_airportcode := i_it_mae_values(pdm_constant.g_con_mae_bd_of3_airportcode).pbe_values(1);
         when pdm_constant.g_con_mae_bd_of3_classoftravel
         then
            l_mae_bd_of3_classoftravel := i_it_mae_values(pdm_constant.g_con_mae_bd_of3_classoftravel).pbe_values(1);
         when pdm_constant.g_con_mae_bd_of4_airline
         then
            l_mae_bd_of4_airline := i_it_mae_values(pdm_constant.g_con_mae_bd_of4_airline).pbe_values(1);
         when pdm_constant.g_con_mae_bd_of4_flightnumber
         then
            l_mae_bd_of4_flightnumber := i_it_mae_values(pdm_constant.g_con_mae_bd_of4_flightnumber).pbe_values(1);
         when pdm_constant.g_con_mae_bd_of4_date
         then
            l_mae_bd_of4_date := i_it_mae_values(pdm_constant.g_con_mae_bd_of4_date).pbe_values(1);
         when pdm_constant.g_con_mae_bd_of4_airportcode
         then
            l_mae_bd_of4_airportcode := i_it_mae_values(pdm_constant.g_con_mae_bd_of4_airportcode).pbe_values(1);
         when pdm_constant.g_con_mae_bd_of4_classoftravel
         then
            l_mae_bd_of4_classoftravel := i_it_mae_values(pdm_constant.g_con_mae_bd_of4_classoftravel).pbe_values(1);
         when pdm_constant.g_con_mae_bd_of5_airline
         then
            l_mae_bd_of5_airline := i_it_mae_values(pdm_constant.g_con_mae_bd_of5_airline).pbe_values(1);
         when pdm_constant.g_con_mae_bd_of5_flightnumber
         then
            l_mae_bd_of5_flightnumber := i_it_mae_values(pdm_constant.g_con_mae_bd_of5_flightnumber).pbe_values(1);
         when pdm_constant.g_con_mae_bd_of5_date
         then
            l_mae_bd_of5_date := i_it_mae_values(pdm_constant.g_con_mae_bd_of5_date).pbe_values(1);
         when pdm_constant.g_con_mae_bd_of5_airportcode
         then
            l_mae_bd_of5_airportcode := i_it_mae_values(pdm_constant.g_con_mae_bd_of5_airportcode).pbe_values(1);
         when pdm_constant.g_con_mae_bd_of5_classoftravel
         then
            l_mae_bd_of5_classoftravel := i_it_mae_values(pdm_constant.g_con_mae_bd_of5_classoftravel).pbe_values(1);
         when pdm_constant.g_con_mae_bd_lpc1
         then
            l_mae_bd_lpc1 := i_it_mae_values(pdm_constant.g_con_mae_bd_lpc1).pbe_values(1);
         when pdm_constant.g_con_mae_bd_lpc_extension1
         then
            l_mae_bd_lpc_extension1 := i_it_mae_values(pdm_constant.g_con_mae_bd_lpc_extension1).pbe_values(1);
         when pdm_constant.g_con_mae_bd_lpc2
         then
            l_mae_bd_lpc2 := i_it_mae_values(pdm_constant.g_con_mae_bd_lpc2).pbe_values(1);
         when pdm_constant.g_con_mae_bd_lpc_extension2
         then
            l_mae_bd_lpc_extension2 := i_it_mae_values(pdm_constant.g_con_mae_bd_lpc_extension2).pbe_values(1);
         when pdm_constant.g_con_mae_bd_lpc3
         then
            l_mae_bd_lpc3 := i_it_mae_values(pdm_constant.g_con_mae_bd_lpc3).pbe_values(1);
         when pdm_constant.g_con_mae_bd_lpc_extension3
         then
            l_mae_bd_lpc_extension3 := i_it_mae_values(pdm_constant.g_con_mae_bd_lpc_extension3).pbe_values(1);
         when pdm_constant.g_con_mae_bd_checkinlocid
         then
            l_mae_bd_checkinlocid := i_it_mae_values(pdm_constant.g_con_mae_bd_checkinlocid).pbe_values(1);
         when pdm_constant.g_con_mae_bd_checkinlocdesc
         then
            l_mae_bd_checkinlocdesc := i_it_mae_values(pdm_constant.g_con_mae_bd_checkinlocdesc).pbe_values(1);
         when pdm_constant.g_con_mae_bd_checkindatetime
         then
            l_mae_bd_checkindatetime := i_it_mae_values(pdm_constant.g_con_mae_bd_checkindatetime).pbe_values(1);
         when pdm_constant.g_con_mae_bd_carriagemedium
         then
            l_mae_bd_carriagemedium := i_it_mae_values(pdm_constant.g_con_mae_bd_carriagemedium).pbe_values(1);
         when pdm_constant.g_con_mae_bd_transportid
         then
            l_mae_bd_transportid := i_it_mae_values(pdm_constant.g_con_mae_bd_transportid).pbe_values(1);
         when pdm_constant.g_con_mae_bd_authtoload
         then
            l_mae_bd_authtoload := i_it_mae_values(pdm_constant.g_con_mae_bd_authtoload).pbe_values(1);
         when pdm_constant.g_con_mae_bd_seatnumber
         then
            l_mae_bd_seatnumber := i_it_mae_values(pdm_constant.g_con_mae_bd_seatnumber).pbe_values(1);
         when pdm_constant.g_con_mae_bd_passstatus
         then
            l_mae_bd_passstatus := i_it_mae_values(pdm_constant.g_con_mae_bd_passstatus).pbe_values(1);
         when pdm_constant.g_con_mae_bd_sequencenumber
         then
            l_mae_bd_sequencenumber := i_it_mae_values(pdm_constant.g_con_mae_bd_sequencenumber).pbe_values(1);
         when pdm_constant.g_con_mae_bd_securitynumber
         then
            l_mae_bd_securitynumber := i_it_mae_values(pdm_constant.g_con_mae_bd_securitynumber).pbe_values(1);
         when pdm_constant.g_con_mae_bd_passprofilests
         then
            l_mae_bd_passprofilests := i_it_mae_values(pdm_constant.g_con_mae_bd_passprofilests).pbe_values(1);
         when pdm_constant.g_con_mae_bd_authtotransport
         then
            l_mae_bd_authtotransport := i_it_mae_values(pdm_constant.g_con_mae_bd_authtotransport).pbe_values(1);
         when pdm_constant.g_con_mae_bd_brd_baggagestatus
         then
            l_mae_bd_brd_baggagestatus := i_it_mae_values(pdm_constant.g_con_mae_bd_brd_baggagestatus).pbe_values(1);
         when pdm_constant.g_con_mae_bd_handlingterminal
         then
            l_mae_bd_handlingterminal := i_it_mae_values(pdm_constant.g_con_mae_bd_handlingterminal).pbe_values(1);
         when pdm_constant.g_con_mae_bd_handlingbayorpier
         then
            l_mae_bd_handlingbayorpier := i_it_mae_values(pdm_constant.g_con_mae_bd_handlingbayorpier).pbe_values(1);
         when pdm_constant.g_con_mae_bd_handlinggate
         then
            l_mae_bd_handlinggate := i_it_mae_values(pdm_constant.g_con_mae_bd_handlinggate).pbe_values(1);
         when pdm_constant.g_con_mae_bd_handlingbhs
         then
            l_mae_bd_handlingbhs := i_it_mae_values(pdm_constant.g_con_mae_bd_handlingbhs).pbe_values(1);
         when pdm_constant.g_con_mae_bd_piecesorweightind
         then
            l_mae_bd_piecesorweightind := i_it_mae_values(pdm_constant.g_con_mae_bd_piecesorweightind).pbe_values(1);
         when pdm_constant.g_con_mae_bd_numberofchecked
         then
            l_mae_bd_numberofchecked := i_it_mae_values(pdm_constant.g_con_mae_bd_numberofchecked).pbe_values(1);
         when pdm_constant.g_con_mae_bd_checkedweight
         then
            l_mae_bd_checkedweight := i_it_mae_values(pdm_constant.g_con_mae_bd_checkedweight).pbe_values(1);
         when pdm_constant.g_con_mae_bd_uncheckedweight
         then
            l_mae_bd_uncheckedweight := i_it_mae_values(pdm_constant.g_con_mae_bd_uncheckedweight).pbe_values(1);
         when pdm_constant.g_con_mae_bd_unit
         then
            l_mae_bd_unit := i_it_mae_values(pdm_constant.g_con_mae_bd_unit).pbe_values(1);
         when pdm_constant.g_con_mae_bd_length
         then
            l_mae_bd_length := i_it_mae_values(pdm_constant.g_con_mae_bd_length).pbe_values(1);
         when pdm_constant.g_con_mae_bd_width
         then
            l_mae_bd_width := i_it_mae_values(pdm_constant.g_con_mae_bd_width).pbe_values(1);
         when pdm_constant.g_con_mae_bd_height
         then
            l_mae_bd_height := i_it_mae_values(pdm_constant.g_con_mae_bd_height).pbe_values(1);
         when pdm_constant.g_con_mae_bd_bagtypecode
         then
            l_mae_bd_bagtypecode := i_it_mae_values(pdm_constant.g_con_mae_bd_bagtypecode).pbe_values(1);
         when pdm_constant.g_con_mae_bd_physicalclass
         then
            l_mae_bd_physicalclass := i_it_mae_values(pdm_constant.g_con_mae_bd_physicalclass).pbe_values(1);
         when pdm_constant.g_con_mae_bd_surname
         then
            l_mae_bd_surname := i_it_mae_values(pdm_constant.g_con_mae_bd_surname).pbe_values(1);
         when pdm_constant.g_con_mae_bd_givenname
         then
            l_mae_bd_givenname := i_it_mae_values(pdm_constant.g_con_mae_bd_givenname).pbe_values(1);
         when pdm_constant.g_con_mae_bd_nosamesurname
         then
            l_mae_bd_nosamesurname := i_it_mae_values(pdm_constant.g_con_mae_bd_nosamesurname).pbe_values(1);
         when pdm_constant.g_con_mae_bd_earliestdelivmom
         then
            l_mae_bd_earliestdelivmom := i_it_mae_values(pdm_constant.g_con_mae_bd_earliestdelivmom).pbe_values(1);
         when pdm_constant.g_con_mae_bd_latestdeliverymom
         then
            l_mae_bd_latestdeliverymom := i_it_mae_values(pdm_constant.g_con_mae_bd_latestdeliverymom).pbe_values(1);
         when pdm_constant.g_con_mae_bd_addressorlocdesc
         then
            l_mae_bd_addressorlocdesc := i_it_mae_values(pdm_constant.g_con_mae_bd_addressorlocdesc).pbe_values(1);
         when pdm_constant.g_con_mae_bd_freqtravelleridnr
         then
            l_mae_bd_freqtravelleridnr := i_it_mae_values(pdm_constant.g_con_mae_bd_freqtravelleridnr).pbe_values(1);
         when pdm_constant.g_con_mae_bd_tieridentifier
         then
            l_mae_bd_tieridentifier := i_it_mae_values(pdm_constant.g_con_mae_bd_tieridentifier).pbe_values(1);
         when pdm_constant.g_con_mae_bd_corporgroupname
         then
            l_mae_bd_corporgroupname := i_it_mae_values(pdm_constant.g_con_mae_bd_corporgroupname).pbe_values(1);
         when pdm_constant.g_con_mae_bd_automatedpnraddr
         then
            l_mae_bd_automatedpnraddr := i_it_mae_values(pdm_constant.g_con_mae_bd_automatedpnraddr).pbe_values(1);
         when pdm_constant.g_con_mae_bd_bagtagprinterid
         then
            l_mae_bd_bagtagprinterid := i_it_mae_values(pdm_constant.g_con_mae_bd_bagtagprinterid).pbe_values(1);
         when pdm_constant.g_con_mae_bd_defaultprinterid
         then
            l_mae_bd_defaultprinterid := i_it_mae_values(pdm_constant.g_con_mae_bd_defaultprinterid).pbe_values(1);
         when pdm_constant.g_con_mae_bd_instruction
         then
            l_mae_bd_instruction := i_it_mae_values(pdm_constant.g_con_mae_bd_instruction).pbe_values(1);
         when pdm_constant.g_con_mae_bd_bss_baggagestatus
         then
            l_mae_bd_bss_baggagestatus := i_it_mae_values(pdm_constant.g_con_mae_bd_bss_baggagestatus).pbe_values(1);
         when pdm_constant.g_con_mae_bd_resultreason
         then
            l_mae_bd_resultreason := i_it_mae_values(pdm_constant.g_con_mae_bd_resultreason).pbe_values(1);
         when pdm_constant.g_con_mae_bd_securitymethod
         then
            l_mae_bd_securitymethod := i_it_mae_values(pdm_constant.g_con_mae_bd_securitymethod).pbe_values(1);
         when pdm_constant.g_con_mae_bd_autograph
         then
            l_mae_bd_autograph := i_it_mae_values(pdm_constant.g_con_mae_bd_autograph).pbe_values(1);
         when pdm_constant.g_con_mae_bd_freetext
         then
            l_mae_bd_freetext := i_it_mae_values(pdm_constant.g_con_mae_bd_freetext).pbe_values(1);
         when pdm_constant.g_con_mae_bd_si1_scrproc_id
         then
            l_mae_bd_si1_scrproc_id := i_it_mae_values(pdm_constant.g_con_mae_bd_si1_scrproc_id).pbe_values(1);
         when pdm_constant.g_con_mae_bd_si1_scrproc_name
         then
            l_mae_bd_si1_scrproc_name := i_it_mae_values(pdm_constant.g_con_mae_bd_si1_scrproc_name).pbe_values(1);
         when pdm_constant.g_con_mae_bd_si1_reqscrlvl
         then
            l_mae_bd_si1_reqscrlvl := i_it_mae_values(pdm_constant.g_con_mae_bd_si1_reqscrlvl).pbe_values(1);
         when pdm_constant.g_con_mae_bd_si1_reachedscrlvl
         then
            l_mae_bd_si1_reachedscrlvl := i_it_mae_values(pdm_constant.g_con_mae_bd_si1_reachedscrlvl).pbe_values(1);
         when pdm_constant.g_con_mae_bd_si1_failedscrlvl
         then
            l_mae_bd_si1_failedscrlvl := i_it_mae_values(pdm_constant.g_con_mae_bd_si1_failedscrlvl).pbe_values(1);
         when pdm_constant.g_con_mae_bd_si1_scrstate
         then
            l_mae_bd_si1_scrstate := i_it_mae_values(pdm_constant.g_con_mae_bd_si1_scrstate).pbe_values(1);
         when pdm_constant.g_con_mae_bd_si1_pseudoid
         then
            l_mae_bd_si1_pseudoid := i_it_mae_values(pdm_constant.g_con_mae_bd_si1_pseudoid).pbe_values(1);
         when pdm_constant.g_con_mae_bd_si1_bagstatus
         then
            l_mae_bd_si1_bagstatus := i_it_mae_values(pdm_constant.g_con_mae_bd_si1_bagstatus).pbe_values(1);
         when pdm_constant.g_con_mae_bd_si2_scrproc_id
         then
            l_mae_bd_si2_scrproc_id := i_it_mae_values(pdm_constant.g_con_mae_bd_si2_scrproc_id).pbe_values(1);
         when pdm_constant.g_con_mae_bd_si2_scrproc_name
         then
            l_mae_bd_si2_scrproc_name := i_it_mae_values(pdm_constant.g_con_mae_bd_si2_scrproc_name).pbe_values(1);
         when pdm_constant.g_con_mae_bd_si2_reqscrlvl
         then
            l_mae_bd_si2_reqscrlvl := i_it_mae_values(pdm_constant.g_con_mae_bd_si2_reqscrlvl).pbe_values(1);
         when pdm_constant.g_con_mae_bd_si2_reachedscrlvl
         then
            l_mae_bd_si2_reachedscrlvl := i_it_mae_values(pdm_constant.g_con_mae_bd_si2_reachedscrlvl).pbe_values(1);
         when pdm_constant.g_con_mae_bd_si2_failedscrlvl
         then
            l_mae_bd_si2_failedscrlvl := i_it_mae_values(pdm_constant.g_con_mae_bd_si2_failedscrlvl).pbe_values(1);
         when pdm_constant.g_con_mae_bd_si2_scrstate
         then
            l_mae_bd_si2_scrstate := i_it_mae_values(pdm_constant.g_con_mae_bd_si2_scrstate).pbe_values(1);
         when pdm_constant.g_con_mae_bd_si2_pseudoid
         then
            l_mae_bd_si2_pseudoid := i_it_mae_values(pdm_constant.g_con_mae_bd_si2_pseudoid).pbe_values(1);
         when pdm_constant.g_con_mae_bd_si2_bagstatus
         then
            l_mae_bd_si2_bagstatus := i_it_mae_values(pdm_constant.g_con_mae_bd_si2_bagstatus).pbe_values(1);
         when pdm_constant.g_con_mae_bd_si3_scrproc_id
         then
            l_mae_bd_si3_scrproc_id := i_it_mae_values(pdm_constant.g_con_mae_bd_si3_scrproc_id).pbe_values(1);
         when pdm_constant.g_con_mae_bd_si3_scrproc_name
         then
            l_mae_bd_si3_scrproc_name := i_it_mae_values(pdm_constant.g_con_mae_bd_si3_scrproc_name).pbe_values(1);
         when pdm_constant.g_con_mae_bd_si3_reqscrlvl
         then
            l_mae_bd_si3_reqscrlvl := i_it_mae_values(pdm_constant.g_con_mae_bd_si3_reqscrlvl).pbe_values(1);
         when pdm_constant.g_con_mae_bd_si3_reachedscrlvl
         then
            l_mae_bd_si3_reachedscrlvl := i_it_mae_values(pdm_constant.g_con_mae_bd_si3_reachedscrlvl).pbe_values(1);
         when pdm_constant.g_con_mae_bd_si3_failedscrlvl
         then
            l_mae_bd_si3_failedscrlvl := i_it_mae_values(pdm_constant.g_con_mae_bd_si3_failedscrlvl).pbe_values(1);
         when pdm_constant.g_con_mae_bd_si3_scrstate
         then
            l_mae_bd_si3_scrstate := i_it_mae_values(pdm_constant.g_con_mae_bd_si3_scrstate).pbe_values(1);
         when pdm_constant.g_con_mae_bd_si3_pseudoid
         then
            l_mae_bd_si3_pseudoid := i_it_mae_values(pdm_constant.g_con_mae_bd_si3_pseudoid).pbe_values(1);
         when pdm_constant.g_con_mae_bd_si3_bagstatus
         then
            l_mae_bd_si3_bagstatus := i_it_mae_values(pdm_constant.g_con_mae_bd_si3_bagstatus).pbe_values(1);
         when pdm_constant.g_con_mae_bd_si4_scrproc_id
         then
            l_mae_bd_si4_scrproc_id := i_it_mae_values(pdm_constant.g_con_mae_bd_si4_scrproc_id).pbe_values(1);
         when pdm_constant.g_con_mae_bd_si4_scrproc_name
         then
            l_mae_bd_si4_scrproc_name := i_it_mae_values(pdm_constant.g_con_mae_bd_si4_scrproc_name).pbe_values(1);
         when pdm_constant.g_con_mae_bd_si4_reqscrlvl
         then
            l_mae_bd_si4_reqscrlvl := i_it_mae_values(pdm_constant.g_con_mae_bd_si4_reqscrlvl).pbe_values(1);
         when pdm_constant.g_con_mae_bd_si4_reachedscrlvl
         then
            l_mae_bd_si4_reachedscrlvl := i_it_mae_values(pdm_constant.g_con_mae_bd_si4_reachedscrlvl).pbe_values(1);
         when pdm_constant.g_con_mae_bd_si4_failedscrlvl
         then
            l_mae_bd_si4_failedscrlvl := i_it_mae_values(pdm_constant.g_con_mae_bd_si4_failedscrlvl).pbe_values(1);
         when pdm_constant.g_con_mae_bd_si4_scrstate
         then
            l_mae_bd_si4_scrstate := i_it_mae_values(pdm_constant.g_con_mae_bd_si4_scrstate).pbe_values(1);
         when pdm_constant.g_con_mae_bd_si4_pseudoid
         then
            l_mae_bd_si4_pseudoid := i_it_mae_values(pdm_constant.g_con_mae_bd_si4_pseudoid).pbe_values(1);
         when pdm_constant.g_con_mae_bd_si4_bagstatus
         then
            l_mae_bd_si4_bagstatus := i_it_mae_values(pdm_constant.g_con_mae_bd_si4_bagstatus).pbe_values(1);
         when pdm_constant.g_con_mae_bd_si5_scrproc_id
         then
            l_mae_bd_si5_scrproc_id := i_it_mae_values(pdm_constant.g_con_mae_bd_si5_scrproc_id).pbe_values(1);
         when pdm_constant.g_con_mae_bd_si5_scrproc_name
         then
            l_mae_bd_si5_scrproc_name := i_it_mae_values(pdm_constant.g_con_mae_bd_si5_scrproc_name).pbe_values(1);
         when pdm_constant.g_con_mae_bd_si5_reqscrlvl
         then
            l_mae_bd_si5_reqscrlvl := i_it_mae_values(pdm_constant.g_con_mae_bd_si5_reqscrlvl).pbe_values(1);
         when pdm_constant.g_con_mae_bd_si5_reachedscrlvl
         then
            l_mae_bd_si5_reachedscrlvl := i_it_mae_values(pdm_constant.g_con_mae_bd_si5_reachedscrlvl).pbe_values(1);
         when pdm_constant.g_con_mae_bd_si5_failedscrlvl
         then
            l_mae_bd_si5_failedscrlvl := i_it_mae_values(pdm_constant.g_con_mae_bd_si5_failedscrlvl).pbe_values(1);
         when pdm_constant.g_con_mae_bd_si5_scrstate
         then
            l_mae_bd_si5_scrstate := i_it_mae_values(pdm_constant.g_con_mae_bd_si5_scrstate).pbe_values(1);
         when pdm_constant.g_con_mae_bd_si5_pseudoid
         then
            l_mae_bd_si5_pseudoid := i_it_mae_values(pdm_constant.g_con_mae_bd_si5_pseudoid).pbe_values(1);
         when pdm_constant.g_con_mae_bd_si5_bagstatus
         then
            l_mae_bd_si5_bagstatus := i_it_mae_values(pdm_constant.g_con_mae_bd_si5_bagstatus).pbe_values(1);
         when pdm_constant.g_con_mae_bd_sr1_scrproc_id
         then
            l_mae_bd_sr1_scrproc_id := i_it_mae_values(pdm_constant.g_con_mae_bd_sr1_scrproc_id).pbe_values(1);
         when pdm_constant.g_con_mae_bd_sr1_scrproc_name
         then
            l_mae_bd_sr1_scrproc_name := i_it_mae_values(pdm_constant.g_con_mae_bd_sr1_scrproc_name).pbe_values(1);
         when pdm_constant.g_con_mae_bd_sr1_screeninglvl
         then
            l_mae_bd_sr1_screeninglvl := i_it_mae_values(pdm_constant.g_con_mae_bd_sr1_screeninglvl).pbe_values(1);
         when pdm_constant.g_con_mae_bd_sr1_result
         then
            l_mae_bd_sr1_result := i_it_mae_values(pdm_constant.g_con_mae_bd_sr1_result).pbe_values(1);
         when pdm_constant.g_con_mae_bd_sr1_pseudoid
         then
            l_mae_bd_sr1_pseudoid := i_it_mae_values(pdm_constant.g_con_mae_bd_sr1_pseudoid).pbe_values(1);
         when pdm_constant.g_con_mae_bd_sr1_prstarttime
         then
            l_mae_bd_sr1_prstarttime := i_it_mae_values(pdm_constant.g_con_mae_bd_sr1_prstarttime).pbe_values(1);
         when pdm_constant.g_con_mae_bd_sr1_prendtime
         then
            l_mae_bd_sr1_prendtime := i_it_mae_values(pdm_constant.g_con_mae_bd_sr1_prendtime).pbe_values(1);
         when pdm_constant.g_con_mae_bd_sr2_scrproc_id
         then
            l_mae_bd_sr2_scrproc_id := i_it_mae_values(pdm_constant.g_con_mae_bd_sr2_scrproc_id).pbe_values(1);
         when pdm_constant.g_con_mae_bd_sr2_scrproc_name
         then
            l_mae_bd_sr2_scrproc_name := i_it_mae_values(pdm_constant.g_con_mae_bd_sr2_scrproc_name).pbe_values(1);
         when pdm_constant.g_con_mae_bd_sr2_screeninglvl
         then
            l_mae_bd_sr2_screeninglvl := i_it_mae_values(pdm_constant.g_con_mae_bd_sr2_screeninglvl).pbe_values(1);
         when pdm_constant.g_con_mae_bd_sr2_result
         then
            l_mae_bd_sr2_result := i_it_mae_values(pdm_constant.g_con_mae_bd_sr2_result).pbe_values(1);
         when pdm_constant.g_con_mae_bd_sr2_pseudoid
         then
            l_mae_bd_sr2_pseudoid := i_it_mae_values(pdm_constant.g_con_mae_bd_sr2_pseudoid).pbe_values(1);
         when pdm_constant.g_con_mae_bd_sr2_prstarttime
         then
            l_mae_bd_sr2_prstarttime := i_it_mae_values(pdm_constant.g_con_mae_bd_sr2_prstarttime).pbe_values(1);
         when pdm_constant.g_con_mae_bd_sr2_prendtime
         then
            l_mae_bd_sr2_prendtime := i_it_mae_values(pdm_constant.g_con_mae_bd_sr2_prendtime).pbe_values(1);
         when pdm_constant.g_con_mae_bd_sr3_scrproc_id
         then
            l_mae_bd_sr3_scrproc_id := i_it_mae_values(pdm_constant.g_con_mae_bd_sr3_scrproc_id).pbe_values(1);
         when pdm_constant.g_con_mae_bd_sr3_scrproc_name
         then
            l_mae_bd_sr3_scrproc_name := i_it_mae_values(pdm_constant.g_con_mae_bd_sr3_scrproc_name).pbe_values(1);
         when pdm_constant.g_con_mae_bd_sr3_screeninglvl
         then
            l_mae_bd_sr3_screeninglvl := i_it_mae_values(pdm_constant.g_con_mae_bd_sr3_screeninglvl).pbe_values(1);
         when pdm_constant.g_con_mae_bd_sr3_result
         then
            l_mae_bd_sr3_result := i_it_mae_values(pdm_constant.g_con_mae_bd_sr3_result).pbe_values(1);
         when pdm_constant.g_con_mae_bd_sr3_pseudoid
         then
            l_mae_bd_sr3_pseudoid := i_it_mae_values(pdm_constant.g_con_mae_bd_sr3_pseudoid).pbe_values(1);
         when pdm_constant.g_con_mae_bd_sr3_prstarttime
         then
            l_mae_bd_sr3_prstarttime := i_it_mae_values(pdm_constant.g_con_mae_bd_sr3_prstarttime).pbe_values(1);
         when pdm_constant.g_con_mae_bd_sr3_prendtime
         then
            l_mae_bd_sr3_prendtime := i_it_mae_values(pdm_constant.g_con_mae_bd_sr3_prendtime).pbe_values(1);
         when pdm_constant.g_con_mae_bd_sr4_scrproc_id
         then
            l_mae_bd_sr4_scrproc_id := i_it_mae_values(pdm_constant.g_con_mae_bd_sr4_scrproc_id).pbe_values(1);
         when pdm_constant.g_con_mae_bd_sr4_scrproc_name
         then
            l_mae_bd_sr4_scrproc_name := i_it_mae_values(pdm_constant.g_con_mae_bd_sr4_scrproc_name).pbe_values(1);
         when pdm_constant.g_con_mae_bd_sr4_screeninglvl
         then
            l_mae_bd_sr4_screeninglvl := i_it_mae_values(pdm_constant.g_con_mae_bd_sr4_screeninglvl).pbe_values(1);
         when pdm_constant.g_con_mae_bd_sr4_result
         then
            l_mae_bd_sr4_result := i_it_mae_values(pdm_constant.g_con_mae_bd_sr4_result).pbe_values(1);
         when pdm_constant.g_con_mae_bd_sr4_pseudoid
         then
            l_mae_bd_sr4_pseudoid := i_it_mae_values(pdm_constant.g_con_mae_bd_sr4_pseudoid).pbe_values(1);
         when pdm_constant.g_con_mae_bd_sr4_prstarttime
         then
            l_mae_bd_sr4_prstarttime := i_it_mae_values(pdm_constant.g_con_mae_bd_sr4_prstarttime).pbe_values(1);
         when pdm_constant.g_con_mae_bd_sr4_prendtime
         then
            l_mae_bd_sr4_prendtime := i_it_mae_values(pdm_constant.g_con_mae_bd_sr4_prendtime).pbe_values(1);
         when pdm_constant.g_con_mae_bd_sr5_scrproc_id
         then
            l_mae_bd_sr5_scrproc_id := i_it_mae_values(pdm_constant.g_con_mae_bd_sr5_scrproc_id).pbe_values(1);
         when pdm_constant.g_con_mae_bd_sr5_scrproc_name
         then
            l_mae_bd_sr5_scrproc_name := i_it_mae_values(pdm_constant.g_con_mae_bd_sr5_scrproc_name).pbe_values(1);
         when pdm_constant.g_con_mae_bd_sr5_screeninglvl
         then
            l_mae_bd_sr5_screeninglvl := i_it_mae_values(pdm_constant.g_con_mae_bd_sr5_screeninglvl).pbe_values(1);
         when pdm_constant.g_con_mae_bd_sr5_result
         then
            l_mae_bd_sr5_result := i_it_mae_values(pdm_constant.g_con_mae_bd_sr5_result).pbe_values(1);
         when pdm_constant.g_con_mae_bd_sr5_pseudoid
         then
            l_mae_bd_sr5_pseudoid := i_it_mae_values(pdm_constant.g_con_mae_bd_sr5_pseudoid).pbe_values(1);
         when pdm_constant.g_con_mae_bd_sr5_prstarttime
         then
            l_mae_bd_sr5_prstarttime := i_it_mae_values(pdm_constant.g_con_mae_bd_sr5_prstarttime).pbe_values(1);
         when pdm_constant.g_con_mae_bd_sr5_prendtime
         then
            l_mae_bd_sr5_prendtime := i_it_mae_values(pdm_constant.g_con_mae_bd_sr5_prendtime).pbe_values(1);
         when pdm_constant.g_con_mae_bd_loadsequencenr
         then
            l_mae_bd_loadsequencenr := i_it_mae_values(pdm_constant.g_con_mae_bd_loadsequencenr).pbe_values(1);
         when pdm_constant.g_con_mae_bd_ld_stowdeviceid
         then
            l_mae_bd_ld_stowdeviceid := i_it_mae_values(pdm_constant.g_con_mae_bd_ld_stowdeviceid).pbe_values(1);
         when pdm_constant.g_con_mae_bd_ld_loadlocation
         then
            l_mae_bd_ld_loadlocation := i_it_mae_values(pdm_constant.g_con_mae_bd_ld_loadlocation).pbe_values(1);
         when pdm_constant.g_con_mae_bd_ld_baggagetype
         then
            l_mae_bd_ld_baggagetype := i_it_mae_values(pdm_constant.g_con_mae_bd_ld_baggagetype).pbe_values(1);
         when pdm_constant.g_con_mae_bd_ld_classoftravel
         then
            l_mae_bd_ld_classoftravel := i_it_mae_values(pdm_constant.g_con_mae_bd_ld_classoftravel).pbe_values(1);
         when pdm_constant.g_con_mae_bd_ld_airportcode1
         then
            l_mae_bd_ld_airportcode1 := i_it_mae_values(pdm_constant.g_con_mae_bd_ld_airportcode1).pbe_values(1);
         when pdm_constant.g_con_mae_bd_ld_sealdcontainer
         then
            l_mae_bd_ld_sealdcontainer := i_it_mae_values(pdm_constant.g_con_mae_bd_ld_sealdcontainer).pbe_values(1);
         when pdm_constant.g_con_mae_bd_ld_conairlinecode
         then
            l_mae_bd_ld_conairlinecode := i_it_mae_values(pdm_constant.g_con_mae_bd_ld_conairlinecode).pbe_values(1);
         when pdm_constant.g_con_mae_bd_ld_conflightnr
         then
            l_mae_bd_ld_conflightnr := i_it_mae_values(pdm_constant.g_con_mae_bd_ld_conflightnr).pbe_values(1);
         when pdm_constant.g_con_mae_bd_ld_condepartdate
         then
            l_mae_bd_ld_condepartdate := i_it_mae_values(pdm_constant.g_con_mae_bd_ld_condepartdate).pbe_values(1);
         when pdm_constant.g_con_mae_bd_ld_airportcode2
         then
            l_mae_bd_ld_airportcode2 := i_it_mae_values(pdm_constant.g_con_mae_bd_ld_airportcode2).pbe_values(1);
         when pdm_constant.g_con_mae_bd_lde_uldtypecode
         then
            l_mae_bd_lde_uldtypecode := i_it_mae_values(pdm_constant.g_con_mae_bd_lde_uldtypecode).pbe_values(1);
         when pdm_constant.g_con_mae_bd_lde_uldserialno
         then
            l_mae_bd_lde_uldserialno := i_it_mae_values(pdm_constant.g_con_mae_bd_lde_uldserialno).pbe_values(1);
         when pdm_constant.g_con_mae_bd_lde_uldownercode
         then
            l_mae_bd_lde_uldownercode := i_it_mae_values(pdm_constant.g_con_mae_bd_lde_uldownercode).pbe_values(1);
         when pdm_constant.g_con_mae_bd_lde_loadseqno
         then
            l_mae_bd_lde_loadseqno := i_it_mae_values(pdm_constant.g_con_mae_bd_lde_loadseqno).pbe_values(1);
         when pdm_constant.g_con_mae_bd_lde_xpos
         then
            l_mae_bd_lde_xpos := i_it_mae_values(pdm_constant.g_con_mae_bd_lde_xpos).pbe_values(1);
         when pdm_constant.g_con_mae_bd_lde_ypos
         then
            l_mae_bd_lde_ypos := i_it_mae_values(pdm_constant.g_con_mae_bd_lde_ypos).pbe_values(1);
         when pdm_constant.g_con_mae_bd_lde_zpos
         then
            l_mae_bd_lde_zpos := i_it_mae_values(pdm_constant.g_con_mae_bd_lde_zpos).pbe_values(1);
         when pdm_constant.g_con_mae_bd_baggagestatuscode
         then
            l_mae_bd_baggagestatuscode := i_it_mae_values(pdm_constant.g_con_mae_bd_baggagestatuscode).pbe_values(1);
         when pdm_constant.g_con_mae_bd_baggagetagnumber
         then
            l_mae_bd_baggagetagnumber := i_it_mae_values(pdm_constant.g_con_mae_bd_baggagetagnumber).pbe_values(1);
         when pdm_constant.g_con_mae_bd_bie_instrtounload
         then
            l_mae_bd_bie_instrtounload := i_it_mae_values(pdm_constant.g_con_mae_bd_bie_instrtounload).pbe_values(1);
         when pdm_constant.g_con_mae_bd_secondarycode
         then
            l_mae_bd_secondarycode := i_it_mae_values(pdm_constant.g_con_mae_bd_secondarycode).pbe_values(1);
         when pdm_constant.g_con_mae_bd_agentid
         then
            l_mae_bd_agentid := i_it_mae_values(pdm_constant.g_con_mae_bd_agentid).pbe_values(1);
         when pdm_constant.g_con_mae_bd_scannerid
         then
            l_mae_bd_scannerid := i_it_mae_values(pdm_constant.g_con_mae_bd_scannerid).pbe_values(1);
         when pdm_constant.g_con_mae_bd_datetime
         then
            l_mae_bd_datetime := i_it_mae_values(pdm_constant.g_con_mae_bd_datetime).pbe_values(1);
         when pdm_constant.g_con_mae_bd_readinglocation
         then
            l_mae_bd_readinglocation := i_it_mae_values(pdm_constant.g_con_mae_bd_readinglocation).pbe_values(1);
         when pdm_constant.g_con_mae_bd_senttolocation
         then
            l_mae_bd_senttolocation := i_it_mae_values(pdm_constant.g_con_mae_bd_senttolocation).pbe_values(1);
         when pdm_constant.g_con_mae_bd_pie_curstationid
         then
            l_mae_bd_pie_curstationid := i_it_mae_values(pdm_constant.g_con_mae_bd_pie_curstationid).pbe_values(1);
         when pdm_constant.g_con_mae_bd_pie_handheldid
         then
            l_mae_bd_pie_handheldid := i_it_mae_values(pdm_constant.g_con_mae_bd_pie_handheldid).pbe_values(1);
         when pdm_constant.g_con_mae_bd_pie_curhandlarea
         then
            l_mae_bd_pie_curhandlarea := i_it_mae_values(pdm_constant.g_con_mae_bd_pie_curhandlarea).pbe_values(1);
         when pdm_constant.g_con_mae_bd_pie_xpos
         then
            l_mae_bd_pie_xpos := i_it_mae_values(pdm_constant.g_con_mae_bd_pie_xpos).pbe_values(1);
         when pdm_constant.g_con_mae_bd_pie_ypos
         then
            l_mae_bd_pie_ypos := i_it_mae_values(pdm_constant.g_con_mae_bd_pie_ypos).pbe_values(1);
         when pdm_constant.g_con_mae_bd_pie_storagelocid
         then
            l_mae_bd_pie_storagelocid := i_it_mae_values(pdm_constant.g_con_mae_bd_pie_storagelocid).pbe_values(1);
         when pdm_constant.g_con_mae_bd_pie_uldtype
         then
            l_mae_bd_pie_uldtype := i_it_mae_values(pdm_constant.g_con_mae_bd_pie_uldtype).pbe_values(1);
         when pdm_constant.g_con_mae_bd_pie_uldserial
         then
            l_mae_bd_pie_uldserial := i_it_mae_values(pdm_constant.g_con_mae_bd_pie_uldserial).pbe_values(1);
         when pdm_constant.g_con_mae_bd_pie_uldownercode
         then
            l_mae_bd_pie_uldownercode := i_it_mae_values(pdm_constant.g_con_mae_bd_pie_uldownercode).pbe_values(1);
         when pdm_constant.g_con_mae_bd_pie_executedtask
         then
            l_mae_bd_pie_executedtask := i_it_mae_values(pdm_constant.g_con_mae_bd_pie_executedtask).pbe_values(1);
         when pdm_constant.g_con_mae_bd_pie_deststationid
         then
            l_mae_bd_pie_deststationid := i_it_mae_values(pdm_constant.g_con_mae_bd_pie_deststationid).pbe_values(1);
         when pdm_constant.g_con_mae_bd_pie_desthandlarea
         then
            l_mae_bd_pie_desthandlarea := i_it_mae_values(pdm_constant.g_con_mae_bd_pie_desthandlarea).pbe_values(1);
         when pdm_constant.g_con_mae_bd_pie_assignedtask
         then
            l_mae_bd_pie_assignedtask := i_it_mae_values(pdm_constant.g_con_mae_bd_pie_assignedtask).pbe_values(1);
         when pdm_constant.g_con_mae_bd_pie_activeprocess
         then
            l_mae_bd_pie_activeprocess := i_it_mae_values(pdm_constant.g_con_mae_bd_pie_activeprocess).pbe_values(1);
         when pdm_constant.g_con_mae_bd_pie_batchid
         then
            l_mae_bd_pie_batchid := i_it_mae_values(pdm_constant.g_con_mae_bd_pie_batchid).pbe_values(1);
         when pdm_constant.g_con_mae_bd_pie_recogstate
         then
            l_mae_bd_pie_recogstate := i_it_mae_values(pdm_constant.g_con_mae_bd_pie_recogstate).pbe_values(1);
         when pdm_constant.g_con_mae_bd_pie_idstate
         then
            l_mae_bd_pie_idstate := i_it_mae_values(pdm_constant.g_con_mae_bd_pie_idstate).pbe_values(1);
         when pdm_constant.g_con_mae_bd_pie_idreason
         then
            l_mae_bd_pie_idreason := i_it_mae_values(pdm_constant.g_con_mae_bd_pie_idreason).pbe_values(1);
         when pdm_constant.g_con_mae_bd_pie_lasterror
         then
            l_mae_bd_pie_lasterror := i_it_mae_values(pdm_constant.g_con_mae_bd_pie_lasterror).pbe_values(1);
         when pdm_constant.g_con_mae_bd_pie_manualidtask
         then
            l_mae_bd_pie_manualidtask := i_it_mae_values(pdm_constant.g_con_mae_bd_pie_manualidtask).pbe_values(1);
         when pdm_constant.g_con_mae_bd_pie_opcontraction
         then
            l_mae_bd_pie_opcontraction := i_it_mae_values(pdm_constant.g_con_mae_bd_pie_opcontraction).pbe_values(1);
         when pdm_constant.g_con_mae_bd_pie_opcontrmsg
         then
            l_mae_bd_pie_opcontrmsg := i_it_mae_values(pdm_constant.g_con_mae_bd_pie_opcontrmsg).pbe_values(1);
         when pdm_constant.g_con_mae_bd_pie_qualstate
         then
            l_mae_bd_pie_qualstate := i_it_mae_values(pdm_constant.g_con_mae_bd_pie_qualstate).pbe_values(1);
         when pdm_constant.g_con_mae_bd_pie_fb_timeliness
         then
            l_mae_bd_pie_fb_timeliness := i_it_mae_values(pdm_constant.g_con_mae_bd_pie_fb_timeliness).pbe_values(1);
         when pdm_constant.g_con_mae_bd_pie_b_timeliness
         then
            l_mae_bd_pie_b_timeliness := i_it_mae_values(pdm_constant.g_con_mae_bd_pie_b_timeliness).pbe_values(1);
         when pdm_constant.g_con_mae_bd_pie_sysauthtoload
         then
            l_mae_bd_pie_sysauthtoload := i_it_mae_values(pdm_constant.g_con_mae_bd_pie_sysauthtoload).pbe_values(1);
         when pdm_constant.g_con_mae_bd_pie_handler
         then
            l_mae_bd_pie_handler := i_it_mae_values(pdm_constant.g_con_mae_bd_pie_handler).pbe_values(1);
         when pdm_constant.g_con_mae_bd_pie_airline
         then
            l_mae_bd_pie_airline := i_it_mae_values(pdm_constant.g_con_mae_bd_pie_airline).pbe_values(1);
         when pdm_constant.g_con_mae_bd_pie_operatorid
         then
            l_mae_bd_pie_operatorid := i_it_mae_values(pdm_constant.g_con_mae_bd_pie_operatorid).pbe_values(1);
         when pdm_constant.g_con_mae_bd_pie_operatorhndlr
         then
            l_mae_bd_pie_operatorhndlr := i_it_mae_values(pdm_constant.g_con_mae_bd_pie_operatorhndlr).pbe_values(1);
         when pdm_constant.g_con_mae_bd_pie_si_ppiname
         then
            l_mae_bd_pie_si_ppiname := i_it_mae_values(pdm_constant.g_con_mae_bd_pie_si_ppiname).pbe_values(1);
         when pdm_constant.g_con_mae_bd_pie_si_prodname
         then
            l_mae_bd_pie_si_prodname := i_it_mae_values(pdm_constant.g_con_mae_bd_pie_si_prodname).pbe_values(1);
         when pdm_constant.g_con_mae_bd_pie_ar_cpdname
         then
            l_mae_bd_pie_ar_cpdname := i_it_mae_values(pdm_constant.g_con_mae_bd_pie_ar_cpdname).pbe_values(1);
         when pdm_constant.g_con_mae_bd_pie_ar_ppi_name
         then
            l_mae_bd_pie_ar_ppi_name := i_it_mae_values(pdm_constant.g_con_mae_bd_pie_ar_ppi_name).pbe_values(1);
         when pdm_constant.g_con_mae_bd_pie_ar_ppi_versn
         then
            l_mae_bd_pie_ar_ppi_versn := i_it_mae_values(pdm_constant.g_con_mae_bd_pie_ar_ppi_versn).pbe_values(1);
         when pdm_constant.g_con_mae_bd_pie_ar_prodefname
         then
            l_mae_bd_pie_ar_prodefname := i_it_mae_values(pdm_constant.g_con_mae_bd_pie_ar_prodefname).pbe_values(1);
         when pdm_constant.g_con_mae_bd_pie_ar_actname
         then
            l_mae_bd_pie_ar_actname := i_it_mae_values(pdm_constant.g_con_mae_bd_pie_ar_actname).pbe_values(1);
         when pdm_constant.g_con_mae_bd_ohh_teletypecode
         then
            l_mae_bd_ohh_teletypecode := i_it_mae_values(pdm_constant.g_con_mae_bd_ohh_teletypecode).pbe_values(1);
         when pdm_constant.g_con_mae_bd_ohh_messageorig
         then
            l_mae_bd_ohh_messageorig := i_it_mae_values(pdm_constant.g_con_mae_bd_ohh_messageorig).pbe_values(1);
         when pdm_constant.g_con_mae_bd_ohh_timerefgroup
         then
            l_mae_bd_ohh_timerefgroup := i_it_mae_values(pdm_constant.g_con_mae_bd_ohh_timerefgroup).pbe_values(1);
         when pdm_constant.g_con_mae_bd_ohh_filereference
         then
            l_mae_bd_ohh_filereference := i_it_mae_values(pdm_constant.g_con_mae_bd_ohh_filereference).pbe_values(1);
         when pdm_constant.g_con_mae_bd_ohd_lpc
         then
            l_mae_bd_ohd_lpc := i_it_mae_values(pdm_constant.g_con_mae_bd_ohd_lpc).pbe_values(1);
         when pdm_constant.g_con_mae_bd_ohd_lpc_ext
         then
            l_mae_bd_ohd_lpc_ext := i_it_mae_values(pdm_constant.g_con_mae_bd_ohd_lpc_ext).pbe_values(1);
         when pdm_constant.g_con_mae_bd_ohd_bagcolour
         then
            l_mae_bd_ohd_bagcolour := i_it_mae_values(pdm_constant.g_con_mae_bd_ohd_bagcolour).pbe_values(1);
         when pdm_constant.g_con_mae_bd_ohd_bagtypecode
         then
            l_mae_bd_ohd_bagtypecode := i_it_mae_values(pdm_constant.g_con_mae_bd_ohd_bagtypecode).pbe_values(1);
         when pdm_constant.g_con_mae_bd_ohd_bagbrandname
         then
            l_mae_bd_ohd_bagbrandname := i_it_mae_values(pdm_constant.g_con_mae_bd_ohd_bagbrandname).pbe_values(1);
         when pdm_constant.g_con_mae_bd_ohd_bagmaterial
         then
            l_mae_bd_ohd_bagmaterial := i_it_mae_values(pdm_constant.g_con_mae_bd_ohd_bagmaterial).pbe_values(1);
         when pdm_constant.g_con_mae_bd_ohd_nm1_surname
         then
            l_mae_bd_ohd_nm1_surname := i_it_mae_values(pdm_constant.g_con_mae_bd_ohd_nm1_surname).pbe_values(1);
         when pdm_constant.g_con_mae_bd_ohd_nm1_initials
         then
            l_mae_bd_ohd_nm1_initials := i_it_mae_values(pdm_constant.g_con_mae_bd_ohd_nm1_initials).pbe_values(1);
         when pdm_constant.g_con_mae_bd_ohd_nm2_surname
         then
            l_mae_bd_ohd_nm2_surname := i_it_mae_values(pdm_constant.g_con_mae_bd_ohd_nm2_surname).pbe_values(1);
         when pdm_constant.g_con_mae_bd_ohd_nm2_initials
         then
            l_mae_bd_ohd_nm2_initials := i_it_mae_values(pdm_constant.g_con_mae_bd_ohd_nm2_initials).pbe_values(1);
         when pdm_constant.g_con_mae_bd_ohd_nm3_surname
         then
            l_mae_bd_ohd_nm3_surname := i_it_mae_values(pdm_constant.g_con_mae_bd_ohd_nm3_surname).pbe_values(1);
         when pdm_constant.g_con_mae_bd_ohd_nm3_initials
         then
            l_mae_bd_ohd_nm3_initials := i_it_mae_values(pdm_constant.g_con_mae_bd_ohd_nm3_initials).pbe_values(1);
         when pdm_constant.g_con_mae_bd_ohd_airline
         then
            l_mae_bd_ohd_airline := i_it_mae_values(pdm_constant.g_con_mae_bd_ohd_airline).pbe_values(1);
         when pdm_constant.g_con_mae_bd_ohd_flightnumber
         then
            l_mae_bd_ohd_flightnumber := i_it_mae_values(pdm_constant.g_con_mae_bd_ohd_flightnumber).pbe_values(1);
         when pdm_constant.g_con_mae_bd_ohd_date
         then
            l_mae_bd_ohd_date := i_it_mae_values(pdm_constant.g_con_mae_bd_ohd_date).pbe_values(1);
         when pdm_constant.g_con_mae_bd_ohd_freeforminfo
         then
            l_mae_bd_ohd_freeforminfo := i_it_mae_values(pdm_constant.g_con_mae_bd_ohd_freeforminfo).pbe_values(1);
         when pdm_constant.g_con_mae_bd_ohe_passengeraddr
         then
            l_mae_bd_ohe_passengeraddr := i_it_mae_values(pdm_constant.g_con_mae_bd_ohe_passengeraddr).pbe_values(1);
         when pdm_constant.g_con_mae_bd_ohe_freqtravidnum
         then
            l_mae_bd_ohe_freqtravidnum := i_it_mae_values(pdm_constant.g_con_mae_bd_ohe_freqtravidnum).pbe_values(1);
         when pdm_constant.g_con_mae_bd_ohe_tierident
         then
            l_mae_bd_ohe_tierident := i_it_mae_values(pdm_constant.g_con_mae_bd_ohe_tierident).pbe_values(1);
         when pdm_constant.g_con_mae_bd_scantimestamp
         then
            l_mae_bd_scantimestamp := i_it_mae_values(pdm_constant.g_con_mae_bd_scantimestamp).pbe_values(1);
         when pdm_constant.g_con_mae_bd_scanlocation
         then
            l_mae_bd_scanlocation := i_it_mae_values(pdm_constant.g_con_mae_bd_scanlocation).pbe_values(1);
         when pdm_constant.g_con_mae_bd_scanresult
         then
            l_mae_bd_scanresult := i_it_mae_values(pdm_constant.g_con_mae_bd_scanresult).pbe_values(1);
         else
            null;
         end case;
         l_attr := i_it_mae_values.next(l_attr);
      end loop;

      
      if l_mae_bd_ifie_scheddoa   is not null
      or l_mae_bd_ifie_oss_status is not null
      then
         l_ind_inbflightinfoext := cmn_constant.g_con_yesno_yes;
      end if;

      if l_mae_bd_checkinlocid    is not null
      or l_mae_bd_checkinlocdesc  is not null
      or l_mae_bd_checkindatetime is not null
      or l_mae_bd_carriagemedium  is not null
      or l_mae_bd_transportid     is not null
      then
         l_ind_remotecheckindetails := cmn_constant.g_con_yesno_yes;
      end if;

      if l_mae_bd_authtoload        is not null
      or l_mae_bd_seatnumber        is not null
      or l_mae_bd_passstatus        is not null
      or l_mae_bd_sequencenumber    is not null
      or l_mae_bd_securitynumber    is not null
      or l_mae_bd_passprofilests    is not null
      or l_mae_bd_authtotransport   is not null
      or l_mae_bd_brd_baggagestatus is not null
      then
         l_ind_bagreconciledata := cmn_constant.g_con_yesno_yes;
      end if;

      if l_mae_bd_instruction       is not null
      or l_mae_bd_bss_baggagestatus is not null
      or l_mae_bd_resultreason      is not null
      or l_mae_bd_securitymethod    is not null
      or l_mae_bd_autograph         is not null
      or l_mae_bd_freetext          is not null
      then
         l_ind_bagsecscreening := cmn_constant.g_con_yesno_yes;
      end if;

      if l_mae_bd_si1_scrproc_id is not null
      or l_mae_bd_si2_scrproc_id is not null
      or l_mae_bd_si3_scrproc_id is not null
      or l_mae_bd_si4_scrproc_id is not null
      or l_mae_bd_si5_scrproc_id is not null
      or l_mae_bd_sr1_scrproc_id is not null
      or l_mae_bd_sr2_scrproc_id is not null
      or l_mae_bd_sr3_scrproc_id is not null
      or l_mae_bd_sr4_scrproc_id is not null
      or l_mae_bd_sr5_scrproc_id is not null
      then
         l_ind_bagsecscreeningext := cmn_constant.g_con_yesno_yes;
      end if;

      if l_mae_bd_ld_stowdeviceid   is not null
      or l_mae_bd_ld_loadlocation   is not null
      or l_mae_bd_ld_baggagetype    is not null
      or l_mae_bd_ld_classoftravel  is not null
      or l_mae_bd_ld_airportcode1   is not null
      or l_mae_bd_ld_sealdcontainer is not null
      or l_mae_bd_ld_conairlinecode is not null
      or l_mae_bd_ld_conflightnr    is not null
      or l_mae_bd_ld_condepartdate  is not null
      or l_mae_bd_ld_airportcode2   is not null
      then
         l_ind_loadingdata := cmn_constant.g_con_yesno_yes;
      end if;

      if l_mae_bd_lde_xpos  is not null
      or l_mae_bd_lde_ypos  is not null
      or l_mae_bd_lde_zpos  is not null
      then
         l_ind_loadingdataext := cmn_constant.g_con_yesno_yes;
      end if;

      if l_mae_bd_agentid         is not null
      or l_mae_bd_datetime        is not null
      or l_mae_bd_readinglocation is not null
      or l_mae_bd_scannerid       is not null
      or l_mae_bd_secondarycode   is not null
      or l_mae_bd_senttolocation  is not null
      then
         l_ind_processinginfo := cmn_constant.g_con_yesno_yes;
      end if;

      if l_mae_bd_pie_xpos         is not null
      or l_mae_bd_pie_storagelocid is not null
      then
         l_ind_currstorageloc := cmn_constant.g_con_yesno_yes;
      end if;

      if l_ind_currstorageloc = cmn_constant.g_con_yesno_yes
      or l_mae_bd_pie_curstationid  is not null
      or l_mae_bd_pie_handheldid    is not null
      or l_mae_bd_pie_curhandlarea  is not null
      or l_mae_bd_pie_executedtask  is not null
      or l_mae_bd_pie_deststationid is not null
      or l_mae_bd_pie_desthandlarea is not null
      or l_mae_bd_pie_assignedtask  is not null
      or l_mae_bd_pie_handler       is not null
      or l_mae_bd_pie_fb_timeliness is not null
      or l_mae_bd_pie_b_timeliness  is not null
      or l_mae_bd_pie_activeprocess is not null
      or l_mae_bd_pie_batchid       is not null
      or l_mae_bd_pie_recogstate    is not null
      or l_mae_bd_pie_idstate       is not null
      or l_mae_bd_pie_idreason      is not null
      or l_mae_bd_pie_lasterror     is not null
      or l_mae_bd_pie_manualidtask  is not null
      or l_mae_bd_pie_opcontraction is not null
      or l_mae_bd_pie_opcontrmsg    is not null
      or l_mae_bd_pie_airline       is not null
      or l_mae_bd_pie_operatorid    is not null
      or l_mae_bd_pie_operatorhndlr is not null
      or l_mae_bd_pie_sysauthtoload is not null
      or l_mae_bd_pie_si_ppiname    is not null
      or l_mae_bd_pie_ar_cpdname    is not null
      then
         l_ind_processinginfoext := cmn_constant.g_con_yesno_yes;
         
         if l_mae_bd_pie_deststationid is not null
         then
            
            for l_station in 1 .. i_it_mae_values(pdm_constant.g_con_mae_bd_pie_deststationid).pbe_values.count
            loop
               select xmlconcat
                         ( l_xml_destinationstationid_all
                         , xmlelement
                              ( "DestinationStationID"
                              , i_it_mae_values(pdm_constant.g_con_mae_bd_pie_deststationid).pbe_values(l_station)
                              )
                         )
               into   l_xml_destinationstationid_all
               from   dual;
            end loop;
         end if;

         if l_mae_bd_pie_desthandlarea is not null
         then
            for l_handlingarea in 1 .. i_it_mae_values(pdm_constant.g_con_mae_bd_pie_desthandlarea).pbe_values.count
            loop
               select xmlconcat
                         ( l_xml_destinationhdlareaid_all
                         , xmlelement
                              ( "DestinationHandlingAreaID"
                              , i_it_mae_values(pdm_constant.g_con_mae_bd_pie_desthandlarea).pbe_values(l_handlingarea)
                              )
                         )
               into   l_xml_destinationhdlareaid_all
               from   dual;
            end loop;
         end if;
      end if;

      if l_mae_bd_handlingterminal  is not null
      or l_mae_bd_handlingbayorpier is not null
      or l_mae_bd_handlinggate      is not null
      then
         l_ind_handlinglocation := cmn_constant.g_con_yesno_yes;
      end if;

      if l_mae_bd_piecesorweightind is not null
      or l_mae_bd_numberofchecked   is not null
      or l_mae_bd_checkedweight     is not null
      or l_mae_bd_uncheckedweight   is not null
      or l_mae_bd_unit              is not null
      or l_mae_bd_length            is not null
      or l_mae_bd_width             is not null
      or l_mae_bd_height            is not null
      or l_mae_bd_bagtypecode       is not null
      then
         l_ind_baggagedetails := cmn_constant.g_con_yesno_yes;
      end if;

      if l_mae_bd_earliestdelivmom  is not null
      or l_mae_bd_latestdeliverymom is not null
      or l_mae_bd_addressorlocdesc  is not null
      then
         l_ind_groundtransport := cmn_constant.g_con_yesno_yes;
      end if;

      if l_mae_bd_ohh_filereference is not null
      or l_mae_bd_ohh_messageorig   is not null
      or l_mae_bd_ohh_teletypecode  is not null
      or l_mae_bd_ohh_timerefgroup  is not null
      then
         l_ind_ohdheader := cmn_constant.g_con_yesno_yes;
      end if;

      if i_it_mae_values.exists(pdm_constant.g_con_mae_bd_ohd_bc1_category)
      or i_it_mae_values.exists(pdm_constant.g_con_mae_bd_ohd_bc1_desc)
      or i_it_mae_values.exists(pdm_constant.g_con_mae_bd_ohd_bc2_category)
      or i_it_mae_values.exists(pdm_constant.g_con_mae_bd_ohd_bc2_desc)
      or i_it_mae_values.exists(pdm_constant.g_con_mae_bd_ohd_bc3_category)
      or i_it_mae_values.exists(pdm_constant.g_con_mae_bd_ohd_bc3_desc)
      or i_it_mae_values.exists(pdm_constant.g_con_mae_bd_ohd_bc4_category)
      or i_it_mae_values.exists(pdm_constant.g_con_mae_bd_ohd_bc4_desc)
      or i_it_mae_values.exists(pdm_constant.g_con_mae_bd_ohd_bc5_category)
      or i_it_mae_values.exists(pdm_constant.g_con_mae_bd_ohd_bc5_desc)
      or i_it_mae_values.exists(pdm_constant.g_con_mae_bd_ohd_bc6_category)
      or i_it_mae_values.exists(pdm_constant.g_con_mae_bd_ohd_bc6_desc)
      or i_it_mae_values.exists(pdm_constant.g_con_mae_bd_ohd_bc7_category)
      or i_it_mae_values.exists(pdm_constant.g_con_mae_bd_ohd_bc7_desc)
      or i_it_mae_values.exists(pdm_constant.g_con_mae_bd_ohd_bc8_category)
      or i_it_mae_values.exists(pdm_constant.g_con_mae_bd_ohd_bc8_desc)
      or i_it_mae_values.exists(pdm_constant.g_con_mae_bd_ohd_bc9_category)
      or i_it_mae_values.exists(pdm_constant.g_con_mae_bd_ohd_bc9_desc)
      or i_it_mae_values.exists(pdm_constant.g_con_mae_bd_ohd_bc10_category)
      or i_it_mae_values.exists(pdm_constant.g_con_mae_bd_ohd_bc10_desc)
      or i_it_mae_values.exists(pdm_constant.g_con_mae_bd_ohd_bc11_category)
      or i_it_mae_values.exists(pdm_constant.g_con_mae_bd_ohd_bc11_desc)
      or i_it_mae_values.exists(pdm_constant.g_con_mae_bd_ohd_bc12_category)
      or i_it_mae_values.exists(pdm_constant.g_con_mae_bd_ohd_bc12_desc)
      then
         l_ind_ohddatabagcontents := cmn_constant.g_con_yesno_yes;
      end if;

      if l_mae_bd_ohd_nm1_initials is not null
      or l_mae_bd_ohd_nm1_surname  is not null
      then
         l_ind_ohddatanames1 := cmn_constant.g_con_yesno_yes;
      end if;

      if l_mae_bd_ohd_nm2_initials is not null
      or l_mae_bd_ohd_nm2_surname  is not null
      then
         l_ind_ohddatanames2 := cmn_constant.g_con_yesno_yes;
      end if;

      if l_mae_bd_ohd_nm3_initials is not null
      or l_mae_bd_ohd_nm3_surname  is not null
      then
         l_ind_ohddatanames3 := cmn_constant.g_con_yesno_yes;
      end if;

      if i_it_mae_values.exists(pdm_constant.g_con_mae_bd_ohd_airportcode)
      then
         
         select  xmlelement( "Routing"
                           , xmlagg( xmlelement( "AirportCode", column_value))
                           )
         into    l_xml_airportcodedata
         from    table( i_it_mae_values(pdm_constant.g_con_mae_bd_ohd_airportcode).pbe_values);
      end if;

      if l_mae_bd_ohd_bagbrandname is not null
      or l_mae_bd_ohd_bagcolour    is not null
      or l_mae_bd_ohd_bagmaterial  is not null
      or l_mae_bd_ohd_lpc          is not null
      or l_mae_bd_ohd_lpc_ext      is not null
      or l_mae_bd_ohd_bagtypecode  is not null
      or l_mae_bd_ohd_airline      is not null
      or l_mae_bd_ohd_date         is not null
      or l_mae_bd_ohd_flightnumber is not null
      or l_mae_bd_ohd_freeforminfo is not null
      or l_xml_airportcodedata     is not null
      or l_ind_ohddatabagcontents  =  cmn_constant.g_con_yesno_yes
      or l_ind_ohddatanames1       =  cmn_constant.g_con_yesno_yes
      or l_ind_ohddatanames2       =  cmn_constant.g_con_yesno_yes
      or l_ind_ohddatanames3       =  cmn_constant.g_con_yesno_yes
      then
         l_ind_ohddata := cmn_constant.g_con_yesno_yes;
      end if;

      if l_ind_ohdheader = cmn_constant.g_con_yesno_yes
      or l_ind_ohddata   = cmn_constant.g_con_yesno_yes
      then
         l_ind_onhandbagsummary := cmn_constant.g_con_yesno_yes;
      end if;

      if l_mae_bd_ohe_freqtravidnum is not null
      or l_mae_bd_ohe_tierident     is not null
      or l_mae_bd_ohe_passengeraddr is not null
      then
         l_ind_onhandbagsumext := cmn_constant.g_con_yesno_yes;
      end if;

      
      if i_it_mae_values.exists(pdm_constant.g_con_mae_bd_addgivennames)
      then
         select  xmlagg( xmlelement( "AdditionalGivenNames"
                                   , column_value
                                   )
                       )
         into    l_xml_passengernames
         from    table( i_it_mae_values(pdm_constant.g_con_mae_bd_addgivennames).pbe_values);
      end if;

      if i_it_mae_values.exists(pdm_constant.g_con_mae_bd_exceptiontype)
      then
         select  xmlagg( xmlelement( "BaggageExceptionData"
                                   , xmlelement( "ExceptionType", column_value)
                                   )
                       )
         into    l_xml_exceptiondata
         from    table( i_it_mae_values(pdm_constant.g_con_mae_bd_exceptiontype).pbe_values);
      end if;

      if i_it_mae_values.exists(pdm_constant.g_con_mae_bd_bede_excepttype)
      then
         select  xmlagg( xmlelement( "BaggageExceptionDataExtension"
                                   , xmlelement( "ExceptionType", column_value)
                                   )
                       )
         into    l_xml_bede_exceptiondata
         from    table( i_it_mae_values(pdm_constant.g_con_mae_bd_bede_excepttype).pbe_values);
      end if;

      
      if l_ind_ohddatabagcontents = cmn_constant.g_con_yesno_yes
      then
         
         l_mae_path_desc_pre  := substr(pdm_constant.g_con_mae_bd_ohd_bc1_desc
                                       ,1
                                       ,instr(pdm_constant.g_con_mae_bd_ohd_bc1_desc,'[',1,1)
                                       );
         l_mae_path_desc_post := substr(pdm_constant.g_con_mae_bd_ohd_bc1_desc
                                       ,instr(pdm_constant.g_con_mae_bd_ohd_bc1_desc,']',1,1)
                                       );
         l_mae_path_cat_pre   := substr(pdm_constant.g_con_mae_bd_ohd_bc1_category
                                       ,1
                                       ,instr(pdm_constant.g_con_mae_bd_ohd_bc1_category,'[',1,1)
                                       );
         l_mae_path_cat_post  := substr(pdm_constant.g_con_mae_bd_ohd_bc1_category
                                       ,instr(pdm_constant.g_con_mae_bd_ohd_bc1_category,']',1,1)
                                       );

         
         for l_bc_index in 1..12
         loop
            
            l_mae_path_desc := l_mae_path_desc_pre||to_char(l_bc_index)||l_mae_path_desc_post;
            l_mae_path_cat  := l_mae_path_cat_pre ||to_char(l_bc_index)||l_mae_path_cat_post;
            
            if  i_it_mae_values.exists(l_mae_path_desc)
            then
               select xmlagg( xmlelement( "Description"
                                         , column_value
                                         )
                            )
               into   l_xml_ohddatabagcontent_desc
               from   table( i_it_mae_values(l_mae_path_desc).pbe_values);
               
               
               select xmlconcat
                         ( l_xml_ohddatabagcontent_all
                         , xmlelement
                              ( "BagContent"
                              , xmlconcat
                                   ( xmlelement
                                        ( "Category"
                                        , i_it_mae_values(l_mae_path_cat).pbe_values(1)
                                        )
                                   , l_xml_ohddatabagcontent_desc
                                   )
                              )
                         )
               into   l_xml_ohddatabagcontent_all
               from   dual;

            end if;

         end loop;
         
         select xmlelement
                   ( "BagContents"
                   ,l_xml_ohddatabagcontent_all
                   )
         into   l_xml_ohddatabagcontents
         from   dual;

      end if;

      if i_it_mae_values.exists(pdm_constant.g_con_mae_bd_intairlinedata)
      then
         select  xmlagg( xmlelement( "InternalAirlineData"
                                   , column_value
                                   )
                       )
         into    l_xml_internalairlinedata
         from    table( i_it_mae_values(pdm_constant.g_con_mae_bd_intairlinedata).pbe_values);
      end if;

      select xmlconcat
                ( case when l_mae_bd_updatedindicator is not null
                  then
                     xmlelement( "UpdatedIndicator"
                               ,l_mae_bd_updatedindicator
                               )
                  end
                , case when l_mae_bd_baginfomsgident is not null
                  then
                     xmlelement( "BagInformationMessageIdentifier"
                               ,l_mae_bd_baginfomsgident
                               )
                  end
                , case when l_mae_bd_datadictversionnr is not null
                  then
                     xmlelement( "VersionAndSupplementaryData"
                               , xmlelement( "DataDictionaryVersionNumber"
                                           , l_mae_bd_datadictversionnr
                                           )
                               , case when l_mae_bd_baggagesourceind is not null
                                 then
                                    xmlelement( "BaggageSourceIndicator"
                                              , l_mae_bd_baggagesourceind
                                              )
                                 end
                               , case when l_mae_bd_airportcode is not null
                                 then
                                    xmlelement( "AirportCode"
                                              , l_mae_bd_airportcode
                                              )
                                 end
                               , case when l_mae_bd_partnumber is not null
                                 then
                                    xmlelement( "PartNumber"
                                              , l_mae_bd_partnumber
                                              )
                                 end
                               , case when l_mae_bd_messagerefnr is not null
                                 then
                                    xmlelement( "MessageReferenceNumber"
                                              , l_mae_bd_messagerefnr
                                              )
                                 end
                               , case when l_mae_bd_ackreq is not null
                                 then
                                    xmlelement( "AcknowledgementRequest"
                                              , l_mae_bd_ackreq
                                              )
                                 end
                               , case when l_mae_bd_encryption is not null
                                 then
                                    xmlelement( "Encryption"
                                              , l_mae_bd_encryption
                                              )
                                 end
                               )
                  end
                , case when l_mae_bd_oofi_airline is not null
                  then
                     xmlelement( "OperationalOutboundFlightInformation"
                               , xmlelement( "Flight"
                                           , xmlelement( "Airline"
                                                       , l_mae_bd_oofi_airline
                                                       )
                                           , xmlelement( "FlightNumber"
                                                       , l_mae_bd_oofi_flightnumber
                                                       )
                                           , xmlelement( "Date"
                                                       , l_mae_bd_oofi_date
                                                       )
                                           )
                               , case when l_mae_bd_oofi_airportcode is not null
                                 then
                                    xmlelement( "AirportCode"
                                              , l_mae_bd_oofi_airportcode
                                              )
                                 end
                               , case when l_mae_bd_oofi_classtravel is not null
                                 then
                                    xmlelement( "ClassOfTravel"
                                              , l_mae_bd_oofi_classtravel
                                              )
                                 end
                               )
                  end
                , case when l_mae_bd_ifi_airline is not null
                  then
                     xmlelement( "InboundFlightInformation"
                               , xmlelement( "Flight"
                                           , xmlelement( "Airline"
                                                       , l_mae_bd_ifi_airline
                                                       )
                                           , xmlelement( "FlightNumber"
                                                       , l_mae_bd_ifi_flightnumber
                                                       )
                                           , xmlelement( "Date"
                                                       , l_mae_bd_ifi_date
                                                       )
                                           )
                               , case when l_mae_bd_ifi_origairpcode is not null
                                 then
                                    xmlelement( "OriginatingAirportCode"
                                              , l_mae_bd_ifi_origairpcode
                                              )
                                 end
                               , case when l_mae_bd_ifi_classoftravel is not null
                                 then
                                    xmlelement( "ClassOfTravel"
                                              , l_mae_bd_ifi_classoftravel
                                              )
                                 end
                               )
                  end
                , case when l_ind_inbflightinfoext = cmn_constant.g_con_yesno_yes
                  then
                     xmlelement( "InboundFlightInformationExtension"
                               , case when l_mae_bd_ifie_scheddoa is not null
                                 then
                                    xmlelement( "ScheduledDateOfArrival"
                                              , l_mae_bd_ifie_scheddoa
                                              )
                                 end
                               , case when l_mae_bd_ifie_oss_status is not null
                                 then
                                    xmlelement( "OSS_Status"
                                              , l_mae_bd_ifie_oss_status
                                              )
                                 end
                               )
                  end
                
                , case when l_mae_bd_of1_airline is not null
                  then
                     xmlelement( "OnwardFlightInformation"
                               , xmlelement( "Flight"
                                           , xmlelement( "Airline"
                                                       , l_mae_bd_of1_airline
                                                       )
                                           , xmlelement( "FlightNumber"
                                                       , l_mae_bd_of1_flightnumber
                                                       )
                                           , xmlelement( "Date"
                                                       , l_mae_bd_of1_date
                                                       )
                                           )
                               , case when l_mae_bd_of1_airportcode is not null
                                 then
                                    xmlelement( "AirportCode"
                                              , l_mae_bd_of1_airportcode
                                              )
                                 end
                               , case when l_mae_bd_of1_classoftravel is not null
                                 then
                                    xmlelement( "ClassOfTravel"
                                              , l_mae_bd_of1_classoftravel
                                              )
                                 end
                               )
                  end
                , case when l_mae_bd_of2_airline is not null
                  then
                     xmlelement( "OnwardFlightInformation"
                               , xmlelement( "Flight"
                                           , xmlelement( "Airline"
                                                       , l_mae_bd_of2_airline
                                                       )
                                           , xmlelement( "FlightNumber"
                                                       , l_mae_bd_of2_flightnumber
                                                       )
                                           , xmlelement( "Date"
                                                       , l_mae_bd_of2_date
                                                       )
                                           )
                               , case when l_mae_bd_of2_airportcode is not null
                                 then
                                    xmlelement( "AirportCode"
                                              , l_mae_bd_of2_airportcode
                                              )
                                 end
                               , case when l_mae_bd_of2_classoftravel is not null
                                 then
                                    xmlelement( "ClassOfTravel"
                                              , l_mae_bd_of2_classoftravel
                                              )
                                 end
                               )
                  end
                , case when l_mae_bd_of3_airline is not null
                  then
                     xmlelement( "OnwardFlightInformation"
                               , xmlelement( "Flight"
                                           , xmlelement( "Airline"
                                                       , l_mae_bd_of3_airline
                                                       )
                                           , xmlelement( "FlightNumber"
                                                       , l_mae_bd_of3_flightnumber
                                                       )
                                           , xmlelement( "Date"
                                                       , l_mae_bd_of3_date
                                                       )
                                           )
                               , case when l_mae_bd_of3_airportcode is not null
                                 then
                                    xmlelement( "AirportCode"
                                              , l_mae_bd_of3_airportcode
                                              )
                                 end
                               , case when l_mae_bd_of3_classoftravel is not null
                                 then
                                    xmlelement( "ClassOfTravel"
                                              , l_mae_bd_of3_classoftravel
                                              )
                                 end
                               )
                  end
                , case when l_mae_bd_of4_airline is not null
                  then
                     xmlelement( "OnwardFlightInformation"
                               , xmlelement( "Flight"
                                           , xmlelement( "Airline"
                                                       , l_mae_bd_of4_airline
                                                       )
                                           , xmlelement( "FlightNumber"
                                                       , l_mae_bd_of4_flightnumber
                                                       )
                                           , xmlelement( "Date"
                                                       , l_mae_bd_of4_date
                                                       )
                                           )
                               , case when l_mae_bd_of4_airportcode is not null
                                 then
                                    xmlelement( "AirportCode"
                                              , l_mae_bd_of4_airportcode
                                              )
                                 end
                               , case when l_mae_bd_of4_classoftravel is not null
                                 then
                                    xmlelement( "ClassOfTravel"
                                              , l_mae_bd_of4_classoftravel
                                              )
                                 end
                               )
                  end
                , case when l_mae_bd_of5_airline is not null
                  then
                     xmlelement( "OnwardFlightInformation"
                               , xmlelement( "Flight"
                                           , xmlelement( "Airline"
                                                       , l_mae_bd_of5_airline
                                                       )
                                           , xmlelement( "FlightNumber"
                                                       , l_mae_bd_of5_flightnumber
                                                       )
                                           , xmlelement( "Date"
                                                       , l_mae_bd_of5_date
                                                       )
                                           )
                               , case when l_mae_bd_of5_airportcode is not null
                                 then
                                    xmlelement( "AirportCode"
                                              , l_mae_bd_of5_airportcode
                                              )
                                 end
                               , case when l_mae_bd_of5_classoftravel is not null
                                 then
                                    xmlelement( "ClassOfTravel"
                                              , l_mae_bd_of5_classoftravel
                                              )
                                 end
                               )
                  end
                , case when l_mae_bd_lpc1 is not null
                  then
                     xmlelement( "BaggageTagDetails"
                               , xmlelement( "BaggageTag"
                                           , xmlelement( "LPC"
                                                       , l_mae_bd_lpc1
                                                       )
                                           , case when l_mae_bd_lpc_extension1 is not null
                                             then
                                                xmlelement( "LPC_Extension"
                                                          , l_mae_bd_lpc_extension1
                                                          )
                                             end
                                           )
                               , case when l_mae_bd_lpc2 is not null
                                 then
                                    xmlelement( "BaggageTag"
                                              , xmlelement( "LPC"
                                                          , l_mae_bd_lpc2
                                                          )
                                              , case when l_mae_bd_lpc_extension2 is not null
                                                then
                                                   xmlelement( "LPC_Extension"
                                                             , l_mae_bd_lpc_extension2
                                                             )
                                                end
                                              )
                                 end
                               , case when l_mae_bd_lpc3 is not null
                                 then
                                    xmlelement( "BaggageTag"
                                              , xmlelement( "LPC"
                                                          , l_mae_bd_lpc3
                                                          )
                                              , case when l_mae_bd_lpc_extension3 is not null
                                                then
                                                   xmlelement( "LPC_Extension"
                                                             , l_mae_bd_lpc_extension3
                                                             )
                                                end
                                              )
                                 end
                               )
                  end
                , case when l_ind_remotecheckindetails = cmn_constant.g_con_yesno_yes
                  then
                     xmlelement( "RemoteCheckinDetails"
                               , case when l_mae_bd_checkinlocid is not null
                                 then
                                    xmlelement( "CheckInLocationIdentifier"
                                              , l_mae_bd_checkinlocid
                                              )
                                 end
                               , case when l_mae_bd_checkinlocdesc is not null
                                 then
                                    xmlelement( "CheckInLocationDescription"
                                              , l_mae_bd_checkinlocdesc
                                              )
                                 end
                               , case when l_mae_bd_checkindatetime is not null
                                 then
                                    xmlelement( "CheckInDateTime"
                                              , l_mae_bd_checkindatetime
                                              )
                                 end
                               , case when l_mae_bd_carriagemedium is not null
                                 then
                                    xmlelement( "CarriageMedium"
                                              , l_mae_bd_carriagemedium
                                              )
                                 end
                               , case when l_mae_bd_transportid is not null
                                 then
                                    xmlelement( "TransportID"
                                              , l_mae_bd_transportid
                                              )
                                 end
                               )
                  end
                , case when l_ind_bagreconciledata = cmn_constant.g_con_yesno_yes
                  then
                     xmlelement( "BaggageReconciliationData"
                               , case when l_mae_bd_authtoload is not null
                                 then
                                    xmlelement( "AuthorityToLoad"
                                              , l_mae_bd_authtoload
                                              )
                                 end
                               , case when l_mae_bd_seatnumber is not null
                                 then
                                    xmlelement( "SeatNumber"
                                              , l_mae_bd_seatnumber
                                              )
                                 end
                               , case when l_mae_bd_passstatus is not null
                                 then
                                    xmlelement( "PassengerStatus"
                                              , l_mae_bd_passstatus
                                              )
                                 end
                               , case when l_mae_bd_sequencenumber is not null
                                 then
                                    xmlelement( "SequenceNumber"
                                              , l_mae_bd_sequencenumber
                                              )
                                 end
                               , case when l_mae_bd_securitynumber is not null
                                 then
                                    xmlelement( "SecurityNumber"
                                              , l_mae_bd_securitynumber
                                              )
                                 end
                               , case when l_mae_bd_passprofilests is not null
                                 then
                                    xmlelement( "PassengerProfileStatus"
                                              , l_mae_bd_passprofilests
                                              )
                                 end
                               , case when l_mae_bd_authtotransport is not null
                                 then
                                    xmlelement( "AuthorityToTransport"
                                              , l_mae_bd_authtotransport
                                              )
                                 end
                               , case when l_mae_bd_brd_baggagestatus is not null
                                 then
                                    xmlelement( "BaggageStatus"
                                              , l_mae_bd_brd_baggagestatus
                                              )
                                 end
                               )
                  end
                , case when l_ind_handlinglocation = cmn_constant.g_con_yesno_yes
                  then
                     xmlelement( "HandlingLocation"
                               , case when l_mae_bd_handlingterminal is not null
                                 then
                                    xmlelement( "HandlingTerminal"
                                              , l_mae_bd_handlingterminal
                                              )
                                 end
                               , case when l_mae_bd_handlingbayorpier is not null
                                 then
                                    xmlelement( "HandlingBayOrPier"
                                              , l_mae_bd_handlingbayorpier
                                              )
                                 end
                               , case when l_mae_bd_handlinggate is not null
                                 then
                                    xmlelement( "HandlingGateOrStandOrClaimArea"
                                              , l_mae_bd_handlinggate
                                              )
                                 end
                               )
                  end
                , case when l_mae_bd_handlingbhs is not null
                  then
                     xmlelement( "HandlingLocationExtension"
                                , xmlelement( "HandlingBHS"
                                            , l_mae_bd_handlingbhs
                                            )
                                )
                  end
                , case when l_ind_baggagedetails = cmn_constant.g_con_yesno_yes
                  then
                     xmlelement( "BaggageDetails"
                               , case when l_mae_bd_piecesorweightind is not null
                                 then
                                    xmlelement( "PiecesOrWeightIndicator"
                                              , l_mae_bd_piecesorweightind
                                              )
                                 end
                               , case when l_mae_bd_numberofchecked is not null
                                 then
                                    xmlelement( "NumberOfChecked"
                                              , l_mae_bd_numberofchecked
                                              )
                                 end
                               , case when l_mae_bd_checkedweight is not null
                                 then
                                    xmlelement( "CheckedWeight"
                                              , l_mae_bd_checkedweight
                                              )
                                 end
                               , case when l_mae_bd_uncheckedweight is not null
                                 then
                                    xmlelement( "UncheckedWeight"
                                              , l_mae_bd_uncheckedweight
                                              )
                                 end
                               , case when l_mae_bd_unit is not null
                                 then
                                    xmlelement( "Unit"
                                              , l_mae_bd_unit
                                              )
                                 end
                               , case when l_mae_bd_length is not null
                                 then
                                    xmlelement( "Length"
                                              , l_mae_bd_length
                                              )
                                 end
                               , case when l_mae_bd_width is not null
                                 then
                                    xmlelement( "Width"
                                              , l_mae_bd_width
                                              )
                                 end
                               , case when l_mae_bd_height is not null
                                 then
                                    xmlelement( "Height"
                                              , l_mae_bd_height
                                              )
                                 end
                               , case when l_mae_bd_bagtypecode is not null
                                 then
                                    xmlelement( "BagTypeCode"
                                              , l_mae_bd_bagtypecode
                                              )
                                 end
                           )
                  end
                , case when l_mae_bd_physicalclass is not null
                  then
                     xmlelement( "BaggageDetailsExtension"
                               , xmlelement( "PhysicalClass"
                                           , l_mae_bd_physicalclass
                                           )
                               )
                  end
                , case when l_mae_bd_surname is not null
                  then
                     xmlelement( "PassengerName"
                               , xmlelement( "Surname"
                                           , l_mae_bd_surname
                                           )
                               , case when l_mae_bd_givenname is not null
                                 then
                                    xmlelement( "GivenName"
                                              , l_mae_bd_givenname
                                              )
                                 end
                               , case when l_mae_bd_nosamesurname is not null
                                 then
                                    xmlelement( "NoSameSurname"
                                              , l_mae_bd_nosamesurname
                                              )
                                 end
                               , l_xml_passengernames
                               )
                  end
                , case when l_ind_groundtransport = cmn_constant.g_con_yesno_yes
                  then
                     xmlelement( "GroundTransport"
                               , case when l_mae_bd_earliestdelivmom is not null
                                 then
                                    xmlelement( "EarliestDeliveryMoment"
                                              , l_mae_bd_earliestdelivmom
                                              )
                                 end
                               , case when l_mae_bd_latestdeliverymom is not null
                                 then
                                    xmlelement( "LatestDeliveryMoment"
                                              , l_mae_bd_latestdeliverymom
                                              )
                                 end
                               , case when l_mae_bd_addressorlocdesc is not null
                                 then
                                    xmlelement( "AddressOrLocationDescription"
                                              , l_mae_bd_addressorlocdesc
                                              )
                                 end
                               )
                  end
                , case when l_mae_bd_freqtravelleridnr is not null
                  then
                     xmlelement( "FrequentTravellerNumber"
                                , xmlelement( "FrequentTravellerIDNumber"
                                            , l_mae_bd_freqtravelleridnr
                                            )
                                , case when l_mae_bd_tieridentifier is not null
                                  then
                                     xmlelement( "TierIdentifier"
                                               , l_mae_bd_tieridentifier
                                               )
                                  end
                                )
                  end
                , case when l_mae_bd_corporgroupname is not null
                  then
                     xmlelement( "CorporateOrGroupName"
                               , l_mae_bd_corporgroupname
                               )
                  end
                , case when l_mae_bd_automatedpnraddr is not null
                  then
                     xmlelement( "AutomatedPNRAddress"
                               , l_mae_bd_automatedpnraddr
                               )
                  end
                , case when l_mae_bd_bagtagprinterid is not null
                  then
                     xmlelement( "BaggageTagPrinter"
                               , xmlelement( "BagTagPrinterID"
                                           , l_mae_bd_bagtagprinterid
                                           )
                               )
                  end
                , case when l_mae_bd_defaultprinterid is not null
                  then
                     xmlelement( "DefaultMessagePrinter"
                               , xmlelement( "DefaultPrinterID"
                                           , l_mae_bd_defaultprinterid
                                           )
                               )
                  end
                , l_xml_exceptiondata
                , l_xml_bede_exceptiondata
                , case when l_ind_bagsecscreening = cmn_constant.g_con_yesno_yes
                  then
                     xmlelement( "BaggageSecurityScreening"
                               , case when l_mae_bd_instruction is not null
                                 then
                                    xmlelement( "Instruction"
                                              , l_mae_bd_instruction
                                              )
                                 end
                               , case when l_mae_bd_bss_baggagestatus is not null
                                 then
                                    xmlelement( "BaggageStatus"
                                              , l_mae_bd_bss_baggagestatus
                                              )
                                 end
                               , case when l_mae_bd_resultreason is not null
                                 then
                                    xmlelement( "ResultReason"
                                              , l_mae_bd_resultreason
                                              )
                                 end
                               , case when l_mae_bd_securitymethod is not null
                                 then
                                    xmlelement( "SecurityMethod"
                                              , l_mae_bd_securitymethod
                                              )
                                 end
                               , case when l_mae_bd_autograph is not null
                                 then
                                    xmlelement( "Autograph"
                                              , l_mae_bd_autograph
                                              )
                                 end
                               , case when l_mae_bd_freetext is not null
                                 then
                                    xmlelement( "FreeText"
                                              , l_mae_bd_freetext
                                              )
                                 end
                               )
                  end
                , case when l_ind_bagsecscreeningext = cmn_constant.g_con_yesno_yes
                  then
                     xmlelement( "BaggageSecurityScreeningExtension"
                               , case when l_mae_bd_si1_scrproc_id is not null
                                 then
                                    xmlelement( "ScreeningInfo"
                                              , xmlelement( "ScreeningProcess"
                                                          , xmlelement( "ID"
                                                                      , l_mae_bd_si1_scrproc_id
                                                                      )
                                                          , case when l_mae_bd_si1_scrproc_name is not null
                                                            then
                                                               xmlelement( "Name"
                                                                         , l_mae_bd_si1_scrproc_name
                                                                         )
                                                            end
                                                          )
                                              , xmlelement( "RequiredScreeningLevel"
                                                          , l_mae_bd_si1_reqscrlvl
                                                          )
                                              , case when l_mae_bd_si1_reachedscrlvl is not null
                                                then
                                                   xmlelement( "ReachedScreeningLevel"
                                                             , l_mae_bd_si1_reachedscrlvl
                                                             )
                                                end
                                              , case when l_mae_bd_si1_failedscrlvl is not null
                                                then
                                                   xmlelement( "FailedScreeningLevel"
                                                             , l_mae_bd_si1_failedscrlvl
                                                             )
                                                end
                                              , case when l_mae_bd_si1_scrstate is not null
                                                then
                                                   xmlelement( "ScreeningState"
                                                             , l_mae_bd_si1_scrstate
                                                             )
                                                end
                                              , case when l_mae_bd_si1_pseudoid is not null
                                                then
                                                   xmlelement( "PseudoID"
                                                             , l_mae_bd_si1_pseudoid
                                                             )
                                                end
                                              , case when l_mae_bd_si1_bagstatus is not null
                                                then
                                                   xmlelement( "BagStatus"
                                                             , l_mae_bd_si1_bagstatus
                                                             )
                                                end
                                              )
                                 end
                               , case when l_mae_bd_si2_scrproc_id is not null
                                 then
                                    xmlelement( "ScreeningInfo"
                                              , xmlelement( "ScreeningProcess"
                                                          , xmlelement( "ID"
                                                                      , l_mae_bd_si2_scrproc_id
                                                                      )
                                                          , case when l_mae_bd_si2_scrproc_name is not null
                                                            then
                                                               xmlelement( "Name"
                                                                         , l_mae_bd_si2_scrproc_name
                                                                         )
                                                            end
                                                          )
                                              , xmlelement( "RequiredScreeningLevel"
                                                          , l_mae_bd_si2_reqscrlvl
                                                          )
                                              , case when l_mae_bd_si2_reachedscrlvl is not null
                                                then
                                                   xmlelement( "ReachedScreeningLevel"
                                                             , l_mae_bd_si2_reachedscrlvl
                                                             )
                                                end
                                              , case when l_mae_bd_si2_failedscrlvl is not null
                                                then
                                                   xmlelement( "FailedScreeningLevel"
                                                             , l_mae_bd_si2_failedscrlvl
                                                             )
                                                end
                                              , case when l_mae_bd_si2_scrstate is not null
                                                then
                                                   xmlelement( "ScreeningState"
                                                             , l_mae_bd_si2_scrstate
                                                             )
                                                end
                                              , case when l_mae_bd_si2_pseudoid is not null
                                                then
                                                   xmlelement( "PseudoID"
                                                             , l_mae_bd_si2_pseudoid
                                                             )
                                                end
                                              , case when l_mae_bd_si2_bagstatus is not null
                                                then
                                                   xmlelement( "BagStatus"
                                                             , l_mae_bd_si2_bagstatus
                                                             )
                                                end
                                              )
                                 end
                               , case when l_mae_bd_si3_scrproc_id is not null
                                 then
                                    xmlelement( "ScreeningInfo"
                                              , xmlelement( "ScreeningProcess"
                                                          , xmlelement( "ID"
                                                                      , l_mae_bd_si3_scrproc_id
                                                                      )
                                                          , case when l_mae_bd_si3_scrproc_name is not null
                                                            then
                                                               xmlelement( "Name"
                                                                         , l_mae_bd_si3_scrproc_name
                                                                         )
                                                            end
                                                          )
                                              , xmlelement( "RequiredScreeningLevel"
                                                          , l_mae_bd_si3_reqscrlvl
                                                          )
                                              , case when l_mae_bd_si3_reachedscrlvl is not null
                                                then
                                                   xmlelement( "ReachedScreeningLevel"
                                                             , l_mae_bd_si3_reachedscrlvl
                                                             )
                                                end
                                              , case when l_mae_bd_si3_failedscrlvl is not null
                                                then
                                                   xmlelement( "FailedScreeningLevel"
                                                             , l_mae_bd_si3_failedscrlvl
                                                             )
                                                end
                                              , case when l_mae_bd_si3_scrstate is not null
                                                then
                                                   xmlelement( "ScreeningState"
                                                             , l_mae_bd_si3_scrstate
                                                             )
                                                end
                                              , case when l_mae_bd_si3_pseudoid is not null
                                                then
                                                   xmlelement( "PseudoID"
                                                             , l_mae_bd_si3_pseudoid
                                                             )
                                                end
                                              , case when l_mae_bd_si3_bagstatus is not null
                                                then
                                                   xmlelement( "BagStatus"
                                                             , l_mae_bd_si3_bagstatus
                                                             )
                                                end
                                              )
                                 end
                               , case when l_mae_bd_si4_scrproc_id is not null
                                 then
                                    xmlelement( "ScreeningInfo"
                                              , xmlelement( "ScreeningProcess"
                                                          , xmlelement( "ID"
                                                                      , l_mae_bd_si4_scrproc_id
                                                                      )
                                                          , case when l_mae_bd_si4_scrproc_name is not null
                                                            then
                                                               xmlelement( "Name"
                                                                         , l_mae_bd_si4_scrproc_name
                                                                         )
                                                            end
                                                          )
                                              , xmlelement( "RequiredScreeningLevel"
                                                          , l_mae_bd_si4_reqscrlvl
                                                          )
                                              , case when l_mae_bd_si4_reachedscrlvl is not null
                                                then
                                                   xmlelement( "ReachedScreeningLevel"
                                                             , l_mae_bd_si4_reachedscrlvl
                                                             )
                                                end
                                              , case when l_mae_bd_si4_failedscrlvl is not null
                                                then
                                                   xmlelement( "FailedScreeningLevel"
                                                             , l_mae_bd_si4_failedscrlvl
                                                             )
                                                end
                                              , case when l_mae_bd_si4_scrstate is not null
                                                then
                                                   xmlelement( "ScreeningState"
                                                             , l_mae_bd_si4_scrstate
                                                             )
                                                end
                                              , case when l_mae_bd_si4_pseudoid is not null
                                                then
                                                   xmlelement( "PseudoID"
                                                             , l_mae_bd_si4_pseudoid
                                                             )
                                                end
                                              , case when l_mae_bd_si4_bagstatus is not null
                                                then
                                                   xmlelement( "BagStatus"
                                                             , l_mae_bd_si4_bagstatus
                                                             )
                                                end
                                              )
                                 end
                               , case when l_mae_bd_si5_scrproc_id is not null
                                 then
                                    xmlelement( "ScreeningInfo"
                                              , xmlelement( "ScreeningProcess"
                                                          , xmlelement( "ID"
                                                                      , l_mae_bd_si5_scrproc_id
                                                                      )
                                                          , case when l_mae_bd_si5_scrproc_name is not null
                                                            then
                                                               xmlelement( "Name"
                                                                         , l_mae_bd_si5_scrproc_name
                                                                         )
                                                            end
                                                          )
                                              , xmlelement( "RequiredScreeningLevel"
                                                          , l_mae_bd_si5_reqscrlvl
                                                          )
                                              , case when l_mae_bd_si5_reachedscrlvl is not null
                                                then
                                                   xmlelement( "ReachedScreeningLevel"
                                                             , l_mae_bd_si5_reachedscrlvl
                                                             )
                                                end
                                              , case when l_mae_bd_si5_failedscrlvl is not null
                                                then
                                                   xmlelement( "FailedScreeningLevel"
                                                             , l_mae_bd_si5_failedscrlvl
                                                             )
                                                end
                                              , case when l_mae_bd_si5_scrstate is not null
                                                then
                                                   xmlelement( "ScreeningState"
                                                             , l_mae_bd_si5_scrstate
                                                             )
                                                end
                                              , case when l_mae_bd_si5_pseudoid is not null
                                                then
                                                   xmlelement( "PseudoID"
                                                             , l_mae_bd_si5_pseudoid
                                                             )
                                                end
                                              , case when l_mae_bd_si5_bagstatus is not null
                                                then
                                                   xmlelement( "BagStatus"
                                                             , l_mae_bd_si5_bagstatus
                                                             )
                                                end
                                              )
                                 end
                               , case when l_mae_bd_sr1_scrproc_id is not null
                                 then
                                    xmlelement( "ScreeningResult"
                                              , xmlelement( "ScreeningProcess"
                                                          , xmlelement( "ID"
                                                                      , l_mae_bd_sr1_scrproc_id
                                                                      )
                                                          , case when l_mae_bd_sr1_scrproc_name is not null
                                                            then
                                                               xmlelement( "Name"
                                                                         , l_mae_bd_sr1_scrproc_name
                                                                         )
                                                            end
                                                          )
                                              , xmlelement( "ScreeningLevel"
                                                          , l_mae_bd_sr1_screeninglvl
                                                          )
                                              , xmlelement( "Result"
                                                          , l_mae_bd_sr1_result
                                                          )
                                             , case when l_mae_bd_sr1_pseudoid is not null
                                               then
                                                  xmlelement( "PseudoID"
                                                            , l_mae_bd_sr1_pseudoid
                                                            )
                                               end
                                             , case when l_mae_bd_sr1_prstarttime is not null
                                               then
                                                  xmlelement( "ProcessStartTime"
                                                            , l_mae_bd_sr1_prstarttime
                                                            )
                                               end
                                             , case when l_mae_bd_sr1_prendtime is not null
                                               then
                                                  xmlelement( "ProcessEndTime"
                                                            , l_mae_bd_sr1_prendtime
                                                            )
                                               end
                                              )
                                 end
                               , case when l_mae_bd_sr2_scrproc_id is not null
                                 then
                                    xmlelement( "ScreeningResult"
                                              , xmlelement( "ScreeningProcess"
                                                          , xmlelement( "ID"
                                                                      , l_mae_bd_sr2_scrproc_id
                                                                      )
                                                          , case when l_mae_bd_sr2_scrproc_name is not null
                                                            then
                                                               xmlelement( "Name"
                                                                         , l_mae_bd_sr2_scrproc_name
                                                                         )
                                                            end
                                                          )
                                              , xmlelement( "ScreeningLevel"
                                                          , l_mae_bd_sr2_screeninglvl
                                                          )
                                              , xmlelement( "Result"
                                                          , l_mae_bd_sr2_result
                                                          )
                                             , case when l_mae_bd_sr2_pseudoid is not null
                                               then
                                                  xmlelement( "PseudoID"
                                                            , l_mae_bd_sr2_pseudoid
                                                            )
                                               end
                                             , case when l_mae_bd_sr2_prstarttime is not null
                                               then
                                                  xmlelement( "ProcessStartTime"
                                                            , l_mae_bd_sr2_prstarttime
                                                            )
                                               end
                                             , case when l_mae_bd_sr2_prendtime is not null
                                               then
                                                  xmlelement( "ProcessEndTime"
                                                            , l_mae_bd_sr2_prendtime
                                                            )
                                               end
                                              )
                                 end
                               , case when l_mae_bd_sr3_scrproc_id is not null
                                 then
                                    xmlelement( "ScreeningResult"
                                              , xmlelement( "ScreeningProcess"
                                                          , xmlelement( "ID"
                                                                      , l_mae_bd_sr3_scrproc_id
                                                                      )
                                                          , case when l_mae_bd_sr3_scrproc_name is not null
                                                            then
                                                               xmlelement( "Name"
                                                                         , l_mae_bd_sr3_scrproc_name
                                                                         )
                                                            end
                                                          )
                                              , xmlelement( "ScreeningLevel"
                                                          , l_mae_bd_sr3_screeninglvl
                                                          )
                                              , xmlelement( "Result"
                                                          , l_mae_bd_sr3_result
                                                          )
                                             , case when l_mae_bd_sr3_pseudoid is not null
                                               then
                                                  xmlelement( "PseudoID"
                                                            , l_mae_bd_sr3_pseudoid
                                                            )
                                               end
                                             , case when l_mae_bd_sr3_prstarttime is not null
                                               then
                                                  xmlelement( "ProcessStartTime"
                                                            , l_mae_bd_sr3_prstarttime
                                                            )
                                               end
                                             , case when l_mae_bd_sr3_prendtime is not null
                                               then
                                                  xmlelement( "ProcessEndTime"
                                                            , l_mae_bd_sr3_prendtime
                                                            )
                                               end
                                              )
                                 end
                               , case when l_mae_bd_sr4_scrproc_id is not null
                                 then
                                    xmlelement( "ScreeningResult"
                                              , xmlelement( "ScreeningProcess"
                                                          , xmlelement( "ID"
                                                                      , l_mae_bd_sr4_scrproc_id
                                                                      )
                                                          , case when l_mae_bd_sr4_scrproc_name is not null
                                                            then
                                                               xmlelement( "Name"
                                                                         , l_mae_bd_sr4_scrproc_name
                                                                         )
                                                            end
                                                          )
                                              , xmlelement( "ScreeningLevel"
                                                          , l_mae_bd_sr4_screeninglvl
                                                          )
                                              , xmlelement( "Result"
                                                          , l_mae_bd_sr4_result
                                                          )
                                             , case when l_mae_bd_sr4_pseudoid is not null
                                               then
                                                  xmlelement( "PseudoID"
                                                            , l_mae_bd_sr4_pseudoid
                                                            )
                                               end
                                             , case when l_mae_bd_sr4_prstarttime is not null
                                               then
                                                  xmlelement( "ProcessStartTime"
                                                            , l_mae_bd_sr4_prstarttime
                                                            )
                                               end
                                             , case when l_mae_bd_sr4_prendtime is not null
                                               then
                                                  xmlelement( "ProcessEndTime"
                                                            , l_mae_bd_sr4_prendtime
                                                            )
                                               end
                                              )
                                 end
                               , case when l_mae_bd_sr5_scrproc_id is not null
                                 then
                                    xmlelement( "ScreeningResult"
                                              , xmlelement( "ScreeningProcess"
                                                          , xmlelement( "ID"
                                                                      , l_mae_bd_sr5_scrproc_id
                                                                      )
                                                          , case when l_mae_bd_sr5_scrproc_name is not null
                                                            then
                                                               xmlelement( "Name"
                                                                         , l_mae_bd_sr5_scrproc_name
                                                                         )
                                                            end
                                                          )
                                              , xmlelement( "ScreeningLevel"
                                                          , l_mae_bd_sr5_screeninglvl
                                                          )
                                              , xmlelement( "Result"
                                                          , l_mae_bd_sr5_result
                                                          )
                                             , case when l_mae_bd_sr5_pseudoid is not null
                                               then
                                                  xmlelement( "PseudoID"
                                                            , l_mae_bd_sr5_pseudoid
                                                            )
                                               end
                                             , case when l_mae_bd_sr5_prstarttime is not null
                                               then
                                                  xmlelement( "ProcessStartTime"
                                                            , l_mae_bd_sr5_prstarttime
                                                            )
                                               end
                                             , case when l_mae_bd_sr5_prendtime is not null
                                               then
                                                  xmlelement( "ProcessEndTime"
                                                            , l_mae_bd_sr5_prendtime
                                                            )
                                               end
                                              )
                                 end
                               )
                  end
                , case when l_mae_bd_loadsequencenr is not null
                  then
                     xmlelement( "LoadSequence"
                               , xmlelement( "LoadSequenceNumber"
                                           , l_mae_bd_loadsequencenr
                                           )
                               )
                  end
                , l_xml_internalairlinedata
                , case when l_ind_loadingdata = cmn_constant.g_con_yesno_yes
                  then
                     xmlelement( "LoadingData"
                               , case when  l_mae_bd_ld_stowdeviceid is not null
                                 then
                                    xmlelement( "StowageDeviceId"
                                              , l_mae_bd_ld_stowdeviceid
                                              )
                                 end
                               , case when l_mae_bd_ld_loadlocation is not null
                                 then
                                    xmlelement( "LoadingLocation"
                                              , l_mae_bd_ld_loadlocation
                                              )
                                 end
                               , case when l_mae_bd_ld_baggagetype is not null
                                 then
                                    xmlelement( "BaggageType"
                                              , l_mae_bd_ld_baggagetype
                                              )
                                 end
                               , case when l_mae_bd_ld_classoftravel is not null
                                 then
                                    xmlelement( "ClassOfTravel"
                                              , l_mae_bd_ld_classoftravel
                                              )
                                 end
                               , case when l_mae_bd_ld_airportcode1 is not null
                                 then
                                    xmlelement( "AirportCode1"
                                              , l_mae_bd_ld_airportcode1
                                              )
                                 end
                               , case when l_mae_bd_ld_sealdcontainer is not null
                                 then
                                    xmlelement( "SealedContainer"
                                              , l_mae_bd_ld_sealdcontainer
                                              )
                                 end
                               , case when l_mae_bd_ld_conairlinecode is not null
                                 then
                                    xmlelement( "ConnectionAirlineCode"
                                              , l_mae_bd_ld_conairlinecode
                                              )
                                 end
                               , case when l_mae_bd_ld_conflightnr is not null
                                 then
                                    xmlelement( "ConnectionFlightNumber"
                                              , l_mae_bd_ld_conflightnr
                                              )
                                 end
                               , case when l_mae_bd_ld_condepartdate is not null
                                 then
                                    xmlelement( "ConnectionDepartureDate"
                                              , l_mae_bd_ld_condepartdate
                                              )
                                 end
                               , case when l_mae_bd_ld_airportcode2 is not null
                                 then
                                    xmlelement( "AirportCode2"
                                              , l_mae_bd_ld_airportcode2
                                              )
                                 end
                               )
                  end
                , case when l_mae_bd_lde_uldtypecode is not null
                  then
                     xmlelement( "LoadingDataExtension"
                               , xmlelement( "ULDIdentificationCode"
                                           , xmlelement( "ULDTypeCode"
                                                       , l_mae_bd_lde_uldtypecode
                                                       )
                                           , xmlelement( "ULDSerialNumber"
                                                       , l_mae_bd_lde_uldserialno
                                                       )
                                           , xmlelement( "ULDOwnerCode"
                                                       , l_mae_bd_lde_uldownercode
                                                       )
                                           )
                               , case when l_mae_bd_lde_loadseqno is not null
                                 then
                                    xmlelement( "LoadSequenceNumber"
                                              , l_mae_bd_lde_loadseqno
                                              )
                                 end
                               , case when l_ind_loadingdataext = cmn_constant.g_con_yesno_yes
                                 then
                                    xmlelement( "PositionInULD"
                                              , case when l_mae_bd_lde_xpos is not null
                                                then
                                                   xmlelement( "XPos"
                                                             , l_mae_bd_lde_xpos
                                                             )
                                                end
                                              , case when l_mae_bd_lde_ypos is not null
                                                then
                                                   xmlelement( "YPos"
                                                             , l_mae_bd_lde_ypos
                                                             )
                                                end
                                              , case when l_mae_bd_lde_zpos is not null
                                                then
                                                   xmlelement( "ZPos"
                                                             , l_mae_bd_lde_zpos
                                                             )
                                                end
                                              )
                                 end
                               )
                  end
                , case when l_mae_bd_baggagestatuscode is not null
                  then
                     xmlelement( "BaggageIrregularities"
                               , xmlelement( "BaggageStatusCode"
                                           , l_mae_bd_baggagestatuscode
                                           )
                               , xmlelement( "BaggageTagNumber"
                                           , l_mae_bd_baggagetagnumber
                                           )
                               )
                  end
                , case when  l_mae_bd_bie_instrtounload is not null
                  then
                     xmlelement( "BaggageIrregularitiesExtension"
                               , xmlelement( "InstructionToUnload"
                                           , l_mae_bd_bie_instrtounload
                                           )
                               )
                  end
                , case when l_ind_processinginfo = cmn_constant.g_con_yesno_yes
                  then
                     xmlelement( "ProcessingInformation"
                               , case when l_mae_bd_secondarycode is not null
                                 then
                                    xmlelement( "SecondaryCode"
                                              , l_mae_bd_secondarycode
                                              )
                                 end
                               , case when l_mae_bd_agentid is not null
                                 then
                                    xmlelement( "AgentIdentification"
                                              , l_mae_bd_agentid
                                              )
                                 end
                               , case when l_mae_bd_scannerid is not null
                                 then
                                    xmlelement( "ScannerIdentification"
                                              , l_mae_bd_scannerid
                                              )
                                 end
                               , case when l_mae_bd_datetime is not null
                                 then
                                    xmlelement( "DateTime"
                                              , l_mae_bd_datetime
                                              )
                                 end
                               , case when l_mae_bd_readinglocation is not null
                                 then
                                    xmlelement( "ReadingLocation"
                                              , l_mae_bd_readinglocation
                                              )
                                 end
                               , case when l_mae_bd_senttolocation is not null
                                 then
                                    xmlelement( "SentToLocation"
                                              , l_mae_bd_senttolocation
                                              )
                                 end
                               )
                  end
                , case when l_ind_processinginfoext = cmn_constant.g_con_yesno_yes
                  then
                     xmlelement( "ProcessingInformationExtension"
                               , case when l_mae_bd_pie_curstationid is not null
                                 then
                                    xmlelement( "CurrentStationID"
                                              , l_mae_bd_pie_curstationid
                                              )
                                 end
                               , case when l_mae_bd_pie_handheldid is not null
                                 then
                                    xmlelement( "HandheldID"
                                              , l_mae_bd_pie_handheldid
                                              )
                                 end
                               , case when l_mae_bd_pie_curhandlarea is not null
                                 then
                                    xmlelement( "CurrentHandlingAreaID"
                                              , l_mae_bd_pie_curhandlarea
                                              )
                                 end
                               , case when l_ind_currstorageloc = cmn_constant.g_con_yesno_yes
                                 then
                                    xmlelement( "CurrentStorageLocation"
                                              , case when l_mae_bd_pie_xpos is not null
                                                then
                                                   xmlconcat( xmlelement( "XPos"
                                                                        , l_mae_bd_pie_xpos
                                                                        )
                                                            , xmlelement( "YPos"
                                                                        , l_mae_bd_pie_ypos
                                                                        )
                                                            )
                                                else
                                                   xmlconcat( xmlelement( "StorageLocationID"
                                                                        , l_mae_bd_pie_storagelocid
                                                                        )
                                                            , case when l_mae_bd_pie_uldtype is not null
                                                              then
                                                                 xmlelement( "ULDIdentificationCode"
                                                                          , xmlelement( "ULDTypeCode"
                                                                                      , l_mae_bd_pie_uldtype
                                                                                      )
                                                                          , xmlelement( "ULDSerialNumber"
                                                                                      , l_mae_bd_pie_uldserial
                                                                                      )
                                                                          , xmlelement( "ULDOwnerCode"
                                                                                      , l_mae_bd_pie_uldownercode
                                                                                      )
                                                                          )
                                                              end
                                                            )
                                                end
                                              )
                                 end
                               , case when l_mae_bd_pie_executedtask is not null
                                 then
                                    xmlelement( "ExecutedTask"
                                              , l_mae_bd_pie_executedtask
                                              )
                                 end
                                 
                               , l_xml_destinationstationid_all
                                 
                               , l_xml_destinationhdlareaid_all
                               , case when l_mae_bd_pie_assignedtask is not null
                                 then
                                    xmlelement( "AssignedTask"
                                              , l_mae_bd_pie_assignedtask
                                              )
                                 end
                               , case when l_mae_bd_pie_activeprocess is not null
                                 then
                                    xmlelement( "ActiveProcess"
                                              , l_mae_bd_pie_activeprocess
                                              )
                                 end
                               , case when l_mae_bd_pie_batchid is not null
                                 then
                                    xmlelement( "BatchID"
                                              , l_mae_bd_pie_batchid
                                              )
                                 end
                               , case when l_mae_bd_pie_recogstate is not null
                                 then
                                    xmlelement( "RecognitionState"
                                              , l_mae_bd_pie_recogstate
                                              )
                                 end
                               , case when l_mae_bd_pie_idstate is not null
                                 then
                                    xmlelement( "IdentificationState"
                                              , l_mae_bd_pie_idstate
                                              )
                                 end
                               , case when l_mae_bd_pie_idreason is not null
                                 then
                                    xmlelement( "IdentificationReason"
                                              , l_mae_bd_pie_idreason
                                              )
                                 end
                               , case when l_mae_bd_pie_manualidtask is not null
                                 then
                                    xmlelement( "ManualIdTask"
                                              , l_mae_bd_pie_manualidtask
                                              )
                                 end
                               , case when l_mae_bd_pie_opcontraction is not null
                                 then
                                    xmlelement( "OperationalControlAction"
                                              , l_mae_bd_pie_opcontraction
                                              )
                                 end
                               , case when l_mae_bd_pie_opcontrmsg is not null
                                 then
                                    xmlelement( "OperationalControlMessage"
                                              , l_mae_bd_pie_opcontrmsg
                                              )
                                 end
                               , case when l_mae_bd_pie_qualstate is not null
                                 then
                                    xmlelement( "QualificationState"
                                              , l_mae_bd_pie_qualstate
                                              )
                                 end
                               , case when l_mae_bd_pie_fb_timeliness is not null
                                 then
                                    xmlelement( "FlightBuildTimeliness"
                                              , l_mae_bd_pie_fb_timeliness
                                              )
                                 end
                               , case when l_mae_bd_pie_b_timeliness is not null
                                 then
                                    xmlelement( "BatchBuildTimeliness"
                                              , l_mae_bd_pie_b_timeliness
                                              )
                                 end
                               , case when l_mae_bd_pie_sysauthtoload is not null
                                 then
                                    xmlelement( "SystemAuthorityToLoad"
                                              , l_mae_bd_pie_sysauthtoload
                                              )
                                 end
                               , case when l_mae_bd_pie_handler is not null
                                 then
                                    xmlelement( "Handler"
                                              , l_mae_bd_pie_handler
                                              )
                                 end
                               , case when l_mae_bd_pie_airline is not null
                                 then
                                    xmlelement( "Airline"
                                              , l_mae_bd_pie_airline
                                              )
                                 end
                               , case when l_mae_bd_pie_operatorid is not null
                                 then
                                    xmlelement( "OperatorID"
                                              , l_mae_bd_pie_operatorid
                                              )
                                 end
                               , case when l_mae_bd_pie_operatorhndlr is not null
                                 then
                                    xmlelement( "OperatorHandler"
                                              , l_mae_bd_pie_operatorhndlr
                                              )
                                 end
                               , case when l_mae_bd_pie_si_ppiname is not null
                                 then
                                    xmlelement( "SegregationID"
                                              , xmlelement( "ProcessPlanIDName"
                                                          , l_mae_bd_pie_si_ppiname
                                                          )
                                              , case when l_mae_bd_pie_si_prodname is not null
                                                then
                                                   xmlelement( "ProductName"
                                                             , l_mae_bd_pie_si_prodname
                                                             )
                                                end
                                              )
                                 end
                               , case when l_mae_bd_pie_ar_cpdname is not null
                                 then
                                    xmlelement( "ActivityReference"
                                              , xmlelement( "CommonProcessDefinitionName"
                                                          , l_mae_bd_pie_ar_cpdname
                                                          )
                                              , xmlelement( "ProcessPlanID"
                                                          , xmlelement( "Name"
                                                                      , l_mae_bd_pie_ar_ppi_name
                                                                      )
                                                          , xmlelement( "Version"
                                                                      , l_mae_bd_pie_ar_ppi_versn
                                                                      )
                                                          )
                                              , xmlelement( "ProcessDefinitionName"
                                                          , l_mae_bd_pie_ar_prodefname
                                                          )
                                              , xmlelement( "ActivityName"
                                                          , l_mae_bd_pie_ar_actname
                                                          )
                                              )
                                 end
                               , case when l_mae_bd_pie_lasterror is not null
                                 then
                                    xmlelement( "LastLogisticsError"
                                              , l_mae_bd_pie_lasterror
                                              )
                                 end
                               )
                  end
                , case when l_ind_onhandbagsummary = cmn_constant.g_con_yesno_yes
                  then
                     xmlelement( "OnHandBaggageSummary"
                               , case when l_ind_ohdheader = cmn_constant.g_con_yesno_yes
                                 then
                                    xmlelement( "OHDHeader"
                                              , case when l_mae_bd_ohh_teletypecode is not null
                                                then
                                                   xmlelement( "TeleTypeCode"
                                                             , l_mae_bd_ohh_teletypecode
                                                             )
                                                end
                                              , case when l_mae_bd_ohh_messageorig is not null
                                                then
                                                   xmlelement( "MessageOriginator"
                                                             , l_mae_bd_ohh_messageorig
                                                             )
                                                end
                                              , case when l_mae_bd_ohh_timerefgroup is not null
                                                then
                                                   xmlelement( "TimeReferenceGroup"
                                                             , l_mae_bd_ohh_timerefgroup
                                                             )
                                                end
                                              , case when l_mae_bd_ohh_filereference is not null
                                                then
                                                   xmlelement( "FileReference"
                                                             , l_mae_bd_ohh_filereference
                                                             )
                                                end
                                              )
                                 end
                               , case when l_ind_ohddata = cmn_constant.g_con_yesno_yes
                                 then
                                    xmlelement( "OHDData"
                                              , case when l_mae_bd_ohd_lpc is not null
                                                then
                                                   xmlelement( "BagTagNumber"
                                                             , xmlelement( "LPC"
                                                                         , l_mae_bd_ohd_lpc
                                                                         )
                                                             , case when l_mae_bd_ohd_lpc_ext is not null
                                                               then
                                                                  xmlelement( "LPC_Extension"
                                                                            , l_mae_bd_ohd_lpc_ext
                                                                            )
                                                               end
                                                             )
                                                end
                                              , case when l_mae_bd_ohd_bagcolour is not null
                                                then
                                                   xmlelement( "BagColour"
                                                             , l_mae_bd_ohd_bagcolour
                                                             )
                                                end
                                              , case when l_mae_bd_ohd_bagtypecode is not null
                                                then
                                                   xmlelement( "BagTypeCode"
                                                             , l_mae_bd_ohd_bagtypecode
                                                             )
                                                end
                                              , case when l_mae_bd_ohd_bagbrandname is not null
                                                then
                                                   xmlelement( "BagBrandName"
                                                             , l_mae_bd_ohd_bagbrandname
                                                             )
                                                end
                                              , case when l_mae_bd_ohd_bagmaterial is not null
                                                then
                                                   xmlelement( "BagMaterial"
                                                             , l_mae_bd_ohd_bagmaterial
                                                             )
                                                end
                                              , l_xml_ohddatabagcontents
                                              , case when l_ind_ohddatanames1 = cmn_constant.g_con_yesno_yes
                                                then
                                                   xmlelement( "Names"
                                                             , case when l_mae_bd_ohd_nm1_surname is not null
                                                               then
                                                                  xmlelement( "SurName"
                                                                            , l_mae_bd_ohd_nm1_surname
                                                                            )
                                                               end
                                                             , case when l_mae_bd_ohd_nm1_initials is not null
                                                               then
                                                                  xmlelement( "Initials"
                                                                            , l_mae_bd_ohd_nm1_initials
                                                                            )
                                                               end
                                                             )
                                                end
                                              , case when l_ind_ohddatanames2 = cmn_constant.g_con_yesno_yes
                                                then
                                                   xmlelement( "Names"
                                                             , case when l_mae_bd_ohd_nm2_surname is not null
                                                               then
                                                                  xmlelement( "SurName"
                                                                            , l_mae_bd_ohd_nm2_surname
                                                                            )
                                                               end
                                                             , case when l_mae_bd_ohd_nm2_initials is not null
                                                               then
                                                                  xmlelement( "Initials"
                                                                            , l_mae_bd_ohd_nm2_initials
                                                                            )
                                                               end
                                                             )
                                                end
                                              , case when l_ind_ohddatanames3 = cmn_constant.g_con_yesno_yes
                                                then
                                                   xmlelement( "Names"
                                                             , case when l_mae_bd_ohd_nm3_surname is not null
                                                               then
                                                                  xmlelement( "SurName"
                                                                            , l_mae_bd_ohd_nm3_surname
                                                                            )
                                                               end
                                                             , case when l_mae_bd_ohd_nm3_initials is not null
                                                               then
                                                                  xmlelement( "Initials"
                                                                            , l_mae_bd_ohd_nm3_initials
                                                                            )
                                                               end
                                                             )
                                                end
                                              , l_xml_airportcodedata
                                              , case when l_mae_bd_ohd_airline is not null
                                                then
                                                   xmlelement( "Flight"
                                                             , xmlelement( "Airline"
                                                                         , l_mae_bd_ohd_airline
                                                                         )
                                                             , xmlelement( "FlightNumber"
                                                                         , l_mae_bd_ohd_flightnumber
                                                                         )
                                                             , xmlelement( "Date"
                                                                         , l_mae_bd_ohd_date
                                                                         )
                                                             )
                                                end
                                              , case when l_mae_bd_ohd_freeforminfo is not null
                                                then
                                                   xmlelement( "FreeFormInformation"
                                                             , l_mae_bd_ohd_freeforminfo
                                                             )
                                                end
                                              )
                                 end
                               )
                  end
                , case when l_ind_onhandbagsumext = cmn_constant.g_con_yesno_yes
                  then
                     xmlelement( "OnHandBaggageSummaryExtension"
                               , case when l_mae_bd_ohe_passengeraddr is not null
                                 then
                                    xmlelement( "PassengerAddress"
                                              , l_mae_bd_ohe_passengeraddr
                                              )
                                 end
                               , case when l_mae_bd_ohe_freqtravidnum is not null
                                 then
                                    xmlelement( "FrequentFlyerNumber"
                                              , xmlelement( "FrequentTravellerIDNumber"
                                                          , l_mae_bd_ohe_freqtravidnum
                                                          )
                                              , case when l_mae_bd_ohe_tierident is not null
                                                then
                                                   xmlelement( "TierIdentifier"
                                                             , l_mae_bd_ohe_tierident
                                                             )
                                                end
                                              )
                                 end
                               )
                  end
                , case when l_mae_bd_scantimestamp is not null
                  then
                     xmlelement( "PassengerScanEvent"
                               , xmlelement( "ScanTimeStamp"
                                           , l_mae_bd_scantimestamp
                                           )
                               , xmlelement( "ScanLocation"
                                           , l_mae_bd_scanlocation
                                           )
                               , xmlelement( "ScanResult"
                                           , l_mae_bd_scanresult
                                           )
                               )
                  end
                )
      into   l_bagdata
      from   dual;

      
      if l_bagdata is not null
      then
         select xmlelement( "BagData"
                          , l_bagdata
                          )
         into   l_element
         from   dual;
      end if;

      viu_module.leave_module( i_module => l_con_proc_name );

      return l_element;
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => 'exception'
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end create_bagdata;

   












   procedure parallel_execution_log( i_rt_pae          in pdm_packages%rowtype
                                   , i_additional_data in varchar2
                                   )
   is
   
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.parallel_execution_log';

   begin
      viu_module.enter_module( i_module => l_con_proc_name );
   
      viu_info.operator_info( i_ifo_nr            => viu_constant.c_ifo_generallogging
                            , i_calling_procedure => l_con_proc_name
                            , i_severity          => viu_info.severity_notification
                            , i_additional_data   => i_additional_data
                                                     || ', i_rt_pae.pi_id = ' || i_rt_pae.pi_id
                                                     || ', i_rt_pae.pd_id = ' || i_rt_pae.pd_id
                            );

      viu_module.leave_module( i_module      => l_con_proc_name );

   exception
      when others
      then
         viu_module.leave_module( i_module      => l_con_proc_name
                                , i_debug_info  => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure  => l_con_proc_name );
   end parallel_execution_log;

   













   procedure parallel_execution_sleep( i_rt_pae          in pdm_packages%rowtype
                                     , i_sleep_seconds   in number
                                     , i_additional_data in varchar2
                                     )
   is
   
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.parallel_execution_sleep';

   begin
      viu_module.enter_module( i_module => l_con_proc_name );
   
      parallel_execution_log( i_rt_pae          => i_rt_pae
                            , i_additional_data => i_additional_data || ', before sleep'
                            );

      acl_common.sleep(i_sleep_seconds);
   
      parallel_execution_log( i_rt_pae          => i_rt_pae
                            , i_additional_data => i_additional_data || ', after sleep'
                            );

      viu_module.leave_module( i_module      => l_con_proc_name );

   exception
      when others
      then
         viu_module.leave_module( i_module      => l_con_proc_name
                                , i_debug_info  => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure  => l_con_proc_name );
   end parallel_execution_sleep;

   











   procedure create_evt_eme( i_event_time in  cmn_constant.st_timestamp
                           , i_timestamp  in  cmn_constant.st_timestamp
                           , i_ims_id     in  cmn_ifc_messages.id%type
                           , i_imd_id     in  cmn_ifc_msg_definitions.id%type
                           , o_rt_evt     out pdm_events%rowtype
                           )
   is
      l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.create_evt_eme';

      l_rt_eme pdm_event_messages%rowtype;

   begin
      viu_module.enter_module( i_module          => l_con_proc_name );

      
      o_rt_evt.date_created := i_timestamp;
      pdm_evt_tapi_pck.evt_insert_row( io_rt_evt => o_rt_evt );

      
      l_rt_eme.ims_id       := i_ims_id;
      l_rt_eme.imd_id       := i_imd_id;
      l_rt_eme.evt_id       := o_rt_evt.id;
      l_rt_eme.date_created := i_timestamp;
      l_rt_eme.event_time   := i_event_time;
      pdm_eme_tapi_pck.eme_insert_row( io_rt_eme => l_rt_eme );

      viu_module.leave_module( i_module      => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
   end create_evt_eme;

   











   procedure create_package_access( i_pd_id  in pdm_packages.pd_id%type
                                  , i_evt_id in pdm_events.id%type
                                  )
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.create_package_access';

      l_rt_pas pdm_package_accesses%rowtype;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      begin

         
         l_rt_pas.pd_id  := i_pd_id;
         l_rt_pas.evt_id := i_evt_id;
         pdm_pas_tapi_pck.pas_insert_row( io_rt_pas => l_rt_pas );

      exception
         when viu_constant.exc_insertfailed then

            
            
            
            
            
            viu_info.handle_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                                , i_calling_procedure => l_con_proc_name
                                , i_severity          => viu_info.severity_notification
                                , i_additional_data   => 'i_pd_id: ' || i_pd_id
                                );

            
            pdm_pas_tapi_pck.pas_lock_row( i_pas_pd_id => i_pd_id);

      end;

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => 'exception'
                                );

         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end create_package_access;

   











   procedure lock_package_access( i_pd_id  in pdm_packages.pd_id%type
                                , i_evt_id in pdm_package_events.evt_id%type
                                )
   is
      l_con_proc_name       constant cmn_constant.st_proc_name := g_con_package || '.lock_package_access';

      l_rt_pas pdm_package_accesses%rowtype;
      l_found  boolean;

   begin
      viu_module.enter_module( i_module      => l_con_proc_name );

      
      l_found := pdm_pas_tapi_pck.pas_select_row_upd( i_pas_pd_id => i_pd_id
                                                    , o_rt_pas    => l_rt_pas
                                                    );

      
      if not l_found
      then

         
         create_package_access( i_pd_id  => i_pd_id
      	                      , i_evt_id => i_evt_id
                              );

      end if;

      viu_module.leave_module( i_module      => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
   end lock_package_access;

   











   function use_mult_bagdata
   return boolean
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.use_mult_bagdata';
      
      l_ind_use_mult_bagdata boolean := false;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      if cmn_common.get_parameter_value( i_prr_name => pdm_constant.g_con_ptr_use_multiple_bagdata )
            = cmn_constant.g_con_yesno_yes
      then
         l_ind_use_mult_bagdata := true;
      end if;

      viu_module.leave_module( i_module => l_con_proc_name );

      return l_ind_use_mult_bagdata;

   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => 'exception'
                                );

         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end use_mult_bagdata;

   













   function plk_select_primary_pae( i_pae_id_secondary in  pdm_packages.id%type
                                  , i_pln_id           in  pdm_package_link_definitions.id%type
                                  , o_rt_pae_primary   out pdm_packages%rowtype
                                  )
   return boolean
   is
      l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.plk_select_primary_pae';

      cursor c_pae_primary ( b_pae_id_secondary in pdm_packages.id%type
                           , b_pln_id           in pdm_package_link_definitions.id%type
                           )
      is
         select pae.*
         from   pdm_package_links plk
         ,      pdm_packages      pae
         where  plk.pln_id                =  b_pln_id
         and    plk.deactivated_by_pet_id is null
         and    plk.pae_id_secondary      =  b_pae_id_secondary
         and    pae.id                    =  plk.pae_id_primary
         ;
   
      l_found boolean;

   begin
      viu_module.enter_module (i_module => l_con_proc_name);

      open  c_pae_primary ( b_pae_id_secondary => i_pae_id_secondary
                          , b_pln_id           => i_pln_id
                          );
      fetch c_pae_primary into o_rt_pae_primary;
      l_found := c_pae_primary%found;
      close c_pae_primary;

      viu_module.leave_module( i_module     => l_con_proc_name);

      return l_found;
   exception
      when others
      then
         if c_pae_primary%isopen
         then
            close c_pae_primary;
         end if;

         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info(i_calling_procedure => l_con_proc_name);
   end plk_select_primary_pae;

   













   procedure plk_select_secondary_pae( i_pae_id_primary in  pdm_packages.id%type
                                     , i_pln_id         in  pdm_package_link_definitions.id%type
                                     , o_nt_pae_member  out pdm_nt_pae_id
                                     )
   is

      l_con_proc_name    constant cmn_constant.st_proc_name := g_con_package || '.plk_select_secondary_pae';

      
      cursor c_member ( b_pae_id_primary in pdm_packages.id%type
                      , b_pln_id         in pdm_package_link_definitions.id%type
                      )
      is
      select plk.pae_id_secondary
      from   pdm_package_links plk
      where  plk.pln_id                =  b_pln_id
      and    plk.deactivated_by_pet_id is null
      and    plk.pae_id_primary        =  b_pae_id_primary
      ;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      o_nt_pae_member := pdm_nt_pae_id();

      
      open  c_member ( b_pae_id_primary => i_pae_id_primary
                     , b_pln_id         => i_pln_id
                     );
      fetch c_member bulk collect into o_nt_pae_member;
      close c_member;
   
      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         if c_member%isopen
         then
            close c_member;
         end if;

         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => 'exception'
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end plk_select_secondary_pae;

   











   function select_first_pet( i_pae_id in  pdm_packages.id%type
                            , i_evt_id in  pdm_events.id%type
                            , o_rt_pet out pdm_package_events%rowtype
                            )
   return boolean
   is
      l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.select_first_pet';

      
      cursor c_pet ( b_pae_id in pdm_packages.id%type
                   , b_evt_id in pdm_events.id%type
                   )
      is
      select   pet.*
      from     pdm_package_events pet
      where    pet.pae_id = b_pae_id
      and      pet.evt_id = b_evt_id
      order by pet.id
      ;
   
      l_found boolean;

   begin
      viu_module.enter_module (i_module => l_con_proc_name);

      open c_pet ( b_pae_id => i_pae_id
                 , b_evt_id => i_evt_id
                 );
      fetch c_pet into o_rt_pet;
      l_found := c_pet%found;
      close c_pet;

      viu_module.leave_module( i_module     => l_con_proc_name);

      return l_found;
   exception
      when others
      then
         if c_pet%isopen
         then
            close c_pet;
         end if;

         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info(i_calling_procedure => l_con_proc_name);
   end select_first_pet;

   













   procedure hdl_functional_extensions ( i_rt_pae       in pdm_packages%rowtype
                                       , i_rt_pet       in pdm_package_events%rowtype
                                       , i_message_type in cmn_ifc_msg_definitions.name%type
                                       )
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.hdl_functional_extensions';

      
      cursor c_fen
      is
         select *
         from   pdm_functional_extensions fen
         ;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      for r_fen in c_fen
      loop

         
         execute immediate
            'BEGIN '                 ||
                r_fen.procedure_name ||
                '(:i_pae_id'         ||
                ',:i_pet_id'         ||
                ',:i_message_type'   ||
                '); '                ||
            'END;'
            using   i_rt_pae.id
                  , i_rt_pet.id
                  , i_message_type
            ;

      end loop;

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );

         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end hdl_functional_extensions;
end pdm_common;
/