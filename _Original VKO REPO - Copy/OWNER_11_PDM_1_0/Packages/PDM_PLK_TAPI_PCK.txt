create or replace PACKAGE pdm_plk_tapi_pck
IS
-- Table API package for table pdm_package_links
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:00)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'PDM_PLK_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'PDM_PACKAGE_LINKS';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION plk_select_row( i_plk_ID   IN  pdm_package_links.ID%TYPE
                       , o_rt_plk   OUT pdm_package_links%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION plk_select_row_upd( i_plk_ID   IN  pdm_package_links.ID%TYPE
                           , o_rt_plk   OUT pdm_package_links%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE plk_lock_row( i_plk_ID   IN  pdm_package_links.ID%TYPE )
;

PROCEDURE plk_lock_row_nowait( i_plk_ID   IN  pdm_package_links.ID%TYPE )
;

PROCEDURE plk_insert_row ( io_rt_plk  IN OUT pdm_package_links%ROWTYPE )
;

FUNCTION plk_update_row( i_plk_ID   IN     pdm_package_links.ID%TYPE
                       , io_rt_plk  IN OUT pdm_package_links%ROWTYPE )
RETURN NUMBER
;

FUNCTION plk_delete_row( i_plk_ID   IN  pdm_package_links.ID%TYPE )
RETURN BOOLEAN
;

FUNCTION plk_seq1_nextval
RETURN pdm_package_links.ID%TYPE
;


END pdm_plk_tapi_pck;
/




package body pdm_plk_tapi_pck
is




function plk_select_row( i_plk_id   in  pdm_package_links.id%type
                       , o_rt_plk   out pdm_package_links%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.plk_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_plk ( i_plk_id   in  pdm_package_links.id%type )
      is 
           select *
             from pdm_package_links plk
            where plk.id = i_plk_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_plk( i_plk_id => i_plk_id );
         fetch c_plk into o_rt_plk;
         l_found := c_plk%found;
         close c_plk;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_plk%isopen
         then
            close c_plk;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end plk_select_row;

function plk_select_row_upd( i_plk_id   in  pdm_package_links.id%type
                           , o_rt_plk   out pdm_package_links%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.plk_select_row_upd';
   l_found                boolean      := false;

   cursor c_plk ( i_plk_id   in  pdm_package_links.id%type )
   is
           select *
             from pdm_package_links plk
            where plk.id = i_plk_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_plk( i_plk_id => i_plk_id );
   fetch c_plk into o_rt_plk;
   l_found := c_plk%found;
   close c_plk;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_plk%isopen
      then
         close c_plk;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end plk_select_row_upd;

procedure plk_lock_row( i_plk_id   in  pdm_package_links.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.plk_lock_row';
begin
  declare
     cursor c_plk ( i_plk_id   in  pdm_package_links.id%type )
     is
             select ''
               from pdm_package_links plk
              where plk.id = i_plk_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_plk_id is not null
         then
            begin
                
                plk_lock_row_nowait( i_plk_id => i_plk_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_plk( i_plk_id => i_plk_id );
                  close c_plk;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_plk%isopen
         then
            close c_plk;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end plk_lock_row;

procedure plk_lock_row_nowait( i_plk_id   in  pdm_package_links.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.plk_lock_row_nowait';
begin
   declare
      cursor c_plk ( i_plk_id   in  pdm_package_links.id%type )
      is
              select ''
                from pdm_package_links plk
               where plk.id = i_plk_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_plk_id is not null
         then
            
            open c_plk( i_plk_id => i_plk_id );

            close c_plk;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_plk%isopen
        then
           close c_plk;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_plk_id||'"' );
   end;                                                          
end plk_lock_row_nowait;

function plk_perform_update( i_plk_id   in     pdm_package_links.id%type
                           , io_rt_plk  in out pdm_package_links%rowtype )
return number
;

function plk_perform_delete( i_plk_id   in  pdm_package_links.id%type )
return boolean
;

procedure plk_insert_row ( io_rt_plk  in out pdm_package_links%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.plk_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into pdm_package_links( id
                                , pae_id_primary
                                , pae_id_secondary
                                , pln_id
                                , activated_by_pet_id
                                , deactivated_by_pet_id )
              values ( io_rt_plk.id
                     , io_rt_plk.pae_id_primary
                     , io_rt_plk.pae_id_secondary
                     , io_rt_plk.pln_id
                     , io_rt_plk.activated_by_pet_id
                     , io_rt_plk.deactivated_by_pet_id )
           returning id
                   , pae_id_primary
                   , pae_id_secondary
                   , pln_id
                   , activated_by_pet_id
                   , deactivated_by_pet_id
                into io_rt_plk.id
                   , io_rt_plk.pae_id_primary
                   , io_rt_plk.pae_id_secondary
                   , io_rt_plk.pln_id
                   , io_rt_plk.activated_by_pet_id
                   , io_rt_plk.deactivated_by_pet_id;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_plk.id||'"'
                                                             ||', PAE_ID_PRIMARY = "'||io_rt_plk.pae_id_primary||'"'
                                                             ||', PAE_ID_SECONDARY = "'||io_rt_plk.pae_id_secondary||'"'
                                                             ||', PLN_ID = "'||io_rt_plk.pln_id||'"'
                                                             ||', ACTIVATED_BY_PET_ID = "'||io_rt_plk.activated_by_pet_id||'"'
                                                             ||', DEACTIVATED_BY_PET_ID = "'||io_rt_plk.deactivated_by_pet_id||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end plk_insert_row;

function plk_perform_update( i_plk_id   in     pdm_package_links.id%type
                           , io_rt_plk  in out pdm_package_links%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.plk_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update pdm_package_links
            set id = io_rt_plk.id
              , pae_id_primary = io_rt_plk.pae_id_primary
              , pae_id_secondary = io_rt_plk.pae_id_secondary
              , pln_id = io_rt_plk.pln_id
              , activated_by_pet_id = io_rt_plk.activated_by_pet_id
              , deactivated_by_pet_id = io_rt_plk.deactivated_by_pet_id
          where id = i_plk_id
      returning id
              , pae_id_primary
              , pae_id_secondary
              , pln_id
              , activated_by_pet_id
              , deactivated_by_pet_id
           into io_rt_plk.id
              , io_rt_plk.pae_id_primary
              , io_rt_plk.pae_id_secondary
              , io_rt_plk.pln_id
              , io_rt_plk.activated_by_pet_id
              , io_rt_plk.deactivated_by_pet_id;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_plk.id||'"'
                                                             ||', PAE_ID_PRIMARY = "'||io_rt_plk.pae_id_primary||'"'
                                                             ||', PAE_ID_SECONDARY = "'||io_rt_plk.pae_id_secondary||'"'
                                                             ||', PLN_ID = "'||io_rt_plk.pln_id||'"'
                                                             ||', ACTIVATED_BY_PET_ID = "'||io_rt_plk.activated_by_pet_id||'"'
                                                             ||', DEACTIVATED_BY_PET_ID = "'||io_rt_plk.deactivated_by_pet_id||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end plk_perform_update;

function plk_perform_delete( i_plk_id   in  pdm_package_links.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.plk_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from pdm_package_links
          where id = i_plk_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_plk_id||'"' );
   end;                                                          
end plk_perform_delete;

function plk_update_row( i_plk_id   in     pdm_package_links.id%type
                       , io_rt_plk  in out pdm_package_links%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.plk_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         plk_lock_row( i_plk_id   =>  i_plk_id );

         
         l_rowcount := 
            plk_perform_update( i_plk_id   =>  i_plk_id
                              , io_rt_plk  => io_rt_plk );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_plk.id||'"'
                                                          ||', PAE_ID_PRIMARY = "'||io_rt_plk.pae_id_primary||'"'
                                                          ||', PAE_ID_SECONDARY = "'||io_rt_plk.pae_id_secondary||'"'
                                                          ||', PLN_ID = "'||io_rt_plk.pln_id||'"'
                                                          ||', ACTIVATED_BY_PET_ID = "'||io_rt_plk.activated_by_pet_id||'"'
                                                          ||', DEACTIVATED_BY_PET_ID = "'||io_rt_plk.deactivated_by_pet_id||'"'                                                           , 1, 4000));
   end;                                                          
end plk_update_row;

function plk_delete_row( i_plk_id   in  pdm_package_links.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.plk_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         plk_lock_row( i_plk_id   =>  i_plk_id );

         
         l_deleted := plk_perform_delete( i_plk_id   =>  i_plk_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_plk_id||'"' );
   end;                                                          
end plk_delete_row;

function plk_seq1_nextval
return pdm_package_links.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.plk_seq1_nextval';
   l_plk_id  pdm_package_links.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select pdm_plk_seq1.nextval 
           into l_plk_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_plk_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end plk_seq1_nextval;


end pdm_plk_tapi_pck;
/