create or replace PACKAGE pdm_evt_tapi_pck
IS
-- Table API package for table pdm_events
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:40:58)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'PDM_EVT_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'PDM_EVENTS';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION evt_select_row( i_evt_ID   IN  pdm_events.ID%TYPE
                       , o_rt_evt   OUT pdm_events%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION evt_select_row_upd( i_evt_ID   IN  pdm_events.ID%TYPE
                           , o_rt_evt   OUT pdm_events%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE evt_lock_row( i_evt_ID   IN  pdm_events.ID%TYPE )
;

PROCEDURE evt_lock_row_nowait( i_evt_ID   IN  pdm_events.ID%TYPE )
;

PROCEDURE evt_insert_row ( io_rt_evt  IN OUT pdm_events%ROWTYPE )
;

FUNCTION evt_update_row( i_evt_ID   IN     pdm_events.ID%TYPE
                       , io_rt_evt  IN OUT pdm_events%ROWTYPE )
RETURN NUMBER
;

FUNCTION evt_delete_row( i_evt_ID   IN  pdm_events.ID%TYPE )
RETURN BOOLEAN
;

FUNCTION evt_seq1_nextval
RETURN pdm_events.ID%TYPE
;


END pdm_evt_tapi_pck;
/




package body pdm_evt_tapi_pck
is




function evt_select_row( i_evt_id   in  pdm_events.id%type
                       , o_rt_evt   out pdm_events%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.evt_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_evt ( i_evt_id   in  pdm_events.id%type )
      is 
           select *
             from pdm_events evt
            where evt.id = i_evt_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_evt( i_evt_id => i_evt_id );
         fetch c_evt into o_rt_evt;
         l_found := c_evt%found;
         close c_evt;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_evt%isopen
         then
            close c_evt;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end evt_select_row;

function evt_select_row_upd( i_evt_id   in  pdm_events.id%type
                           , o_rt_evt   out pdm_events%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.evt_select_row_upd';
   l_found                boolean      := false;

   cursor c_evt ( i_evt_id   in  pdm_events.id%type )
   is
           select *
             from pdm_events evt
            where evt.id = i_evt_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_evt( i_evt_id => i_evt_id );
   fetch c_evt into o_rt_evt;
   l_found := c_evt%found;
   close c_evt;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_evt%isopen
      then
         close c_evt;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end evt_select_row_upd;

procedure evt_lock_row( i_evt_id   in  pdm_events.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.evt_lock_row';
begin
  declare
     cursor c_evt ( i_evt_id   in  pdm_events.id%type )
     is
             select ''
               from pdm_events evt
              where evt.id = i_evt_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_evt_id is not null
         then
            begin
                
                evt_lock_row_nowait( i_evt_id => i_evt_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_evt( i_evt_id => i_evt_id );
                  close c_evt;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_evt%isopen
         then
            close c_evt;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end evt_lock_row;

procedure evt_lock_row_nowait( i_evt_id   in  pdm_events.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.evt_lock_row_nowait';
begin
   declare
      cursor c_evt ( i_evt_id   in  pdm_events.id%type )
      is
              select ''
                from pdm_events evt
               where evt.id = i_evt_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_evt_id is not null
         then
            
            open c_evt( i_evt_id => i_evt_id );

            close c_evt;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_evt%isopen
        then
           close c_evt;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_evt_id||'"' );
   end;                                                          
end evt_lock_row_nowait;

function evt_perform_update( i_evt_id   in     pdm_events.id%type
                           , io_rt_evt  in out pdm_events%rowtype )
return number
;

function evt_perform_delete( i_evt_id   in  pdm_events.id%type )
return boolean
;

procedure evt_insert_row ( io_rt_evt  in out pdm_events%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.evt_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into pdm_events( id
                                , aet_id
                                , date_created )
              values ( io_rt_evt.id
                     , io_rt_evt.aet_id
                     , io_rt_evt.date_created )
           returning id
                   , aet_id
                   , date_created
                into io_rt_evt.id
                   , io_rt_evt.aet_id
                   , io_rt_evt.date_created;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_evt.id||'"'
                                                             ||', AET_ID = "'||io_rt_evt.aet_id||'"'
                                                             ||', DATE_CREATED = "'||io_rt_evt.date_created||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end evt_insert_row;

function evt_perform_update( i_evt_id   in     pdm_events.id%type
                           , io_rt_evt  in out pdm_events%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.evt_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update pdm_events
            set id = io_rt_evt.id
              , aet_id = io_rt_evt.aet_id
              , date_created = io_rt_evt.date_created
          where id = i_evt_id
      returning id
              , aet_id
              , date_created
           into io_rt_evt.id
              , io_rt_evt.aet_id
              , io_rt_evt.date_created;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_evt.id||'"'
                                                             ||', AET_ID = "'||io_rt_evt.aet_id||'"'
                                                             ||', DATE_CREATED = "'||io_rt_evt.date_created||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end evt_perform_update;

function evt_perform_delete( i_evt_id   in  pdm_events.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.evt_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from pdm_events
          where id = i_evt_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_evt_id||'"' );
   end;                                                          
end evt_perform_delete;

function evt_update_row( i_evt_id   in     pdm_events.id%type
                       , io_rt_evt  in out pdm_events%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.evt_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         evt_lock_row( i_evt_id   =>  i_evt_id );

         
         l_rowcount := 
            evt_perform_update( i_evt_id   =>  i_evt_id
                              , io_rt_evt  => io_rt_evt );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_evt.id||'"'
                                                          ||', AET_ID = "'||io_rt_evt.aet_id||'"'
                                                          ||', DATE_CREATED = "'||io_rt_evt.date_created||'"'                                                           , 1, 4000));
   end;                                                          
end evt_update_row;

function evt_delete_row( i_evt_id   in  pdm_events.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.evt_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         evt_lock_row( i_evt_id   =>  i_evt_id );

         
         l_deleted := evt_perform_delete( i_evt_id   =>  i_evt_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_evt_id||'"' );
   end;                                                          
end evt_delete_row;

function evt_seq1_nextval
return pdm_events.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.evt_seq1_nextval';
   l_evt_id  pdm_events.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select pdm_evt_seq1.nextval 
           into l_evt_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_evt_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end evt_seq1_nextval;


end pdm_evt_tapi_pck;
/