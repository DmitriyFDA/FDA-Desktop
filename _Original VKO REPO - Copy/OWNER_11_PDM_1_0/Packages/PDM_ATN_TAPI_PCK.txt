create or replace PACKAGE pdm_atn_tapi_pck
IS
-- Table API package for table pdm_actions
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:40:57)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'PDM_ATN_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'PDM_ACTIONS';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION atn_select_row( i_atn_ID   IN  pdm_actions.ID%TYPE
                       , o_rt_atn   OUT pdm_actions%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION atn_select_row_uk1( i_atn_PSE_ID   IN  pdm_actions.PSE_ID%TYPE
                           , i_atn_TYPE   IN  pdm_actions.TYPE%TYPE
                           , o_rt_atn  OUT pdm_actions%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION atn_select_row_uk2( i_atn_PSE_ID   IN  pdm_actions.PSE_ID%TYPE
                           , i_atn_SEQUENCE   IN  pdm_actions.SEQUENCE%TYPE
                           , o_rt_atn  OUT pdm_actions%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION atn_select_row_uk3( i_atn_PSE_ID   IN  pdm_actions.PSE_ID%TYPE
                           , i_atn_IND_PRIMARY   IN  pdm_actions.IND_PRIMARY%TYPE
                           , o_rt_atn  OUT pdm_actions%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION atn_select_row_upd( i_atn_ID   IN  pdm_actions.ID%TYPE
                           , o_rt_atn   OUT pdm_actions%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION atn_select_row_upd_uk1( i_atn_PSE_ID   IN  pdm_actions.PSE_ID%TYPE
                               , i_atn_TYPE   IN  pdm_actions.TYPE%TYPE
                               , o_rt_atn  OUT pdm_actions%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION atn_select_row_upd_uk2( i_atn_PSE_ID   IN  pdm_actions.PSE_ID%TYPE
                               , i_atn_SEQUENCE   IN  pdm_actions.SEQUENCE%TYPE
                               , o_rt_atn  OUT pdm_actions%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION atn_select_row_upd_uk3( i_atn_PSE_ID   IN  pdm_actions.PSE_ID%TYPE
                               , i_atn_IND_PRIMARY   IN  pdm_actions.IND_PRIMARY%TYPE
                               , o_rt_atn  OUT pdm_actions%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE atn_lock_row( i_atn_ID   IN  pdm_actions.ID%TYPE )
;

PROCEDURE atn_lock_row_nowait( i_atn_ID   IN  pdm_actions.ID%TYPE )
;

PROCEDURE atn_insert_row ( io_rt_atn  IN OUT pdm_actions%ROWTYPE )
;

FUNCTION atn_update_row( i_atn_ID   IN     pdm_actions.ID%TYPE
                       , io_rt_atn  IN OUT pdm_actions%ROWTYPE )
RETURN NUMBER
;

FUNCTION atn_delete_row( i_atn_ID   IN  pdm_actions.ID%TYPE )
RETURN BOOLEAN
;

FUNCTION atn_seq1_nextval
RETURN pdm_actions.ID%TYPE
;


END pdm_atn_tapi_pck;
/




package body pdm_atn_tapi_pck
is




function atn_select_row( i_atn_id   in  pdm_actions.id%type
                       , o_rt_atn   out pdm_actions%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.atn_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_atn ( i_atn_id   in  pdm_actions.id%type )
      is 
           select *
             from pdm_actions atn
            where atn.id = i_atn_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_atn( i_atn_id => i_atn_id );
         fetch c_atn into o_rt_atn;
         l_found := c_atn%found;
         close c_atn;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_atn%isopen
         then
            close c_atn;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end atn_select_row;

function atn_select_row_uk1( i_atn_pse_id   in  pdm_actions.pse_id%type
                           , i_atn_type   in  pdm_actions.type%type
                           , o_rt_atn  out pdm_actions%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.atn_select_row_uk1';
   l_found                boolean      := false;
begin
   declare
      cursor c_atn ( i_atn_pse_id   in  pdm_actions.pse_id%type
                   , i_atn_type   in  pdm_actions.type%type )
      is
         select *
           from pdm_actions atn
          where atn.pse_id = i_atn_pse_id 
            and atn.type = i_atn_type ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_atn(i_atn_pse_id => i_atn_pse_id, i_atn_type => i_atn_type);
         fetch c_atn into o_rt_atn;
         l_found := c_atn%found;
         close c_atn;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_atn%isopen
      then
         close c_atn;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end atn_select_row_uk1;

function atn_select_row_uk2( i_atn_pse_id   in  pdm_actions.pse_id%type
                           , i_atn_sequence   in  pdm_actions.sequence%type
                           , o_rt_atn  out pdm_actions%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.atn_select_row_uk2';
   l_found                boolean      := false;
begin
   declare
      cursor c_atn ( i_atn_pse_id   in  pdm_actions.pse_id%type
                   , i_atn_sequence   in  pdm_actions.sequence%type )
      is
         select *
           from pdm_actions atn
          where atn.pse_id = i_atn_pse_id 
            and atn.sequence = i_atn_sequence ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_atn(i_atn_pse_id => i_atn_pse_id, i_atn_sequence => i_atn_sequence);
         fetch c_atn into o_rt_atn;
         l_found := c_atn%found;
         close c_atn;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_atn%isopen
      then
         close c_atn;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end atn_select_row_uk2;

function atn_select_row_uk3( i_atn_pse_id   in  pdm_actions.pse_id%type
                           , i_atn_ind_primary   in  pdm_actions.ind_primary%type
                           , o_rt_atn  out pdm_actions%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.atn_select_row_uk3';
   l_found                boolean      := false;
begin
   declare
      cursor c_atn ( i_atn_pse_id   in  pdm_actions.pse_id%type
                   , i_atn_ind_primary   in  pdm_actions.ind_primary%type )
      is
         select *
           from pdm_actions atn
          where atn.pse_id = i_atn_pse_id 
            and atn.ind_primary = i_atn_ind_primary ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_atn(i_atn_pse_id => i_atn_pse_id, i_atn_ind_primary => i_atn_ind_primary);
         fetch c_atn into o_rt_atn;
         l_found := c_atn%found;
         close c_atn;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_atn%isopen
      then
         close c_atn;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end atn_select_row_uk3;

function atn_select_row_upd( i_atn_id   in  pdm_actions.id%type
                           , o_rt_atn   out pdm_actions%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.atn_select_row_upd';
   l_found                boolean      := false;

   cursor c_atn ( i_atn_id   in  pdm_actions.id%type )
   is
           select *
             from pdm_actions atn
            where atn.id = i_atn_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_atn( i_atn_id => i_atn_id );
   fetch c_atn into o_rt_atn;
   l_found := c_atn%found;
   close c_atn;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_atn%isopen
      then
         close c_atn;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end atn_select_row_upd;

function atn_select_row_upd_uk1( i_atn_pse_id   in  pdm_actions.pse_id%type
                               , i_atn_type   in  pdm_actions.type%type
                               , o_rt_atn  out pdm_actions%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.atn_select_row_upd_uk1';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := atn_select_row_uk1( i_atn_pse_id   =>  i_atn_pse_id
                                   , i_atn_type   =>  i_atn_type
                                   , o_rt_atn => o_rt_atn );
      if l_found
      then
         
         l_found := atn_select_row_upd( i_atn_id => o_rt_atn.id
                                      , o_rt_atn => o_rt_atn );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end atn_select_row_upd_uk1;

function atn_select_row_upd_uk2( i_atn_pse_id   in  pdm_actions.pse_id%type
                               , i_atn_sequence   in  pdm_actions.sequence%type
                               , o_rt_atn  out pdm_actions%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.atn_select_row_upd_uk2';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := atn_select_row_uk2( i_atn_pse_id   =>  i_atn_pse_id
                                   , i_atn_sequence   =>  i_atn_sequence
                                   , o_rt_atn => o_rt_atn );
      if l_found
      then
         
         l_found := atn_select_row_upd( i_atn_id => o_rt_atn.id
                                      , o_rt_atn => o_rt_atn );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end atn_select_row_upd_uk2;

function atn_select_row_upd_uk3( i_atn_pse_id   in  pdm_actions.pse_id%type
                               , i_atn_ind_primary   in  pdm_actions.ind_primary%type
                               , o_rt_atn  out pdm_actions%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.atn_select_row_upd_uk3';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := atn_select_row_uk3( i_atn_pse_id   =>  i_atn_pse_id
                                   , i_atn_ind_primary   =>  i_atn_ind_primary
                                   , o_rt_atn => o_rt_atn );
      if l_found
      then
         
         l_found := atn_select_row_upd( i_atn_id => o_rt_atn.id
                                      , o_rt_atn => o_rt_atn );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end atn_select_row_upd_uk3;

procedure atn_lock_row( i_atn_id   in  pdm_actions.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.atn_lock_row';
begin
  declare
     cursor c_atn ( i_atn_id   in  pdm_actions.id%type )
     is
             select ''
               from pdm_actions atn
              where atn.id = i_atn_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_atn_id is not null
         then
            begin
                
                atn_lock_row_nowait( i_atn_id => i_atn_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_atn( i_atn_id => i_atn_id );
                  close c_atn;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_atn%isopen
         then
            close c_atn;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end atn_lock_row;

procedure atn_lock_row_nowait( i_atn_id   in  pdm_actions.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.atn_lock_row_nowait';
begin
   declare
      cursor c_atn ( i_atn_id   in  pdm_actions.id%type )
      is
              select ''
                from pdm_actions atn
               where atn.id = i_atn_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_atn_id is not null
         then
            
            open c_atn( i_atn_id => i_atn_id );

            close c_atn;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_atn%isopen
        then
           close c_atn;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_atn_id||'"' );
   end;                                                          
end atn_lock_row_nowait;

function atn_perform_update( i_atn_id   in     pdm_actions.id%type
                           , io_rt_atn  in out pdm_actions%rowtype )
return number
;

function atn_perform_delete( i_atn_id   in  pdm_actions.id%type )
return boolean
;

procedure atn_insert_row ( io_rt_atn  in out pdm_actions%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.atn_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into pdm_actions( id
                                , pse_id
                                , type
                                , sequence
                                , tan_id
                                , ind_primary )
              values ( io_rt_atn.id
                     , io_rt_atn.pse_id
                     , io_rt_atn.type
                     , io_rt_atn.sequence
                     , io_rt_atn.tan_id
                     , io_rt_atn.ind_primary )
           returning id
                   , pse_id
                   , type
                   , sequence
                   , tan_id
                   , ind_primary
                into io_rt_atn.id
                   , io_rt_atn.pse_id
                   , io_rt_atn.type
                   , io_rt_atn.sequence
                   , io_rt_atn.tan_id
                   , io_rt_atn.ind_primary;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_atn.id||'"'
                                                             ||', PSE_ID = "'||io_rt_atn.pse_id||'"'
                                                             ||', TYPE = "'||io_rt_atn.type||'"'
                                                             ||', SEQUENCE = "'||io_rt_atn.sequence||'"'
                                                             ||', TAN_ID = "'||io_rt_atn.tan_id||'"'
                                                             ||', IND_PRIMARY = "'||io_rt_atn.ind_primary||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end atn_insert_row;

function atn_perform_update( i_atn_id   in     pdm_actions.id%type
                           , io_rt_atn  in out pdm_actions%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.atn_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update pdm_actions
            set id = io_rt_atn.id
              , pse_id = io_rt_atn.pse_id
              , type = io_rt_atn.type
              , sequence = io_rt_atn.sequence
              , tan_id = io_rt_atn.tan_id
              , ind_primary = io_rt_atn.ind_primary
          where id = i_atn_id
      returning id
              , pse_id
              , type
              , sequence
              , tan_id
              , ind_primary
           into io_rt_atn.id
              , io_rt_atn.pse_id
              , io_rt_atn.type
              , io_rt_atn.sequence
              , io_rt_atn.tan_id
              , io_rt_atn.ind_primary;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_atn.id||'"'
                                                             ||', PSE_ID = "'||io_rt_atn.pse_id||'"'
                                                             ||', TYPE = "'||io_rt_atn.type||'"'
                                                             ||', SEQUENCE = "'||io_rt_atn.sequence||'"'
                                                             ||', TAN_ID = "'||io_rt_atn.tan_id||'"'
                                                             ||', IND_PRIMARY = "'||io_rt_atn.ind_primary||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end atn_perform_update;

function atn_perform_delete( i_atn_id   in  pdm_actions.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.atn_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from pdm_actions
          where id = i_atn_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_atn_id||'"' );
   end;                                                          
end atn_perform_delete;

function atn_update_row( i_atn_id   in     pdm_actions.id%type
                       , io_rt_atn  in out pdm_actions%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.atn_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         atn_lock_row( i_atn_id   =>  i_atn_id );

         
         l_rowcount := 
            atn_perform_update( i_atn_id   =>  i_atn_id
                              , io_rt_atn  => io_rt_atn );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_atn.id||'"'
                                                          ||', PSE_ID = "'||io_rt_atn.pse_id||'"'
                                                          ||', TYPE = "'||io_rt_atn.type||'"'
                                                          ||', SEQUENCE = "'||io_rt_atn.sequence||'"'
                                                          ||', TAN_ID = "'||io_rt_atn.tan_id||'"'
                                                          ||', IND_PRIMARY = "'||io_rt_atn.ind_primary||'"'                                                           , 1, 4000));
   end;                                                          
end atn_update_row;

function atn_delete_row( i_atn_id   in  pdm_actions.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.atn_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         atn_lock_row( i_atn_id   =>  i_atn_id );

         
         l_deleted := atn_perform_delete( i_atn_id   =>  i_atn_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_atn_id||'"' );
   end;                                                          
end atn_delete_row;

function atn_seq1_nextval
return pdm_actions.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.atn_seq1_nextval';
   l_atn_id  pdm_actions.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select pdm_atn_seq1.nextval 
           into l_atn_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_atn_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end atn_seq1_nextval;


end pdm_atn_tapi_pck;
/