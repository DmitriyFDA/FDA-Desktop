create or replace PACKAGE cmn_lifesignrequest
IS
   PROCEDURE hdl_request( i_message IN XMLTYPE );

   /* Deprecated */
   FUNCTION create_request( i_lsn_party   IN   cmn_parties.id_cust%TYPE
                          , i_sequence    IN   cmn_lifesign_req_sent.SEQUENCE%TYPE
                          )
      RETURN XMLTYPE;

   FUNCTION create_request( i_pty_id_cust          IN   cmn_parties.id_cust%TYPE
                          , i_pty_instance_id_cust IN cmn_parties.instance_id_cust%TYPE
                          , i_sequence             IN   cmn_lifesign_req_sent.SEQUENCE%TYPE
   )
      RETURN XMLTYPE;

   --PROCEDURE send_request( i_lsn_party IN cmn_parties.id_cust%TYPE );
   PROCEDURE send_request( i_rt_lpy IN cmn_lifesign_parties%ROWTYPE );
END cmn_lifesignrequest;
/




package body cmn_lifesignrequest
is

















   g_con_package   constant varchar2( 19 ) := 'cmn_lifesignrequest';

   






   function create_request(
      i_lsn_party   in   cmn_parties.id_cust%type
    , i_sequence    in   cmn_lifesign_req_sent.sequence%type
   )
      return xmltype
   is
      l_con_proc_name   constant cmn_constant.st_proc_name
                                                          := g_con_package || '.create_lsn_request';
      l_header                   clob;
      l_msg_clob                 clob;
      l_msg_xml                  xmltype;
      l_target_processid         cmn_parameter_values.value%type;
   begin
      viu_module.enter_module( i_module      => l_con_proc_name );
      
      l_target_processid  := i_lsn_party;
      l_header            :=
                      cmn_interface.create_header( i_target_process_id_cust      => l_target_processid );


      l_msg_clob          := cmn_constant.g_con_xml_encoding || '<LifeSignRequest>' || l_header;

      dbms_lob.append( dest_lob      => l_msg_clob
                     , src_lob       =>    '<Sequence>'
                                        || i_sequence
                                        || '</Sequence>'
                                        || '</LifeSignRequest>'
                     );
      l_msg_xml           := xmltype( l_msg_clob );
      viu_module.leave_module( i_module      => l_con_proc_name );
      return l_msg_xml;
   exception
      when others
      then
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => 'exception'
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
   end;

   function create_request( i_pty_id_cust          in cmn_parties.id_cust%type
                          , i_pty_instance_id_cust in cmn_parties.instance_id_cust%type
                          , i_sequence             in cmn_lifesign_req_sent.sequence%type
   )
      return xmltype
   is
      l_con_proc_name   constant cmn_constant.st_proc_name
                                                          := g_con_package || '.create_lsn_request';
      l_header                   clob;
      l_msg_clob                 clob;
      l_msg_xml                  xmltype;
   begin
      viu_module.enter_module( i_module      => l_con_proc_name );
      
      l_header            :=
                      cmn_interface.create_header( i_target_process_id_cust  => i_pty_id_cust
                                                 , i_target_instance_id_cust => i_pty_instance_id_cust
                                                 );


      l_msg_clob          := cmn_constant.g_con_xml_encoding || '<LifeSignRequest>' || l_header;

      dbms_lob.append( dest_lob      => l_msg_clob
                     , src_lob       =>    '<Sequence>'
                                        || i_sequence
                                        || '</Sequence>'
                                        || '</LifeSignRequest>'
                     );
      l_msg_xml           := xmltype( l_msg_clob );
      viu_module.leave_module( i_module      => l_con_proc_name );
      return l_msg_xml;
   exception
      when others
      then
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => 'exception'
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
   end;

   function get_source_processid( i_message in xmltype )
      return varchar2
   is
      l_con_proc_name   constant cmn_constant.st_proc_name
                                                        := g_con_package || '.get_source_processid';
      l_processid                cmn_parties.id_cust%type;
   begin
      viu_module.enter_module( i_module      => l_con_proc_name );
      l_processid  :=
            i_message.extract( '/LifeSignRequest/Header/Source/ProcessID/text()' ).getstringval
                                                                                               ( );
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => l_processid
                             );
      return l_processid;
   exception
      when others
      then
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => 'exception'
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
   end get_source_processid;

   function get_source_instanceid( i_message in xmltype )
      return varchar2
   is
      l_con_proc_name   constant cmn_constant.st_proc_name
                                                        := g_con_package || '.get_source_instanceid';
      l_instanceid                cmn_parties.id_cust%type;
   begin
      viu_module.enter_module( i_module      => l_con_proc_name );

      l_instanceid  := cmn_xml_util.extract_value( i_message, '/LifeSignRequest/Header/Source/InstanceID');
      
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => l_instanceid
                             );
      return l_instanceid;
   exception
      when others
      then
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => 'exception'
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
   end get_source_instanceid;

   function get_sequence( i_message in xmltype )
      return varchar2
   is
      l_con_proc_name   constant cmn_constant.st_proc_name      := g_con_package || '.get_sequence';
      l_sequence                 cmn_lifesign_req_received.sequence%type;
   begin
      viu_module.enter_module( i_module      => l_con_proc_name );
      l_sequence  := i_message.extract( '/LifeSignRequest/Sequence/text()' ).getstringval( );
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => l_sequence
                             );
      return l_sequence;
   exception
      when others
      then
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => 'exception'
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
   end get_sequence;

   function get_message_time( i_message in xmltype )
      return varchar2
   is
      l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.get_message_time';
      l_message_time             varchar2( 240 );
   begin
      viu_module.enter_module( i_module      => l_con_proc_name );
      l_message_time  :=
                 i_message.extract( '/LifeSignRequest/Header/MessageTime/text()' ).getstringval
                                                                                               ( );
      viu_module.leave_module( i_module          => l_con_proc_name
                             , i_debug_info      => l_message_time
                             );
      return l_message_time;
   exception
      when others
      then
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => 'exception'
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
   end get_message_time;

   procedure hdl_request( i_message in xmltype )
   is
      l_con_proc_name   constant cmn_constant.st_proc_name       := g_con_package || '.hdl_request';
      l_response                 xmltype;
      l_source_processid         cmn_parties.id_cust%type;
      l_source_instanceid        cmn_parties.id_cust%type;
      l_sequence                 cmn_lifesign_req_received.sequence%type;
      l_message_time             varchar2( 240 );
   begin
      viu_module.enter_module( i_module      => l_con_proc_name );
      
      l_source_processid  := get_source_processid( i_message );
      l_source_instanceid := get_source_instanceid( i_message );
      l_sequence          := get_sequence( i_message );
      l_message_time      := get_message_time( i_message );
      l_response          :=
      cmn_lifesignresponse.create_response( i_target_processid      => l_source_processid
         				                          , i_target_instanceid     => l_source_instanceid
                                          , i_signature             => l_sequence
                                          , i_event_time_str        => l_message_time
                                          );
                                          
      
      cmn_interface.send_message( i_message              => l_response
                                , i_pty_id_cust          => l_source_processid
                                , i_pty_instance_id_cust => l_source_instanceid
                                );
                                
      viu_module.leave_module( i_module      => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
         viu_info.raise_info( );
   end hdl_request;

   



























   procedure send_request( i_rt_lpy in cmn_lifesign_parties%rowtype )
   is
      l_con_proc_name   constant cmn_constant.st_proc_name      := g_con_package || '.send_request';
      l_request_message          xmltype;
      l_next_seq                 cmn_lifesign_req_sent.sequence%type;
      l_rt_pty                   cmn_parties%rowtype;
      l_rt_lrs                   cmn_lifesign_req_sent%rowtype;
   begin
      viu_module.enter_module( i_module      => l_con_proc_name );

      if cmn_pty_tapi_pck.pty_select_row( i_pty_id      => i_rt_lpy.pty_id
                                        , o_rt_pty      => l_rt_pty
                                        )
      then
         
         l_rt_lrs.lpy_id               := i_rt_lpy.id;
         l_rt_lrs.event_time           := cmn_common.default_timestamp;
         l_rt_lrs.sequence             :=
                              cmn_lifesign.get_next_lsn_sent_seq( i_lpy_id      => i_rt_lpy.id );

         l_rt_lrs.event_time_response  := null;
         l_rt_lrs.response_received    := null;
         cmn_lrs_tapi_pck.lrs_insert_row( io_rt_lrs      => l_rt_lrs );
         
         commit;
         
         l_request_message             :=
                 create_request( i_pty_id_cust          => l_rt_pty.id_cust
                               , i_pty_instance_id_cust => l_rt_pty.instance_id_cust
                               , i_sequence             => l_rt_lrs.sequence
                               );
         
         cmn_interface.send_message( i_message              => l_request_message
                                   , i_pty_id_cust          => l_rt_pty.id_cust
                                   , i_pty_instance_id_cust => l_rt_pty.instance_id_cust
                                   );
      end if;

      viu_module.leave_module( i_module      => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
   end send_request;
end cmn_lifesignrequest;
/