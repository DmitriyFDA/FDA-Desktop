create or replace PACKAGE pdm_adn_tapi_pck
IS
-- Table API package for table pdm_attribute_definitions
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:40:58)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'PDM_ADN_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'PDM_ATTRIBUTE_DEFINITIONS';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION adn_select_row( i_adn_ID   IN  pdm_attribute_definitions.ID%TYPE
                       , o_rt_adn   OUT pdm_attribute_definitions%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION adn_select_row_uk1( i_adn_PATH   IN  pdm_attribute_definitions.PATH%TYPE
                           , o_rt_adn  OUT pdm_attribute_definitions%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION adn_select_row_upd( i_adn_ID   IN  pdm_attribute_definitions.ID%TYPE
                           , o_rt_adn   OUT pdm_attribute_definitions%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION adn_select_row_upd_uk1( i_adn_PATH   IN  pdm_attribute_definitions.PATH%TYPE
                               , o_rt_adn  OUT pdm_attribute_definitions%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE adn_lock_row( i_adn_ID   IN  pdm_attribute_definitions.ID%TYPE )
;

PROCEDURE adn_lock_row_nowait( i_adn_ID   IN  pdm_attribute_definitions.ID%TYPE )
;

PROCEDURE adn_insert_row ( io_rt_adn  IN OUT pdm_attribute_definitions%ROWTYPE )
;

FUNCTION adn_update_row( i_adn_ID   IN     pdm_attribute_definitions.ID%TYPE
                       , io_rt_adn  IN OUT pdm_attribute_definitions%ROWTYPE )
RETURN NUMBER
;

FUNCTION adn_delete_row( i_adn_ID   IN  pdm_attribute_definitions.ID%TYPE )
RETURN BOOLEAN
;


END pdm_adn_tapi_pck;
/




package body pdm_adn_tapi_pck
is




function adn_select_row( i_adn_id   in  pdm_attribute_definitions.id%type
                       , o_rt_adn   out pdm_attribute_definitions%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.adn_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_adn ( i_adn_id   in  pdm_attribute_definitions.id%type )
      is 
           select *
             from pdm_attribute_definitions adn
            where adn.id = i_adn_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_adn( i_adn_id => i_adn_id );
         fetch c_adn into o_rt_adn;
         l_found := c_adn%found;
         close c_adn;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_adn%isopen
         then
            close c_adn;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end adn_select_row;

function adn_select_row_uk1( i_adn_path   in  pdm_attribute_definitions.path%type
                           , o_rt_adn  out pdm_attribute_definitions%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.adn_select_row_uk1';
   l_found                boolean      := false;
begin
   declare
      cursor c_adn ( i_adn_path   in  pdm_attribute_definitions.path%type )
      is
         select *
           from pdm_attribute_definitions adn
          where adn.path = i_adn_path ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_adn(i_adn_path => i_adn_path);
         fetch c_adn into o_rt_adn;
         l_found := c_adn%found;
         close c_adn;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_adn%isopen
      then
         close c_adn;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end adn_select_row_uk1;

function adn_select_row_upd( i_adn_id   in  pdm_attribute_definitions.id%type
                           , o_rt_adn   out pdm_attribute_definitions%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.adn_select_row_upd';
   l_found                boolean      := false;

   cursor c_adn ( i_adn_id   in  pdm_attribute_definitions.id%type )
   is
           select *
             from pdm_attribute_definitions adn
            where adn.id = i_adn_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_adn( i_adn_id => i_adn_id );
   fetch c_adn into o_rt_adn;
   l_found := c_adn%found;
   close c_adn;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_adn%isopen
      then
         close c_adn;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end adn_select_row_upd;

function adn_select_row_upd_uk1( i_adn_path   in  pdm_attribute_definitions.path%type
                               , o_rt_adn  out pdm_attribute_definitions%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.adn_select_row_upd_uk1';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := adn_select_row_uk1( i_adn_path   =>  i_adn_path
                                   , o_rt_adn => o_rt_adn );
      if l_found
      then
         
         l_found := adn_select_row_upd( i_adn_id => o_rt_adn.id
                                      , o_rt_adn => o_rt_adn );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end adn_select_row_upd_uk1;

procedure adn_lock_row( i_adn_id   in  pdm_attribute_definitions.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.adn_lock_row';
begin
  declare
     cursor c_adn ( i_adn_id   in  pdm_attribute_definitions.id%type )
     is
             select ''
               from pdm_attribute_definitions adn
              where adn.id = i_adn_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_adn_id is not null
         then
            begin
                
                adn_lock_row_nowait( i_adn_id => i_adn_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_adn( i_adn_id => i_adn_id );
                  close c_adn;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_adn%isopen
         then
            close c_adn;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end adn_lock_row;

procedure adn_lock_row_nowait( i_adn_id   in  pdm_attribute_definitions.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.adn_lock_row_nowait';
begin
   declare
      cursor c_adn ( i_adn_id   in  pdm_attribute_definitions.id%type )
      is
              select ''
                from pdm_attribute_definitions adn
               where adn.id = i_adn_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_adn_id is not null
         then
            
            open c_adn( i_adn_id => i_adn_id );

            close c_adn;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_adn%isopen
        then
           close c_adn;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_adn_id||'"' );
   end;                                                          
end adn_lock_row_nowait;

function adn_perform_update( i_adn_id   in     pdm_attribute_definitions.id%type
                           , io_rt_adn  in out pdm_attribute_definitions%rowtype )
return number
;

function adn_perform_delete( i_adn_id   in  pdm_attribute_definitions.id%type )
return boolean
;

procedure adn_insert_row ( io_rt_adn  in out pdm_attribute_definitions%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.adn_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into pdm_attribute_definitions( id
                                , path
                                , name
                                , type
                                , adn_id
                                , value
                                , adn_id_resume
                                , agp_id
                                , fen_id )
              values ( io_rt_adn.id
                     , io_rt_adn.path
                     , io_rt_adn.name
                     , io_rt_adn.type
                     , io_rt_adn.adn_id
                     , io_rt_adn.value
                     , io_rt_adn.adn_id_resume
                     , io_rt_adn.agp_id
                     , io_rt_adn.fen_id )
           returning id
                   , path
                   , name
                   , type
                   , adn_id
                   , value
                   , adn_id_resume
                   , agp_id
                   , fen_id
                into io_rt_adn.id
                   , io_rt_adn.path
                   , io_rt_adn.name
                   , io_rt_adn.type
                   , io_rt_adn.adn_id
                   , io_rt_adn.value
                   , io_rt_adn.adn_id_resume
                   , io_rt_adn.agp_id
                   , io_rt_adn.fen_id;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_adn.id||'"'
                                                             ||', PATH = "'||io_rt_adn.path||'"'
                                                             ||', NAME = "'||io_rt_adn.name||'"'
                                                             ||', TYPE = "'||io_rt_adn.type||'"'
                                                             ||', ADN_ID = "'||io_rt_adn.adn_id||'"'
                                                             ||', VALUE = "'||io_rt_adn.value||'"'
                                                             ||', ADN_ID_RESUME = "'||io_rt_adn.adn_id_resume||'"'
                                                             ||', AGP_ID = "'||io_rt_adn.agp_id||'"'
                                                             ||', FEN_ID = "'||io_rt_adn.fen_id||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end adn_insert_row;

function adn_perform_update( i_adn_id   in     pdm_attribute_definitions.id%type
                           , io_rt_adn  in out pdm_attribute_definitions%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.adn_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update pdm_attribute_definitions
            set id = io_rt_adn.id
              , path = io_rt_adn.path
              , name = io_rt_adn.name
              , type = io_rt_adn.type
              , adn_id = io_rt_adn.adn_id
              , value = io_rt_adn.value
              , adn_id_resume = io_rt_adn.adn_id_resume
              , agp_id = io_rt_adn.agp_id
              , fen_id = io_rt_adn.fen_id
          where id = i_adn_id
      returning id
              , path
              , name
              , type
              , adn_id
              , value
              , adn_id_resume
              , agp_id
              , fen_id
           into io_rt_adn.id
              , io_rt_adn.path
              , io_rt_adn.name
              , io_rt_adn.type
              , io_rt_adn.adn_id
              , io_rt_adn.value
              , io_rt_adn.adn_id_resume
              , io_rt_adn.agp_id
              , io_rt_adn.fen_id;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_adn.id||'"'
                                                             ||', PATH = "'||io_rt_adn.path||'"'
                                                             ||', NAME = "'||io_rt_adn.name||'"'
                                                             ||', TYPE = "'||io_rt_adn.type||'"'
                                                             ||', ADN_ID = "'||io_rt_adn.adn_id||'"'
                                                             ||', VALUE = "'||io_rt_adn.value||'"'
                                                             ||', ADN_ID_RESUME = "'||io_rt_adn.adn_id_resume||'"'
                                                             ||', AGP_ID = "'||io_rt_adn.agp_id||'"'
                                                             ||', FEN_ID = "'||io_rt_adn.fen_id||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end adn_perform_update;

function adn_perform_delete( i_adn_id   in  pdm_attribute_definitions.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.adn_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from pdm_attribute_definitions
          where id = i_adn_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_adn_id||'"' );
   end;                                                          
end adn_perform_delete;

function adn_update_row( i_adn_id   in     pdm_attribute_definitions.id%type
                       , io_rt_adn  in out pdm_attribute_definitions%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.adn_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         adn_lock_row( i_adn_id   =>  i_adn_id );

         
         l_rowcount := 
            adn_perform_update( i_adn_id   =>  i_adn_id
                              , io_rt_adn  => io_rt_adn );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_adn.id||'"'
                                                          ||', PATH = "'||io_rt_adn.path||'"'
                                                          ||', NAME = "'||io_rt_adn.name||'"'
                                                          ||', TYPE = "'||io_rt_adn.type||'"'
                                                          ||', ADN_ID = "'||io_rt_adn.adn_id||'"'
                                                          ||', VALUE = "'||io_rt_adn.value||'"'
                                                          ||', ADN_ID_RESUME = "'||io_rt_adn.adn_id_resume||'"'
                                                          ||', AGP_ID = "'||io_rt_adn.agp_id||'"'
                                                          ||', FEN_ID = "'||io_rt_adn.fen_id||'"'                                                           , 1, 4000));
   end;                                                          
end adn_update_row;

function adn_delete_row( i_adn_id   in  pdm_attribute_definitions.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.adn_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         adn_lock_row( i_adn_id   =>  i_adn_id );

         
         l_deleted := adn_perform_delete( i_adn_id   =>  i_adn_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_adn_id||'"' );
   end;                                                          
end adn_delete_row;


end pdm_adn_tapi_pck;
/