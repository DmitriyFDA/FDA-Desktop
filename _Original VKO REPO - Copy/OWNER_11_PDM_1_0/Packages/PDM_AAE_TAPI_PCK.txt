create or replace PACKAGE pdm_aae_tapi_pck
IS
-- Table API package for table pdm_assigned_active
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:40:58)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'PDM_AAE_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'PDM_ASSIGNED_ACTIVE';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION aae_select_row( i_aae_ID   IN  pdm_assigned_active.ID%TYPE
                       , o_rt_aae   OUT pdm_assigned_active%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION aae_select_row_upd( i_aae_ID   IN  pdm_assigned_active.ID%TYPE
                           , o_rt_aae   OUT pdm_assigned_active%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE aae_lock_row( i_aae_ID   IN  pdm_assigned_active.ID%TYPE )
;

PROCEDURE aae_lock_row_nowait( i_aae_ID   IN  pdm_assigned_active.ID%TYPE )
;

PROCEDURE aae_insert_row ( io_rt_aae  IN OUT pdm_assigned_active%ROWTYPE )
;

FUNCTION aae_update_row( i_aae_ID   IN     pdm_assigned_active.ID%TYPE
                       , io_rt_aae  IN OUT pdm_assigned_active%ROWTYPE )
RETURN NUMBER
;

FUNCTION aae_delete_row( i_aae_ID   IN  pdm_assigned_active.ID%TYPE )
RETURN BOOLEAN
;

FUNCTION aae_seq1_nextval
RETURN pdm_assigned_active.ID%TYPE
;


END pdm_aae_tapi_pck;
/




package body pdm_aae_tapi_pck
is




function aae_select_row( i_aae_id   in  pdm_assigned_active.id%type
                       , o_rt_aae   out pdm_assigned_active%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.aae_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_aae ( i_aae_id   in  pdm_assigned_active.id%type )
      is 
           select *
             from pdm_assigned_active aae
            where aae.id = i_aae_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_aae( i_aae_id => i_aae_id );
         fetch c_aae into o_rt_aae;
         l_found := c_aae%found;
         close c_aae;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_aae%isopen
         then
            close c_aae;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end aae_select_row;

function aae_select_row_upd( i_aae_id   in  pdm_assigned_active.id%type
                           , o_rt_aae   out pdm_assigned_active%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.aae_select_row_upd';
   l_found                boolean      := false;

   cursor c_aae ( i_aae_id   in  pdm_assigned_active.id%type )
   is
           select *
             from pdm_assigned_active aae
            where aae.id = i_aae_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_aae( i_aae_id => i_aae_id );
   fetch c_aae into o_rt_aae;
   l_found := c_aae%found;
   close c_aae;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_aae%isopen
      then
         close c_aae;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end aae_select_row_upd;

procedure aae_lock_row( i_aae_id   in  pdm_assigned_active.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.aae_lock_row';
begin
  declare
     cursor c_aae ( i_aae_id   in  pdm_assigned_active.id%type )
     is
             select ''
               from pdm_assigned_active aae
              where aae.id = i_aae_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_aae_id is not null
         then
            begin
                
                aae_lock_row_nowait( i_aae_id => i_aae_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_aae( i_aae_id => i_aae_id );
                  close c_aae;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_aae%isopen
         then
            close c_aae;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end aae_lock_row;

procedure aae_lock_row_nowait( i_aae_id   in  pdm_assigned_active.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.aae_lock_row_nowait';
begin
   declare
      cursor c_aae ( i_aae_id   in  pdm_assigned_active.id%type )
      is
              select ''
                from pdm_assigned_active aae
               where aae.id = i_aae_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_aae_id is not null
         then
            
            open c_aae( i_aae_id => i_aae_id );

            close c_aae;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_aae%isopen
        then
           close c_aae;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_aae_id||'"' );
   end;                                                          
end aae_lock_row_nowait;

function aae_perform_update( i_aae_id   in     pdm_assigned_active.id%type
                           , io_rt_aae  in out pdm_assigned_active%rowtype )
return number
;

function aae_perform_delete( i_aae_id   in  pdm_assigned_active.id%type )
return boolean
;

procedure aae_insert_row ( io_rt_aae  in out pdm_assigned_active%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.aae_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into pdm_assigned_active( id
                                , pet_id
                                , ind_active
                                , psn_id
                                , pdt_id
                                , pcs_id
                                , aty_id
                                , pse_id
                                , pae_id
                                , date_created )
              values ( io_rt_aae.id
                     , io_rt_aae.pet_id
                     , io_rt_aae.ind_active
                     , io_rt_aae.psn_id
                     , io_rt_aae.pdt_id
                     , io_rt_aae.pcs_id
                     , io_rt_aae.aty_id
                     , io_rt_aae.pse_id
                     , io_rt_aae.pae_id
                     , io_rt_aae.date_created )
           returning id
                   , pet_id
                   , ind_active
                   , psn_id
                   , pdt_id
                   , pcs_id
                   , aty_id
                   , pse_id
                   , pae_id
                   , date_created
                into io_rt_aae.id
                   , io_rt_aae.pet_id
                   , io_rt_aae.ind_active
                   , io_rt_aae.psn_id
                   , io_rt_aae.pdt_id
                   , io_rt_aae.pcs_id
                   , io_rt_aae.aty_id
                   , io_rt_aae.pse_id
                   , io_rt_aae.pae_id
                   , io_rt_aae.date_created;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_aae.id||'"'
                                                             ||', PET_ID = "'||io_rt_aae.pet_id||'"'
                                                             ||', IND_ACTIVE = "'||io_rt_aae.ind_active||'"'
                                                             ||', PSN_ID = "'||io_rt_aae.psn_id||'"'
                                                             ||', PDT_ID = "'||io_rt_aae.pdt_id||'"'
                                                             ||', PCS_ID = "'||io_rt_aae.pcs_id||'"'
                                                             ||', ATY_ID = "'||io_rt_aae.aty_id||'"'
                                                             ||', PSE_ID = "'||io_rt_aae.pse_id||'"'
                                                             ||', PAE_ID = "'||io_rt_aae.pae_id||'"'
                                                             ||', DATE_CREATED = "'||io_rt_aae.date_created||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end aae_insert_row;

function aae_perform_update( i_aae_id   in     pdm_assigned_active.id%type
                           , io_rt_aae  in out pdm_assigned_active%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.aae_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update pdm_assigned_active
            set id = io_rt_aae.id
              , pet_id = io_rt_aae.pet_id
              , ind_active = io_rt_aae.ind_active
              , psn_id = io_rt_aae.psn_id
              , pdt_id = io_rt_aae.pdt_id
              , pcs_id = io_rt_aae.pcs_id
              , aty_id = io_rt_aae.aty_id
              , pse_id = io_rt_aae.pse_id
              , pae_id = io_rt_aae.pae_id
              , date_created = io_rt_aae.date_created
          where id = i_aae_id
      returning id
              , pet_id
              , ind_active
              , psn_id
              , pdt_id
              , pcs_id
              , aty_id
              , pse_id
              , pae_id
              , date_created
           into io_rt_aae.id
              , io_rt_aae.pet_id
              , io_rt_aae.ind_active
              , io_rt_aae.psn_id
              , io_rt_aae.pdt_id
              , io_rt_aae.pcs_id
              , io_rt_aae.aty_id
              , io_rt_aae.pse_id
              , io_rt_aae.pae_id
              , io_rt_aae.date_created;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_aae.id||'"'
                                                             ||', PET_ID = "'||io_rt_aae.pet_id||'"'
                                                             ||', IND_ACTIVE = "'||io_rt_aae.ind_active||'"'
                                                             ||', PSN_ID = "'||io_rt_aae.psn_id||'"'
                                                             ||', PDT_ID = "'||io_rt_aae.pdt_id||'"'
                                                             ||', PCS_ID = "'||io_rt_aae.pcs_id||'"'
                                                             ||', ATY_ID = "'||io_rt_aae.aty_id||'"'
                                                             ||', PSE_ID = "'||io_rt_aae.pse_id||'"'
                                                             ||', PAE_ID = "'||io_rt_aae.pae_id||'"'
                                                             ||', DATE_CREATED = "'||io_rt_aae.date_created||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end aae_perform_update;

function aae_perform_delete( i_aae_id   in  pdm_assigned_active.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.aae_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from pdm_assigned_active
          where id = i_aae_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_aae_id||'"' );
   end;                                                          
end aae_perform_delete;

function aae_update_row( i_aae_id   in     pdm_assigned_active.id%type
                       , io_rt_aae  in out pdm_assigned_active%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.aae_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         aae_lock_row( i_aae_id   =>  i_aae_id );

         
         l_rowcount := 
            aae_perform_update( i_aae_id   =>  i_aae_id
                              , io_rt_aae  => io_rt_aae );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_aae.id||'"'
                                                          ||', PET_ID = "'||io_rt_aae.pet_id||'"'
                                                          ||', IND_ACTIVE = "'||io_rt_aae.ind_active||'"'
                                                          ||', PSN_ID = "'||io_rt_aae.psn_id||'"'
                                                          ||', PDT_ID = "'||io_rt_aae.pdt_id||'"'
                                                          ||', PCS_ID = "'||io_rt_aae.pcs_id||'"'
                                                          ||', ATY_ID = "'||io_rt_aae.aty_id||'"'
                                                          ||', PSE_ID = "'||io_rt_aae.pse_id||'"'
                                                          ||', PAE_ID = "'||io_rt_aae.pae_id||'"'
                                                          ||', DATE_CREATED = "'||io_rt_aae.date_created||'"'                                                           , 1, 4000));
   end;                                                          
end aae_update_row;

function aae_delete_row( i_aae_id   in  pdm_assigned_active.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.aae_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         aae_lock_row( i_aae_id   =>  i_aae_id );

         
         l_deleted := aae_perform_delete( i_aae_id   =>  i_aae_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_aae_id||'"' );
   end;                                                          
end aae_delete_row;

function aae_seq1_nextval
return pdm_assigned_active.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.aae_seq1_nextval';
   l_aae_id  pdm_assigned_active.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select pdm_aae_seq1.nextval 
           into l_aae_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_aae_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end aae_seq1_nextval;


end pdm_aae_tapi_pck;
/