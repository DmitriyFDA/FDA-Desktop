create or replace PACKAGE pdm_pdt_tapi_pck
IS
-- Table API package for table pdm_products
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:01)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'PDM_PDT_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'PDM_PRODUCTS';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION pdt_select_row( i_pdt_ID   IN  pdm_products.ID%TYPE
                       , o_rt_pdt   OUT pdm_products%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION pdt_select_row_uk1( i_pdt_FLY_ID   IN  pdm_products.FLY_ID%TYPE
                           , i_pdt_ID_CUST   IN  pdm_products.ID_CUST%TYPE
                           , o_rt_pdt  OUT pdm_products%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION pdt_select_row_uk2( i_pdt_FLY_ID   IN  pdm_products.FLY_ID%TYPE
                           , i_pdt_SEQUENCE   IN  pdm_products.SEQUENCE%TYPE
                           , o_rt_pdt  OUT pdm_products%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION pdt_select_row_upd( i_pdt_ID   IN  pdm_products.ID%TYPE
                           , o_rt_pdt   OUT pdm_products%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION pdt_select_row_upd_uk1( i_pdt_FLY_ID   IN  pdm_products.FLY_ID%TYPE
                               , i_pdt_ID_CUST   IN  pdm_products.ID_CUST%TYPE
                               , o_rt_pdt  OUT pdm_products%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION pdt_select_row_upd_uk2( i_pdt_FLY_ID   IN  pdm_products.FLY_ID%TYPE
                               , i_pdt_SEQUENCE   IN  pdm_products.SEQUENCE%TYPE
                               , o_rt_pdt  OUT pdm_products%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE pdt_lock_row( i_pdt_ID   IN  pdm_products.ID%TYPE )
;

PROCEDURE pdt_lock_row_nowait( i_pdt_ID   IN  pdm_products.ID%TYPE )
;

PROCEDURE pdt_insert_row ( io_rt_pdt  IN OUT pdm_products%ROWTYPE )
;

FUNCTION pdt_update_row( i_pdt_ID   IN     pdm_products.ID%TYPE
                       , io_rt_pdt  IN OUT pdm_products%ROWTYPE )
RETURN NUMBER
;

FUNCTION pdt_delete_row( i_pdt_ID   IN  pdm_products.ID%TYPE )
RETURN BOOLEAN
;

FUNCTION pdt_seq1_nextval
RETURN pdm_products.ID%TYPE
;


END pdm_pdt_tapi_pck;
/




package body pdm_pdt_tapi_pck
is




function pdt_select_row( i_pdt_id   in  pdm_products.id%type
                       , o_rt_pdt   out pdm_products%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pdt_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_pdt ( i_pdt_id   in  pdm_products.id%type )
      is 
           select *
             from pdm_products pdt
            where pdt.id = i_pdt_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_pdt( i_pdt_id => i_pdt_id );
         fetch c_pdt into o_rt_pdt;
         l_found := c_pdt%found;
         close c_pdt;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_pdt%isopen
         then
            close c_pdt;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pdt_select_row;

function pdt_select_row_uk1( i_pdt_fly_id   in  pdm_products.fly_id%type
                           , i_pdt_id_cust   in  pdm_products.id_cust%type
                           , o_rt_pdt  out pdm_products%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pdt_select_row_uk1';
   l_found                boolean      := false;
begin
   declare
      cursor c_pdt ( i_pdt_fly_id   in  pdm_products.fly_id%type
                   , i_pdt_id_cust   in  pdm_products.id_cust%type )
      is
         select *
           from pdm_products pdt
          where pdt.fly_id = i_pdt_fly_id 
            and pdt.id_cust = i_pdt_id_cust ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_pdt(i_pdt_fly_id => i_pdt_fly_id, i_pdt_id_cust => i_pdt_id_cust);
         fetch c_pdt into o_rt_pdt;
         l_found := c_pdt%found;
         close c_pdt;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_pdt%isopen
      then
         close c_pdt;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pdt_select_row_uk1;

function pdt_select_row_uk2( i_pdt_fly_id   in  pdm_products.fly_id%type
                           , i_pdt_sequence   in  pdm_products.sequence%type
                           , o_rt_pdt  out pdm_products%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pdt_select_row_uk2';
   l_found                boolean      := false;
begin
   declare
      cursor c_pdt ( i_pdt_fly_id   in  pdm_products.fly_id%type
                   , i_pdt_sequence   in  pdm_products.sequence%type )
      is
         select *
           from pdm_products pdt
          where pdt.fly_id = i_pdt_fly_id 
            and pdt.sequence = i_pdt_sequence ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_pdt(i_pdt_fly_id => i_pdt_fly_id, i_pdt_sequence => i_pdt_sequence);
         fetch c_pdt into o_rt_pdt;
         l_found := c_pdt%found;
         close c_pdt;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_pdt%isopen
      then
         close c_pdt;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pdt_select_row_uk2;

function pdt_select_row_upd( i_pdt_id   in  pdm_products.id%type
                           , o_rt_pdt   out pdm_products%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pdt_select_row_upd';
   l_found                boolean      := false;

   cursor c_pdt ( i_pdt_id   in  pdm_products.id%type )
   is
           select *
             from pdm_products pdt
            where pdt.id = i_pdt_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_pdt( i_pdt_id => i_pdt_id );
   fetch c_pdt into o_rt_pdt;
   l_found := c_pdt%found;
   close c_pdt;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_pdt%isopen
      then
         close c_pdt;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end pdt_select_row_upd;

function pdt_select_row_upd_uk1( i_pdt_fly_id   in  pdm_products.fly_id%type
                               , i_pdt_id_cust   in  pdm_products.id_cust%type
                               , o_rt_pdt  out pdm_products%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pdt_select_row_upd_uk1';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := pdt_select_row_uk1( i_pdt_fly_id   =>  i_pdt_fly_id
                                   , i_pdt_id_cust   =>  i_pdt_id_cust
                                   , o_rt_pdt => o_rt_pdt );
      if l_found
      then
         
         l_found := pdt_select_row_upd( i_pdt_id => o_rt_pdt.id
                                      , o_rt_pdt => o_rt_pdt );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end pdt_select_row_upd_uk1;

function pdt_select_row_upd_uk2( i_pdt_fly_id   in  pdm_products.fly_id%type
                               , i_pdt_sequence   in  pdm_products.sequence%type
                               , o_rt_pdt  out pdm_products%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pdt_select_row_upd_uk2';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := pdt_select_row_uk2( i_pdt_fly_id   =>  i_pdt_fly_id
                                   , i_pdt_sequence   =>  i_pdt_sequence
                                   , o_rt_pdt => o_rt_pdt );
      if l_found
      then
         
         l_found := pdt_select_row_upd( i_pdt_id => o_rt_pdt.id
                                      , o_rt_pdt => o_rt_pdt );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end pdt_select_row_upd_uk2;

procedure pdt_lock_row( i_pdt_id   in  pdm_products.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pdt_lock_row';
begin
  declare
     cursor c_pdt ( i_pdt_id   in  pdm_products.id%type )
     is
             select ''
               from pdm_products pdt
              where pdt.id = i_pdt_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_pdt_id is not null
         then
            begin
                
                pdt_lock_row_nowait( i_pdt_id => i_pdt_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_pdt( i_pdt_id => i_pdt_id );
                  close c_pdt;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_pdt%isopen
         then
            close c_pdt;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end pdt_lock_row;

procedure pdt_lock_row_nowait( i_pdt_id   in  pdm_products.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pdt_lock_row_nowait';
begin
   declare
      cursor c_pdt ( i_pdt_id   in  pdm_products.id%type )
      is
              select ''
                from pdm_products pdt
               where pdt.id = i_pdt_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_pdt_id is not null
         then
            
            open c_pdt( i_pdt_id => i_pdt_id );

            close c_pdt;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_pdt%isopen
        then
           close c_pdt;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_pdt_id||'"' );
   end;                                                          
end pdt_lock_row_nowait;

function pdt_perform_update( i_pdt_id   in     pdm_products.id%type
                           , io_rt_pdt  in out pdm_products%rowtype )
return number
;

function pdt_perform_delete( i_pdt_id   in  pdm_products.id%type )
return boolean
;

procedure pdt_insert_row ( io_rt_pdt  in out pdm_products%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pdt_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into pdm_products( id
                                , fly_id
                                , id_cust
                                , sequence
                                , tpt_id
                                , esn_id )
              values ( io_rt_pdt.id
                     , io_rt_pdt.fly_id
                     , io_rt_pdt.id_cust
                     , io_rt_pdt.sequence
                     , io_rt_pdt.tpt_id
                     , io_rt_pdt.esn_id )
           returning id
                   , fly_id
                   , id_cust
                   , sequence
                   , tpt_id
                   , esn_id
                into io_rt_pdt.id
                   , io_rt_pdt.fly_id
                   , io_rt_pdt.id_cust
                   , io_rt_pdt.sequence
                   , io_rt_pdt.tpt_id
                   , io_rt_pdt.esn_id;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_pdt.id||'"'
                                                             ||', FLY_ID = "'||io_rt_pdt.fly_id||'"'
                                                             ||', ID_CUST = "'||io_rt_pdt.id_cust||'"'
                                                             ||', SEQUENCE = "'||io_rt_pdt.sequence||'"'
                                                             ||', TPT_ID = "'||io_rt_pdt.tpt_id||'"'
                                                             ||', ESN_ID = "'||io_rt_pdt.esn_id||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pdt_insert_row;

function pdt_perform_update( i_pdt_id   in     pdm_products.id%type
                           , io_rt_pdt  in out pdm_products%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pdt_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update pdm_products
            set id = io_rt_pdt.id
              , fly_id = io_rt_pdt.fly_id
              , id_cust = io_rt_pdt.id_cust
              , sequence = io_rt_pdt.sequence
              , tpt_id = io_rt_pdt.tpt_id
              , esn_id = io_rt_pdt.esn_id
          where id = i_pdt_id
      returning id
              , fly_id
              , id_cust
              , sequence
              , tpt_id
              , esn_id
           into io_rt_pdt.id
              , io_rt_pdt.fly_id
              , io_rt_pdt.id_cust
              , io_rt_pdt.sequence
              , io_rt_pdt.tpt_id
              , io_rt_pdt.esn_id;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_pdt.id||'"'
                                                             ||', FLY_ID = "'||io_rt_pdt.fly_id||'"'
                                                             ||', ID_CUST = "'||io_rt_pdt.id_cust||'"'
                                                             ||', SEQUENCE = "'||io_rt_pdt.sequence||'"'
                                                             ||', TPT_ID = "'||io_rt_pdt.tpt_id||'"'
                                                             ||', ESN_ID = "'||io_rt_pdt.esn_id||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pdt_perform_update;

function pdt_perform_delete( i_pdt_id   in  pdm_products.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pdt_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from pdm_products
          where id = i_pdt_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_pdt_id||'"' );
   end;                                                          
end pdt_perform_delete;

function pdt_update_row( i_pdt_id   in     pdm_products.id%type
                       , io_rt_pdt  in out pdm_products%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pdt_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         pdt_lock_row( i_pdt_id   =>  i_pdt_id );

         
         l_rowcount := 
            pdt_perform_update( i_pdt_id   =>  i_pdt_id
                              , io_rt_pdt  => io_rt_pdt );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_pdt.id||'"'
                                                          ||', FLY_ID = "'||io_rt_pdt.fly_id||'"'
                                                          ||', ID_CUST = "'||io_rt_pdt.id_cust||'"'
                                                          ||', SEQUENCE = "'||io_rt_pdt.sequence||'"'
                                                          ||', TPT_ID = "'||io_rt_pdt.tpt_id||'"'
                                                          ||', ESN_ID = "'||io_rt_pdt.esn_id||'"'                                                           , 1, 4000));
   end;                                                          
end pdt_update_row;

function pdt_delete_row( i_pdt_id   in  pdm_products.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pdt_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         pdt_lock_row( i_pdt_id   =>  i_pdt_id );

         
         l_deleted := pdt_perform_delete( i_pdt_id   =>  i_pdt_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_pdt_id||'"' );
   end;                                                          
end pdt_delete_row;

function pdt_seq1_nextval
return pdm_products.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pdt_seq1_nextval';
   l_pdt_id  pdm_products.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select pdm_pdt_seq1.nextval 
           into l_pdt_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_pdt_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pdt_seq1_nextval;


end pdm_pdt_tapi_pck;
/