create or replace PACKAGE pdm_esn_tapi_pck
IS
-- Table API package for table pdm_expressions
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:40:59)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'PDM_ESN_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'PDM_EXPRESSIONS';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION esn_select_row( i_esn_ID   IN  pdm_expressions.ID%TYPE
                       , o_rt_esn   OUT pdm_expressions%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION esn_select_row_upd( i_esn_ID   IN  pdm_expressions.ID%TYPE
                           , o_rt_esn   OUT pdm_expressions%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE esn_lock_row( i_esn_ID   IN  pdm_expressions.ID%TYPE )
;

PROCEDURE esn_lock_row_nowait( i_esn_ID   IN  pdm_expressions.ID%TYPE )
;

PROCEDURE esn_insert_row ( io_rt_esn  IN OUT pdm_expressions%ROWTYPE )
;

FUNCTION esn_update_row( i_esn_ID   IN     pdm_expressions.ID%TYPE
                       , io_rt_esn  IN OUT pdm_expressions%ROWTYPE )
RETURN NUMBER
;

FUNCTION esn_delete_row( i_esn_ID   IN  pdm_expressions.ID%TYPE )
RETURN BOOLEAN
;

FUNCTION esn_seq1_nextval
RETURN pdm_expressions.ID%TYPE
;


END pdm_esn_tapi_pck;
/




package body pdm_esn_tapi_pck
is




function esn_select_row( i_esn_id   in  pdm_expressions.id%type
                       , o_rt_esn   out pdm_expressions%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.esn_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_esn ( i_esn_id   in  pdm_expressions.id%type )
      is 
           select *
             from pdm_expressions esn
            where esn.id = i_esn_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_esn( i_esn_id => i_esn_id );
         fetch c_esn into o_rt_esn;
         l_found := c_esn%found;
         close c_esn;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_esn%isopen
         then
            close c_esn;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end esn_select_row;

function esn_select_row_upd( i_esn_id   in  pdm_expressions.id%type
                           , o_rt_esn   out pdm_expressions%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.esn_select_row_upd';
   l_found                boolean      := false;

   cursor c_esn ( i_esn_id   in  pdm_expressions.id%type )
   is
           select *
             from pdm_expressions esn
            where esn.id = i_esn_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_esn( i_esn_id => i_esn_id );
   fetch c_esn into o_rt_esn;
   l_found := c_esn%found;
   close c_esn;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_esn%isopen
      then
         close c_esn;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end esn_select_row_upd;

procedure esn_lock_row( i_esn_id   in  pdm_expressions.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.esn_lock_row';
begin
  declare
     cursor c_esn ( i_esn_id   in  pdm_expressions.id%type )
     is
             select ''
               from pdm_expressions esn
              where esn.id = i_esn_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_esn_id is not null
         then
            begin
                
                esn_lock_row_nowait( i_esn_id => i_esn_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_esn( i_esn_id => i_esn_id );
                  close c_esn;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_esn%isopen
         then
            close c_esn;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end esn_lock_row;

procedure esn_lock_row_nowait( i_esn_id   in  pdm_expressions.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.esn_lock_row_nowait';
begin
   declare
      cursor c_esn ( i_esn_id   in  pdm_expressions.id%type )
      is
              select ''
                from pdm_expressions esn
               where esn.id = i_esn_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_esn_id is not null
         then
            
            open c_esn( i_esn_id => i_esn_id );

            close c_esn;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_esn%isopen
        then
           close c_esn;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_esn_id||'"' );
   end;                                                          
end esn_lock_row_nowait;

function esn_perform_update( i_esn_id   in     pdm_expressions.id%type
                           , io_rt_esn  in out pdm_expressions%rowtype )
return number
;

function esn_perform_delete( i_esn_id   in  pdm_expressions.id%type )
return boolean
;

procedure esn_insert_row ( io_rt_esn  in out pdm_expressions%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.esn_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into pdm_expressions( id
                                , tle_id
                                , ind_process_specification
                                , esn_id
                                , eon_id
                                , operator_type
                                , count_exclusive_leaves )
              values ( io_rt_esn.id
                     , io_rt_esn.tle_id
                     , io_rt_esn.ind_process_specification
                     , io_rt_esn.esn_id
                     , io_rt_esn.eon_id
                     , io_rt_esn.operator_type
                     , io_rt_esn.count_exclusive_leaves )
           returning id
                   , tle_id
                   , ind_process_specification
                   , esn_id
                   , eon_id
                   , operator_type
                   , count_exclusive_leaves
                into io_rt_esn.id
                   , io_rt_esn.tle_id
                   , io_rt_esn.ind_process_specification
                   , io_rt_esn.esn_id
                   , io_rt_esn.eon_id
                   , io_rt_esn.operator_type
                   , io_rt_esn.count_exclusive_leaves;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_esn.id||'"'
                                                             ||', TLE_ID = "'||io_rt_esn.tle_id||'"'
                                                             ||', IND_PROCESS_SPECIFICATION = "'||io_rt_esn.ind_process_specification||'"'
                                                             ||', ESN_ID = "'||io_rt_esn.esn_id||'"'
                                                             ||', EON_ID = "'||io_rt_esn.eon_id||'"'
                                                             ||', OPERATOR_TYPE = "'||io_rt_esn.operator_type||'"'
                                                             ||', COUNT_EXCLUSIVE_LEAVES = "'||io_rt_esn.count_exclusive_leaves||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end esn_insert_row;

function esn_perform_update( i_esn_id   in     pdm_expressions.id%type
                           , io_rt_esn  in out pdm_expressions%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.esn_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update pdm_expressions
            set id = io_rt_esn.id
              , tle_id = io_rt_esn.tle_id
              , ind_process_specification = io_rt_esn.ind_process_specification
              , esn_id = io_rt_esn.esn_id
              , eon_id = io_rt_esn.eon_id
              , operator_type = io_rt_esn.operator_type
              , count_exclusive_leaves = io_rt_esn.count_exclusive_leaves
          where id = i_esn_id
      returning id
              , tle_id
              , ind_process_specification
              , esn_id
              , eon_id
              , operator_type
              , count_exclusive_leaves
           into io_rt_esn.id
              , io_rt_esn.tle_id
              , io_rt_esn.ind_process_specification
              , io_rt_esn.esn_id
              , io_rt_esn.eon_id
              , io_rt_esn.operator_type
              , io_rt_esn.count_exclusive_leaves;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_esn.id||'"'
                                                             ||', TLE_ID = "'||io_rt_esn.tle_id||'"'
                                                             ||', IND_PROCESS_SPECIFICATION = "'||io_rt_esn.ind_process_specification||'"'
                                                             ||', ESN_ID = "'||io_rt_esn.esn_id||'"'
                                                             ||', EON_ID = "'||io_rt_esn.eon_id||'"'
                                                             ||', OPERATOR_TYPE = "'||io_rt_esn.operator_type||'"'
                                                             ||', COUNT_EXCLUSIVE_LEAVES = "'||io_rt_esn.count_exclusive_leaves||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end esn_perform_update;

function esn_perform_delete( i_esn_id   in  pdm_expressions.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.esn_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from pdm_expressions
          where id = i_esn_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_esn_id||'"' );
   end;                                                          
end esn_perform_delete;

function esn_update_row( i_esn_id   in     pdm_expressions.id%type
                       , io_rt_esn  in out pdm_expressions%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.esn_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         esn_lock_row( i_esn_id   =>  i_esn_id );

         
         l_rowcount := 
            esn_perform_update( i_esn_id   =>  i_esn_id
                              , io_rt_esn  => io_rt_esn );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_esn.id||'"'
                                                          ||', TLE_ID = "'||io_rt_esn.tle_id||'"'
                                                          ||', IND_PROCESS_SPECIFICATION = "'||io_rt_esn.ind_process_specification||'"'
                                                          ||', ESN_ID = "'||io_rt_esn.esn_id||'"'
                                                          ||', EON_ID = "'||io_rt_esn.eon_id||'"'
                                                          ||', OPERATOR_TYPE = "'||io_rt_esn.operator_type||'"'
                                                          ||', COUNT_EXCLUSIVE_LEAVES = "'||io_rt_esn.count_exclusive_leaves||'"'                                                           , 1, 4000));
   end;                                                          
end esn_update_row;

function esn_delete_row( i_esn_id   in  pdm_expressions.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.esn_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         esn_lock_row( i_esn_id   =>  i_esn_id );

         
         l_deleted := esn_perform_delete( i_esn_id   =>  i_esn_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_esn_id||'"' );
   end;                                                          
end esn_delete_row;

function esn_seq1_nextval
return pdm_expressions.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.esn_seq1_nextval';
   l_esn_id  pdm_expressions.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select pdm_esn_seq1.nextval 
           into l_esn_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_esn_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end esn_seq1_nextval;


end pdm_esn_tapi_pck;
/