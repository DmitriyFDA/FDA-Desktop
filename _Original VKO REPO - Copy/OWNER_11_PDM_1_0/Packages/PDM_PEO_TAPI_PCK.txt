create or replace PACKAGE pdm_peo_tapi_pck
IS
-- Table API package for table pdm_package_eval_operations
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:00)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'PDM_PEO_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'PDM_PACKAGE_EVAL_OPERATIONS';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION peo_select_row( i_peo_ID   IN  pdm_package_eval_operations.ID%TYPE
                       , o_rt_peo   OUT pdm_package_eval_operations%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION peo_select_row_uk1( i_peo_EON_ID   IN  pdm_package_eval_operations.EON_ID%TYPE
                           , i_peo_PAE_ID   IN  pdm_package_eval_operations.PAE_ID%TYPE
                           , i_peo_ACTIVATED_BY_PET_ID   IN  pdm_package_eval_operations.ACTIVATED_BY_PET_ID%TYPE
                           , o_rt_peo  OUT pdm_package_eval_operations%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION peo_select_row_upd( i_peo_ID   IN  pdm_package_eval_operations.ID%TYPE
                           , o_rt_peo   OUT pdm_package_eval_operations%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION peo_select_row_upd_uk1( i_peo_EON_ID   IN  pdm_package_eval_operations.EON_ID%TYPE
                               , i_peo_PAE_ID   IN  pdm_package_eval_operations.PAE_ID%TYPE
                               , i_peo_ACTIVATED_BY_PET_ID   IN  pdm_package_eval_operations.ACTIVATED_BY_PET_ID%TYPE
                               , o_rt_peo  OUT pdm_package_eval_operations%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE peo_lock_row( i_peo_ID   IN  pdm_package_eval_operations.ID%TYPE )
;

PROCEDURE peo_lock_row_nowait( i_peo_ID   IN  pdm_package_eval_operations.ID%TYPE )
;

PROCEDURE peo_insert_row ( io_rt_peo  IN OUT pdm_package_eval_operations%ROWTYPE )
;

FUNCTION peo_update_row( i_peo_ID   IN     pdm_package_eval_operations.ID%TYPE
                       , io_rt_peo  IN OUT pdm_package_eval_operations%ROWTYPE )
RETURN NUMBER
;

FUNCTION peo_delete_row( i_peo_ID   IN  pdm_package_eval_operations.ID%TYPE )
RETURN BOOLEAN
;

FUNCTION peo_seq1_nextval
RETURN pdm_package_eval_operations.ID%TYPE
;


END pdm_peo_tapi_pck;
/





package body pdm_peo_tapi_pck
is




function peo_select_row( i_peo_id   in  pdm_package_eval_operations.id%type
                       , o_rt_peo   out pdm_package_eval_operations%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.peo_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_peo ( i_peo_id   in  pdm_package_eval_operations.id%type )
      is 
           select *
             from pdm_package_eval_operations peo
            where peo.id = i_peo_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_peo( i_peo_id => i_peo_id );
         fetch c_peo into o_rt_peo;
         l_found := c_peo%found;
         close c_peo;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_peo%isopen
         then
            close c_peo;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end peo_select_row;

function peo_select_row_uk1( i_peo_eon_id   in  pdm_package_eval_operations.eon_id%type
                           , i_peo_pae_id   in  pdm_package_eval_operations.pae_id%type
                           , i_peo_activated_by_pet_id   in  pdm_package_eval_operations.activated_by_pet_id%type
                           , o_rt_peo  out pdm_package_eval_operations%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.peo_select_row_uk1';
   l_found                boolean      := false;
begin
   declare
      cursor c_peo ( i_peo_eon_id   in  pdm_package_eval_operations.eon_id%type
                   , i_peo_pae_id   in  pdm_package_eval_operations.pae_id%type
                   , i_peo_activated_by_pet_id   in  pdm_package_eval_operations.activated_by_pet_id%type )
      is
         select *
           from pdm_package_eval_operations peo
          where peo.eon_id = i_peo_eon_id 
            and peo.pae_id = i_peo_pae_id 
            and peo.activated_by_pet_id = i_peo_activated_by_pet_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_peo(i_peo_eon_id => i_peo_eon_id, i_peo_pae_id => i_peo_pae_id, i_peo_activated_by_pet_id => i_peo_activated_by_pet_id);
         fetch c_peo into o_rt_peo;
         l_found := c_peo%found;
         close c_peo;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_peo%isopen
      then
         close c_peo;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end peo_select_row_uk1;

function peo_select_row_upd( i_peo_id   in  pdm_package_eval_operations.id%type
                           , o_rt_peo   out pdm_package_eval_operations%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.peo_select_row_upd';
   l_found                boolean      := false;

   cursor c_peo ( i_peo_id   in  pdm_package_eval_operations.id%type )
   is
           select *
             from pdm_package_eval_operations peo
            where peo.id = i_peo_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_peo( i_peo_id => i_peo_id );
   fetch c_peo into o_rt_peo;
   l_found := c_peo%found;
   close c_peo;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_peo%isopen
      then
         close c_peo;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end peo_select_row_upd;

function peo_select_row_upd_uk1( i_peo_eon_id   in  pdm_package_eval_operations.eon_id%type
                               , i_peo_pae_id   in  pdm_package_eval_operations.pae_id%type
                               , i_peo_activated_by_pet_id   in  pdm_package_eval_operations.activated_by_pet_id%type
                               , o_rt_peo  out pdm_package_eval_operations%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.peo_select_row_upd_uk1';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := peo_select_row_uk1( i_peo_eon_id   =>  i_peo_eon_id
                                   , i_peo_pae_id   =>  i_peo_pae_id
                                   , i_peo_activated_by_pet_id   =>  i_peo_activated_by_pet_id
                                   , o_rt_peo => o_rt_peo );
      if l_found
      then
         
         l_found := peo_select_row_upd( i_peo_id => o_rt_peo.id
                                      , o_rt_peo => o_rt_peo );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end peo_select_row_upd_uk1;

procedure peo_lock_row( i_peo_id   in  pdm_package_eval_operations.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.peo_lock_row';
begin
  declare
     cursor c_peo ( i_peo_id   in  pdm_package_eval_operations.id%type )
     is
             select ''
               from pdm_package_eval_operations peo
              where peo.id = i_peo_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_peo_id is not null
         then
            begin
                
                peo_lock_row_nowait( i_peo_id => i_peo_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_peo( i_peo_id => i_peo_id );
                  close c_peo;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_peo%isopen
         then
            close c_peo;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end peo_lock_row;

procedure peo_lock_row_nowait( i_peo_id   in  pdm_package_eval_operations.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.peo_lock_row_nowait';
begin
   declare
      cursor c_peo ( i_peo_id   in  pdm_package_eval_operations.id%type )
      is
              select ''
                from pdm_package_eval_operations peo
               where peo.id = i_peo_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_peo_id is not null
         then
            
            open c_peo( i_peo_id => i_peo_id );

            close c_peo;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_peo%isopen
        then
           close c_peo;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_peo_id||'"' );
   end;                                                          
end peo_lock_row_nowait;

function peo_perform_update( i_peo_id   in     pdm_package_eval_operations.id%type
                           , io_rt_peo  in out pdm_package_eval_operations%rowtype )
return number
;

function peo_perform_delete( i_peo_id   in  pdm_package_eval_operations.id%type )
return boolean
;

procedure peo_insert_row ( io_rt_peo  in out pdm_package_eval_operations%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.peo_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into pdm_package_eval_operations( id
                                , eon_id
                                , pae_id
                                , activated_by_pet_id
                                , deactivated_by_pet_id )
              values ( io_rt_peo.id
                     , io_rt_peo.eon_id
                     , io_rt_peo.pae_id
                     , io_rt_peo.activated_by_pet_id
                     , io_rt_peo.deactivated_by_pet_id )
           returning id
                   , eon_id
                   , pae_id
                   , activated_by_pet_id
                   , deactivated_by_pet_id
                into io_rt_peo.id
                   , io_rt_peo.eon_id
                   , io_rt_peo.pae_id
                   , io_rt_peo.activated_by_pet_id
                   , io_rt_peo.deactivated_by_pet_id;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_peo.id||'"'
                                                             ||', EON_ID = "'||io_rt_peo.eon_id||'"'
                                                             ||', PAE_ID = "'||io_rt_peo.pae_id||'"'
                                                             ||', ACTIVATED_BY_PET_ID = "'||io_rt_peo.activated_by_pet_id||'"'
                                                             ||', DEACTIVATED_BY_PET_ID = "'||io_rt_peo.deactivated_by_pet_id||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end peo_insert_row;

function peo_perform_update( i_peo_id   in     pdm_package_eval_operations.id%type
                           , io_rt_peo  in out pdm_package_eval_operations%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.peo_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update pdm_package_eval_operations
            set id = io_rt_peo.id
              , eon_id = io_rt_peo.eon_id
              , pae_id = io_rt_peo.pae_id
              , activated_by_pet_id = io_rt_peo.activated_by_pet_id
              , deactivated_by_pet_id = io_rt_peo.deactivated_by_pet_id
          where id = i_peo_id
      returning id
              , eon_id
              , pae_id
              , activated_by_pet_id
              , deactivated_by_pet_id
           into io_rt_peo.id
              , io_rt_peo.eon_id
              , io_rt_peo.pae_id
              , io_rt_peo.activated_by_pet_id
              , io_rt_peo.deactivated_by_pet_id;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_peo.id||'"'
                                                             ||', EON_ID = "'||io_rt_peo.eon_id||'"'
                                                             ||', PAE_ID = "'||io_rt_peo.pae_id||'"'
                                                             ||', ACTIVATED_BY_PET_ID = "'||io_rt_peo.activated_by_pet_id||'"'
                                                             ||', DEACTIVATED_BY_PET_ID = "'||io_rt_peo.deactivated_by_pet_id||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end peo_perform_update;

function peo_perform_delete( i_peo_id   in  pdm_package_eval_operations.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.peo_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from pdm_package_eval_operations
          where id = i_peo_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_peo_id||'"' );
   end;                                                          
end peo_perform_delete;

function peo_update_row( i_peo_id   in     pdm_package_eval_operations.id%type
                       , io_rt_peo  in out pdm_package_eval_operations%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.peo_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         peo_lock_row( i_peo_id   =>  i_peo_id );

         
         l_rowcount := 
            peo_perform_update( i_peo_id   =>  i_peo_id
                              , io_rt_peo  => io_rt_peo );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_peo.id||'"'
                                                          ||', EON_ID = "'||io_rt_peo.eon_id||'"'
                                                          ||', PAE_ID = "'||io_rt_peo.pae_id||'"'
                                                          ||', ACTIVATED_BY_PET_ID = "'||io_rt_peo.activated_by_pet_id||'"'
                                                          ||', DEACTIVATED_BY_PET_ID = "'||io_rt_peo.deactivated_by_pet_id||'"'                                                           , 1, 4000));
   end;                                                          
end peo_update_row;

function peo_delete_row( i_peo_id   in  pdm_package_eval_operations.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.peo_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         peo_lock_row( i_peo_id   =>  i_peo_id );

         
         l_deleted := peo_perform_delete( i_peo_id   =>  i_peo_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_peo_id||'"' );
   end;                                                          
end peo_delete_row;

function peo_seq1_nextval
return pdm_package_eval_operations.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.peo_seq1_nextval';
   l_peo_id  pdm_package_eval_operations.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select pdm_peo_seq1.nextval 
           into l_peo_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_peo_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end peo_seq1_nextval;


end pdm_peo_tapi_pck;
/