create or replace PACKAGE pdm_pgp_tapi_pck
IS
-- Table API package for table pdm_process_spec_groups
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:01)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'PDM_PGP_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'PDM_PROCESS_SPEC_GROUPS';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION pgp_select_row( i_pgp_ID   IN  pdm_process_spec_groups.ID%TYPE
                       , o_rt_pgp   OUT pdm_process_spec_groups%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION pgp_select_row_uk1( i_pgp_TYPE   IN  pdm_process_spec_groups.TYPE%TYPE
                           , i_pgp_ID_CUST   IN  pdm_process_spec_groups.ID_CUST%TYPE
                           , i_pgp_TPN_ID   IN  pdm_process_spec_groups.TPN_ID%TYPE
                           , o_rt_pgp  OUT pdm_process_spec_groups%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION pgp_select_row_upd( i_pgp_ID   IN  pdm_process_spec_groups.ID%TYPE
                           , o_rt_pgp   OUT pdm_process_spec_groups%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION pgp_select_row_upd_uk1( i_pgp_TYPE   IN  pdm_process_spec_groups.TYPE%TYPE
                               , i_pgp_ID_CUST   IN  pdm_process_spec_groups.ID_CUST%TYPE
                               , i_pgp_TPN_ID   IN  pdm_process_spec_groups.TPN_ID%TYPE
                               , o_rt_pgp  OUT pdm_process_spec_groups%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE pgp_lock_row( i_pgp_ID   IN  pdm_process_spec_groups.ID%TYPE )
;

PROCEDURE pgp_lock_row_nowait( i_pgp_ID   IN  pdm_process_spec_groups.ID%TYPE )
;

PROCEDURE pgp_insert_row ( io_rt_pgp  IN OUT pdm_process_spec_groups%ROWTYPE )
;

FUNCTION pgp_update_row( i_pgp_ID   IN     pdm_process_spec_groups.ID%TYPE
                       , io_rt_pgp  IN OUT pdm_process_spec_groups%ROWTYPE )
RETURN NUMBER
;

FUNCTION pgp_delete_row( i_pgp_ID   IN  pdm_process_spec_groups.ID%TYPE )
RETURN BOOLEAN
;

FUNCTION pgp_seq1_nextval
RETURN pdm_process_spec_groups.ID%TYPE
;


END pdm_pgp_tapi_pck;
/




package body pdm_pgp_tapi_pck
is




function pgp_select_row( i_pgp_id   in  pdm_process_spec_groups.id%type
                       , o_rt_pgp   out pdm_process_spec_groups%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pgp_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_pgp ( i_pgp_id   in  pdm_process_spec_groups.id%type )
      is 
           select *
             from pdm_process_spec_groups pgp
            where pgp.id = i_pgp_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_pgp( i_pgp_id => i_pgp_id );
         fetch c_pgp into o_rt_pgp;
         l_found := c_pgp%found;
         close c_pgp;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_pgp%isopen
         then
            close c_pgp;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pgp_select_row;

function pgp_select_row_uk1( i_pgp_type   in  pdm_process_spec_groups.type%type
                           , i_pgp_id_cust   in  pdm_process_spec_groups.id_cust%type
                           , i_pgp_tpn_id   in  pdm_process_spec_groups.tpn_id%type
                           , o_rt_pgp  out pdm_process_spec_groups%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pgp_select_row_uk1';
   l_found                boolean      := false;
begin
   declare
      cursor c_pgp ( i_pgp_type   in  pdm_process_spec_groups.type%type
                   , i_pgp_id_cust   in  pdm_process_spec_groups.id_cust%type
                   , i_pgp_tpn_id   in  pdm_process_spec_groups.tpn_id%type )
      is
         select *
           from pdm_process_spec_groups pgp
          where pgp.type = i_pgp_type 
            and pgp.id_cust = i_pgp_id_cust 
            and pgp.tpn_id = i_pgp_tpn_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_pgp(i_pgp_type => i_pgp_type, i_pgp_id_cust => i_pgp_id_cust, i_pgp_tpn_id => i_pgp_tpn_id);
         fetch c_pgp into o_rt_pgp;
         l_found := c_pgp%found;
         close c_pgp;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_pgp%isopen
      then
         close c_pgp;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pgp_select_row_uk1;

function pgp_select_row_upd( i_pgp_id   in  pdm_process_spec_groups.id%type
                           , o_rt_pgp   out pdm_process_spec_groups%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pgp_select_row_upd';
   l_found                boolean      := false;

   cursor c_pgp ( i_pgp_id   in  pdm_process_spec_groups.id%type )
   is
           select *
             from pdm_process_spec_groups pgp
            where pgp.id = i_pgp_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_pgp( i_pgp_id => i_pgp_id );
   fetch c_pgp into o_rt_pgp;
   l_found := c_pgp%found;
   close c_pgp;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_pgp%isopen
      then
         close c_pgp;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end pgp_select_row_upd;

function pgp_select_row_upd_uk1( i_pgp_type   in  pdm_process_spec_groups.type%type
                               , i_pgp_id_cust   in  pdm_process_spec_groups.id_cust%type
                               , i_pgp_tpn_id   in  pdm_process_spec_groups.tpn_id%type
                               , o_rt_pgp  out pdm_process_spec_groups%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pgp_select_row_upd_uk1';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := pgp_select_row_uk1( i_pgp_type   =>  i_pgp_type
                                   , i_pgp_id_cust   =>  i_pgp_id_cust
                                   , i_pgp_tpn_id   =>  i_pgp_tpn_id
                                   , o_rt_pgp => o_rt_pgp );
      if l_found
      then
         
         l_found := pgp_select_row_upd( i_pgp_id => o_rt_pgp.id
                                      , o_rt_pgp => o_rt_pgp );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end pgp_select_row_upd_uk1;

procedure pgp_lock_row( i_pgp_id   in  pdm_process_spec_groups.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pgp_lock_row';
begin
  declare
     cursor c_pgp ( i_pgp_id   in  pdm_process_spec_groups.id%type )
     is
             select ''
               from pdm_process_spec_groups pgp
              where pgp.id = i_pgp_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_pgp_id is not null
         then
            begin
                
                pgp_lock_row_nowait( i_pgp_id => i_pgp_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_pgp( i_pgp_id => i_pgp_id );
                  close c_pgp;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_pgp%isopen
         then
            close c_pgp;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end pgp_lock_row;

procedure pgp_lock_row_nowait( i_pgp_id   in  pdm_process_spec_groups.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pgp_lock_row_nowait';
begin
   declare
      cursor c_pgp ( i_pgp_id   in  pdm_process_spec_groups.id%type )
      is
              select ''
                from pdm_process_spec_groups pgp
               where pgp.id = i_pgp_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_pgp_id is not null
         then
            
            open c_pgp( i_pgp_id => i_pgp_id );

            close c_pgp;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_pgp%isopen
        then
           close c_pgp;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_pgp_id||'"' );
   end;                                                          
end pgp_lock_row_nowait;

function pgp_perform_update( i_pgp_id   in     pdm_process_spec_groups.id%type
                           , io_rt_pgp  in out pdm_process_spec_groups%rowtype )
return number
;

function pgp_perform_delete( i_pgp_id   in  pdm_process_spec_groups.id%type )
return boolean
;

procedure pgp_insert_row ( io_rt_pgp  in out pdm_process_spec_groups%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pgp_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into pdm_process_spec_groups( id
                                , type
                                , id_cust
                                , tpn_id
                                , evt_id
                                , tle_id )
              values ( io_rt_pgp.id
                     , io_rt_pgp.type
                     , io_rt_pgp.id_cust
                     , io_rt_pgp.tpn_id
                     , io_rt_pgp.evt_id
                     , io_rt_pgp.tle_id )
           returning id
                   , type
                   , id_cust
                   , tpn_id
                   , evt_id
                   , tle_id
                into io_rt_pgp.id
                   , io_rt_pgp.type
                   , io_rt_pgp.id_cust
                   , io_rt_pgp.tpn_id
                   , io_rt_pgp.evt_id
                   , io_rt_pgp.tle_id;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_pgp.id||'"'
                                                             ||', TYPE = "'||io_rt_pgp.type||'"'
                                                             ||', ID_CUST = "'||io_rt_pgp.id_cust||'"'
                                                             ||', TPN_ID = "'||io_rt_pgp.tpn_id||'"'
                                                             ||', EVT_ID = "'||io_rt_pgp.evt_id||'"'
                                                             ||', TLE_ID = "'||io_rt_pgp.tle_id||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pgp_insert_row;

function pgp_perform_update( i_pgp_id   in     pdm_process_spec_groups.id%type
                           , io_rt_pgp  in out pdm_process_spec_groups%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pgp_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update pdm_process_spec_groups
            set id = io_rt_pgp.id
              , type = io_rt_pgp.type
              , id_cust = io_rt_pgp.id_cust
              , tpn_id = io_rt_pgp.tpn_id
              , evt_id = io_rt_pgp.evt_id
              , tle_id = io_rt_pgp.tle_id
          where id = i_pgp_id
      returning id
              , type
              , id_cust
              , tpn_id
              , evt_id
              , tle_id
           into io_rt_pgp.id
              , io_rt_pgp.type
              , io_rt_pgp.id_cust
              , io_rt_pgp.tpn_id
              , io_rt_pgp.evt_id
              , io_rt_pgp.tle_id;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_pgp.id||'"'
                                                             ||', TYPE = "'||io_rt_pgp.type||'"'
                                                             ||', ID_CUST = "'||io_rt_pgp.id_cust||'"'
                                                             ||', TPN_ID = "'||io_rt_pgp.tpn_id||'"'
                                                             ||', EVT_ID = "'||io_rt_pgp.evt_id||'"'
                                                             ||', TLE_ID = "'||io_rt_pgp.tle_id||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pgp_perform_update;

function pgp_perform_delete( i_pgp_id   in  pdm_process_spec_groups.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pgp_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from pdm_process_spec_groups
          where id = i_pgp_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_pgp_id||'"' );
   end;                                                          
end pgp_perform_delete;

function pgp_update_row( i_pgp_id   in     pdm_process_spec_groups.id%type
                       , io_rt_pgp  in out pdm_process_spec_groups%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pgp_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         pgp_lock_row( i_pgp_id   =>  i_pgp_id );

         
         l_rowcount := 
            pgp_perform_update( i_pgp_id   =>  i_pgp_id
                              , io_rt_pgp  => io_rt_pgp );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_pgp.id||'"'
                                                          ||', TYPE = "'||io_rt_pgp.type||'"'
                                                          ||', ID_CUST = "'||io_rt_pgp.id_cust||'"'
                                                          ||', TPN_ID = "'||io_rt_pgp.tpn_id||'"'
                                                          ||', EVT_ID = "'||io_rt_pgp.evt_id||'"'
                                                          ||', TLE_ID = "'||io_rt_pgp.tle_id||'"'                                                           , 1, 4000));
   end;                                                          
end pgp_update_row;

function pgp_delete_row( i_pgp_id   in  pdm_process_spec_groups.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pgp_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         pgp_lock_row( i_pgp_id   =>  i_pgp_id );

         
         l_deleted := pgp_perform_delete( i_pgp_id   =>  i_pgp_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_pgp_id||'"' );
   end;                                                          
end pgp_delete_row;

function pgp_seq1_nextval
return pdm_process_spec_groups.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pgp_seq1_nextval';
   l_pgp_id  pdm_process_spec_groups.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select pdm_pgp_seq1.nextval 
           into l_pgp_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_pgp_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pgp_seq1_nextval;


end pdm_pgp_tapi_pck;
/