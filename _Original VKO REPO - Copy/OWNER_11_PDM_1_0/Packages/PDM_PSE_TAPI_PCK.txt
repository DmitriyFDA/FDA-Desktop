create or replace PACKAGE pdm_pse_tapi_pck
IS
-- Table API package for table pdm_phases
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:00)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'PDM_PSE_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'PDM_PHASES';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION pse_select_row( i_pse_ID   IN  pdm_phases.ID%TYPE
                       , o_rt_pse   OUT pdm_phases%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION pse_select_row_uk1( i_pse_ATY_ID   IN  pdm_phases.ATY_ID%TYPE
                           , i_pse_TYPE   IN  pdm_phases.TYPE%TYPE
                           , i_pse_ID_CUST   IN  pdm_phases.ID_CUST%TYPE
                           , o_rt_pse  OUT pdm_phases%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION pse_select_row_upd( i_pse_ID   IN  pdm_phases.ID%TYPE
                           , o_rt_pse   OUT pdm_phases%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION pse_select_row_upd_uk1( i_pse_ATY_ID   IN  pdm_phases.ATY_ID%TYPE
                               , i_pse_TYPE   IN  pdm_phases.TYPE%TYPE
                               , i_pse_ID_CUST   IN  pdm_phases.ID_CUST%TYPE
                               , o_rt_pse  OUT pdm_phases%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE pse_lock_row( i_pse_ID   IN  pdm_phases.ID%TYPE )
;

PROCEDURE pse_lock_row_nowait( i_pse_ID   IN  pdm_phases.ID%TYPE )
;

PROCEDURE pse_insert_row ( io_rt_pse  IN OUT pdm_phases%ROWTYPE )
;

FUNCTION pse_update_row( i_pse_ID   IN     pdm_phases.ID%TYPE
                       , io_rt_pse  IN OUT pdm_phases%ROWTYPE )
RETURN NUMBER
;

FUNCTION pse_delete_row( i_pse_ID   IN  pdm_phases.ID%TYPE )
RETURN BOOLEAN
;

FUNCTION pse_seq1_nextval
RETURN pdm_phases.ID%TYPE
;


END pdm_pse_tapi_pck;
/




package body pdm_pse_tapi_pck
is




function pse_select_row( i_pse_id   in  pdm_phases.id%type
                       , o_rt_pse   out pdm_phases%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pse_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_pse ( i_pse_id   in  pdm_phases.id%type )
      is 
           select *
             from pdm_phases pse
            where pse.id = i_pse_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_pse( i_pse_id => i_pse_id );
         fetch c_pse into o_rt_pse;
         l_found := c_pse%found;
         close c_pse;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_pse%isopen
         then
            close c_pse;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pse_select_row;

function pse_select_row_uk1( i_pse_aty_id   in  pdm_phases.aty_id%type
                           , i_pse_type   in  pdm_phases.type%type
                           , i_pse_id_cust   in  pdm_phases.id_cust%type
                           , o_rt_pse  out pdm_phases%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pse_select_row_uk1';
   l_found                boolean      := false;
begin
   declare
      cursor c_pse ( i_pse_aty_id   in  pdm_phases.aty_id%type
                   , i_pse_type   in  pdm_phases.type%type
                   , i_pse_id_cust   in  pdm_phases.id_cust%type )
      is
         select *
           from pdm_phases pse
          where pse.aty_id = i_pse_aty_id 
            and pse.type = i_pse_type 
            and pse.id_cust = i_pse_id_cust ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_pse(i_pse_aty_id => i_pse_aty_id, i_pse_type => i_pse_type, i_pse_id_cust => i_pse_id_cust);
         fetch c_pse into o_rt_pse;
         l_found := c_pse%found;
         close c_pse;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_pse%isopen
      then
         close c_pse;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pse_select_row_uk1;

function pse_select_row_upd( i_pse_id   in  pdm_phases.id%type
                           , o_rt_pse   out pdm_phases%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pse_select_row_upd';
   l_found                boolean      := false;

   cursor c_pse ( i_pse_id   in  pdm_phases.id%type )
   is
           select *
             from pdm_phases pse
            where pse.id = i_pse_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_pse( i_pse_id => i_pse_id );
   fetch c_pse into o_rt_pse;
   l_found := c_pse%found;
   close c_pse;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_pse%isopen
      then
         close c_pse;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end pse_select_row_upd;

function pse_select_row_upd_uk1( i_pse_aty_id   in  pdm_phases.aty_id%type
                               , i_pse_type   in  pdm_phases.type%type
                               , i_pse_id_cust   in  pdm_phases.id_cust%type
                               , o_rt_pse  out pdm_phases%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pse_select_row_upd_uk1';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := pse_select_row_uk1( i_pse_aty_id   =>  i_pse_aty_id
                                   , i_pse_type   =>  i_pse_type
                                   , i_pse_id_cust   =>  i_pse_id_cust
                                   , o_rt_pse => o_rt_pse );
      if l_found
      then
         
         l_found := pse_select_row_upd( i_pse_id => o_rt_pse.id
                                      , o_rt_pse => o_rt_pse );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end pse_select_row_upd_uk1;

procedure pse_lock_row( i_pse_id   in  pdm_phases.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pse_lock_row';
begin
  declare
     cursor c_pse ( i_pse_id   in  pdm_phases.id%type )
     is
             select ''
               from pdm_phases pse
              where pse.id = i_pse_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_pse_id is not null
         then
            begin
                
                pse_lock_row_nowait( i_pse_id => i_pse_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_pse( i_pse_id => i_pse_id );
                  close c_pse;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_pse%isopen
         then
            close c_pse;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end pse_lock_row;

procedure pse_lock_row_nowait( i_pse_id   in  pdm_phases.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pse_lock_row_nowait';
begin
   declare
      cursor c_pse ( i_pse_id   in  pdm_phases.id%type )
      is
              select ''
                from pdm_phases pse
               where pse.id = i_pse_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_pse_id is not null
         then
            
            open c_pse( i_pse_id => i_pse_id );

            close c_pse;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_pse%isopen
        then
           close c_pse;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_pse_id||'"' );
   end;                                                          
end pse_lock_row_nowait;

function pse_perform_update( i_pse_id   in     pdm_phases.id%type
                           , io_rt_pse  in out pdm_phases%rowtype )
return number
;

function pse_perform_delete( i_pse_id   in  pdm_phases.id%type )
return boolean
;

procedure pse_insert_row ( io_rt_pse  in out pdm_phases%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pse_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into pdm_phases( id
                                , aty_id
                                , type
                                , id_cust
                                , tpe_id
                                , timeframe_start
                                , timeframe_end )
              values ( io_rt_pse.id
                     , io_rt_pse.aty_id
                     , io_rt_pse.type
                     , io_rt_pse.id_cust
                     , io_rt_pse.tpe_id
                     , io_rt_pse.timeframe_start
                     , io_rt_pse.timeframe_end )
           returning id
                   , aty_id
                   , type
                   , id_cust
                   , tpe_id
                   , timeframe_start
                   , timeframe_end
                into io_rt_pse.id
                   , io_rt_pse.aty_id
                   , io_rt_pse.type
                   , io_rt_pse.id_cust
                   , io_rt_pse.tpe_id
                   , io_rt_pse.timeframe_start
                   , io_rt_pse.timeframe_end;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_pse.id||'"'
                                                             ||', ATY_ID = "'||io_rt_pse.aty_id||'"'
                                                             ||', TYPE = "'||io_rt_pse.type||'"'
                                                             ||', ID_CUST = "'||io_rt_pse.id_cust||'"'
                                                             ||', TPE_ID = "'||io_rt_pse.tpe_id||'"'
                                                             ||', TIMEFRAME_START = "'||io_rt_pse.timeframe_start||'"'
                                                             ||', TIMEFRAME_END = "'||io_rt_pse.timeframe_end||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pse_insert_row;

function pse_perform_update( i_pse_id   in     pdm_phases.id%type
                           , io_rt_pse  in out pdm_phases%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pse_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update pdm_phases
            set id = io_rt_pse.id
              , aty_id = io_rt_pse.aty_id
              , type = io_rt_pse.type
              , id_cust = io_rt_pse.id_cust
              , tpe_id = io_rt_pse.tpe_id
              , timeframe_start = io_rt_pse.timeframe_start
              , timeframe_end = io_rt_pse.timeframe_end
          where id = i_pse_id
      returning id
              , aty_id
              , type
              , id_cust
              , tpe_id
              , timeframe_start
              , timeframe_end
           into io_rt_pse.id
              , io_rt_pse.aty_id
              , io_rt_pse.type
              , io_rt_pse.id_cust
              , io_rt_pse.tpe_id
              , io_rt_pse.timeframe_start
              , io_rt_pse.timeframe_end;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_pse.id||'"'
                                                             ||', ATY_ID = "'||io_rt_pse.aty_id||'"'
                                                             ||', TYPE = "'||io_rt_pse.type||'"'
                                                             ||', ID_CUST = "'||io_rt_pse.id_cust||'"'
                                                             ||', TPE_ID = "'||io_rt_pse.tpe_id||'"'
                                                             ||', TIMEFRAME_START = "'||io_rt_pse.timeframe_start||'"'
                                                             ||', TIMEFRAME_END = "'||io_rt_pse.timeframe_end||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pse_perform_update;

function pse_perform_delete( i_pse_id   in  pdm_phases.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pse_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from pdm_phases
          where id = i_pse_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_pse_id||'"' );
   end;                                                          
end pse_perform_delete;

function pse_update_row( i_pse_id   in     pdm_phases.id%type
                       , io_rt_pse  in out pdm_phases%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pse_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         pse_lock_row( i_pse_id   =>  i_pse_id );

         
         l_rowcount := 
            pse_perform_update( i_pse_id   =>  i_pse_id
                              , io_rt_pse  => io_rt_pse );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_pse.id||'"'
                                                          ||', ATY_ID = "'||io_rt_pse.aty_id||'"'
                                                          ||', TYPE = "'||io_rt_pse.type||'"'
                                                          ||', ID_CUST = "'||io_rt_pse.id_cust||'"'
                                                          ||', TPE_ID = "'||io_rt_pse.tpe_id||'"'
                                                          ||', TIMEFRAME_START = "'||io_rt_pse.timeframe_start||'"'
                                                          ||', TIMEFRAME_END = "'||io_rt_pse.timeframe_end||'"'                                                           , 1, 4000));
   end;                                                          
end pse_update_row;

function pse_delete_row( i_pse_id   in  pdm_phases.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pse_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         pse_lock_row( i_pse_id   =>  i_pse_id );

         
         l_deleted := pse_perform_delete( i_pse_id   =>  i_pse_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_pse_id||'"' );
   end;                                                          
end pse_delete_row;

function pse_seq1_nextval
return pdm_phases.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pse_seq1_nextval';
   l_pse_id  pdm_phases.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select pdm_pse_seq1.nextval 
           into l_pse_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_pse_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pse_seq1_nextval;


end pdm_pse_tapi_pck;
/