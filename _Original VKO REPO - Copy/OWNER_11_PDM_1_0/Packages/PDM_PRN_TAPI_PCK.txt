create or replace PACKAGE pdm_prn_tapi_pck
IS
-- Table API package for table pdm_process_spec_expressions
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:01)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'PDM_PRN_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'PDM_PROCESS_SPEC_EXPRESSIONS';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION prn_select_row( i_prn_PSN_ID   IN  pdm_process_spec_expressions.PSN_ID%TYPE
 , i_prn_ESN_ID   IN  pdm_process_spec_expressions.ESN_ID%TYPE
                       , o_rt_prn   OUT pdm_process_spec_expressions%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION prn_select_row_upd( i_prn_PSN_ID   IN  pdm_process_spec_expressions.PSN_ID%TYPE
                           , i_prn_ESN_ID   IN  pdm_process_spec_expressions.ESN_ID%TYPE
                           , o_rt_prn   OUT pdm_process_spec_expressions%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE prn_lock_row( i_prn_PSN_ID   IN  pdm_process_spec_expressions.PSN_ID%TYPE
 , i_prn_ESN_ID   IN  pdm_process_spec_expressions.ESN_ID%TYPE )
;

PROCEDURE prn_lock_row_nowait( i_prn_PSN_ID   IN  pdm_process_spec_expressions.PSN_ID%TYPE
 , i_prn_ESN_ID   IN  pdm_process_spec_expressions.ESN_ID%TYPE )
;

PROCEDURE prn_insert_row ( io_rt_prn  IN OUT pdm_process_spec_expressions%ROWTYPE )
;

FUNCTION prn_update_row( i_prn_PSN_ID   IN     pdm_process_spec_expressions.PSN_ID%TYPE
                        , i_prn_ESN_ID   IN     pdm_process_spec_expressions.ESN_ID%TYPE
                       , io_rt_prn  IN OUT pdm_process_spec_expressions%ROWTYPE )
RETURN NUMBER
;

FUNCTION prn_delete_row( i_prn_PSN_ID   IN  pdm_process_spec_expressions.PSN_ID%TYPE
                         , i_prn_ESN_ID   IN  pdm_process_spec_expressions.ESN_ID%TYPE )
RETURN BOOLEAN
;


END pdm_prn_tapi_pck;
/



package body pdm_prn_tapi_pck
is




function prn_select_row( i_prn_psn_id   in  pdm_process_spec_expressions.psn_id%type
 , i_prn_esn_id   in  pdm_process_spec_expressions.esn_id%type
                       , o_rt_prn   out pdm_process_spec_expressions%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.prn_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_prn ( i_prn_psn_id   in  pdm_process_spec_expressions.psn_id%type
 , i_prn_esn_id   in  pdm_process_spec_expressions.esn_id%type )
      is 
           select *
             from pdm_process_spec_expressions prn
            where prn.psn_id = i_prn_psn_id 
              and prn.esn_id = i_prn_esn_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_prn( i_prn_psn_id => i_prn_psn_id, i_prn_esn_id => i_prn_esn_id );
         fetch c_prn into o_rt_prn;
         l_found := c_prn%found;
         close c_prn;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_prn%isopen
         then
            close c_prn;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end prn_select_row;

function prn_select_row_upd( i_prn_psn_id   in  pdm_process_spec_expressions.psn_id%type
                           , i_prn_esn_id   in  pdm_process_spec_expressions.esn_id%type
                           , o_rt_prn   out pdm_process_spec_expressions%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.prn_select_row_upd';
   l_found                boolean      := false;

   cursor c_prn ( i_prn_psn_id   in  pdm_process_spec_expressions.psn_id%type
                , i_prn_esn_id   in  pdm_process_spec_expressions.esn_id%type )
   is
           select *
             from pdm_process_spec_expressions prn
            where prn.psn_id = i_prn_psn_id 
                and prn.esn_id = i_prn_esn_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_prn( i_prn_psn_id => i_prn_psn_id
, i_prn_esn_id => i_prn_esn_id );
   fetch c_prn into o_rt_prn;
   l_found := c_prn%found;
   close c_prn;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_prn%isopen
      then
         close c_prn;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end prn_select_row_upd;

procedure prn_lock_row( i_prn_psn_id   in  pdm_process_spec_expressions.psn_id%type
 , i_prn_esn_id   in  pdm_process_spec_expressions.esn_id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.prn_lock_row';
begin
  declare
     cursor c_prn ( i_prn_psn_id   in  pdm_process_spec_expressions.psn_id%type
 , i_prn_esn_id   in  pdm_process_spec_expressions.esn_id%type )
     is
             select ''
               from pdm_process_spec_expressions prn
              where prn.psn_id = i_prn_psn_id 
                and prn.esn_id = i_prn_esn_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_prn_psn_id is not null
            or i_prn_esn_id is not null
         then
            begin
                
                prn_lock_row_nowait( i_prn_psn_id => i_prn_psn_id
, i_prn_esn_id => i_prn_esn_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_prn( i_prn_psn_id => i_prn_psn_id, i_prn_esn_id => i_prn_esn_id );
                  close c_prn;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_prn%isopen
         then
            close c_prn;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end prn_lock_row;

procedure prn_lock_row_nowait( i_prn_psn_id   in  pdm_process_spec_expressions.psn_id%type
 , i_prn_esn_id   in  pdm_process_spec_expressions.esn_id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.prn_lock_row_nowait';
begin
   declare
      cursor c_prn ( i_prn_psn_id   in  pdm_process_spec_expressions.psn_id%type
 , i_prn_esn_id   in  pdm_process_spec_expressions.esn_id%type )
      is
              select ''
                from pdm_process_spec_expressions prn
               where prn.psn_id = i_prn_psn_id 
                 and prn.esn_id = i_prn_esn_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_prn_psn_id is not null
         or i_prn_esn_id is not null
         then
            
            open c_prn( i_prn_psn_id => i_prn_psn_id, i_prn_esn_id => i_prn_esn_id );

            close c_prn;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_prn%isopen
        then
           close c_prn;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'PSN_ID = "'||i_prn_psn_id||'"'
                                                       ||', ESN_ID = "'||i_prn_esn_id||'"' );
   end;                                                          
end prn_lock_row_nowait;

function prn_perform_update( i_prn_psn_id   in     pdm_process_spec_expressions.psn_id%type
 , i_prn_esn_id   in     pdm_process_spec_expressions.esn_id%type
                           , io_rt_prn  in out pdm_process_spec_expressions%rowtype )
return number
;

function prn_perform_delete( i_prn_psn_id   in  pdm_process_spec_expressions.psn_id%type
 , i_prn_esn_id   in  pdm_process_spec_expressions.esn_id%type )
return boolean
;

procedure prn_insert_row ( io_rt_prn  in out pdm_process_spec_expressions%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.prn_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into pdm_process_spec_expressions( psn_id
                                , esn_id )
              values ( io_rt_prn.psn_id
                     , io_rt_prn.esn_id )
           returning psn_id
                   , esn_id
                into io_rt_prn.psn_id
                   , io_rt_prn.esn_id;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('PSN_ID = "'||io_rt_prn.psn_id||'"'
                                                             ||', ESN_ID = "'||io_rt_prn.esn_id||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end prn_insert_row;

function prn_perform_update( i_prn_psn_id   in     pdm_process_spec_expressions.psn_id%type
 , i_prn_esn_id   in     pdm_process_spec_expressions.esn_id%type
                           , io_rt_prn  in out pdm_process_spec_expressions%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.prn_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update pdm_process_spec_expressions
            set psn_id = io_rt_prn.psn_id
              , esn_id = io_rt_prn.esn_id
          where psn_id = i_prn_psn_id
            and esn_id = i_prn_esn_id
      returning psn_id
              , esn_id
           into io_rt_prn.psn_id
              , io_rt_prn.esn_id;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('PSN_ID = "'||io_rt_prn.psn_id||'"'
                                                             ||', ESN_ID = "'||io_rt_prn.esn_id||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end prn_perform_update;

function prn_perform_delete( i_prn_psn_id   in  pdm_process_spec_expressions.psn_id%type
 , i_prn_esn_id   in  pdm_process_spec_expressions.esn_id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.prn_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from pdm_process_spec_expressions
          where psn_id = i_prn_psn_id
            and esn_id = i_prn_esn_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'PSN_ID = "'||i_prn_psn_id||'"'
                                                         ||', ESN_ID = "'||i_prn_esn_id||'"' );
   end;                                                          
end prn_perform_delete;

function prn_update_row( i_prn_psn_id   in     pdm_process_spec_expressions.psn_id%type
                        , i_prn_esn_id   in     pdm_process_spec_expressions.esn_id%type
                       , io_rt_prn  in out pdm_process_spec_expressions%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.prn_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         prn_lock_row( i_prn_psn_id   =>  i_prn_psn_id
 , i_prn_esn_id   =>  i_prn_esn_id );

         
         l_rowcount := 
            prn_perform_update( i_prn_psn_id   =>  i_prn_psn_id
 , i_prn_esn_id   =>  i_prn_esn_id
                              , io_rt_prn  => io_rt_prn );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('PSN_ID = "'||io_rt_prn.psn_id||'"'
                                                          ||', ESN_ID = "'||io_rt_prn.esn_id||'"'                                                           , 1, 4000));
   end;                                                          
end prn_update_row;

function prn_delete_row( i_prn_psn_id   in  pdm_process_spec_expressions.psn_id%type
                         , i_prn_esn_id   in  pdm_process_spec_expressions.esn_id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.prn_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         prn_lock_row( i_prn_psn_id   =>  i_prn_psn_id
          , i_prn_esn_id   =>  i_prn_esn_id );

         
         l_deleted := prn_perform_delete( i_prn_psn_id   =>  i_prn_psn_id
 , i_prn_esn_id   =>  i_prn_esn_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'PSN_ID = "'||i_prn_psn_id||'"'
                                                      ||', ESN_ID = "'||i_prn_esn_id||'"' );
   end;                                                          
end prn_delete_row;


end pdm_prn_tapi_pck;
/