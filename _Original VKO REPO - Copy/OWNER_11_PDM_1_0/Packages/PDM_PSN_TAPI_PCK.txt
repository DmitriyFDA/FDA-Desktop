create or replace PACKAGE pdm_psn_tapi_pck
IS
-- Table API package for table pdm_process_specifications
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:00)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'PDM_PSN_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'PDM_PROCESS_SPECIFICATIONS';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION psn_select_row( i_psn_ID   IN  pdm_process_specifications.ID%TYPE
                       , o_rt_psn   OUT pdm_process_specifications%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION psn_select_row_uk1( i_psn_TYPE   IN  pdm_process_specifications.TYPE%TYPE
                           , i_psn_ID_CUST   IN  pdm_process_specifications.ID_CUST%TYPE
                           , i_psn_VERSION   IN  pdm_process_specifications.VERSION%TYPE
                           , o_rt_psn  OUT pdm_process_specifications%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION psn_select_row_upd( i_psn_ID   IN  pdm_process_specifications.ID%TYPE
                           , o_rt_psn   OUT pdm_process_specifications%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION psn_select_row_upd_uk1( i_psn_TYPE   IN  pdm_process_specifications.TYPE%TYPE
                               , i_psn_ID_CUST   IN  pdm_process_specifications.ID_CUST%TYPE
                               , i_psn_VERSION   IN  pdm_process_specifications.VERSION%TYPE
                               , o_rt_psn  OUT pdm_process_specifications%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE psn_lock_row( i_psn_ID   IN  pdm_process_specifications.ID%TYPE )
;

PROCEDURE psn_lock_row_nowait( i_psn_ID   IN  pdm_process_specifications.ID%TYPE )
;

PROCEDURE psn_insert_row ( io_rt_psn  IN OUT pdm_process_specifications%ROWTYPE )
;

FUNCTION psn_update_row( i_psn_ID   IN     pdm_process_specifications.ID%TYPE
                       , io_rt_psn  IN OUT pdm_process_specifications%ROWTYPE )
RETURN NUMBER
;

FUNCTION psn_delete_row( i_psn_ID   IN  pdm_process_specifications.ID%TYPE )
RETURN BOOLEAN
;

FUNCTION psn_seq1_nextval
RETURN pdm_process_specifications.ID%TYPE
;


END pdm_psn_tapi_pck;
/




package body pdm_psn_tapi_pck
is




function psn_select_row( i_psn_id   in  pdm_process_specifications.id%type
                       , o_rt_psn   out pdm_process_specifications%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.psn_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_psn ( i_psn_id   in  pdm_process_specifications.id%type )
      is 
           select *
             from pdm_process_specifications psn
            where psn.id = i_psn_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_psn( i_psn_id => i_psn_id );
         fetch c_psn into o_rt_psn;
         l_found := c_psn%found;
         close c_psn;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_psn%isopen
         then
            close c_psn;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end psn_select_row;

function psn_select_row_uk1( i_psn_type   in  pdm_process_specifications.type%type
                           , i_psn_id_cust   in  pdm_process_specifications.id_cust%type
                           , i_psn_version   in  pdm_process_specifications.version%type
                           , o_rt_psn  out pdm_process_specifications%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.psn_select_row_uk1';
   l_found                boolean      := false;
begin
   declare
      cursor c_psn ( i_psn_type   in  pdm_process_specifications.type%type
                   , i_psn_id_cust   in  pdm_process_specifications.id_cust%type
                   , i_psn_version   in  pdm_process_specifications.version%type )
      is
         select *
           from pdm_process_specifications psn
          where psn.type = i_psn_type 
            and psn.id_cust = i_psn_id_cust 
            and psn.version = i_psn_version ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_psn(i_psn_type => i_psn_type, i_psn_id_cust => i_psn_id_cust, i_psn_version => i_psn_version);
         fetch c_psn into o_rt_psn;
         l_found := c_psn%found;
         close c_psn;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_psn%isopen
      then
         close c_psn;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end psn_select_row_uk1;

function psn_select_row_upd( i_psn_id   in  pdm_process_specifications.id%type
                           , o_rt_psn   out pdm_process_specifications%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.psn_select_row_upd';
   l_found                boolean      := false;

   cursor c_psn ( i_psn_id   in  pdm_process_specifications.id%type )
   is
           select *
             from pdm_process_specifications psn
            where psn.id = i_psn_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_psn( i_psn_id => i_psn_id );
   fetch c_psn into o_rt_psn;
   l_found := c_psn%found;
   close c_psn;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_psn%isopen
      then
         close c_psn;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end psn_select_row_upd;

function psn_select_row_upd_uk1( i_psn_type   in  pdm_process_specifications.type%type
                               , i_psn_id_cust   in  pdm_process_specifications.id_cust%type
                               , i_psn_version   in  pdm_process_specifications.version%type
                               , o_rt_psn  out pdm_process_specifications%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.psn_select_row_upd_uk1';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := psn_select_row_uk1( i_psn_type   =>  i_psn_type
                                   , i_psn_id_cust   =>  i_psn_id_cust
                                   , i_psn_version   =>  i_psn_version
                                   , o_rt_psn => o_rt_psn );
      if l_found
      then
         
         l_found := psn_select_row_upd( i_psn_id => o_rt_psn.id
                                      , o_rt_psn => o_rt_psn );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end psn_select_row_upd_uk1;

procedure psn_lock_row( i_psn_id   in  pdm_process_specifications.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.psn_lock_row';
begin
  declare
     cursor c_psn ( i_psn_id   in  pdm_process_specifications.id%type )
     is
             select ''
               from pdm_process_specifications psn
              where psn.id = i_psn_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_psn_id is not null
         then
            begin
                
                psn_lock_row_nowait( i_psn_id => i_psn_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_psn( i_psn_id => i_psn_id );
                  close c_psn;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_psn%isopen
         then
            close c_psn;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end psn_lock_row;

procedure psn_lock_row_nowait( i_psn_id   in  pdm_process_specifications.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.psn_lock_row_nowait';
begin
   declare
      cursor c_psn ( i_psn_id   in  pdm_process_specifications.id%type )
      is
              select ''
                from pdm_process_specifications psn
               where psn.id = i_psn_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_psn_id is not null
         then
            
            open c_psn( i_psn_id => i_psn_id );

            close c_psn;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_psn%isopen
        then
           close c_psn;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_psn_id||'"' );
   end;                                                          
end psn_lock_row_nowait;

function psn_perform_update( i_psn_id   in     pdm_process_specifications.id%type
                           , io_rt_psn  in out pdm_process_specifications%rowtype )
return number
;

function psn_perform_delete( i_psn_id   in  pdm_process_specifications.id%type )
return boolean
;

procedure psn_insert_row ( io_rt_psn  in out pdm_process_specifications%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.psn_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into pdm_process_specifications( id
                                , type
                                , id_cust
                                , version
                                , pgp_id
                                , evt_id_created
                                , evt_id_modified
                                , tpn_id
                                , pns_id
                                , tle_id
                                , event_time
                                , timeframe_start
                                , timeframe_end
                                , date_created
                                , esn_id )
              values ( io_rt_psn.id
                     , io_rt_psn.type
                     , io_rt_psn.id_cust
                     , io_rt_psn.version
                     , io_rt_psn.pgp_id
                     , io_rt_psn.evt_id_created
                     , io_rt_psn.evt_id_modified
                     , io_rt_psn.tpn_id
                     , io_rt_psn.pns_id
                     , io_rt_psn.tle_id
                     , io_rt_psn.event_time
                     , io_rt_psn.timeframe_start
                     , io_rt_psn.timeframe_end
                     , io_rt_psn.date_created
                     , io_rt_psn.esn_id )
           returning id
                   , type
                   , id_cust
                   , version
                   , pgp_id
                   , evt_id_created
                   , evt_id_modified
                   , tpn_id
                   , pns_id
                   , tle_id
                   , event_time
                   , timeframe_start
                   , timeframe_end
                   , date_created
                   , esn_id
                into io_rt_psn.id
                   , io_rt_psn.type
                   , io_rt_psn.id_cust
                   , io_rt_psn.version
                   , io_rt_psn.pgp_id
                   , io_rt_psn.evt_id_created
                   , io_rt_psn.evt_id_modified
                   , io_rt_psn.tpn_id
                   , io_rt_psn.pns_id
                   , io_rt_psn.tle_id
                   , io_rt_psn.event_time
                   , io_rt_psn.timeframe_start
                   , io_rt_psn.timeframe_end
                   , io_rt_psn.date_created
                   , io_rt_psn.esn_id;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_psn.id||'"'
                                                             ||', TYPE = "'||io_rt_psn.type||'"'
                                                             ||', ID_CUST = "'||io_rt_psn.id_cust||'"'
                                                             ||', VERSION = "'||io_rt_psn.version||'"'
                                                             ||', PGP_ID = "'||io_rt_psn.pgp_id||'"'
                                                             ||', EVT_ID_CREATED = "'||io_rt_psn.evt_id_created||'"'
                                                             ||', EVT_ID_MODIFIED = "'||io_rt_psn.evt_id_modified||'"'
                                                             ||', TPN_ID = "'||io_rt_psn.tpn_id||'"'
                                                             ||', PNS_ID = "'||io_rt_psn.pns_id||'"'
                                                             ||', TLE_ID = "'||io_rt_psn.tle_id||'"'
                                                             ||', EVENT_TIME = "'||io_rt_psn.event_time||'"'
                                                             ||', TIMEFRAME_START = "'||io_rt_psn.timeframe_start||'"'
                                                             ||', TIMEFRAME_END = "'||io_rt_psn.timeframe_end||'"'
                                                             ||', DATE_CREATED = "'||io_rt_psn.date_created||'"'
                                                             ||', ESN_ID = "'||io_rt_psn.esn_id||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end psn_insert_row;

function psn_perform_update( i_psn_id   in     pdm_process_specifications.id%type
                           , io_rt_psn  in out pdm_process_specifications%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.psn_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update pdm_process_specifications
            set id = io_rt_psn.id
              , type = io_rt_psn.type
              , id_cust = io_rt_psn.id_cust
              , version = io_rt_psn.version
              , pgp_id = io_rt_psn.pgp_id
              , evt_id_created = io_rt_psn.evt_id_created
              , evt_id_modified = io_rt_psn.evt_id_modified
              , tpn_id = io_rt_psn.tpn_id
              , pns_id = io_rt_psn.pns_id
              , tle_id = io_rt_psn.tle_id
              , event_time = io_rt_psn.event_time
              , timeframe_start = io_rt_psn.timeframe_start
              , timeframe_end = io_rt_psn.timeframe_end
              , date_created = io_rt_psn.date_created
              , esn_id = io_rt_psn.esn_id
          where id = i_psn_id
      returning id
              , type
              , id_cust
              , version
              , pgp_id
              , evt_id_created
              , evt_id_modified
              , tpn_id
              , pns_id
              , tle_id
              , event_time
              , timeframe_start
              , timeframe_end
              , date_created
              , esn_id
           into io_rt_psn.id
              , io_rt_psn.type
              , io_rt_psn.id_cust
              , io_rt_psn.version
              , io_rt_psn.pgp_id
              , io_rt_psn.evt_id_created
              , io_rt_psn.evt_id_modified
              , io_rt_psn.tpn_id
              , io_rt_psn.pns_id
              , io_rt_psn.tle_id
              , io_rt_psn.event_time
              , io_rt_psn.timeframe_start
              , io_rt_psn.timeframe_end
              , io_rt_psn.date_created
              , io_rt_psn.esn_id;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_psn.id||'"'
                                                             ||', TYPE = "'||io_rt_psn.type||'"'
                                                             ||', ID_CUST = "'||io_rt_psn.id_cust||'"'
                                                             ||', VERSION = "'||io_rt_psn.version||'"'
                                                             ||', PGP_ID = "'||io_rt_psn.pgp_id||'"'
                                                             ||', EVT_ID_CREATED = "'||io_rt_psn.evt_id_created||'"'
                                                             ||', EVT_ID_MODIFIED = "'||io_rt_psn.evt_id_modified||'"'
                                                             ||', TPN_ID = "'||io_rt_psn.tpn_id||'"'
                                                             ||', PNS_ID = "'||io_rt_psn.pns_id||'"'
                                                             ||', TLE_ID = "'||io_rt_psn.tle_id||'"'
                                                             ||', EVENT_TIME = "'||io_rt_psn.event_time||'"'
                                                             ||', TIMEFRAME_START = "'||io_rt_psn.timeframe_start||'"'
                                                             ||', TIMEFRAME_END = "'||io_rt_psn.timeframe_end||'"'
                                                             ||', DATE_CREATED = "'||io_rt_psn.date_created||'"'
                                                             ||', ESN_ID = "'||io_rt_psn.esn_id||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end psn_perform_update;

function psn_perform_delete( i_psn_id   in  pdm_process_specifications.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.psn_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from pdm_process_specifications
          where id = i_psn_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_psn_id||'"' );
   end;                                                          
end psn_perform_delete;

function psn_update_row( i_psn_id   in     pdm_process_specifications.id%type
                       , io_rt_psn  in out pdm_process_specifications%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.psn_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         psn_lock_row( i_psn_id   =>  i_psn_id );

         
         l_rowcount := 
            psn_perform_update( i_psn_id   =>  i_psn_id
                              , io_rt_psn  => io_rt_psn );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_psn.id||'"'
                                                          ||', TYPE = "'||io_rt_psn.type||'"'
                                                          ||', ID_CUST = "'||io_rt_psn.id_cust||'"'
                                                          ||', VERSION = "'||io_rt_psn.version||'"'
                                                          ||', PGP_ID = "'||io_rt_psn.pgp_id||'"'
                                                          ||', EVT_ID_CREATED = "'||io_rt_psn.evt_id_created||'"'
                                                          ||', EVT_ID_MODIFIED = "'||io_rt_psn.evt_id_modified||'"'
                                                          ||', TPN_ID = "'||io_rt_psn.tpn_id||'"'
                                                          ||', PNS_ID = "'||io_rt_psn.pns_id||'"'
                                                          ||', TLE_ID = "'||io_rt_psn.tle_id||'"'
                                                          ||', EVENT_TIME = "'||io_rt_psn.event_time||'"'
                                                          ||', TIMEFRAME_START = "'||io_rt_psn.timeframe_start||'"'
                                                          ||', TIMEFRAME_END = "'||io_rt_psn.timeframe_end||'"'
                                                          ||', DATE_CREATED = "'||io_rt_psn.date_created||'"'
                                                          ||', ESN_ID = "'||io_rt_psn.esn_id||'"'                                                           , 1, 4000));
   end;                                                          
end psn_update_row;

function psn_delete_row( i_psn_id   in  pdm_process_specifications.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.psn_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         psn_lock_row( i_psn_id   =>  i_psn_id );

         
         l_deleted := psn_perform_delete( i_psn_id   =>  i_psn_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_psn_id||'"' );
   end;                                                          
end psn_delete_row;

function psn_seq1_nextval
return pdm_process_specifications.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.psn_seq1_nextval';
   l_psn_id  pdm_process_specifications.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select pdm_psn_seq1.nextval 
           into l_psn_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_psn_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end psn_seq1_nextval;


end pdm_psn_tapi_pck;
/