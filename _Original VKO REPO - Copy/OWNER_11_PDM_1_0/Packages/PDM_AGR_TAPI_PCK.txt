create or replace PACKAGE pdm_agr_tapi_pck
IS
-- Table API package for table pdm_attribute_group_members
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:40:58)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'PDM_AGR_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'PDM_ATTRIBUTE_GROUP_MEMBERS';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION agr_select_row( i_agr_ADN_ID   IN  pdm_attribute_group_members.ADN_ID%TYPE
 , i_agr_AGP_ID   IN  pdm_attribute_group_members.AGP_ID%TYPE
 , i_agr_OTE_ID   IN  pdm_attribute_group_members.OTE_ID%TYPE
 , i_agr_SEQUENCE   IN  pdm_attribute_group_members.SEQUENCE%TYPE
                       , o_rt_agr   OUT pdm_attribute_group_members%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION agr_select_row_uk1( i_agr_AGP_ID   IN  pdm_attribute_group_members.AGP_ID%TYPE
                           , i_agr_ADN_ID   IN  pdm_attribute_group_members.ADN_ID%TYPE
                           , i_agr_OTE_ID   IN  pdm_attribute_group_members.OTE_ID%TYPE
                           , i_agr_SEQUENCE   IN  pdm_attribute_group_members.SEQUENCE%TYPE
                           , o_rt_agr  OUT pdm_attribute_group_members%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION agr_select_row_upd( i_agr_ADN_ID   IN  pdm_attribute_group_members.ADN_ID%TYPE
                           , i_agr_AGP_ID   IN  pdm_attribute_group_members.AGP_ID%TYPE
                           , i_agr_OTE_ID   IN  pdm_attribute_group_members.OTE_ID%TYPE
                           , i_agr_SEQUENCE   IN  pdm_attribute_group_members.SEQUENCE%TYPE
                           , o_rt_agr   OUT pdm_attribute_group_members%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION agr_select_row_upd_uk1( i_agr_AGP_ID   IN  pdm_attribute_group_members.AGP_ID%TYPE
                               , i_agr_ADN_ID   IN  pdm_attribute_group_members.ADN_ID%TYPE
                               , i_agr_OTE_ID   IN  pdm_attribute_group_members.OTE_ID%TYPE
                               , i_agr_SEQUENCE   IN  pdm_attribute_group_members.SEQUENCE%TYPE
                               , o_rt_agr  OUT pdm_attribute_group_members%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE agr_lock_row( i_agr_ADN_ID   IN  pdm_attribute_group_members.ADN_ID%TYPE
 , i_agr_AGP_ID   IN  pdm_attribute_group_members.AGP_ID%TYPE
 , i_agr_OTE_ID   IN  pdm_attribute_group_members.OTE_ID%TYPE
 , i_agr_SEQUENCE   IN  pdm_attribute_group_members.SEQUENCE%TYPE )
;

PROCEDURE agr_lock_row_nowait( i_agr_ADN_ID   IN  pdm_attribute_group_members.ADN_ID%TYPE
 , i_agr_AGP_ID   IN  pdm_attribute_group_members.AGP_ID%TYPE
 , i_agr_OTE_ID   IN  pdm_attribute_group_members.OTE_ID%TYPE
 , i_agr_SEQUENCE   IN  pdm_attribute_group_members.SEQUENCE%TYPE )
;

PROCEDURE agr_insert_row ( io_rt_agr  IN OUT pdm_attribute_group_members%ROWTYPE )
;

FUNCTION agr_update_row( i_agr_ADN_ID   IN     pdm_attribute_group_members.ADN_ID%TYPE
                        , i_agr_AGP_ID   IN     pdm_attribute_group_members.AGP_ID%TYPE
                        , i_agr_OTE_ID   IN     pdm_attribute_group_members.OTE_ID%TYPE
                        , i_agr_SEQUENCE   IN     pdm_attribute_group_members.SEQUENCE%TYPE
                       , io_rt_agr  IN OUT pdm_attribute_group_members%ROWTYPE )
RETURN NUMBER
;

FUNCTION agr_delete_row( i_agr_ADN_ID   IN  pdm_attribute_group_members.ADN_ID%TYPE
                         , i_agr_AGP_ID   IN  pdm_attribute_group_members.AGP_ID%TYPE
                         , i_agr_OTE_ID   IN  pdm_attribute_group_members.OTE_ID%TYPE
                         , i_agr_SEQUENCE   IN  pdm_attribute_group_members.SEQUENCE%TYPE )
RETURN BOOLEAN
;


END pdm_agr_tapi_pck;
/




package body pdm_agr_tapi_pck
is




function agr_select_row( i_agr_adn_id   in  pdm_attribute_group_members.adn_id%type
 , i_agr_agp_id   in  pdm_attribute_group_members.agp_id%type
 , i_agr_ote_id   in  pdm_attribute_group_members.ote_id%type
 , i_agr_sequence   in  pdm_attribute_group_members.sequence%type
                       , o_rt_agr   out pdm_attribute_group_members%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.agr_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_agr ( i_agr_adn_id   in  pdm_attribute_group_members.adn_id%type
 , i_agr_agp_id   in  pdm_attribute_group_members.agp_id%type
 , i_agr_ote_id   in  pdm_attribute_group_members.ote_id%type
 , i_agr_sequence   in  pdm_attribute_group_members.sequence%type )
      is 
           select *
             from pdm_attribute_group_members agr
            where agr.adn_id = i_agr_adn_id 
              and agr.agp_id = i_agr_agp_id 
              and agr.ote_id = i_agr_ote_id 
              and agr.sequence = i_agr_sequence ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_agr( i_agr_adn_id => i_agr_adn_id, i_agr_agp_id => i_agr_agp_id, i_agr_ote_id => i_agr_ote_id, i_agr_sequence => i_agr_sequence );
         fetch c_agr into o_rt_agr;
         l_found := c_agr%found;
         close c_agr;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_agr%isopen
         then
            close c_agr;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end agr_select_row;

function agr_select_row_uk1( i_agr_agp_id   in  pdm_attribute_group_members.agp_id%type
                           , i_agr_adn_id   in  pdm_attribute_group_members.adn_id%type
                           , i_agr_ote_id   in  pdm_attribute_group_members.ote_id%type
                           , i_agr_sequence   in  pdm_attribute_group_members.sequence%type
                           , o_rt_agr  out pdm_attribute_group_members%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.agr_select_row_uk1';
   l_found                boolean      := false;
begin
   declare
      cursor c_agr ( i_agr_agp_id   in  pdm_attribute_group_members.agp_id%type
                   , i_agr_adn_id   in  pdm_attribute_group_members.adn_id%type
                   , i_agr_ote_id   in  pdm_attribute_group_members.ote_id%type
                   , i_agr_sequence   in  pdm_attribute_group_members.sequence%type )
      is
         select *
           from pdm_attribute_group_members agr
          where agr.agp_id = i_agr_agp_id 
            and agr.adn_id = i_agr_adn_id 
            and agr.ote_id = i_agr_ote_id 
            and agr.sequence = i_agr_sequence ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_agr(i_agr_agp_id => i_agr_agp_id, i_agr_adn_id => i_agr_adn_id, i_agr_ote_id => i_agr_ote_id, i_agr_sequence => i_agr_sequence);
         fetch c_agr into o_rt_agr;
         l_found := c_agr%found;
         close c_agr;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_agr%isopen
      then
         close c_agr;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end agr_select_row_uk1;

function agr_select_row_upd( i_agr_adn_id   in  pdm_attribute_group_members.adn_id%type
                           , i_agr_agp_id   in  pdm_attribute_group_members.agp_id%type
                           , i_agr_ote_id   in  pdm_attribute_group_members.ote_id%type
                           , i_agr_sequence   in  pdm_attribute_group_members.sequence%type
                           , o_rt_agr   out pdm_attribute_group_members%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.agr_select_row_upd';
   l_found                boolean      := false;

   cursor c_agr ( i_agr_adn_id   in  pdm_attribute_group_members.adn_id%type
                , i_agr_agp_id   in  pdm_attribute_group_members.agp_id%type
                , i_agr_ote_id   in  pdm_attribute_group_members.ote_id%type
                , i_agr_sequence   in  pdm_attribute_group_members.sequence%type )
   is
           select *
             from pdm_attribute_group_members agr
            where agr.adn_id = i_agr_adn_id 
                and agr.agp_id = i_agr_agp_id 
                and agr.ote_id = i_agr_ote_id 
                and agr.sequence = i_agr_sequence 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_agr( i_agr_adn_id => i_agr_adn_id
, i_agr_agp_id => i_agr_agp_id
, i_agr_ote_id => i_agr_ote_id
, i_agr_sequence => i_agr_sequence );
   fetch c_agr into o_rt_agr;
   l_found := c_agr%found;
   close c_agr;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_agr%isopen
      then
         close c_agr;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end agr_select_row_upd;

function agr_select_row_upd_uk1( i_agr_agp_id   in  pdm_attribute_group_members.agp_id%type
                               , i_agr_adn_id   in  pdm_attribute_group_members.adn_id%type
                               , i_agr_ote_id   in  pdm_attribute_group_members.ote_id%type
                               , i_agr_sequence   in  pdm_attribute_group_members.sequence%type
                               , o_rt_agr  out pdm_attribute_group_members%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.agr_select_row_upd_uk1';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := agr_select_row_uk1( i_agr_agp_id   =>  i_agr_agp_id
                                   , i_agr_adn_id   =>  i_agr_adn_id
                                   , i_agr_ote_id   =>  i_agr_ote_id
                                   , i_agr_sequence   =>  i_agr_sequence
                                   , o_rt_agr => o_rt_agr );
      if l_found
      then
         
         l_found := agr_select_row_upd( i_agr_adn_id => o_rt_agr.adn_id
                                      , i_agr_agp_id => o_rt_agr.agp_id
                                      , i_agr_ote_id => o_rt_agr.ote_id
                                      , i_agr_sequence => o_rt_agr.sequence
                                      , o_rt_agr => o_rt_agr );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end agr_select_row_upd_uk1;

procedure agr_lock_row( i_agr_adn_id   in  pdm_attribute_group_members.adn_id%type
 , i_agr_agp_id   in  pdm_attribute_group_members.agp_id%type
 , i_agr_ote_id   in  pdm_attribute_group_members.ote_id%type
 , i_agr_sequence   in  pdm_attribute_group_members.sequence%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.agr_lock_row';
begin
  declare
     cursor c_agr ( i_agr_adn_id   in  pdm_attribute_group_members.adn_id%type
 , i_agr_agp_id   in  pdm_attribute_group_members.agp_id%type
 , i_agr_ote_id   in  pdm_attribute_group_members.ote_id%type
 , i_agr_sequence   in  pdm_attribute_group_members.sequence%type )
     is
             select ''
               from pdm_attribute_group_members agr
              where agr.adn_id = i_agr_adn_id 
                and agr.agp_id = i_agr_agp_id 
                and agr.ote_id = i_agr_ote_id 
                and agr.sequence = i_agr_sequence 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_agr_adn_id is not null
            or i_agr_agp_id is not null
            or i_agr_ote_id is not null
            or i_agr_sequence is not null
         then
            begin
                
                agr_lock_row_nowait( i_agr_adn_id => i_agr_adn_id
, i_agr_agp_id => i_agr_agp_id
, i_agr_ote_id => i_agr_ote_id
, i_agr_sequence => i_agr_sequence );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_agr( i_agr_adn_id => i_agr_adn_id, i_agr_agp_id => i_agr_agp_id, i_agr_ote_id => i_agr_ote_id, i_agr_sequence => i_agr_sequence );
                  close c_agr;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_agr%isopen
         then
            close c_agr;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end agr_lock_row;

procedure agr_lock_row_nowait( i_agr_adn_id   in  pdm_attribute_group_members.adn_id%type
 , i_agr_agp_id   in  pdm_attribute_group_members.agp_id%type
 , i_agr_ote_id   in  pdm_attribute_group_members.ote_id%type
 , i_agr_sequence   in  pdm_attribute_group_members.sequence%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.agr_lock_row_nowait';
begin
   declare
      cursor c_agr ( i_agr_adn_id   in  pdm_attribute_group_members.adn_id%type
 , i_agr_agp_id   in  pdm_attribute_group_members.agp_id%type
 , i_agr_ote_id   in  pdm_attribute_group_members.ote_id%type
 , i_agr_sequence   in  pdm_attribute_group_members.sequence%type )
      is
              select ''
                from pdm_attribute_group_members agr
               where agr.adn_id = i_agr_adn_id 
                 and agr.agp_id = i_agr_agp_id 
                 and agr.ote_id = i_agr_ote_id 
                 and agr.sequence = i_agr_sequence 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_agr_adn_id is not null
         or i_agr_agp_id is not null
         or i_agr_ote_id is not null
         or i_agr_sequence is not null
         then
            
            open c_agr( i_agr_adn_id => i_agr_adn_id, i_agr_agp_id => i_agr_agp_id, i_agr_ote_id => i_agr_ote_id, i_agr_sequence => i_agr_sequence );

            close c_agr;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_agr%isopen
        then
           close c_agr;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ADN_ID = "'||i_agr_adn_id||'"'
                                                       ||', AGP_ID = "'||i_agr_agp_id||'"'
                                                       ||', OTE_ID = "'||i_agr_ote_id||'"'
                                                       ||', SEQUENCE = "'||i_agr_sequence||'"' );
   end;                                                          
end agr_lock_row_nowait;

function agr_perform_update( i_agr_adn_id   in     pdm_attribute_group_members.adn_id%type
 , i_agr_agp_id   in     pdm_attribute_group_members.agp_id%type
 , i_agr_ote_id   in     pdm_attribute_group_members.ote_id%type
 , i_agr_sequence   in     pdm_attribute_group_members.sequence%type
                           , io_rt_agr  in out pdm_attribute_group_members%rowtype )
return number
;

function agr_perform_delete( i_agr_adn_id   in  pdm_attribute_group_members.adn_id%type
 , i_agr_agp_id   in  pdm_attribute_group_members.agp_id%type
 , i_agr_ote_id   in  pdm_attribute_group_members.ote_id%type
 , i_agr_sequence   in  pdm_attribute_group_members.sequence%type )
return boolean
;

procedure agr_insert_row ( io_rt_agr  in out pdm_attribute_group_members%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.agr_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into pdm_attribute_group_members( agp_id
                                , adn_id
                                , ote_id
                                , sequence )
              values ( io_rt_agr.agp_id
                     , io_rt_agr.adn_id
                     , io_rt_agr.ote_id
                     , io_rt_agr.sequence )
           returning agp_id
                   , adn_id
                   , ote_id
                   , sequence
                into io_rt_agr.agp_id
                   , io_rt_agr.adn_id
                   , io_rt_agr.ote_id
                   , io_rt_agr.sequence;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('AGP_ID = "'||io_rt_agr.agp_id||'"'
                                                             ||', ADN_ID = "'||io_rt_agr.adn_id||'"'
                                                             ||', OTE_ID = "'||io_rt_agr.ote_id||'"'
                                                             ||', SEQUENCE = "'||io_rt_agr.sequence||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end agr_insert_row;

function agr_perform_update( i_agr_adn_id   in     pdm_attribute_group_members.adn_id%type
 , i_agr_agp_id   in     pdm_attribute_group_members.agp_id%type
 , i_agr_ote_id   in     pdm_attribute_group_members.ote_id%type
 , i_agr_sequence   in     pdm_attribute_group_members.sequence%type
                           , io_rt_agr  in out pdm_attribute_group_members%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.agr_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update pdm_attribute_group_members
            set agp_id = io_rt_agr.agp_id
              , adn_id = io_rt_agr.adn_id
              , ote_id = io_rt_agr.ote_id
              , sequence = io_rt_agr.sequence
          where adn_id = i_agr_adn_id
            and agp_id = i_agr_agp_id
            and ote_id = i_agr_ote_id
            and sequence = i_agr_sequence
      returning agp_id
              , adn_id
              , ote_id
              , sequence
           into io_rt_agr.agp_id
              , io_rt_agr.adn_id
              , io_rt_agr.ote_id
              , io_rt_agr.sequence;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('AGP_ID = "'||io_rt_agr.agp_id||'"'
                                                             ||', ADN_ID = "'||io_rt_agr.adn_id||'"'
                                                             ||', OTE_ID = "'||io_rt_agr.ote_id||'"'
                                                             ||', SEQUENCE = "'||io_rt_agr.sequence||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end agr_perform_update;

function agr_perform_delete( i_agr_adn_id   in  pdm_attribute_group_members.adn_id%type
 , i_agr_agp_id   in  pdm_attribute_group_members.agp_id%type
 , i_agr_ote_id   in  pdm_attribute_group_members.ote_id%type
 , i_agr_sequence   in  pdm_attribute_group_members.sequence%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.agr_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from pdm_attribute_group_members
          where adn_id = i_agr_adn_id
            and agp_id = i_agr_agp_id
            and ote_id = i_agr_ote_id
            and sequence = i_agr_sequence;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ADN_ID = "'||i_agr_adn_id||'"'
                                                         ||', AGP_ID = "'||i_agr_agp_id||'"'
                                                         ||', OTE_ID = "'||i_agr_ote_id||'"'
                                                         ||', SEQUENCE = "'||i_agr_sequence||'"' );
   end;                                                          
end agr_perform_delete;

function agr_update_row( i_agr_adn_id   in     pdm_attribute_group_members.adn_id%type
                        , i_agr_agp_id   in     pdm_attribute_group_members.agp_id%type
                        , i_agr_ote_id   in     pdm_attribute_group_members.ote_id%type
                        , i_agr_sequence   in     pdm_attribute_group_members.sequence%type
                       , io_rt_agr  in out pdm_attribute_group_members%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.agr_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         agr_lock_row( i_agr_adn_id   =>  i_agr_adn_id
 , i_agr_agp_id   =>  i_agr_agp_id
 , i_agr_ote_id   =>  i_agr_ote_id
 , i_agr_sequence   =>  i_agr_sequence );

         
         l_rowcount := 
            agr_perform_update( i_agr_adn_id   =>  i_agr_adn_id
 , i_agr_agp_id   =>  i_agr_agp_id
 , i_agr_ote_id   =>  i_agr_ote_id
 , i_agr_sequence   =>  i_agr_sequence
                              , io_rt_agr  => io_rt_agr );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('AGP_ID = "'||io_rt_agr.agp_id||'"'
                                                          ||', ADN_ID = "'||io_rt_agr.adn_id||'"'
                                                          ||', OTE_ID = "'||io_rt_agr.ote_id||'"'
                                                          ||', SEQUENCE = "'||io_rt_agr.sequence||'"'                                                           , 1, 4000));
   end;                                                          
end agr_update_row;

function agr_delete_row( i_agr_adn_id   in  pdm_attribute_group_members.adn_id%type
                         , i_agr_agp_id   in  pdm_attribute_group_members.agp_id%type
                         , i_agr_ote_id   in  pdm_attribute_group_members.ote_id%type
                         , i_agr_sequence   in  pdm_attribute_group_members.sequence%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.agr_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         agr_lock_row( i_agr_adn_id   =>  i_agr_adn_id
          , i_agr_agp_id   =>  i_agr_agp_id
          , i_agr_ote_id   =>  i_agr_ote_id
          , i_agr_sequence   =>  i_agr_sequence );

         
         l_deleted := agr_perform_delete( i_agr_adn_id   =>  i_agr_adn_id
 , i_agr_agp_id   =>  i_agr_agp_id
 , i_agr_ote_id   =>  i_agr_ote_id
 , i_agr_sequence   =>  i_agr_sequence );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ADN_ID = "'||i_agr_adn_id||'"'
                                                      ||', AGP_ID = "'||i_agr_agp_id||'"'
                                                      ||', OTE_ID = "'||i_agr_ote_id||'"'
                                                      ||', SEQUENCE = "'||i_agr_sequence||'"' );
   end;                                                          
end agr_delete_row;


end pdm_agr_tapi_pck;
/