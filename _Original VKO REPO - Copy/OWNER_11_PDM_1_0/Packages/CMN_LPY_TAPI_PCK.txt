create or replace PACKAGE cmn_lpy_tapi_pck
IS
-- Table API package for table cmn_lifesign_parties
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:40:56)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'CMN_LPY_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'CMN_LIFESIGN_PARTIES';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION lpy_select_row( i_lpy_ID   IN  cmn_lifesign_parties.ID%TYPE
                       , o_rt_lpy   OUT cmn_lifesign_parties%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION lpy_select_row( i_lpy_PTY_ID   IN  cmn_lifesign_parties.PTY_ID%TYPE
                       , o_rt_lpy  OUT cmn_lifesign_parties%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION lpy_select_row_upd( i_lpy_ID   IN  cmn_lifesign_parties.ID%TYPE
                           , o_rt_lpy   OUT cmn_lifesign_parties%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION lpy_select_row_upd( i_lpy_PTY_ID   IN  cmn_lifesign_parties.PTY_ID%TYPE
                           , o_rt_lpy  OUT cmn_lifesign_parties%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE lpy_lock_row( i_lpy_ID   IN  cmn_lifesign_parties.ID%TYPE )
;

PROCEDURE lpy_lock_row_nowait( i_lpy_ID   IN  cmn_lifesign_parties.ID%TYPE )
;

PROCEDURE lpy_insert_row ( io_rt_lpy  IN OUT cmn_lifesign_parties%ROWTYPE )
;

FUNCTION lpy_update_row( i_lpy_ID   IN     cmn_lifesign_parties.ID%TYPE
                       , io_rt_lpy  IN OUT cmn_lifesign_parties%ROWTYPE )
RETURN NUMBER
;

FUNCTION lpy_delete_row( i_lpy_ID   IN  cmn_lifesign_parties.ID%TYPE )
RETURN BOOLEAN
;

FUNCTION lpy_seq1_nextval
RETURN cmn_lifesign_parties.ID%TYPE
;


END cmn_lpy_tapi_pck;
/




package body cmn_lpy_tapi_pck
is




function lpy_select_row( i_lpy_id   in  cmn_lifesign_parties.id%type
                       , o_rt_lpy   out cmn_lifesign_parties%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lpy_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_lpy ( i_lpy_id   in  cmn_lifesign_parties.id%type )
      is 
           select *
             from cmn_lifesign_parties lpy
            where lpy.id = i_lpy_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_lpy( i_lpy_id => i_lpy_id );
         fetch c_lpy into o_rt_lpy;
         l_found := c_lpy%found;
         close c_lpy;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_lpy%isopen
         then
            close c_lpy;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end lpy_select_row;

function lpy_select_row( i_lpy_pty_id   in  cmn_lifesign_parties.pty_id%type
                       , o_rt_lpy  out cmn_lifesign_parties%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lpy_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_lpy ( i_lpy_pty_id   in  cmn_lifesign_parties.pty_id%type )
      is
         select *
           from cmn_lifesign_parties lpy
          where lpy.pty_id = i_lpy_pty_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_lpy(i_lpy_pty_id => i_lpy_pty_id);
         fetch c_lpy into o_rt_lpy;
         l_found := c_lpy%found;
         close c_lpy;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_lpy%isopen
      then
         close c_lpy;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end lpy_select_row;

function lpy_select_row_upd( i_lpy_id   in  cmn_lifesign_parties.id%type
                           , o_rt_lpy   out cmn_lifesign_parties%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lpy_select_row_upd';
   l_found                boolean      := false;

   cursor c_lpy ( i_lpy_id   in  cmn_lifesign_parties.id%type )
   is
           select *
             from cmn_lifesign_parties lpy
            where lpy.id = i_lpy_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_lpy( i_lpy_id => i_lpy_id );
   fetch c_lpy into o_rt_lpy;
   l_found := c_lpy%found;
   close c_lpy;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_lpy%isopen
      then
         close c_lpy;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end lpy_select_row_upd;

function lpy_select_row_upd( i_lpy_pty_id   in  cmn_lifesign_parties.pty_id%type
                           , o_rt_lpy  out cmn_lifesign_parties%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lpy_select_row_upd';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := lpy_select_row( i_lpy_pty_id   =>  i_lpy_pty_id
                               , o_rt_lpy => o_rt_lpy );
      if l_found
      then
         
         l_found := lpy_select_row_upd( i_lpy_id => o_rt_lpy.id
                                      , o_rt_lpy => o_rt_lpy );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end lpy_select_row_upd;

procedure lpy_lock_row( i_lpy_id   in  cmn_lifesign_parties.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lpy_lock_row';
begin
  declare
     cursor c_lpy ( i_lpy_id   in  cmn_lifesign_parties.id%type )
     is
             select ''
               from cmn_lifesign_parties lpy
              where lpy.id = i_lpy_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_lpy_id is not null
         then
            begin
                
                lpy_lock_row_nowait( i_lpy_id => i_lpy_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_lpy( i_lpy_id => i_lpy_id );
                  close c_lpy;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_lpy%isopen
         then
            close c_lpy;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end lpy_lock_row;

procedure lpy_lock_row_nowait( i_lpy_id   in  cmn_lifesign_parties.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lpy_lock_row_nowait';
begin
   declare
      cursor c_lpy ( i_lpy_id   in  cmn_lifesign_parties.id%type )
      is
              select ''
                from cmn_lifesign_parties lpy
               where lpy.id = i_lpy_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_lpy_id is not null
         then
            
            open c_lpy( i_lpy_id => i_lpy_id );

            close c_lpy;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_lpy%isopen
        then
           close c_lpy;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_lpy_id||'"' );
   end;                                                          
end lpy_lock_row_nowait;

function lpy_perform_update( i_lpy_id   in     cmn_lifesign_parties.id%type
                           , io_rt_lpy  in out cmn_lifesign_parties%rowtype )
return number
;

function lpy_perform_delete( i_lpy_id   in  cmn_lifesign_parties.id%type )
return boolean
;

procedure lpy_insert_row ( io_rt_lpy  in out cmn_lifesign_parties%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lpy_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into cmn_lifesign_parties( id
                                , pty_id
                                , response_interval
                                , allowed_misses
                                , ind_initiator
                                , init_procedure )
              values ( io_rt_lpy.id
                     , io_rt_lpy.pty_id
                     , io_rt_lpy.response_interval
                     , io_rt_lpy.allowed_misses
                     , io_rt_lpy.ind_initiator
                     , io_rt_lpy.init_procedure )
           returning id
                   , pty_id
                   , response_interval
                   , allowed_misses
                   , ind_initiator
                   , init_procedure
                into io_rt_lpy.id
                   , io_rt_lpy.pty_id
                   , io_rt_lpy.response_interval
                   , io_rt_lpy.allowed_misses
                   , io_rt_lpy.ind_initiator
                   , io_rt_lpy.init_procedure;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_lpy.id||'"'
                                                             ||', PTY_ID = "'||io_rt_lpy.pty_id||'"'
                                                             ||', RESPONSE_INTERVAL = "'||io_rt_lpy.response_interval||'"'
                                                             ||', ALLOWED_MISSES = "'||io_rt_lpy.allowed_misses||'"'
                                                             ||', IND_INITIATOR = "'||io_rt_lpy.ind_initiator||'"'
                                                             ||', INIT_PROCEDURE = "'||io_rt_lpy.init_procedure||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end lpy_insert_row;

function lpy_perform_update( i_lpy_id   in     cmn_lifesign_parties.id%type
                           , io_rt_lpy  in out cmn_lifesign_parties%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lpy_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update cmn_lifesign_parties
            set id = io_rt_lpy.id
              , pty_id = io_rt_lpy.pty_id
              , response_interval = io_rt_lpy.response_interval
              , allowed_misses = io_rt_lpy.allowed_misses
              , ind_initiator = io_rt_lpy.ind_initiator
              , init_procedure = io_rt_lpy.init_procedure
          where id = i_lpy_id
      returning id
              , pty_id
              , response_interval
              , allowed_misses
              , ind_initiator
              , init_procedure
           into io_rt_lpy.id
              , io_rt_lpy.pty_id
              , io_rt_lpy.response_interval
              , io_rt_lpy.allowed_misses
              , io_rt_lpy.ind_initiator
              , io_rt_lpy.init_procedure;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_lpy.id||'"'
                                                             ||', PTY_ID = "'||io_rt_lpy.pty_id||'"'
                                                             ||', RESPONSE_INTERVAL = "'||io_rt_lpy.response_interval||'"'
                                                             ||', ALLOWED_MISSES = "'||io_rt_lpy.allowed_misses||'"'
                                                             ||', IND_INITIATOR = "'||io_rt_lpy.ind_initiator||'"'
                                                             ||', INIT_PROCEDURE = "'||io_rt_lpy.init_procedure||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end lpy_perform_update;

function lpy_perform_delete( i_lpy_id   in  cmn_lifesign_parties.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lpy_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from cmn_lifesign_parties
          where id = i_lpy_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_lpy_id||'"' );
   end;                                                          
end lpy_perform_delete;

function lpy_update_row( i_lpy_id   in     cmn_lifesign_parties.id%type
                       , io_rt_lpy  in out cmn_lifesign_parties%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lpy_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         lpy_lock_row( i_lpy_id   =>  i_lpy_id );

         
         l_rowcount := 
            lpy_perform_update( i_lpy_id   =>  i_lpy_id
                              , io_rt_lpy  => io_rt_lpy );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_lpy.id||'"'
                                                          ||', PTY_ID = "'||io_rt_lpy.pty_id||'"'
                                                          ||', RESPONSE_INTERVAL = "'||io_rt_lpy.response_interval||'"'
                                                          ||', ALLOWED_MISSES = "'||io_rt_lpy.allowed_misses||'"'
                                                          ||', IND_INITIATOR = "'||io_rt_lpy.ind_initiator||'"'
                                                          ||', INIT_PROCEDURE = "'||io_rt_lpy.init_procedure||'"'                                                           , 1, 4000));
   end;                                                          
end lpy_update_row;

function lpy_delete_row( i_lpy_id   in  cmn_lifesign_parties.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lpy_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         lpy_lock_row( i_lpy_id   =>  i_lpy_id );

         
         l_deleted := lpy_perform_delete( i_lpy_id   =>  i_lpy_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_lpy_id||'"' );
   end;                                                          
end lpy_delete_row;

function lpy_seq1_nextval
return cmn_lifesign_parties.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.lpy_seq1_nextval';
   l_lpy_id  cmn_lifesign_parties.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select cmn_lpy_seq1.nextval 
           into l_lpy_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_lpy_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end lpy_seq1_nextval;


end cmn_lpy_tapi_pck;
/
