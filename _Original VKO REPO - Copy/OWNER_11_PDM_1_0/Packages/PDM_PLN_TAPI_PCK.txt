create or replace PACKAGE pdm_pln_tapi_pck
IS
-- Table API package for table pdm_package_link_definitions
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:40:59)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'PDM_PLN_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'PDM_PACKAGE_LINK_DEFINITIONS';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION pln_select_row( i_pln_ID   IN  pdm_package_link_definitions.ID%TYPE
                       , o_rt_pln   OUT pdm_package_link_definitions%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION pln_select_row_uk1( i_pln_PTE_ID_PRIMARY   IN  pdm_package_link_definitions.PTE_ID_PRIMARY%TYPE
                           , i_pln_PTE_ID_SECONDARY   IN  pdm_package_link_definitions.PTE_ID_SECONDARY%TYPE
                           , o_rt_pln  OUT pdm_package_link_definitions%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION pln_select_row_uk2( i_pln_NAME   IN  pdm_package_link_definitions.NAME%TYPE
                           , o_rt_pln  OUT pdm_package_link_definitions%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION pln_select_row_upd( i_pln_ID   IN  pdm_package_link_definitions.ID%TYPE
                           , o_rt_pln   OUT pdm_package_link_definitions%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION pln_select_row_upd_uk1( i_pln_PTE_ID_PRIMARY   IN  pdm_package_link_definitions.PTE_ID_PRIMARY%TYPE
                               , i_pln_PTE_ID_SECONDARY   IN  pdm_package_link_definitions.PTE_ID_SECONDARY%TYPE
                               , o_rt_pln  OUT pdm_package_link_definitions%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION pln_select_row_upd_uk2( i_pln_NAME   IN  pdm_package_link_definitions.NAME%TYPE
                               , o_rt_pln  OUT pdm_package_link_definitions%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE pln_lock_row( i_pln_ID   IN  pdm_package_link_definitions.ID%TYPE )
;

PROCEDURE pln_lock_row_nowait( i_pln_ID   IN  pdm_package_link_definitions.ID%TYPE )
;

FUNCTION pln_seq1_nextval
RETURN pdm_package_link_definitions.ID%TYPE
;


END pdm_pln_tapi_pck;
/




package body pdm_pln_tapi_pck
is




function pln_select_row( i_pln_id   in  pdm_package_link_definitions.id%type
                       , o_rt_pln   out pdm_package_link_definitions%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pln_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_pln ( i_pln_id   in  pdm_package_link_definitions.id%type )
      is 
           select *
             from pdm_package_link_definitions pln
            where pln.id = i_pln_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_pln( i_pln_id => i_pln_id );
         fetch c_pln into o_rt_pln;
         l_found := c_pln%found;
         close c_pln;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_pln%isopen
         then
            close c_pln;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pln_select_row;

function pln_select_row_uk1( i_pln_pte_id_primary   in  pdm_package_link_definitions.pte_id_primary%type
                           , i_pln_pte_id_secondary   in  pdm_package_link_definitions.pte_id_secondary%type
                           , o_rt_pln  out pdm_package_link_definitions%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pln_select_row_uk1';
   l_found                boolean      := false;
begin
   declare
      cursor c_pln ( i_pln_pte_id_primary   in  pdm_package_link_definitions.pte_id_primary%type
                   , i_pln_pte_id_secondary   in  pdm_package_link_definitions.pte_id_secondary%type )
      is
         select *
           from pdm_package_link_definitions pln
          where pln.pte_id_primary = i_pln_pte_id_primary 
            and pln.pte_id_secondary = i_pln_pte_id_secondary ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_pln(i_pln_pte_id_primary => i_pln_pte_id_primary, i_pln_pte_id_secondary => i_pln_pte_id_secondary);
         fetch c_pln into o_rt_pln;
         l_found := c_pln%found;
         close c_pln;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_pln%isopen
      then
         close c_pln;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pln_select_row_uk1;

function pln_select_row_uk2( i_pln_name   in  pdm_package_link_definitions.name%type
                           , o_rt_pln  out pdm_package_link_definitions%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pln_select_row_uk2';
   l_found                boolean      := false;
begin
   declare
      cursor c_pln ( i_pln_name   in  pdm_package_link_definitions.name%type )
      is
         select *
           from pdm_package_link_definitions pln
          where pln.name = i_pln_name ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_pln(i_pln_name => i_pln_name);
         fetch c_pln into o_rt_pln;
         l_found := c_pln%found;
         close c_pln;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_pln%isopen
      then
         close c_pln;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pln_select_row_uk2;

function pln_select_row_upd( i_pln_id   in  pdm_package_link_definitions.id%type
                           , o_rt_pln   out pdm_package_link_definitions%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pln_select_row_upd';
   l_found                boolean      := false;

   cursor c_pln ( i_pln_id   in  pdm_package_link_definitions.id%type )
   is
           select *
             from pdm_package_link_definitions pln
            where pln.id = i_pln_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_pln( i_pln_id => i_pln_id );
   fetch c_pln into o_rt_pln;
   l_found := c_pln%found;
   close c_pln;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_pln%isopen
      then
         close c_pln;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end pln_select_row_upd;

function pln_select_row_upd_uk1( i_pln_pte_id_primary   in  pdm_package_link_definitions.pte_id_primary%type
                               , i_pln_pte_id_secondary   in  pdm_package_link_definitions.pte_id_secondary%type
                               , o_rt_pln  out pdm_package_link_definitions%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pln_select_row_upd_uk1';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := pln_select_row_uk1( i_pln_pte_id_primary   =>  i_pln_pte_id_primary
                                   , i_pln_pte_id_secondary   =>  i_pln_pte_id_secondary
                                   , o_rt_pln => o_rt_pln );
      if l_found
      then
         
         l_found := pln_select_row_upd( i_pln_id => o_rt_pln.id
                                      , o_rt_pln => o_rt_pln );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end pln_select_row_upd_uk1;

function pln_select_row_upd_uk2( i_pln_name   in  pdm_package_link_definitions.name%type
                               , o_rt_pln  out pdm_package_link_definitions%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pln_select_row_upd_uk2';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := pln_select_row_uk2( i_pln_name   =>  i_pln_name
                                   , o_rt_pln => o_rt_pln );
      if l_found
      then
         
         l_found := pln_select_row_upd( i_pln_id => o_rt_pln.id
                                      , o_rt_pln => o_rt_pln );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end pln_select_row_upd_uk2;

procedure pln_lock_row( i_pln_id   in  pdm_package_link_definitions.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pln_lock_row';
begin
  declare
     cursor c_pln ( i_pln_id   in  pdm_package_link_definitions.id%type )
     is
             select ''
               from pdm_package_link_definitions pln
              where pln.id = i_pln_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_pln_id is not null
         then
            begin
                
                pln_lock_row_nowait( i_pln_id => i_pln_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_pln( i_pln_id => i_pln_id );
                  close c_pln;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_pln%isopen
         then
            close c_pln;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end pln_lock_row;

procedure pln_lock_row_nowait( i_pln_id   in  pdm_package_link_definitions.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pln_lock_row_nowait';
begin
   declare
      cursor c_pln ( i_pln_id   in  pdm_package_link_definitions.id%type )
      is
              select ''
                from pdm_package_link_definitions pln
               where pln.id = i_pln_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_pln_id is not null
         then
            
            open c_pln( i_pln_id => i_pln_id );

            close c_pln;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_pln%isopen
        then
           close c_pln;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_pln_id||'"' );
   end;                                                          
end pln_lock_row_nowait;

function pln_seq1_nextval
return pdm_package_link_definitions.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pln_seq1_nextval';
   l_pln_id  pdm_package_link_definitions.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select pdm_pln_seq1.nextval 
           into l_pln_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_pln_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pln_seq1_nextval;


end pdm_pln_tapi_pck;
/