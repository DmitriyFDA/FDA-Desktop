create or replace PACKAGE pdm_match
IS

   TYPE rt_active_pse IS RECORD (pse_id  pdm_phases.id%TYPE
                                ,aty_id  pdm_activities.id%TYPE
                                ,pcs_id  pdm_processes.id%TYPE
                                );

   TYPE rt_count IS RECORD (cnt_stringmatch   NUMBER
                           ,cnt_existence     NUMBER
                           ,cnt_nonexistence  NUMBER
                           ,cnt_regexp        NUMBER
                           ,cnt_substring     NUMBER
                           );
                           
   TYPE rt_are IS RECORD (id_cust   pdm_action_resources.id_cust%TYPE
                         ,rte_id    pdm_action_resources.rte_id%TYPE
                         );

   TYPE it_are IS TABLE OF rt_are INDEX BY PLS_INTEGER;

   TYPE t_ote_id        IS TABLE OF pdm_operation_types.id%TYPE        INDEX BY PLS_INTEGER;
   TYPE t_ote_operation IS TABLE OF pdm_operation_types.operation%TYPE INDEX BY PLS_INTEGER;
   TYPE t_ote           IS TABLE OF pdm_operation_types.id%TYPE        INDEX BY pdm_operation_types.operation%TYPE;

   PROCEDURE match_main
   ( io_rt_pet                      IN OUT pdm_package_events%ROWTYPE
   , io_rt_pae                      IN OUT pdm_packages%ROWTYPE
   , i_tasktype                     IN     pdm_task_types.name%TYPE
   , i_event_time                   IN     cmn_constant.st_timestamp
   , i_ind_assign_package_to_eon    IN     BOOLEAN
   , i_ind_force_match              IN     BOOLEAN
   , i_ind_force_processstatus      IN     BOOLEAN
   , i_ind_force_packageinfo        IN     BOOLEAN
   , i_ind_force_taskinstruction    IN     BOOLEAN
   , i_party_id_cust                IN     cmn_parties.id_cust%TYPE
   , i_instance_id                  IN     VARCHAR2
   , i_ind_chk_max_taskreport_error IN     BOOLEAN
   , i_ind_force_update_package     IN     BOOLEAN
   , i_ind_deregistration           IN     BOOLEAN
   , i_it_attributes                IN     pdm_attributes.attribute_coll
   , i_it_attributes_extracted      IN     pdm_attributes.attribute_coll
   , i_ind_match_physical_pd        IN     BOOLEAN
   , i_ind_packagedata_loaded       IN     BOOLEAN
   , i_ind_match_member             IN     BOOLEAN DEFAULT FALSE
   );

      
   PROCEDURE main_hdl_etk ( i_aet_id    IN pdm_events.aet_id%TYPE
                          , i_timestamp IN cmn_constant.st_timestamp
                          );

   PROCEDURE main_hdl_psn
      (i_timestamp           IN   cmn_constant.st_timestamp
      ,i_aet_id              IN   pdm_events.aet_id%TYPE
      );

   PROCEDURE main_hdl_ptk ( i_aet_id    IN pdm_events.aet_id%TYPE
                          , i_timestamp IN cmn_constant.st_timestamp
                          );
   PROCEDURE main_hdl_pae_psn
      ( i_aet_id    IN pdm_events.aet_id%TYPE
      , i_priority  IN VARCHAR2
      , i_timestamp IN cmn_constant.st_timestamp
      );

      
   PROCEDURE main_hdl_time ( i_aet_id    IN pdm_events.aet_id%TYPE
                           , i_timestamp IN cmn_constant.st_timestamp
                           );

   PROCEDURE main_hdl_pae_time
      ( i_aet_id    IN pdm_events.aet_id%TYPE
      , i_priority  IN VARCHAR2
      , i_timestamp IN cmn_constant.st_timestamp
      );

   PROCEDURE determine_max_score( i_nt_pae_member IN  PDM_NT_PAE_ID
                                , o_rt_pae        OUT pdm_packages%ROWTYPE
                                );

   PROCEDURE evaluate_members( io_rt_pae                  IN OUT pdm_packages%ROWTYPE
                             , io_rt_pet                  IN OUT pdm_package_events%ROWTYPE
                             , i_evt_id                   IN     pdm_events.id%TYPE
                             , i_timestamp                IN     cmn_constant.st_timestamp
                             , i_ind_use_mult_bagdata     IN     BOOLEAN
                             , o_rt_pae_logical              OUT pdm_packages%ROWTYPE
                             , o_rt_pae_member_chosen_new    OUT pdm_packages%ROWTYPE
                             , o_rt_pae_member_chosen_old    OUT pdm_packages%ROWTYPE
                             , o_choice_changed              OUT BOOLEAN
                             , o_pae_member_old_hdl_psn      OUT BOOLEAN
                             , o_pae_member_count            OUT NUMBER
                             );

   FUNCTION matched_previously ( i_pae_id IN  pdm_packages.id%TYPE )
   RETURN
      BOOLEAN
   ;

   FUNCTION choice_changed ( i_pae_member_chosen_old_id IN pdm_packages.id%TYPE
                           , i_pae_member_chosen_new_id IN pdm_packages.id%TYPE
                           )
   RETURN
      BOOLEAN
   ;
   
   PROCEDURE match_physical_package( i_rt_plk                   IN pdm_package_links%ROWTYPE
                                   , i_rt_pae_logical           IN pdm_packages%ROWTYPE
                                   , i_rt_pae_member_chosen_new IN pdm_packages%ROWTYPE
                                   , i_evt_id                   IN pdm_events.id%TYPE
                                   , i_systimestamp             IN cmn_constant.st_timestamp
                                   , i_choice_changed           IN BOOLEAN
                                   );

END pdm_match;
/




package body pdm_match
is
   























































































   g_con_package                constant varchar2( 19 ) := 'pdm_match';


   
   
   

   procedure init
   is
      l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.' || 'Init';
   begin
      viu_module.enter_module( i_module      => l_con_proc_name );
      
      viu_module.leave_module( i_module      => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
   end;

   












   procedure determine_max_score( i_nt_pae_member in  pdm_nt_pae_id
                                , o_rt_pae        out pdm_packages%rowtype
                                )
   is

      l_con_proc_name    constant cmn_constant.st_proc_name := g_con_package || '.determine_max_score';

      
      
      
      
      cursor c_max_score ( b_nt_pae_member in pdm_nt_pae_id )
      is
      select /*+ CARDINALITY(nt_pae, 3) */
             pae.*
      from   pdm_v_pbe_active          pbe
      ,      pdm_attribute_definitions adn
      ,      pdm_packages              pae
      ,      table(b_nt_pae_member)    nt_pae
      where  nt_pae.column_value = pae.id
      and    pbe.pae_id          = pae.id
      and    pbe.adn_id          = adn.id
      and    adn.path            = pdm_constant.g_con_bagdatascore_attr
      and    pbe.value           = ( select /*+ CARDINALITY(nt_pae, 3) */
                                            max(to_number(pbe.value))
                                     from   pdm_v_pbe_active          pbe
                                     ,      pdm_attribute_definitions adn
                                     ,      pdm_packages              pae
                                     ,      table(b_nt_pae_member)    nt_pae
                                     where  nt_pae.column_value = pae.id
                                     and    pbe.pae_id          = pae.id
                                     and    pbe.adn_id          = adn.id
                                     and    adn.path            = pdm_constant.g_con_bagdatascore_attr
                                   )
      ;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      
      
      
      for r_max_score in c_max_score ( b_nt_pae_member => i_nt_pae_member )
      loop

         
      	 if o_rt_pae.id is null
      	 then

            
      	    o_rt_pae := r_max_score;

      	 else  

            
      	    o_rt_pae := null;
      	    exit;
      	 end if;
      end loop;

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => 'exception'
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end determine_max_score;

   











   function choice_changed ( i_pae_member_chosen_old_id in pdm_packages.id%type
                           , i_pae_member_chosen_new_id in pdm_packages.id%type
                           )
   return
      boolean
   is
      l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.choice_changed';

      l_choice_changed boolean := false;

   begin
      viu_module.enter_module( i_module      => l_con_proc_name );

      
      if         i_pae_member_chosen_old_id <> i_pae_member_chosen_new_id
         or (    i_pae_member_chosen_old_id is not null
         	   and i_pae_member_chosen_new_id is     null
         	  )
         or (    i_pae_member_chosen_old_id is     null
         	   and i_pae_member_chosen_new_id is not null
         	  )
      then
         l_choice_changed := true;
      end if;

      viu_module.leave_module( i_module => l_con_proc_name );

      return l_choice_changed;
      
   exception
      when others then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end choice_changed;

   











   procedure update_pae_changed_choice( io_rt_pae               in out pdm_packages%rowtype
                                      , io_rt_pae_member_chosen in out pdm_packages%rowtype
                                      , io_rt_pae_logical       in out pdm_packages%rowtype
                                      , i_rt_pae_member_logical in     pdm_packages%rowtype
                                      , i_indicator_yesno       in     varchar2
                                      )
   is

      l_con_proc_name    constant cmn_constant.st_proc_name := g_con_package || '.update_pae_changed_choice';

      l_dml_amount pls_integer;
      l_found      boolean;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      if io_rt_pae_member_chosen.id is not null
      then

         
         io_rt_pae_member_chosen.ind_chosen := i_indicator_yesno;
         l_dml_amount := pdm_pae_tapi_pck.pae_update_row( i_pae_id  => io_rt_pae_member_chosen.id
                                                        , io_rt_pae => io_rt_pae_member_chosen
                                                        );
      else

         
         if io_rt_pae.pte_id = pdm_constant.g_con_pte_id_logical
         then

            
            io_rt_pae_logical := io_rt_pae;
         else

            
            l_found := pdm_common.plk_select_primary_pae( i_pae_id_secondary => i_rt_pae_member_logical.id
                                                        , i_pln_id           => pdm_constant.g_con_pln_logical_member
                                                        , o_rt_pae_primary   => io_rt_pae_logical
                                                        );
         end if;

         
         io_rt_pae_logical.ind_consider_multi_read := i_indicator_yesno;
         l_dml_amount := pdm_pae_tapi_pck.pae_update_row( i_pae_id  => io_rt_pae_logical.id
                                                        , io_rt_pae => io_rt_pae_logical
                                                        );

         
         if io_rt_pae.pte_id = pdm_constant.g_con_pte_id_logical
         then

            
            io_rt_pae := io_rt_pae_logical;
         end if;

      end if;

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => 'exception'
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end update_pae_changed_choice;

   












   procedure determine_evaluation_result( i_nt_pae_member             in     pdm_nt_pae_id
                                        , i_member_matched            in     boolean
                                        , i_evt_id                    in     pdm_events.id%type
                                        , i_timestamp                 in     cmn_constant.st_timestamp
                                        , o_rt_pae_member_chosen_new     out pdm_packages%rowtype
                                        , o_rt_pae_logical               out pdm_packages%rowtype
                                        , io_choice_changed           in out boolean
                                        , io_rt_pae                   in out pdm_packages%rowtype
                                        , io_rt_pet                   in out pdm_package_events%rowtype
                                        , io_rt_pae_member_chosen_old in out pdm_packages%rowtype
                                        )
   is

      l_con_proc_name    constant cmn_constant.st_proc_name := g_con_package || '.determine_evaluation_result';

      l_found boolean;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      if not i_member_matched
      then

         
         o_rt_pae_member_chosen_new := io_rt_pae_member_chosen_old;

      else

         
         pdm_match.determine_max_score( i_nt_pae_member => i_nt_pae_member
                                      , o_rt_pae        => o_rt_pae_member_chosen_new
                                      );

         
         io_choice_changed := choice_changed ( i_pae_member_chosen_old_id => io_rt_pae_member_chosen_old.id
                                             , i_pae_member_chosen_new_id => o_rt_pae_member_chosen_new.id
                                             );
         if io_choice_changed
         then

            
            update_pae_changed_choice( io_rt_pae               => io_rt_pae
                                     , io_rt_pae_member_chosen => o_rt_pae_member_chosen_new
                                     , io_rt_pae_logical       => o_rt_pae_logical
                                     , i_rt_pae_member_logical => io_rt_pae_member_chosen_old
                                     , i_indicator_yesno       => cmn_constant.g_con_yesno_yes
                                     );

            
            update_pae_changed_choice( io_rt_pae               => io_rt_pae
                                     , io_rt_pae_member_chosen => io_rt_pae_member_chosen_old
                                     , io_rt_pae_logical       => o_rt_pae_logical
                                     , i_rt_pae_member_logical => o_rt_pae_member_chosen_new
                                     , i_indicator_yesno       => cmn_constant.g_con_yesno_no
                                     );

         end if;

         
         if     io_rt_pae.pte_id              =  pdm_constant.g_con_pte_id_logical
         	  and o_rt_pae_member_chosen_new.id is not null
         then

            
            io_rt_pae := o_rt_pae_member_chosen_new;

            
            l_found := pdm_common.select_first_pet( i_pae_id => o_rt_pae_member_chosen_new.id
                                                  , i_evt_id => i_evt_id
                                                  , o_rt_pet => io_rt_pet
                                                  );



            
            if not l_found
            then

               
               io_rt_pet              := null;
               io_rt_pet.evt_id       := i_evt_id;
               io_rt_pet.pae_id       := o_rt_pae_member_chosen_new.id;
               io_rt_pet.date_created := i_timestamp;
               
               pdm_common.create_package_event( io_rt_pet                => io_rt_pet
                                              , i_ind_check_existing_pet => false
                                              );
            end if;

         end if;

      end if; 

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => 'exception'
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end determine_evaluation_result;

   












   procedure hdl_evaluation_one_member( i_nt_pae_member            in     pdm_nt_pae_id
                                      , i_pae_member_count         in     number
                                      , i_evt_id                   in     pdm_events.id%type
                                      , i_timestamp                in     cmn_constant.st_timestamp
                                      , o_rt_pae_member_chosen_new    out pdm_packages%rowtype
                                      , o_rt_pae_member_chosen_old    out pdm_packages%rowtype
                                      , io_rt_pae                  in out pdm_packages%rowtype
                                      , io_rt_pet                  in out pdm_package_events%rowtype
                                      )
   is

      l_con_proc_name    constant cmn_constant.st_proc_name := g_con_package || '.hdl_evaluation_one_member';

      l_rt_pae_member pdm_packages%rowtype;
      l_dummy         boolean;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      if i_pae_member_count = 1
      then

         
         l_dummy := pdm_pae_tapi_pck.pae_select_row( i_pae_id => i_nt_pae_member(1)
                                                   , o_rt_pae => l_rt_pae_member
                                                   );

         
         
         o_rt_pae_member_chosen_old := l_rt_pae_member;
         o_rt_pae_member_chosen_new := l_rt_pae_member;

         
         if io_rt_pae.pte_id = pdm_constant.g_con_pte_id_logical
         then

            
            io_rt_pae := l_rt_pae_member;

            
            io_rt_pet              := null;
            io_rt_pet.evt_id       := i_evt_id;
            io_rt_pet.pae_id       := l_rt_pae_member.id;
            io_rt_pet.date_created := i_timestamp;
            
            pdm_common.create_package_event( io_rt_pet                => io_rt_pet
                                           , i_ind_check_existing_pet => false
                                           );
         end if;

      end if;
   
      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => 'exception'
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end hdl_evaluation_one_member;

   












   procedure hdl_evaluation_more_members( i_nt_pae_member             in     pdm_nt_pae_id
                                        , i_pae_member_count          in     number
                                        , i_evt_id                    in     pdm_events.id%type
                                        , i_timestamp                 in     cmn_constant.st_timestamp
                                        , o_rt_pae_logical               out pdm_packages%rowtype
                                        , io_rt_pae_member_chosen_new in out pdm_packages%rowtype
                                        , io_rt_pae_member_chosen_old in out pdm_packages%rowtype
                                        , io_choice_changed           in out boolean
                                        , io_pae_member_old_hdl_psn   in out boolean
                                        , io_rt_pae                   in out pdm_packages%rowtype
                                        , io_rt_pet                   in out pdm_package_events%rowtype
                                        )
   is

      l_con_proc_name    constant cmn_constant.st_proc_name := g_con_package || '.hdl_evaluation_more_members';

      l_rt_pae_member       pdm_packages%rowtype;
      l_rt_pet_member       pdm_package_events%rowtype;
      l_it_attributes_empty pdm_attributes.attribute_coll;
      l_member_matched      boolean := false;
      l_dummy               boolean;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      if i_pae_member_count > 1
      then

         
         for idx_pae_member in i_nt_pae_member.first..i_nt_pae_member.last
         loop

            
            l_dummy := pdm_pae_tapi_pck.pae_select_row( i_pae_id => i_nt_pae_member(idx_pae_member)
                                                      , o_rt_pae => l_rt_pae_member
                                                      );

            
            if l_rt_pae_member.ind_chosen = cmn_constant.g_con_yesno_yes
            then

               
               io_rt_pae_member_chosen_old := l_rt_pae_member;

               
               if l_rt_pae_member.ind_match_hdl_psn = cmn_constant.g_con_yesno_yes
               then
                  io_pae_member_old_hdl_psn := true;
               end if;

            end if; 

            
            if l_rt_pae_member.ind_match_hdl_psn = cmn_constant.g_con_yesno_yes
               or
               l_rt_pae_member.ind_match_hdl_time = cmn_constant.g_con_yesno_yes
            then

               
               l_member_matched := true;
            	
               
               l_rt_pae_member.ind_match_hdl_psn   := cmn_constant.g_con_yesno_no;
               l_rt_pae_member.ind_match_hdl_time  := cmn_constant.g_con_yesno_no;
   
               
               l_rt_pet_member              := null;
               l_rt_pet_member.evt_id       := i_evt_id;
               l_rt_pet_member.pae_id       := l_rt_pae_member.id;
               l_rt_pet_member.date_created := i_timestamp;
               
               pdm_common.create_package_event( io_rt_pet                => l_rt_pet_member
                                              , i_ind_check_existing_pet => false
                                              );
               
               pdm_match.match_main( io_rt_pet                      => l_rt_pet_member
                                   , io_rt_pae                      => l_rt_pae_member
                                   , i_tasktype                     => null
                                   , i_event_time                   => i_timestamp
                                   , i_ind_assign_package_to_eon    => false
                                   , i_ind_force_match              => true
                                   , i_ind_force_processstatus      => false
                                   , i_ind_force_packageinfo        => false
                                   , i_ind_force_taskinstruction    => false
                                   , i_party_id_cust                => null
                                   , i_instance_id                  => null
                                   , i_ind_chk_max_taskreport_error => false
                                   , i_ind_force_update_package     => true
                                   , i_ind_deregistration           => false
                                   , i_it_attributes                => l_it_attributes_empty
                                   , i_it_attributes_extracted      => l_it_attributes_empty
                                   , i_ind_match_physical_pd        => false
                                   , i_ind_packagedata_loaded       => false
                                   , i_ind_match_member             => true
                                   );

               
               
               if l_rt_pae_member.id = io_rt_pae_member_chosen_old.id
               then
                  io_rt_pae_member_chosen_old := l_rt_pae_member;
               end if;
            end if; 
         end loop;

         
         determine_evaluation_result( i_nt_pae_member             => i_nt_pae_member
                                    , i_member_matched            => l_member_matched
                                    , i_evt_id                    => i_evt_id
                                    , i_timestamp                 => i_timestamp
                                    , o_rt_pae_member_chosen_new  => io_rt_pae_member_chosen_new
                                    , o_rt_pae_logical            => o_rt_pae_logical
                                    , io_choice_changed           => io_choice_changed
                                    , io_rt_pae                   => io_rt_pae
                                    , io_rt_pet                   => io_rt_pet
                                    , io_rt_pae_member_chosen_old => io_rt_pae_member_chosen_old
                                    );

      end if; 
   
      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => 'exception'
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end hdl_evaluation_more_members;

   











   procedure evaluate_members( io_rt_pae                  in out pdm_packages%rowtype
                             , io_rt_pet                  in out pdm_package_events%rowtype
                             , i_evt_id                   in     pdm_events.id%type
                             , i_timestamp                in     cmn_constant.st_timestamp
                             , i_ind_use_mult_bagdata     in     boolean
                             , o_rt_pae_logical              out pdm_packages%rowtype
                             , o_rt_pae_member_chosen_new    out pdm_packages%rowtype
                             , o_rt_pae_member_chosen_old    out pdm_packages%rowtype
                             , o_choice_changed              out boolean
                             , o_pae_member_old_hdl_psn      out boolean
                             , o_pae_member_count            out number
                             )
   is

      l_con_proc_name    constant cmn_constant.st_proc_name := g_con_package || '.evaluate_members';

      l_nt_pae_member       pdm_nt_pae_id := pdm_nt_pae_id();
      l_it_attributes_empty pdm_attributes.attribute_coll;
      l_rt_pae_member       pdm_packages%rowtype;
      l_rt_pet_member       pdm_package_events%rowtype;
      l_dml_amount          pls_integer;
      l_found               boolean;
      l_dummy               boolean;
      l_member_matched      boolean := false;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      o_choice_changed         := false;
      o_pae_member_old_hdl_psn := false;

      
      if i_ind_use_mult_bagdata
      then

         
         if io_rt_pae.pte_id = pdm_constant.g_con_pte_id_physical
         then
            pdm_common.plk_select_secondary_pae( i_pae_id_primary => io_rt_pae.id
                                               , i_pln_id         => pdm_constant.g_con_pln_physical_member
                                               , o_nt_pae_member  => l_nt_pae_member
                                               );
         else 
   
            pdm_common.plk_select_secondary_pae( i_pae_id_primary => io_rt_pae.id
                                               , i_pln_id         => pdm_constant.g_con_pln_logical_member
                                               , o_nt_pae_member  => l_nt_pae_member
                                               );
         end if;
   
         
         o_pae_member_count := l_nt_pae_member.count;

         
         hdl_evaluation_one_member( i_nt_pae_member            => l_nt_pae_member
                                  , i_pae_member_count         => o_pae_member_count
                                  , i_evt_id                   => i_evt_id
                                  , i_timestamp                => i_timestamp
                                  , o_rt_pae_member_chosen_new => o_rt_pae_member_chosen_new
                                  , o_rt_pae_member_chosen_old => o_rt_pae_member_chosen_old
                                  , io_rt_pae                  => io_rt_pae
                                  , io_rt_pet                  => io_rt_pet
                                  );

         
         hdl_evaluation_more_members( i_nt_pae_member             => l_nt_pae_member
                                    , i_pae_member_count          => o_pae_member_count
                                    , i_evt_id                    => i_evt_id
                                    , i_timestamp                 => i_timestamp
                                    , o_rt_pae_logical            => o_rt_pae_logical
                                    , io_rt_pae_member_chosen_new => o_rt_pae_member_chosen_new
                                    , io_rt_pae_member_chosen_old => o_rt_pae_member_chosen_old
                                    , io_choice_changed           => o_choice_changed
                                    , io_pae_member_old_hdl_psn   => o_pae_member_old_hdl_psn
                                    , io_rt_pae                   => io_rt_pae
                                    , io_rt_pet                   => io_rt_pet
                                    );

      end if; 

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => 'exception'
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end evaluate_members;

   














   procedure match_main_force ( io_rt_pet   in out pdm_package_events%rowtype
                              , io_rt_pae   in out pdm_packages%rowtype
                              , i_timestamp in     cmn_constant.st_timestamp
                              , i_ind_force in     boolean
                              )
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.match_main_force';

      l_it_attributes_empty pdm_attributes.attribute_coll;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      match_main( io_rt_pet                      => io_rt_pet
                , io_rt_pae                      => io_rt_pae
                , i_tasktype                     => null
                , i_event_time                   => i_timestamp
                , i_ind_assign_package_to_eon    => false
                , i_ind_force_match              => i_ind_force
                , i_ind_force_processstatus      => i_ind_force
                , i_ind_force_packageinfo        => false
                , i_ind_force_taskinstruction    => false
                , i_party_id_cust                => null
                , i_instance_id                  => null
                , i_ind_chk_max_taskreport_error => false
                , i_ind_force_update_package     => false
                , i_ind_deregistration           => false
                , i_it_attributes                => l_it_attributes_empty
                , i_it_attributes_extracted      => l_it_attributes_empty
                , i_ind_match_physical_pd        => false
                , i_ind_packagedata_loaded       => false
                );

      viu_module.leave_module( i_module => l_con_proc_name );

   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end match_main_force;

   












   procedure match_logical_package ( i_rt_pae    in pdm_packages%rowtype
                                   , i_evt_id    in pdm_events.id%type
                                   , i_timestamp in cmn_constant.st_timestamp
                                   )
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.match_logical_package';

      l_rt_pae     pdm_packages%rowtype;
      l_rt_pet     pdm_package_events%rowtype;
      l_dml_amount pls_integer;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      l_rt_pet.evt_id       := i_evt_id;
      l_rt_pet.pae_id       := i_rt_pae.id;
      l_rt_pet.date_created := i_timestamp;

      pdm_common.create_package_event( io_rt_pet                => l_rt_pet
                                     , i_ind_check_existing_pet => false
                                     );

      
      l_rt_pae := i_rt_pae;
      l_rt_pae.ind_match_hdl_psn  := cmn_constant.g_con_yesno_no;
      l_rt_pae.ind_match_hdl_time := cmn_constant.g_con_yesno_no;
     
      l_dml_amount  := pdm_pae_tapi_pck.pae_update_row( i_pae_id  => l_rt_pae.id
                                                      , io_rt_pae => l_rt_pae
                                                      );
                                                      
      
      match_main_force ( io_rt_pet   => l_rt_pet
                       , io_rt_pae   => l_rt_pae
                       , i_timestamp => i_timestamp
                       , i_ind_force => true
                       );

      viu_module.leave_module( i_module => l_con_proc_name );

   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end match_logical_package;

   











   procedure match_physical_package( i_rt_plk                   in pdm_package_links%rowtype
                                   , i_rt_pae_logical           in pdm_packages%rowtype
                                   , i_rt_pae_member_chosen_new in pdm_packages%rowtype
                                   , i_evt_id                   in pdm_events.id%type
                                   , i_systimestamp             in cmn_constant.st_timestamp
                                   , i_choice_changed           in boolean
                                   )
   is

      l_con_proc_name    constant cmn_constant.st_proc_name := g_con_package || '.match_physical_package';

      l_it_attributes_empty pdm_attributes.attribute_coll;
      l_rt_pet              pdm_package_events%rowtype;
      l_dummy               boolean;
      l_rt_pae_secondary    pdm_packages%rowtype;
      l_rt_pet_physical     pdm_package_events%rowtype;
      l_rt_pae_physical     pdm_packages%rowtype;
      l_pet_id_secondary    pdm_package_events.id%type;
      l_dml_amount          pls_integer;
      l_rt_plk_active       pdm_package_links%rowtype;
      l_rt_plk_deactivated  pdm_package_links%rowtype;
      l_number              number;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      l_dummy := pdm_pae_tapi_pck.pae_select_row( i_pae_id => i_rt_plk.pae_id_primary
                                                , o_rt_pae => l_rt_pae_physical
                                                );

      
      l_rt_pet_physical.evt_id       := i_evt_id;
      l_rt_pet_physical.pae_id       := l_rt_pae_physical.id;
      l_rt_pet_physical.date_created := i_systimestamp;

      pdm_common.create_package_event( io_rt_pet                => l_rt_pet_physical
                                     , i_ind_check_existing_pet => false
                                     );

      
      if i_choice_changed
      then

         
         if i_rt_pae_member_chosen_new.id is null
         then

            
            l_rt_pet.evt_id       := i_evt_id;
            l_rt_pet.pae_id       := i_rt_pae_logical.id;
            l_rt_pet.date_created := i_systimestamp;

            pdm_common.create_package_event( io_rt_pet                => l_rt_pet
                                           , i_ind_check_existing_pet => false
                                           );

            l_rt_pae_secondary := i_rt_pae_logical;
            l_pet_id_secondary := l_rt_pet.id;

         else 

            
            l_rt_pet.evt_id       := i_evt_id;
            l_rt_pet.pae_id       := i_rt_pae_member_chosen_new.id;
            l_rt_pet.date_created := i_systimestamp;

            pdm_common.create_package_event( io_rt_pet                => l_rt_pet
                                           , i_ind_check_existing_pet => false
                                           );

            l_rt_pae_secondary := i_rt_pae_member_chosen_new;
            l_pet_id_secondary := l_rt_pet.id;

         end if;

         
         l_rt_plk_deactivated                       := i_rt_plk;
         l_rt_plk_deactivated.deactivated_by_pet_id := l_rt_pet.id;

         l_dml_amount := pdm_plk_tapi_pck.plk_update_row( i_plk_id  => l_rt_plk_deactivated.id
                                                        , io_rt_plk => l_rt_plk_deactivated
                                                        );

         
         l_rt_plk_active.pln_id                := pdm_constant.g_con_pln_compose_attributes;
         l_rt_plk_active.pae_id_primary        := l_rt_pae_physical.id;
         l_rt_plk_active.pae_id_secondary      := l_rt_pae_secondary.id;
         l_rt_plk_active.activated_by_pet_id   := l_pet_id_secondary;
         l_rt_plk_active.deactivated_by_pet_id := null;

         pdm_plk_tapi_pck.plk_insert_row( io_rt_plk => l_rt_plk_active );

         
         pdm_attributes.store_functional_src_attribs
                         ( i_pae_id_orig        =>  l_rt_pae_secondary.id
                         , i_pet_id_orig        =>  l_pet_id_secondary
                         , i_pet_id_curr        =>  l_rt_pet_physical.id
                         , i_rt_plk_active      =>  l_rt_plk_active
                         , i_rt_plk_deactivated =>  l_rt_plk_deactivated
                         , i_ind_pae_reopened   =>  false
                         );

         
         pdm_attributes.store_derived_attributes( i_pae_id    => l_rt_pae_physical.id
                                                , i_pet_id    => l_rt_pet_physical.id
                                                );

         
         l_rt_pae_physical.ind_chosen := l_rt_pae_secondary.ind_chosen;
         l_number := pdm_pae_tapi_pck.pae_update_row( i_pae_id  => l_rt_pae_physical.id
                                                    , io_rt_pae => l_rt_pae_physical
                                                    );
      end if; 

      pdm_match.match_main( io_rt_pet                      => l_rt_pet_physical
                          , io_rt_pae                      => l_rt_pae_physical
                          , i_tasktype                     => null
                          , i_event_time                   => i_systimestamp
                          , i_ind_assign_package_to_eon    => i_choice_changed
                          , i_ind_force_match              => true
                          , i_ind_force_processstatus      => true
                          , i_ind_force_packageinfo        => false
                          , i_ind_force_taskinstruction    => false
                          , i_party_id_cust                => null
                          , i_instance_id                  => null
                          , i_ind_chk_max_taskreport_error => false
                          , i_ind_force_update_package     => false
                          , i_ind_deregistration           => false
                          , i_it_attributes                => l_it_attributes_empty
                          , i_it_attributes_extracted      => l_it_attributes_empty
                          , i_ind_match_physical_pd        => false
                          , i_ind_packagedata_loaded       => false
                          );

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => 'exception'
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end match_physical_package;

   












   procedure match_physical_packages ( io_rt_pae                  in out pdm_packages%rowtype
                                     , io_rt_pet                  in out pdm_package_events%rowtype
                                     , i_rt_pae_logical           in     pdm_packages%rowtype
                                     , i_rt_pae_member_chosen_new in     pdm_packages%rowtype
                                     , i_rt_pae_member_chosen_old in     pdm_packages%rowtype
                                     , i_evt_id                   in     pdm_events.id%type
                                     , i_timestamp                in     cmn_constant.st_timestamp
                                     , i_choice_changed           in     boolean
                                     , i_pae_member_old_hdl_psn   in     boolean
                                     , i_pae_hdl_psn_time         in     boolean
                                     )
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.match_physical_packages';

      cursor c_package_link( b_pae_id_secondary in pdm_packages.id%type )
      is
      select plk.*
      from   pdm_package_links plk
      where  plk.pln_id                =  pdm_constant.g_con_pln_compose_attributes
      and    plk.deactivated_by_pet_id is null
      and    plk.pae_id_secondary      =  b_pae_id_secondary
      ;

      l_pae_id_secondary pdm_packages.id%type;
      l_dummy            boolean;
      l_rt_pae           pdm_packages%rowtype;
      l_rt_pet           pdm_package_events%rowtype;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      if io_rt_pae.pte_id = pdm_constant.g_con_pte_id_physical
      then
      
         
         if    i_choice_changed
            or i_pae_member_old_hdl_psn
         then
      
            
            if i_rt_pae_member_chosen_old.id is not null
            then
      
               
               l_pae_id_secondary := i_rt_pae_member_chosen_old.id;
      
            else
      
               
               l_pae_id_secondary := i_rt_pae_logical.id;
            end if;
      
            
            for r_package_link in c_package_link ( b_pae_id_secondary => l_pae_id_secondary )
            loop
      
               
               match_physical_package( i_rt_plk                   => r_package_link
                                     , i_rt_pae_logical           => i_rt_pae_logical
                                     , i_rt_pae_member_chosen_new => i_rt_pae_member_chosen_new
                                     , i_evt_id                   => i_evt_id
                                     , i_systimestamp             => i_timestamp
                                     , i_choice_changed           => i_choice_changed
                                     );

            end loop;
      
         elsif i_pae_hdl_psn_time
         then
         	
            match_main_force ( io_rt_pet   => io_rt_pet
                             , io_rt_pae   => io_rt_pae
                             , i_timestamp => i_timestamp
                             , i_ind_force => true
                             );

         end if;
      end if; 

      viu_module.leave_module( i_module => l_con_proc_name );

   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end match_physical_packages;

   












   procedure get_physical_logical ( io_rt_pae         in out pdm_packages%rowtype
                                  , i_evt_id          in     pdm_events.id%type
                                  , i_timestamp       in     cmn_constant.st_timestamp
                                  , o_rt_pet             out pdm_package_events%rowtype
                                  , o_pae_hdl_psn_time   out boolean
                                  )
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.get_physical_logical';

      l_rt_pae_physical pdm_packages%rowtype;
      l_rt_pae_logical  pdm_packages%rowtype;
      l_dml_amount      pls_integer;
      l_found           boolean;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      o_pae_hdl_psn_time := false;

      
      if io_rt_pae.pte_id in ( pdm_constant.g_con_pte_id_physical
                            , pdm_constant.g_con_pte_id_member
                            )
      then

         
         if io_rt_pae.pte_id = pdm_constant.g_con_pte_id_physical
         then

            
            o_pae_hdl_psn_time := true;

            
            io_rt_pae.ind_match_hdl_psn  := cmn_constant.g_con_yesno_no;
            io_rt_pae.ind_match_hdl_time := cmn_constant.g_con_yesno_no;
            l_dml_amount  := pdm_pae_tapi_pck.pae_update_row( i_pae_id  => io_rt_pae.id
                                                            , io_rt_pae => io_rt_pae
                                                            );
         end if;

         
         if io_rt_pae.pte_id = pdm_constant.g_con_pte_id_member
         then

            
            l_found := pdm_common.plk_select_primary_pae( i_pae_id_secondary => io_rt_pae.id
                                                        , i_pln_id           => pdm_constant.g_con_pln_physical_member
                                                        , o_rt_pae_primary   => l_rt_pae_physical
                                                        );

            
            if l_found
            then

               
               io_rt_pae := l_rt_pae_physical;

               
               if    io_rt_pae.ind_match_hdl_psn  = cmn_constant.g_con_yesno_yes
                  or io_rt_pae.ind_match_hdl_time = cmn_constant.g_con_yesno_yes
               then

                  
                  o_pae_hdl_psn_time := true;

                  
                  io_rt_pae.ind_match_hdl_psn  := cmn_constant.g_con_yesno_no;
                  io_rt_pae.ind_match_hdl_time := cmn_constant.g_con_yesno_no;
                  l_dml_amount := pdm_pae_tapi_pck.pae_update_row( i_pae_id  => io_rt_pae.id
                                                                 , io_rt_pae => io_rt_pae
                                                                 );
               end if;

            else

               
               l_found := pdm_common.plk_select_primary_pae( i_pae_id_secondary => io_rt_pae.id
                                                           , i_pln_id           => pdm_constant.g_con_pln_logical_member
                                                           , o_rt_pae_primary   => l_rt_pae_logical
                                                           );

               
               if not l_found
               then

                  
                  io_rt_pae.ind_match_hdl_psn  := cmn_constant.g_con_yesno_no;
                  io_rt_pae.ind_match_hdl_time := cmn_constant.g_con_yesno_no;
                  l_dml_amount := pdm_pae_tapi_pck.pae_update_row( i_pae_id  => io_rt_pae.id
                                                                 , io_rt_pae => io_rt_pae
                                                                 );

                  commit;

                  
                  viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_selectreturnednorecords
                                     , i_calling_procedure => l_con_proc_name
                                     , i_severity          => viu_info.severity_error
                                     , i_additional_data   => 'Member package with id '|| io_rt_pae.id || ' not linked to a logical package'
                                     );
               end if;

               
               io_rt_pae := l_rt_pae_logical;
            end if;
         end if; 

         
         o_rt_pet.evt_id       := i_evt_id;
         o_rt_pet.pae_id       := io_rt_pae.id;
         o_rt_pet.date_created := i_timestamp;

         pdm_common.create_package_event( io_rt_pet                => o_rt_pet
                                        , i_ind_check_existing_pet => false
                                        );

      end if; 

      viu_module.leave_module( i_module => l_con_proc_name );

   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end get_physical_logical;

   












   procedure match_logical_member ( io_rt_pae                in out pdm_packages%rowtype
                                  , io_rt_pet                in out pdm_package_events%rowtype
                                  , i_timestamp              in     cmn_constant.st_timestamp
                                  , i_pae_member_count       in     number
                                  , i_choice_changed         in     boolean
                                  , i_pae_member_old_hdl_psn in     boolean
                                  )
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.match_logical_member';

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      if io_rt_pae.pte_id in ( pdm_constant.g_con_pte_id_logical
                             , pdm_constant.g_con_pte_id_member
                             )
      then

         
         match_main_force ( io_rt_pet   => io_rt_pet
                          , io_rt_pae   => io_rt_pae
                          , i_timestamp => i_timestamp
                          , i_ind_force =>    i_pae_member_count = 1
                                           or i_choice_changed
                                           or i_pae_member_old_hdl_psn
                          );
      end if;

      viu_module.leave_module( i_module => l_con_proc_name );

   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end match_logical_member;

   












   procedure match_package ( io_rt_pae              in out pdm_packages%rowtype
                           , i_evt_id               in     pdm_events.id%type
                           , i_timestamp            in     cmn_constant.st_timestamp
                           , i_ind_use_mult_bagdata in     boolean
                           )
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.match_package';

      l_rt_pae_member_chosen_new pdm_packages%rowtype;
      l_rt_pae_member_chosen_old pdm_packages%rowtype;
      l_rt_pae_logical           pdm_packages%rowtype;
      l_rt_pet                   pdm_package_events%rowtype;
      l_choice_changed           boolean := false;
      l_pae_member_old_hdl_psn   boolean := false;
      l_pae_hdl_psn_time         boolean := false;
      l_pae_member_count         number;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      if    io_rt_pae.ind_match_hdl_psn  = cmn_constant.g_con_yesno_yes
         or io_rt_pae.ind_match_hdl_time = cmn_constant.g_con_yesno_yes
      then

         
         if io_rt_pae.pte_id = pdm_constant.g_con_pte_id_logical
         then
   
            
            match_logical_package ( i_rt_pae    => io_rt_pae
                                  , i_evt_id    => i_evt_id
                                  , i_timestamp => i_timestamp
                                  );
         else

            
            get_physical_logical ( io_rt_pae          => io_rt_pae
                                 , i_evt_id           => i_evt_id
                                 , i_timestamp        => i_timestamp
                                 , o_rt_pet           => l_rt_pet
                                 , o_pae_hdl_psn_time => l_pae_hdl_psn_time
                                 );
            
            
            evaluate_members( io_rt_pae                  => io_rt_pae
                            , io_rt_pet                  => l_rt_pet
                            , i_evt_id                   => i_evt_id
                            , i_timestamp                => i_timestamp
                            , i_ind_use_mult_bagdata     => i_ind_use_mult_bagdata
                            , o_rt_pae_logical           => l_rt_pae_logical
                            , o_rt_pae_member_chosen_new => l_rt_pae_member_chosen_new
                            , o_rt_pae_member_chosen_old => l_rt_pae_member_chosen_old
                            , o_choice_changed           => l_choice_changed
                            , o_pae_member_old_hdl_psn   => l_pae_member_old_hdl_psn
                            , o_pae_member_count         => l_pae_member_count
                            );
           
            
            match_physical_packages ( io_rt_pae                  => io_rt_pae
                                    , io_rt_pet                  => l_rt_pet
                                    , i_rt_pae_logical           => l_rt_pae_logical
                                    , i_rt_pae_member_chosen_new => l_rt_pae_member_chosen_new
                                    , i_rt_pae_member_chosen_old => l_rt_pae_member_chosen_old
                                    , i_evt_id                   => i_evt_id
                                    , i_timestamp                => i_timestamp
                                    , i_choice_changed           => l_choice_changed
                                    , i_pae_member_old_hdl_psn   => l_pae_member_old_hdl_psn
                                    , i_pae_hdl_psn_time         => l_pae_hdl_psn_time
                                    );
      
            
            match_logical_member ( io_rt_pae                => io_rt_pae
                                 , io_rt_pet                => l_rt_pet
                                 , i_timestamp              => i_timestamp
                                 , i_pae_member_count       => l_pae_member_count
                                 , i_choice_changed         => l_choice_changed
                                 , i_pae_member_old_hdl_psn => l_pae_member_old_hdl_psn
                                 );
         end if;
      end if; 

      viu_module.leave_module( i_module => l_con_proc_name );

   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end match_package;

   











   procedure match_pae_autonomous( io_rt_pae              in out pdm_packages%rowtype
                                 , io_pas_lock_completed  in out boolean
                                 , i_evt_id               in     pdm_events.id%type
                                 , i_timestamp            in     cmn_constant.st_timestamp
                                 , i_ind_use_mult_bagdata in     boolean
                                 )
   is
      
      pragma autonomous_transaction;

      l_con_proc_name       constant cmn_constant.st_proc_name := g_con_package || '.match_pae_autonomous';

      l_pae_pd_id_old pdm_packages.pd_id%type;
      l_dummy         boolean;

   begin
      viu_module.enter_module( i_module      => l_con_proc_name );

      
      l_pae_pd_id_old := io_rt_pae.pd_id;




      $if $$test_match_packages
      $then
          pdm_common.parallel_execution_sleep( i_rt_pae          => io_rt_pae
                                             , i_sleep_seconds   => 10
                                             , i_additional_data => 'Session-1: Before lock PACKAGE'
                                             );
      $end




      
      l_dummy := pdm_pae_tapi_pck.pae_select_row_upd( i_pae_id => io_rt_pae.id
                                                    , o_rt_pae => io_rt_pae
                                                    );

      
      if pdm_common.pd_id_differs( i_pae_pd_id_new => io_rt_pae.pd_id
                                 , i_pae_pd_id_old => l_pae_pd_id_old
                                 )
      then

         
         null;

      else

         
         io_pas_lock_completed := true;

         
         match_package ( io_rt_pae              => io_rt_pae
                       , i_evt_id               => i_evt_id
                       , i_timestamp            => i_timestamp
                       , i_ind_use_mult_bagdata => i_ind_use_mult_bagdata
                       );
      end if;

      
      commit;

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         
         rollback;

         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
   end match_pae_autonomous;

   












   procedure match_packages ( i_aet_id    in pdm_events.aet_id%type
                            , i_nt_pae    in pdm_nt_pae_id
                            , i_timestamp in cmn_constant.st_timestamp
                            )
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.match_packages';

      l_rt_pae               pdm_packages%rowtype;
      l_rt_evt               pdm_events%rowtype;
      l_dummy                boolean;
      l_found                boolean;
      l_pas_lock_completed   boolean;
      l_pas_locked           boolean;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      if i_nt_pae.count > 0
      then

         
         l_rt_evt.date_created := i_timestamp;
         l_rt_evt.aet_id       := i_aet_id;
         pdm_evt_tapi_pck.evt_insert_row( io_rt_evt => l_rt_evt );

         commit;

         
         for idx_pae in i_nt_pae.first..i_nt_pae.last
         loop
            begin

               
               l_dummy := pdm_pae_tapi_pck.pae_select_row( i_pae_id => i_nt_pae(idx_pae)
                                                         , o_rt_pae => l_rt_pae
                                                         );
               
               
               l_pas_lock_completed := false;
               l_pas_locked         := false;
               while not l_pas_lock_completed
               loop
         



                  $if $$test_match_packages
                  $then
                      pdm_common.parallel_execution_log( i_rt_pae          => l_rt_pae
                                                       , i_additional_data => 'Session-1: Execute loop iteration'
                                                       );
                  $end




                  
                  if l_rt_pae.pd_id is not null
                  then

                     
                     pdm_common.lock_package_access( i_pd_id  => l_rt_pae.pd_id
                                                   , i_evt_id => l_rt_evt.id
                                                   );
                     
                     l_pas_locked := true;
                     
                  end if;
         
                  
                  match_pae_autonomous( io_rt_pae              => l_rt_pae
                                      , io_pas_lock_completed  => l_pas_lock_completed
                                      , i_evt_id               => l_rt_evt.id
                                      , i_timestamp            => i_timestamp
                                      , i_ind_use_mult_bagdata => pdm_common.use_mult_bagdata
                                      );
                                   
                  
                  
                  if     not l_pas_lock_completed
                     and l_pas_locked
                  then




                     $if $$test_match_packages
                     $then
                         pdm_common.parallel_execution_log( i_rt_pae          => l_rt_pae
                                                          , i_additional_data => 'Session-1: Release lock PACKAGE ACCESS before repeat loop'
                                                          );
                     $end




                     
                     
                     commit;
                  end if;
               end loop; 

               
               if l_pas_locked
               then




                  $if $$test_match_packages
                  $then
                      pdm_common.parallel_execution_log( i_rt_pae          => l_rt_pae
                                                       , i_additional_data => 'Session-1: Release lock PACKAGE ACCESS after loop until PACKAGE ACCESS lock completed'
                                                       );
                  $end




                  
                  commit;
               end if;
               
            
            exception
               when others
               then
                  rollback;
                  viu_info.handle_info;
            end;

            
            acl_application_control.check_halt_signal;

         end loop; 
      end if; 

      viu_module.leave_module( i_module => l_con_proc_name );

   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end match_packages;

   












   function get_ote_id
   return t_ote
   is
      l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.get_ote_id';

      cursor c_ote
      is
         select ote.id
         ,      ote.operation
         from   pdm_operation_types  ote
         ;
      
      l_it_ote_id                t_ote_id;
      l_it_ote_operation         t_ote_operation;
      l_it_ote                   t_ote;
   begin
      viu_module.enter_module( i_module      => l_con_proc_name );

      
      open  c_ote;
      fetch c_ote bulk collect into l_it_ote_id, l_it_ote_operation;
      close c_ote;
      
      for i in 1..l_it_ote_id.count
      loop
         l_it_ote( l_it_ote_operation(i) ) := l_it_ote_id(i);
      end loop;

      viu_module.leave_module( i_module => l_con_proc_name );

      return l_it_ote;
   exception
      when others
      then
         if c_ote%isopen
         then
            close c_ote;
         end if;
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end get_ote_id;

   












   function determine_impact_package
   ( i_rt_pae                 in  pdm_packages%rowtype
   , i_rt_pte                 in  pdm_package_types%rowtype
   , i_nt_active_eons_create  in  pdm_nt_eon_id
   , i_nt_deactivated_eons    in  pdm_nt_eon_id
   )
   return
      boolean
   is
      l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.determine_impact_package';

      
      cursor c_esn_production ( b_nt_processed_eons  pdm_nt_eon_id )
      is
         select 1
         from   pdm_expressions             esn
         ,      pdm_tpl_monitoring_types    tle
         ,      table(b_nt_processed_eons)  eon
         where  esn.eon_id  = eon.column_value
         and    esn.tle_id  = tle.id
         and    tle.id_cust = pdm_constant.g_con_tle_production
         and    rownum      = 1
         ;
      
      r_esn_production           c_esn_production%rowtype;
      l_nt_processed_eons        pdm_nt_eon_id := pdm_nt_eon_id();
      l_impact                   boolean := false;
   begin
      viu_module.enter_module( i_module      => l_con_proc_name );

      
      if (i_nt_active_eons_create.count + i_nt_deactivated_eons.count) > 0
      then
         
         
         if  i_rt_pae.status = pdm_constant.g_con_pae_status_open
         and i_rt_pte.name   = pdm_constant.g_con_pte_physical
         then
            l_impact := true;
         
         
         
         else
            l_nt_processed_eons := i_nt_active_eons_create multiset union i_nt_deactivated_eons;
            
            open  c_esn_production ( b_nt_processed_eons => l_nt_processed_eons );
            fetch c_esn_production into r_esn_production;
            l_impact := c_esn_production%found;
            close c_esn_production;
         end if;
      else
         
         l_impact := false;
      end if;

      viu_module.leave_module( i_module => l_con_proc_name );
      return l_impact;
      
   exception
      when others then
         if c_esn_production%isopen
         then
            close c_esn_production;
         end if;
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end determine_impact_package;

   


























   function evaluate_expression
   ( i_pae_id            in  pdm_packages.id%type
   , i_esn_id            in  pdm_expressions.id%type
   )
   return boolean
   is
      
      l_con_proc_name  constant cmn_constant.st_proc_name := g_con_package || '.evaluate_expression';
      
      
      cursor c_esn_sub
      (b_id  pdm_expressions.id%type)
      is
         select esn.id
         from   pdm_expressions  esn
         where  esn.esn_id = b_id
         ;

      
      l_rt_esn_sub            c_esn_sub%rowtype;
      l_rt_esn                pdm_expressions%rowtype;
      l_sub_expression_value  boolean := false;
      l_eval_result           boolean := false;
      l_dummy                 boolean;
      l_continue              boolean := true;
      

      
      function evaluate_leaf_expression( i_eon_id  pdm_evaluate_operations.id%type
                                       , i_pae_id  pdm_packages.id%type
                                       )
      return boolean
      is
           l_cnt  integer;
      begin
        select count(*)
        into   l_cnt
        from   pdm_package_eval_operations peo
        where  peo.eon_id = i_eon_id
        and    peo.pae_id = i_pae_id
        and    peo.deactivated_by_pet_id is null
        and    rownum = 1;

        if l_cnt = 0
        then
           return false;
        else
           return true;
        end if;
      end;

      
      function evaluate_or_leaves( i_esn_id  pdm_expressions.id%type
                                 , i_pae_id  pdm_packages.id%type
                                 )
      return boolean
      is
           l_cnt  integer;
      begin
        select count(*)
        into   l_cnt
        from   pdm_v_peo_active peo
        ,      pdm_expressions esn
        where  esn.eon_id = peo.eon_id
        and    esn.esn_id = i_esn_id
        and    peo.pae_id = i_pae_id
        and    rownum = 1;

        if l_cnt = 0
        then
           return false;
        else
           return true;
        end if;
      end;

      
      function evaluate_and_leaves( i_esn_id  pdm_expressions.id%type
                                  , i_pae_id  pdm_packages.id%type
                                  , i_cnt     pdm_expressions.count_exclusive_leaves%type
                                  )
      return boolean
      is
           l_cnt  integer;
      begin
        select count(*)
        into   l_cnt
        from   pdm_expressions   esn
           ,   pdm_v_peo_active  peo
        where  esn.eon_id = peo.eon_id
        and    esn.esn_id = i_esn_id
        and    peo.pae_id = i_pae_id
        and    rownum <= i_cnt + 1;

        if l_cnt = i_cnt
        then
           return true;
        else
           return false;
        end if;
      end;

   begin
      viu_module.enter_module( i_module      => l_con_proc_name );

      
      l_dummy := pdm_esn_tapi_pck.esn_select_row( i_esn_id => i_esn_id
                                                , o_rt_esn => l_rt_esn
                                                );
      
      
      
      if l_rt_esn.operator_type = pdm_constant.g_con_esn_operator_type_and
      or l_rt_esn.operator_type = pdm_constant.g_con_esn_operator_type_or
      then
         
         case
            
            
            when l_rt_esn.operator_type = pdm_constant.g_con_esn_operator_type_or
            and  l_rt_esn.count_exclusive_leaves is not null
            then
               
               l_eval_result := evaluate_or_leaves( i_esn_id => l_rt_esn.id
                                                  , i_pae_id => i_pae_id
                                                  );
            
            
            when l_rt_esn.operator_type = pdm_constant.g_con_esn_operator_type_and
            and  l_rt_esn.count_exclusive_leaves is not null
            then
               
               l_eval_result := evaluate_and_leaves( i_esn_id => l_rt_esn.id
                                                   , i_pae_id => i_pae_id
                                                   , i_cnt    => l_rt_esn.count_exclusive_leaves
                                                   );
            else
               
               
               open  c_esn_sub ( b_id => l_rt_esn.id );
               
               loop
                  fetch c_esn_sub into l_rt_esn_sub;
                  exit when c_esn_sub%notfound
                         or not l_continue;

                  
                  l_sub_expression_value := evaluate_expression( i_pae_id           => i_pae_id
                                                               , i_esn_id           => l_rt_esn_sub.id
                                                               );
                  
                  if    l_rt_esn.operator_type = pdm_constant.g_con_esn_operator_type_and
                  and   l_sub_expression_value = true
                  then
                     
                     
                     l_eval_result := true;
                  elsif l_rt_esn.operator_type = pdm_constant.g_con_esn_operator_type_and
                  and   l_sub_expression_value = false
                  then
                     
                     
                     l_eval_result := false;
                     l_continue := false;
                  elsif l_rt_esn.operator_type = pdm_constant.g_con_esn_operator_type_or
                  and   l_sub_expression_value = true
                  then
                     
                     
                     l_eval_result := true;
                     l_continue := false;
                  elsif l_rt_esn.operator_type = pdm_constant.g_con_esn_operator_type_or
                  and   l_sub_expression_value = false
                  then
                     
                     
                     l_eval_result := false;
                  end if;
               end loop;
               
               close c_esn_sub;
         end case;
         
      elsif l_rt_esn.operator_type is null
      then
         
         l_eval_result := evaluate_leaf_expression( i_eon_id => l_rt_esn.eon_id
                                                  , i_pae_id => i_pae_id
                                                  );
      end if;

      
      viu_module.leave_module( i_module      => l_con_proc_name );


      return l_eval_result;
   exception
      when others
      then
         if c_esn_sub%isopen
         then
            close c_esn_sub;
         end if;
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
   end evaluate_expression;


  

















   function evaluate_pae ( i_agp_id        in  pdm_attribute_groups.id%type
                         , i_pae_id        in  pdm_packages.id%type
                         , i_ote_id        in  pdm_operation_types.id%type
                         , i_where_clause  in  varchar2
                         )
   return pdm_nt_eon_id
   is
     l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.evaluate_pae-A';

     type rct_evaluate is ref cursor;
     
     c_evaluate       rct_evaluate;
     
     l_query          varchar2(4000)
        :=   ' SELECT eon.id eon_id'
           ||' FROM   pdm_v_eon_in_use              eon'
           ||' ,      pdm_attribute_group_members   agr'
           ||' ,      pdm_v_pbe_active              pbe'
           ||' WHERE  eon.agp_id = agr.agp_id'
           ||' AND    eon.ote_id = :ote_id'
           ||' AND    pbe.adn_id = agr.adn_id'
           ||' AND    agr.agp_id = :agp_id'
           ||' AND    pbe.pae_id = :pae_id'
           ||' AND    agr.ote_id = :ote_id'
           ;

     l_nt_eons        pdm_nt_eon_id := pdm_nt_eon_id();

   begin
     viu_module.enter_module( i_module      => l_con_proc_name );

     l_query := l_query ||' '||i_where_clause;
     
     open  c_evaluate for l_query using i_ote_id, i_agp_id, i_pae_id, i_ote_id ;
     fetch c_evaluate bulk collect into l_nt_eons;
     close c_evaluate;

     viu_module.leave_module( i_module => l_con_proc_name );
     return l_nt_eons;
   exception
      when others then
         if c_evaluate%isopen
         then
            close c_evaluate;
         end if;

         viu_module.leave_module( i_module => l_con_proc_name );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );

   end evaluate_pae;


   






















   function evaluate_pae ( i_agp_id        in  pdm_attribute_groups.id%type
                         , i_pae_id        in  pdm_packages.id%type
                         , i_it_ote  in  t_ote
                         )
   return pdm_nt_eon_id
   is
     l_con_proc_name  constant cmn_constant.st_proc_name := g_con_package || '.evaluate_pae-B';


     type rct_evaluate is ref cursor;
     
     c_evaluate       rct_evaluate;

     l_query          varchar2(4000)
        :=   'SELECT  /*+ ORDERED */ eon.id eon_id'
           ||' FROM   ('
           ||'                 SELECT agp_id, connect_value'
           ||'                 FROM   ('
           ||'                          SELECT agr.agp_id'
           ||'                          ,      agr.sequence'
           ||'                          ,      agr.adn_id'
           ||'                          ,      x.value'
           ||'                          ,      level         lvl'
           ||'                          ,      SUBSTR( SYS_CONNECT_BY_PATH(x.value, ''' || pdm_constant.g_con_eon_value_separator || ''')'
           ||'                                       , 1 + LENGTH(''' || pdm_constant.g_con_eon_value_separator || ''')'
           ||'                                       ) connect_value'
           ||'                          FROM   pdm_attribute_group_members  agr'
           ||'                          ,      ('
           ||'                                    SELECT pbe.value'
           ||'                                    ,      pbe.adn_id'
           ||'                                    ,      pbe.pae_id'
           ||'                                    FROM   pdm_v_pbe_active             pbe'
           ||'                                    ,      pdm_attribute_group_members  agr'
           ||'                                    WHERE  pbe.adn_id = agr.adn_id'
           ||'                                    AND    pbe.pae_id = :pae_id'
           ||'                                    AND    agr.agp_id = :agp_id'
           ||'                                    AND    agr.ote_id = :agr_ote_id'
           ||'                                 ) x'
           ||'                          WHERE  agr.adn_id = x.adn_id'
           ||'                          AND    agr.agp_id = :agp_id'
           ||'                          AND    x.pae_id   = :pae_id'
           ||'                          START  WITH agr.sequence = 1'
           ||'                          CONNECT BY  agr.sequence = PRIOR agr.sequence + 1 AND agr.agp_id = PRIOR agr.agp_id'
           ||'                        )'
           ||'                 WHERE  lvl = ( SELECT max(sequence)'
           ||'                                FROM   pdm_attribute_group_members  agr'
           ||'                                WHERE  agr.agp_id = :agp_id'
           ||'                                AND    agr.ote_id = :agr_ote_id'
           ||'                              )'
           ||'        ) val'
           ||'      , pdm_v_eon_in_use  eon'
           ||' WHERE  eon.agp_id = val.agp_id'
           ||' AND    eon.value  = val.connect_value'
           ||' AND    eon.agp_id = :agp_id'
           ||' AND    eon.ote_id = :eon_ote_id';

     l_nt_eons        pdm_nt_eon_id := pdm_nt_eon_id();

   begin
     viu_module.enter_module( i_module      => l_con_proc_name );
     

     
     
     

     open  c_evaluate for l_query using i_pae_id, i_agp_id, i_it_ote(pdm_constant.g_con_ote_stringmatch)
                                      , i_agp_id, i_pae_id
                                      , i_agp_id, i_it_ote(pdm_constant.g_con_ote_stringmatch)
                                      , i_agp_id, i_it_ote(pdm_constant.g_con_ote_multipurpose)
                                      ;
     fetch c_evaluate bulk collect into l_nt_eons;
     close c_evaluate;

     viu_module.leave_module( i_module => l_con_proc_name );
     return l_nt_eons;
   exception
      when others then
         if c_evaluate%isopen
         then
            close c_evaluate;
         end if;

         viu_module.leave_module( i_module => l_con_proc_name );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );

   end evaluate_pae;

  






















   function evaluate_multipurpose
   ( i_pae_id   in  pdm_package_eval_operations.pae_id%type
   , i_rt_agp   in  pdm_attribute_groups%rowtype
   , i_it_ote   in  t_ote
   )
   return pdm_nt_eon_id
   is
      
      l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.evaluate_multipurpose';
      
      
      
      cursor c_eon_existence_all
      (b_agp_id     pdm_attribute_groups.id%type
      ,b_pae_id     pdm_package_attributes.pae_id%type
      ,b_ote_id_mp  pdm_attribute_group_members.ote_id%type
      ,b_ote_id_ex  pdm_attribute_group_members.ote_id%type
      )
      is
         select eon.id
         from   pdm_v_eon_in_use eon
         where  eon.ote_id = b_ote_id_mp
         and    eon.agp_id = b_agp_id
         and not exists (
                          select 1
                          from   pdm_attribute_group_members agr
                          where  agr.agp_id = b_agp_id
                          and    agr.ote_id = b_ote_id_ex
                          and    agr.adn_id not in ( select adn_id
                                                     from   pdm_v_pbe_active pbe
                                                     where  pbe.pae_id = b_pae_id
                                                   )
                        )
         ;
      
      
      
      cursor c_eon_existence_set
      (b_agp_id     pdm_attribute_groups.id%type
      ,b_pae_id     pdm_package_attributes.pae_id%type
      ,b_ote_id_mp  pdm_attribute_group_members.ote_id%type
      ,b_ote_id_ex  pdm_attribute_group_members.ote_id%type
      ,b_nt_eons    pdm_nt_eon_id
      )
      is
         select eon.id
         from   pdm_v_eon_in_use  eon
         ,      table(b_nt_eons)  neo
         where  eon.id     = neo.column_value
         and    eon.ote_id = b_ote_id_mp
         and    eon.agp_id = b_agp_id
         and not exists (
                          select 1
                          from   pdm_attribute_group_members agr
                          where  agr.agp_id = b_agp_id
                          and    agr.ote_id = b_ote_id_ex
                          and    agr.adn_id not in ( select adn_id
                                                     from   pdm_v_pbe_active pbe
                                                     where  pbe.pae_id = b_pae_id
                                                   )
                        )
         ;
      
      
      cursor c_eon_nonexistence_all
      (b_agp_id     pdm_attribute_groups.id%type
      ,b_pae_id     pdm_package_attributes.pae_id%type
      ,b_ote_id_mp  pdm_attribute_group_members.ote_id%type
      ,b_ote_id_ne  pdm_attribute_group_members.ote_id%type
      )
      is
         select eon.id
         from   pdm_v_eon_in_use eon
         where  eon.ote_id = b_ote_id_mp
         and    eon.agp_id = b_agp_id
         and    eon.agp_id not in ( select agr.agp_id
                                    from   pdm_v_pbe_active             pbe
                                    ,      pdm_attribute_group_members  agr
                                    where  agr.adn_id = pbe.adn_id
                                    and    pbe.pae_id = b_pae_id
                                    and    agr.ote_id = b_ote_id_ne
                                  );

      
      
      
      cursor c_eon_nonexistence_set
      (b_agp_id     pdm_attribute_groups.id%type
      ,b_pae_id     pdm_package_attributes.pae_id%type
      ,b_ote_id_mp  pdm_attribute_group_members.ote_id%type
      ,b_ote_id_ne  pdm_attribute_group_members.ote_id%type
      ,b_nt_eons    pdm_nt_eon_id
      )
      is
         select /*+ ORDERED */ eon.id
         from   table(b_nt_eons) neo
         ,      pdm_v_eon_in_use eon
         where  eon.id     = neo.column_value
         and    eon.ote_id = b_ote_id_mp
         and    eon.agp_id = b_agp_id
         and    eon.agp_id not in ( select agr.agp_id
                                    from   pdm_v_pbe_active             pbe
                                    ,      pdm_attribute_group_members  agr
                                    where  agr.adn_id = pbe.adn_id
                                    and    pbe.pae_id = b_pae_id
                                    and    agr.ote_id = b_ote_id_ne
                                  );
      
      l_nt_active_eons           pdm_nt_eon_id := pdm_nt_eon_id();
      l_continue                 boolean := true;
   begin
      viu_module.enter_module( i_module      => l_con_proc_name );

      
      
      
      if i_rt_agp.cnt_stringmatch > 0
      then
         
         l_nt_active_eons := evaluate_pae( i_agp_id => i_rt_agp.id
                                         , i_pae_id => i_pae_id
                                         , i_it_ote => i_it_ote
                                         );
         
         if l_nt_active_eons.count = 0
         then
            l_continue := false;
         end if;
      end if;

      
      if l_continue
      then
         
         if i_rt_agp.cnt_existence > 0
         then
            
            
            
            if l_nt_active_eons.count > 0
            then
               
               
               
               
               open  c_eon_existence_set( b_agp_id    => i_rt_agp.id
                                        , b_pae_id    => i_pae_id
                                        , b_ote_id_mp => i_it_ote(pdm_constant.g_con_ote_multipurpose)
                                        , b_ote_id_ex => i_it_ote(pdm_constant.g_con_ote_existence)
                                        , b_nt_eons   => l_nt_active_eons
                                        );
               fetch c_eon_existence_set bulk collect into l_nt_active_eons;
               close c_eon_existence_set;
            else
               
               
               
               open  c_eon_existence_all( b_agp_id    => i_rt_agp.id
                                        , b_pae_id    => i_pae_id
                                        , b_ote_id_mp => i_it_ote(pdm_constant.g_con_ote_multipurpose)
                                        , b_ote_id_ex => i_it_ote(pdm_constant.g_con_ote_existence)
                                        );
               fetch c_eon_existence_all bulk collect into l_nt_active_eons;
               close c_eon_existence_all;
            end if;

            
            if l_nt_active_eons.count = 0
            then
               l_continue := false;
            end if;
         end if;

         
         
         if l_continue
         then
            
            if i_rt_agp.cnt_nonexistence > 0
            then
               
               
               
               if l_nt_active_eons.count > 0
               then
                  
                  
                  
                  
                  open  c_eon_nonexistence_set( b_agp_id    => i_rt_agp.id
                                              , b_pae_id    => i_pae_id
                                              , b_ote_id_mp => i_it_ote(pdm_constant.g_con_ote_multipurpose)
                                              , b_ote_id_ne => i_it_ote(pdm_constant.g_con_ote_nonexistence)
                                              , b_nt_eons   => l_nt_active_eons
                                              );
                  fetch c_eon_nonexistence_set bulk collect into l_nt_active_eons;
                  close c_eon_nonexistence_set;
               else
                  
                  
                  
                  open  c_eon_nonexistence_all( b_agp_id    => i_rt_agp.id
                                              , b_pae_id    => i_pae_id
                                              , b_ote_id_mp => i_it_ote(pdm_constant.g_con_ote_multipurpose)
                                              , b_ote_id_ne => i_it_ote(pdm_constant.g_con_ote_nonexistence)
                                              );
                  fetch c_eon_nonexistence_all bulk collect into l_nt_active_eons;
                  close c_eon_nonexistence_all;
               end if;
            end if;
         end if;

      end if;
      
      viu_module.leave_module( i_module => l_con_proc_name );
      
      return l_nt_active_eons;

   exception
      when others
      then
         if c_eon_existence_set%isopen
         then
            close c_eon_existence_set;
         end if;
         if c_eon_existence_all%isopen
         then
            close c_eon_existence_all;
         end if;
         if c_eon_nonexistence_set%isopen
         then
            close c_eon_nonexistence_set;
         end if;
         if c_eon_nonexistence_all%isopen
         then
            close c_eon_nonexistence_all;
         end if;
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );

   end evaluate_multipurpose;

  



















































   function assign_package_to_eons
   ( i_rt_pae     in  pdm_packages%rowtype
   , i_rt_pte     in  pdm_package_types%rowtype
   , i_pet_id     in  pdm_package_events.id%type
   , i_ind_full   in  boolean := false
   )
   return boolean
   is
      
      l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.assign_package_to_eons';
      
      
      
      
      cursor c_nonexist_type_eons
      (b_pae_id               pdm_packages.id%type
      ,b_ote_id_nonexistence  pdm_operation_types.id%type
      )
      is
         with
            agr_minus as
              (select agr1.agp_id
               from   pdm_attribute_group_members   agr1
               where  agr1.ote_id = b_ote_id_nonexistence
               minus
               select agr2.agp_id
               from   pdm_attribute_group_members   agr2
               where  agr2.ote_id <> b_ote_id_nonexistence
              )
         ,  eon_agr as
              (select eon.id
               ,      agr_minus.agp_id
               from   pdm_v_eon_in_use  eon
               ,      agr_minus
               where  eon.agp_id = agr_minus.agp_id
              )
         select eon_agr.id
         from   eon_agr
         where  not exists (select 1
                            from   pdm_v_pbe_active             pbe
                            ,      pdm_attribute_group_members  agr3
                            where  agr3.agp_id = eon_agr.agp_id
                            and    agr3.adn_id = pbe.adn_id
                            and    agr3.ote_id = b_ote_id_nonexistence
                            and    pbe.pae_id  = b_pae_id
                           );
      
      
      cursor c_active_eons
      ( b_pae_id  pdm_package_eval_operations.pae_id%type
      )
      is
      select eon_id
      from   pdm_v_peo_active  peo
      where  peo.pae_id = b_pae_id;
      
      
      
      
      cursor c_active_pet_eons
      ( b_pae_id  pdm_package_eval_operations.pae_id%type
      , b_pet_id  pdm_package_events.id%type
      )
      is
         select distinct  peo.eon_id
         from   pdm_v_peo_active            peo
         ,      pdm_v_eon_in_use            eon
         ,      pdm_attribute_group_members agr
         ,      pdm_package_attributes pbe
         where  agr.adn_id = pbe.adn_id
         and    pbe.pae_id = peo.pae_id
         and    pbe.pae_id = b_pae_id
         and    peo.pae_id = b_pae_id
         and    peo.eon_id = eon.id
         and    eon.agp_id = agr.agp_id
         and    pbe.pet_id = b_pet_id
         ;

      
      
      
      
      cursor c_create_active_eons
      ( b_pae_id               pdm_package_eval_operations.pae_id%type
      , b_nt_active_eons_post  pdm_nt_eon_id
      )
      is
         select to_number(eon.column_value)  eon_id
         from   table(b_nt_active_eons_post)  eon
         minus
         select peo.eon_id
         from   pdm_v_peo_active  peo
         where  peo.pae_id = b_pae_id
         ;
      
      l_rt_agp                   pdm_attribute_groups%rowtype;
      l_rt_peo                   pdm_package_eval_operations%rowtype;
      l_nt_active_eons_pre       pdm_nt_eon_id := pdm_nt_eon_id();
      l_nt_active_eons_post      pdm_nt_eon_id := pdm_nt_eon_id();
      l_nt_active_eons_eval      pdm_nt_eon_id := pdm_nt_eon_id();
      l_nt_active_eons_create    pdm_nt_eon_id := pdm_nt_eon_id();
      l_nt_deactivate_eons       pdm_nt_eon_id := pdm_nt_eon_id();
      l_nt_deactivated_eons      pdm_nt_eon_id := pdm_nt_eon_id();
      l_it_ote                   t_ote;

      l_found                    boolean := false;
      l_impact                   boolean := false;
      l_count                    integer;

      type rct_agp_touched is ref cursor;
      c_agp_touched rct_agp_touched;


   begin
      viu_module.enter_module( i_module      => l_con_proc_name );
      
      l_it_ote := get_ote_id();
      
      
      if i_ind_full
      then
         
         
         open  c_active_eons ( b_pae_id  =>  i_rt_pae.id
                             );
         fetch c_active_eons bulk collect into l_nt_active_eons_pre;
         close c_active_eons;
         
         
         open     c_agp_touched for
         select   agp.*
         from     pdm_attribute_groups  agp
         where    agp.id in ( select agr.agp_id
                              from   pdm_attribute_group_members  agr
                              ,      pdm_v_pbe_active             pbe
                              where  agr.adn_id = pbe.adn_id
                              and    pbe.pae_id = i_rt_pae.id
                              minus
                              select agr.agp_id
                              from   pdm_attribute_group_members  agr
                              where  agr.ote_id <> l_it_ote(pdm_constant.g_con_ote_nonexistence)
                              and    not exists ( select 1
                                                  from   pdm_v_pbe_active  pbe
                                                  where  agr.adn_id = pbe.adn_id
                                                  and    pbe.pae_id = i_rt_pae.id
                                                )
                              minus
                              select agr.agp_id
                              from   pdm_attribute_group_members  agr
                              where  agr.ote_id = l_it_ote(pdm_constant.g_con_ote_nonexistence)
                              and    exists ( select 1
                                              from   pdm_v_pbe_active  pbe
                                              where  agr.adn_id = pbe.adn_id
                                              and    pbe.pae_id = i_rt_pae.id
                                            )
                            );
      
      
      
      else
         
         
         
         open  c_active_pet_eons ( b_pae_id  =>  i_rt_pae.id
                                 , b_pet_id  =>  i_pet_id
                                 );
         fetch c_active_pet_eons bulk collect into l_nt_active_eons_pre;
         close c_active_pet_eons;
         
         
         open  c_agp_touched for
         select agp.*
         from   pdm_attribute_groups  agp
         where  agp.id in ( select agr.agp_id
                            from   pdm_attribute_group_members  agr
                            ,      pdm_package_attributes       pbe
                            where  agr.adn_id = pbe.adn_id
                            and    pbe.pae_id = i_rt_pae.id
                            and    pbe.pet_id = i_pet_id
                            minus
                            select agr.agp_id
                            from   pdm_attribute_group_members  agr
                            where  agr.ote_id <> l_it_ote(pdm_constant.g_con_ote_nonexistence)
                            and    not exists ( select 1
                                                from   pdm_v_pbe_active  pbe
                                                where  agr.adn_id = pbe.adn_id
                                                and    pbe.pae_id = i_rt_pae.id
                                              )
                            minus
                            select agr.agp_id
                            from   pdm_attribute_group_members  agr
                            where  agr.ote_id = l_it_ote(pdm_constant.g_con_ote_nonexistence)
                            and    exists ( select 1
                                            from   pdm_v_pbe_active  pbe
                                            where  agr.adn_id = pbe.adn_id
                                            and    pbe.pae_id = i_rt_pae.id
                                          )
                          )
         ;

      end if;

      
      
      loop
         fetch c_agp_touched into l_rt_agp;
         exit when c_agp_touched%notfound;

         
         
         

         
         if l_rt_agp.cnt_stringmatch  > 0
         or l_rt_agp.cnt_existence    > 0
         or l_rt_agp.cnt_nonexistence > 0
         then
            
            l_nt_active_eons_eval := evaluate_multipurpose( i_rt_agp  => l_rt_agp
                                                          , i_pae_id  => i_rt_pae.id
                                                          , i_it_ote  => l_it_ote
                                                          );
            l_nt_active_eons_post := l_nt_active_eons_post multiset union distinct l_nt_active_eons_eval;
         
         
         elsif l_rt_agp.cnt_regexp > 0
         then
            
            l_nt_active_eons_eval := evaluate_pae( i_agp_id       => l_rt_agp.id
                                                 , i_pae_id       => i_rt_pae.id
                                                 , i_ote_id       => l_it_ote(pdm_constant.g_con_ote_regexp)
                                                 , i_where_clause => ' AND REGEXP_LIKE (pbe.value,eon.value,''c'')'
                                                 );
            l_nt_active_eons_post := l_nt_active_eons_post multiset union distinct l_nt_active_eons_eval;
         
         
         elsif l_rt_agp.cnt_substring > 0
         then

            
            l_nt_active_eons_eval := evaluate_pae( i_agp_id       => l_rt_agp.id
                                                 , i_pae_id       => i_rt_pae.id
                                                 , i_ote_id       => l_it_ote(pdm_constant.g_con_ote_substring)
                                                 , i_where_clause => ' AND NVL(INSTR(pbe.value,eon.value,1,1),0) > 0'
                                                 );
            l_nt_active_eons_post := l_nt_active_eons_post multiset union distinct l_nt_active_eons_eval;
         end if;

      end loop;
      close c_agp_touched;

      
      
      
      if i_ind_full
      then
         
         
         
         open  c_nonexist_type_eons ( b_pae_id              => i_rt_pae.id
                                    , b_ote_id_nonexistence => l_it_ote(pdm_constant.g_con_ote_nonexistence)
                                    );
         fetch c_nonexist_type_eons bulk collect into l_nt_active_eons_eval;
         close c_nonexist_type_eons;

         l_nt_active_eons_post := l_nt_active_eons_post multiset union distinct l_nt_active_eons_eval;
      end if;

      
      
      
      open  c_create_active_eons (i_rt_pae.id
                                 ,l_nt_active_eons_post
                                 );
      fetch c_create_active_eons bulk collect into l_nt_active_eons_create;
      close c_create_active_eons;
      
      for j in 1 .. l_nt_active_eons_create.count
      loop
         l_rt_peo := null;
         l_rt_peo.pae_id := i_rt_pae.id;
         l_rt_peo.eon_id := l_nt_active_eons_create(j);
         l_rt_peo.activated_by_pet_id := i_pet_id;

         pdm_peo_tapi_pck.peo_insert_row( io_rt_peo => l_rt_peo );
      end loop;

      
      
      
      select column_value
      bulk collect into l_nt_deactivate_eons
      from   table(l_nt_active_eons_pre)
      minus
      select column_value
      from   table(l_nt_active_eons_post)
      ;
      
      for k in 1 .. l_nt_deactivate_eons.count
      loop
         
         l_found := pdm_common.peo_select_row_uk2
                                ( i_eon_id  => l_nt_deactivate_eons(k)
                                , i_pae_id  => i_rt_pae.id
                                , i_deactivated_by_pet_id => null
                                , o_rt_peo  => l_rt_peo
                                );
         if l_found
         then
            
            l_rt_peo.deactivated_by_pet_id  := i_pet_id;
            l_count := pdm_peo_tapi_pck.peo_update_row( i_peo_id  => l_rt_peo.id
                                                      , io_rt_peo => l_rt_peo
                                                      );
            l_nt_deactivated_eons.extend();
            l_nt_deactivated_eons(l_nt_deactivated_eons.count) := l_nt_deactivate_eons(k);
         end if;
      end loop;

      
      l_impact := determine_impact_package( i_rt_pae                => i_rt_pae
                                          , i_rt_pte                => i_rt_pte
                                          , i_nt_active_eons_create => l_nt_active_eons_create
                                          , i_nt_deactivated_eons   => l_nt_deactivated_eons
                                          );
      
      viu_module.leave_module( i_module => l_con_proc_name );
      return l_impact;

   exception
      when others
      then
         if c_nonexist_type_eons%isopen
         then
            close c_nonexist_type_eons;
         end if;
         if c_active_eons%isopen
         then
            close c_active_eons;
         end if;
         if c_active_pet_eons%isopen
         then
            close c_active_pet_eons;
         end if;
         if c_create_active_eons%isopen
         then
            close c_create_active_eons;
         end if;
         if c_agp_touched%isopen
         then
            close c_agp_touched;
         end if;
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );

   end assign_package_to_eons;

  




















   procedure assign_package_to_eon
   ( i_pae_id  in  pdm_package_eval_operations.pae_id%type
   , i_pet_id  in  pdm_package_events.id%type
   , i_eon_id  in  pdm_evaluate_operations.id%type
   )
   is
      
      l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.assign_package_to_eon';
      
      l_rt_peo                   pdm_package_eval_operations%rowtype;
      l_rt_eon                   pdm_evaluate_operations%rowtype;
      l_rt_ote                   pdm_operation_types%rowtype;
      l_rt_agp                   pdm_attribute_groups%rowtype;
      l_nt_active_eons_eval      pdm_nt_eon_id := pdm_nt_eon_id();
      l_it_ote                   t_ote;
      
      l_found                    boolean := false;
      l_evaluation               boolean := false;
      l_count                    integer;
   begin
      viu_module.enter_module( i_module      => l_con_proc_name );

      
      l_it_ote := get_ote_id();
      
      l_found := pdm_eon_tapi_pck.eon_select_row(i_eon_id => i_eon_id
                                                ,o_rt_eon => l_rt_eon
                                                );

      
      l_found := pdm_ote_tapi_pck.ote_select_row(i_ote_id => l_rt_eon.ote_id
                                                ,o_rt_ote => l_rt_ote
                                                );

      
      l_found := pdm_agp_tapi_pck.agp_select_row(i_agp_id => l_rt_eon.agp_id
                                                ,o_rt_agp => l_rt_agp
                                                );

      
      
      
      
      
      
      case
         when l_rt_ote.operation = pdm_constant.g_con_ote_multipurpose
         then
            
            l_nt_active_eons_eval := evaluate_multipurpose( i_rt_agp  => l_rt_agp
                                                          , i_pae_id  => i_pae_id
                                                          , i_it_ote  => l_it_ote
                                                          );
            l_evaluation := nvl(i_eon_id member of l_nt_active_eons_eval,false);

         when l_rt_ote.operation = pdm_constant.g_con_ote_regexp
         then
            
            l_nt_active_eons_eval := evaluate_pae( i_agp_id       => l_rt_eon.agp_id
                                                 , i_pae_id       => i_pae_id
                                                 , i_ote_id       => l_it_ote(pdm_constant.g_con_ote_regexp)
                                                 , i_where_clause => ' AND REGEXP_LIKE (pbe.value,eon.value,''c'')'
                                                 );
            l_evaluation := nvl(i_eon_id member of l_nt_active_eons_eval,false);

         when l_rt_ote.operation = pdm_constant.g_con_ote_substring
         then

            
            l_nt_active_eons_eval := evaluate_pae( i_agp_id       => l_rt_eon.agp_id
                                                 , i_pae_id       => i_pae_id
                                                 , i_ote_id       => l_it_ote(pdm_constant.g_con_ote_substring)
                                                 , i_where_clause => ' AND NVL(INSTR(pbe.value,eon.value,1,1),0) > 0'
                                                 );
            l_evaluation := nvl(i_eon_id member of l_nt_active_eons_eval,false);

      end case;

      
      l_found := pdm_common.peo_select_row_uk2 ( i_eon_id                => i_eon_id
                                               , i_pae_id                => i_pae_id
                                               , i_deactivated_by_pet_id => null
                                               , o_rt_peo                => l_rt_peo
                                               );

      
      case
         when     l_evaluation
              and not l_found
         then
            
            
            
            
            viu_info.operator_info ( i_ifo_nr            => viu_constant.c_ifo_assignpaetoeonactivate
                                   , i_calling_procedure => l_con_proc_name
                                   , i_severity          => viu_info.c_severity_notification
                                   , i_info_arguments    => i_pae_id||'##'||i_eon_id||'##'||l_rt_ote.operation
                                   );
            
            l_rt_peo                     := null;
            l_rt_peo.pae_id              := i_pae_id;
            l_rt_peo.eon_id              := i_eon_id;
            l_rt_peo.activated_by_pet_id := i_pet_id;
            
            pdm_peo_tapi_pck.peo_insert_row( io_rt_peo => l_rt_peo );

         when     not l_evaluation
              and l_found
         then
            
            
            
            
            viu_info.operator_info ( i_ifo_nr            => viu_constant.c_ifo_assignpaetoeondeactivate
                                   , i_calling_procedure => l_con_proc_name
                                   , i_severity          => viu_info.c_severity_warning
                                   , i_info_arguments    => i_pae_id||'##'||i_eon_id||'##'||l_rt_ote.operation
                                   );
            
            l_rt_peo.deactivated_by_pet_id  := i_pet_id;
            l_count := pdm_peo_tapi_pck.peo_update_row( i_peo_id  => l_rt_peo.id
                                                      , io_rt_peo => l_rt_peo
                                                      );
         else
            
            
            
            null;
      end case;

      
      viu_module.leave_module( i_module => l_con_proc_name );

   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );

   end assign_package_to_eon;

   




















   procedure create_active_peo
   ( i_pae_id              in  pdm_packages.id%type
   , i_eon_id              in  pdm_evaluate_operations.id%type
   , i_evt_id              in  pdm_events.id%type
   )
   is
     l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.create_active_peos';

     cursor c_peo
     ( b_pae_id  pdm_package_eval_operations.pae_id%type
     , b_eon_id  pdm_package_eval_operations.eon_id%type
     )
     is
        select 1
        from   pdm_v_peo_active peo
        where  peo.pae_id = b_pae_id
        and    peo.eon_id = b_eon_id
        and    rownum     = 1
        ;
     
     r_peo             c_peo%rowtype;
     
     l_rt_pae          pdm_packages%rowtype;
     l_rt_pet          pdm_package_events%rowtype;
     l_rt_peo          pdm_package_eval_operations%rowtype;
     l_systimestamp    cmn_constant.st_timestamp;
     l_found           boolean;
     l_dummy           boolean;

   begin
     viu_module.enter_module( i_module => l_con_proc_name );

     l_systimestamp := cmn_common.default_timestamp;

     
     l_dummy := pdm_common.pae_lock_select_via_pas( i_pae_id => i_pae_id
                                                  , i_evt_id => i_evt_id
                                                  , o_rt_pae => l_rt_pae
                                                  );

     
     if l_rt_pae.status = pdm_constant.g_con_pae_status_obsolete
     then
        viu_info.operator_info( i_ifo_nr            => viu_constant.c_ifo_obsoletepackage
                              , i_calling_procedure => l_con_proc_name
                              , i_severity          => viu_info.severity_warning
                              , i_info_arguments    => l_rt_pae.id
                              );
        
     else

        
        
        open  c_peo(b_pae_id => i_pae_id
                   ,b_eon_id => i_eon_id
                   );
        fetch c_peo into r_peo;
        l_found := c_peo%found;
        close c_peo;
   
        if l_found
        then
           
           viu_info.operator_info ( i_ifo_nr            => viu_constant.c_ifo_createactivepeoexists
                                  , i_calling_procedure => l_con_proc_name
                                  , i_severity          => viu_info.c_severity_notification
                                  , i_info_arguments    => i_pae_id||'##'||i_eon_id
                                  );
        else
   
           
           
           
           if l_rt_pae.ind_match <> cmn_constant.g_con_yesno_yes
           then
              
              viu_info.operator_info ( i_ifo_nr            => viu_constant.c_ifo_createpeonotmatchpae
                                     , i_calling_procedure => l_con_proc_name
                                     , i_severity          => viu_info.c_severity_notification
                                     , i_info_arguments    => i_pae_id||'##'||i_eon_id
                                     );
   
           else
   
              
              
              
              
              
   
              l_rt_pet              := null;
              l_rt_pet.evt_id       := i_evt_id;
              l_rt_pet.pae_id       := l_rt_pae.id;
              l_rt_pet.date_created := l_systimestamp;
   
              pdm_common.create_package_event( io_rt_pet                => l_rt_pet
                                             , i_ind_check_existing_pet => true
                                             );
   
              l_rt_peo.pae_id := i_pae_id;
              l_rt_peo.eon_id := i_eon_id;
              l_rt_peo.activated_by_pet_id := l_rt_pet.id;
   
              pdm_peo_tapi_pck.peo_insert_row( io_rt_peo => l_rt_peo );
   
   
           end if; 
        end if; 
     end if; 

     
     commit;

     viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         if c_peo%isopen
         then
            close c_peo;
         end if;

         rollback;
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );

   end create_active_peo;


  



















   function evaluate_eon ( i_eon_id        in  pdm_evaluate_operations.id%type
                         , i_ote_operation in  pdm_operation_types.operation%type
                         , i_where_clause  in  varchar2
                         )
   return pdm_nt_pae_id
   is
      l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.evaluate_eon-A';

      type rct_evaluate is ref cursor;
      
      c_evaluate       rct_evaluate;
      
      l_query          varchar2(4000)

         :=   ' SELECT pbe.pae_id'
            ||' FROM   pdm_v_eon_in_use              eon'
            ||' ,      pdm_operation_types           ote'
            ||' ,      pdm_attribute_group_members   agr'
            ||' ,      pdm_v_pbe_active              pbe'
            ||' ,      pdm_v_pae_match               pae'
            ||' WHERE  eon.agp_id    = agr.agp_id'
            ||' AND    eon.ote_id    = ote.id'
            ||' AND    pbe.adn_id    = agr.adn_id'
            ||' AND    pae.id        = pbe.pae_id'
            ||' AND    eon.id        = :eon_id'
            ||' AND    ote.operation = :ote_operation'
            ;


      l_nt_paes        pdm_nt_pae_id := pdm_nt_pae_id();

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      if i_ote_operation in (  pdm_constant.g_con_ote_regexp
                            ,  pdm_constant.g_con_ote_substring
                            )
      then

         l_query := l_query||' '||i_where_clause;

         open  c_evaluate for l_query using i_eon_id, i_ote_operation;
         fetch c_evaluate bulk collect into l_nt_paes;
         close c_evaluate;

      else

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_incorrectoperationtype
                            , i_calling_procedure => l_con_proc_name
                            , i_severity          => viu_info.severity_error
                            , i_info_arguments    => i_ote_operation
                            , i_additional_data   => 'Incorrect operation type.'
                            );

      end if;

      viu_module.leave_module( i_module => l_con_proc_name );
      return l_nt_paes;
   exception
      when others then
         if c_evaluate%isopen
         then
            close c_evaluate;
         end if;

         viu_module.leave_module( i_module => l_con_proc_name );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );

   end evaluate_eon;


   






















   function evaluate_eon ( i_eon_id  in  pdm_evaluate_operations.id%type  )
   return pdm_nt_pae_id
   is

      
      cursor c_eon( b_eon_id in pdm_evaluate_operations.id%type )
      is
         select eon.agp_id
         from   pdm_v_eon_in_use eon
         where  eon.id = b_eon_id;


      
      
      cursor c_grp_attribute_and_values( b_grp_id in pdm_attribute_groups.id%type
                                       , b_eon_id in pdm_evaluate_operations.id%type
                                       )
      is
        with
        grpvalues
        as
        (
           select rownum rnum
           ,      column_value
           from   table(  select pdm_common.groupvalue_split(eon.value)
                          from   pdm_v_eon_in_use eon
                          where  eon.id = b_eon_id
                       )
        ),
        attribs
        as
        (
           select   rownum rnum
           ,        adn.name
           ,        adn.id adn_id
           from     pdm_v_agr_ote                agm
           ,        pdm_attribute_definitions    adn
           where    adn.id            = agm.adn_id
           and      agm.agp_id        = b_grp_id
           and      agm.ote_operation = pdm_constant.g_con_ote_stringmatch
           order by agm.sequence
        )
        select atb.adn_id
        ,      atb.name
        ,      gve.column_value
        from   grpvalues gve
        ,      attribs atb
        where  gve.rnum = atb.rnum;

      

      l_con_proc_name       constant cmn_constant.st_proc_name := g_con_package || '.evaluate_eon-B';
      l_nt_eon_pae          pdm_nt_pae_id := pdm_nt_pae_id();

      l_cursor              pls_integer;
      l_result              pls_integer;
      l_numrows             pls_integer;

      l_eon_agp_id          pdm_evaluate_operations.agp_id%type;
      l_pae_ids             dbms_sql.number_table;  
      l_arrsize             pls_integer := 100;

      l_query_sel           varchar2(32676);
      l_query_whr           varchar2(32676);
      l_member_idx          integer;
      l_idx                 integer;


      type aat_attribute_values is table of pdm_package_attributes.value%type index by pls_integer;

      l_attribute_values_aat aat_attribute_values;
   begin
      viu_module.enter_module( i_module => l_con_proc_name );
      
      
      open  c_eon( b_eon_id => i_eon_id );
      fetch c_eon into l_eon_agp_id;
      close c_eon;
      
      
      
      l_query_sel :=   ' SELECT /*+ ORDERED INDEX_RS_ASC(pbe1 pdm_pbe_i1) */ pae.id' ||chr(13)
                     ||' FROM  pdm_v_pbe_active pbe1'                                ||chr(13)
                     ||' ,     pdm_v_pae_match  pae'                                 ||chr(13)
                     ;
      
      
      l_query_whr := ' WHERE ';
      
      
      
      for r_rec in c_grp_attribute_and_values( b_grp_id => l_eon_agp_id
                                             , b_eon_id => i_eon_id
                                             )
      loop
         l_member_idx := c_grp_attribute_and_values%rowcount;
      
         
         
         if l_member_idx > 1
         then

            
            l_query_sel := l_query_sel || ' ,     pdm_v_pbe_active pbe' || l_member_idx ||chr(13);
         end if;
      
         
         l_query_whr :=    l_query_whr
                        || case when l_member_idx > 1 then ' AND   ' end
                        ||        'pae'                  || '.id           = pbe' || l_member_idx ||'.pae_id'                                 ||chr(13)
                        || ' AND   pbe' || l_member_idx  || '.adn_id      = :adn' || l_member_idx                                             ||chr(13)
                        || ' AND   pbe' || l_member_idx  || '.value       = :val' || l_member_idx                                             ||chr(13)
                        || ' AND   pbe' || l_member_idx  || '.hash_value  = :adn' || l_member_idx || ' + ora_hash(:val'|| l_member_idx || ')' ||chr(13) 
                        ;
      
         l_attribute_values_aat(l_member_idx*2-1) := r_rec.adn_id;
         l_attribute_values_aat(l_member_idx*2)   := r_rec.column_value;
      
      end loop;
      
      
      
      
      l_cursor := dbms_sql.open_cursor; 
      dbms_sql.parse(l_cursor, l_query_sel||l_query_whr, dbms_sql.native);
      
      dbms_sql.define_array(l_cursor, 1, l_pae_ids, l_arrsize, 1);
      
      l_idx:= l_attribute_values_aat.first;
      while l_idx is not null
      loop
        
        
        
        dbms_sql.bind_variable(l_cursor, case mod(l_idx, 2) when 0 then 'val' else 'adn' end||ceil(l_idx/2), l_attribute_values_aat(l_idx));
        l_idx := l_attribute_values_aat.next(l_idx);
      end loop;
      
      
      l_result := dbms_sql.execute(l_cursor);
      loop
        l_numrows := dbms_sql.fetch_rows(l_cursor);
        exit when l_numrows < 1;
        
        dbms_sql.column_value(l_cursor, 1, l_pae_ids);
        exit when l_numrows < l_arrsize;
      
      end loop;
      
      if dbms_sql.is_open(l_cursor)
      then
        dbms_sql.close_cursor(l_cursor);
      end if;
      
      
      
      l_nt_eon_pae := pdm_nt_pae_id();
      
      l_idx := l_pae_ids.first;
      while l_idx is not null
      loop
        l_nt_eon_pae.extend();
        l_nt_eon_pae(l_nt_eon_pae.count) := l_pae_ids(l_idx);
      
        l_idx := l_pae_ids.next(l_idx);
      end loop;
      
      viu_module.leave_module( i_module => l_con_proc_name );
      
      
      return l_nt_eon_pae;

   exception
      when others
      then
         if c_eon%isopen
         then
            close c_eon;
         end if;

         if dbms_sql.is_open(l_cursor)
         then
           dbms_sql.close_cursor(l_cursor);
         end if;

         viu_module.leave_module( i_module => l_con_proc_name );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );

   end evaluate_eon;

  





















   function evaluate_eon ( i_eon_id        in  pdm_evaluate_operations.id%type
                         , i_ote_operation in  pdm_operation_types.operation%type
                         , i_nt_pae        in  pdm_nt_pae_id
                         )
   return pdm_nt_pae_id
   is
      l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.evaluate_eon-C';

      l_nt_paes        pdm_nt_pae_id := pdm_nt_pae_id();

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      case

         
         
         
         when i_ote_operation = pdm_constant.g_con_ote_nonexistence
         and  i_nt_pae.count > 0
         then

           
           

           select pae.id
           bulk collect into l_nt_paes
           from   pdm_v_pae_match    pae
           ,      table( i_nt_pae )  npa
           where  pae.id      = npa.column_value
           and    not exists (
                             select  1
                             from    pdm_v_eon_in_use         eon
                             ,       pdm_operation_types      ote
                             ,       pdm_v_agr_ote            agr
                             ,       pdm_v_pbe_active         pbe
                             where   pbe.pae_id        = pae.id
                             and     pbe.adn_id        = agr.adn_id
                             and     eon.agp_id        = agr.agp_id
                             and     eon.ote_id        = ote.id
                             and     eon.id            = i_eon_id
                             and     agr.ote_operation = pdm_constant.g_con_ote_nonexistence
                             and     ote.operation     = pdm_constant.g_con_ote_multipurpose
                            )
           ;
         
         
         when i_ote_operation = pdm_constant.g_con_ote_nonexistence
         then

           
           

           select pae.id
           bulk collect into l_nt_paes
           from pdm_v_pae_match  pae
           where not exists (
                             select  1
                             from    pdm_v_eon_in_use         eon
                             ,       pdm_operation_types      ote
                             ,       pdm_v_agr_ote            agr
                             ,       pdm_v_pbe_active         pbe
                             where   pbe.pae_id        = pae.id
                             and     pbe.adn_id        = agr.adn_id
                             and     eon.agp_id        = agr.agp_id
                             and     eon.ote_id        = ote.id
                             and     eon.id            = i_eon_id
                             and     agr.ote_operation = pdm_constant.g_con_ote_nonexistence
                             and     ote.operation     = pdm_constant.g_con_ote_multipurpose
                            )
           ;

         
         
         
         when i_ote_operation = pdm_constant.g_con_ote_existence
         and  i_nt_pae.count > 0
         then

            with
               count_pbe as
                 (select eon.id
                 ,       pbe.pae_id
                  ,      count (pbe.id)            cnt_pbe
                  from   pdm_v_eon_in_use          eon
                  ,      pdm_v_agr_ote             agr
                  ,      pdm_v_pbe_active          pbe
                  ,      pdm_v_pae_match           pae
                  ,      table( i_nt_pae )         npa
                  where  eon.agp_id        = agr.agp_id
                  and    agr.adn_id        = pbe.adn_id
                  and    pbe.pae_id        = pae.id
                  and    pae.id            = npa.column_value
                  and    eon.id            = i_eon_id
                  and    pbe.value_nr      = 1
                  and    agr.ote_operation = pdm_constant.g_con_ote_existence
                  group by eon.id
                  ,        pbe.pae_id
                 )
            , count_agr as
                 (select eon.id
                  ,      count (agr.adn_id)        cnt_agr
                  from   pdm_v_eon_in_use          eon
                  ,      pdm_v_agr_ote             agr
                  where  eon.agp_id        = agr.agp_id
                  and    eon.id            = i_eon_id
                  and    agr.ote_operation = pdm_constant.g_con_ote_existence
                  group by eon.id
                 )
            select distinct cpb.pae_id
            bulk collect into l_nt_paes
            from   count_pbe                 cpb
            ,      count_agr                 cag
            where  cag.id      = cpb.id
            and    cag.cnt_agr = cpb.cnt_pbe
            ;

         
         
         when i_ote_operation = pdm_constant.g_con_ote_existence
         then

            with
               count_pbe as
                 (select eon.id
                 ,       pbe.pae_id
                  ,      count (pbe.id)            cnt_pbe
                  from   pdm_v_eon_in_use          eon
                  ,      pdm_v_agr_ote             agr
                  ,      pdm_v_pbe_active          pbe
                  where  eon.agp_id        = agr.agp_id
                  and    agr.adn_id        = pbe.adn_id
                  and    eon.id            = i_eon_id
                  and    pbe.value_nr      = 1
                  and    agr.ote_operation = pdm_constant.g_con_ote_existence
                  group by eon.id
                  ,        pbe.pae_id
                 )
            , count_agr as
                 (select agr.agp_id
                  ,      count (agr.adn_id)        cnt_agr
                  from   pdm_v_eon_in_use          eon
                  ,      pdm_v_agr_ote             agr
                  where  eon.agp_id        = agr.agp_id
                  and    eon.id            = i_eon_id
                  and    agr.ote_operation = pdm_constant.g_con_ote_existence
                  group by agr.agp_id
                 )
            select distinct pbe.pae_id
            bulk collect into l_nt_paes
            from   pdm_v_eon_in_use          eon
            ,      pdm_v_agr_ote             agr
            ,      pdm_v_pbe_active          pbe
            ,      pdm_v_pae_match           pae
            ,      count_pbe                 cpb
            ,      count_agr                 cag
            where  eon.agp_id        = agr.agp_id
            and    pbe.adn_id        = agr.adn_id
            and    pbe.pae_id        = pae.id
            and    eon.agp_id        = cag.agp_id
            and    eon.id            = cpb.id
            and    pbe.pae_id        = cpb.pae_id
            and    cag.cnt_agr       = cpb.cnt_pbe
            and    eon.id            = i_eon_id
            and    pbe.value_nr      = 1
            and    agr.ote_operation = pdm_constant.g_con_ote_existence
            ;

        else

           viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_incorrectoperationtype
                              , i_calling_procedure => l_con_proc_name
                              , i_severity          => viu_info.severity_error
                              , i_info_arguments    => i_ote_operation
                              );

      end case;

      viu_module.leave_module( i_module => l_con_proc_name );
      return l_nt_paes;
   exception
      when others then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end evaluate_eon;

   












   procedure assign_eon_to_packages
   ( i_evt_id              in pdm_events.id%type
   , i_eon_id              in pdm_evaluate_operations.id%type
   , i_eon_agp_id          in pdm_evaluate_operations.agp_id%type
   , i_ote_operation       in pdm_operation_types.operation%type
   )
   is
     l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.assign_eon_to_packages';

     l_nt_active_packages       pdm_nt_pae_id;
     l_nt_eon_pae               pdm_nt_pae_id;
     l_nt_temp                  pdm_nt_pae_id;
     l_rt_agp                   pdm_attribute_groups%rowtype;
     l_continue                 boolean := true;
     l_found                    boolean := false;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      l_nt_active_packages := pdm_nt_pae_id();
      l_nt_eon_pae         := pdm_nt_pae_id();
      l_nt_temp            := pdm_nt_pae_id();
      
      l_continue           := true;

      if i_ote_operation = pdm_constant.g_con_ote_multipurpose
      then
         
         l_found := pdm_agp_tapi_pck.agp_select_row(i_agp_id => i_eon_agp_id
                                                   ,o_rt_agp => l_rt_agp
                                                   );

         
         if l_rt_agp.cnt_stringmatch > 0
         then
            l_nt_eon_pae := pdm_match.evaluate_eon( i_eon_id => i_eon_id );

            
            if l_nt_eon_pae.count = 0
            then
               l_continue := false;
            end if;
         end if;

         
         if l_continue
         then
            
            if l_rt_agp.cnt_existence > 0
            then
               l_nt_temp := pdm_match.evaluate_eon( i_eon_id        => i_eon_id
                                                  , i_ote_operation => pdm_constant.g_con_ote_existence
                                                  , i_nt_pae        => l_nt_eon_pae
                                                  );

               
               if l_nt_temp.count > 0
               then
                  l_nt_eon_pae := l_nt_temp;
               else
                  l_continue := false;
               end if;
            end if;

            
            
            if l_continue
            then
               
               if l_rt_agp.cnt_nonexistence > 0
               then
                  l_nt_temp := pdm_match.evaluate_eon( i_eon_id        => i_eon_id
                                                     , i_ote_operation => pdm_constant.g_con_ote_nonexistence
                                                     , i_nt_pae        => l_nt_eon_pae
                                                     );

                  
                  if l_nt_temp.count > 0
                  then
                     l_nt_eon_pae := l_nt_temp;
                  else
                     l_continue := false;
                  end if;
               end if;
            end if;

            
            if l_continue
            then
               l_nt_active_packages := l_nt_eon_pae;
            end if;

         end if;

      elsif i_ote_operation = pdm_constant.g_con_ote_regexp
      then

         
         l_nt_eon_pae := pdm_match.evaluate_eon( i_eon_id        => i_eon_id
                                               , i_ote_operation => pdm_constant.g_con_ote_regexp
                                               , i_where_clause  => ' AND REGEXP_LIKE (pbe.value,eon.value,''c'')'
                                               );

         select * bulk collect into l_nt_temp from (
            select column_value from table(l_nt_active_packages)
            union
            select column_value from table(l_nt_eon_pae)
         );
         l_nt_active_packages := l_nt_temp;

      elsif i_ote_operation = pdm_constant.g_con_ote_substring
      then

         
         l_nt_eon_pae := pdm_match.evaluate_eon( i_eon_id        => i_eon_id
                                               , i_ote_operation => pdm_constant.g_con_ote_substring
                                               , i_where_clause  => ' AND NVL(INSTR(pbe.value,eon.value,1,1),0) > 0'
                                               );

         select * bulk collect into l_nt_temp from (
            select column_value from table(l_nt_active_packages)
            union
            select column_value from table(l_nt_eon_pae)
         );
         l_nt_active_packages := l_nt_temp;

      end if;


      for k in 1 .. l_nt_active_packages.count
      loop

        pdm_match.create_active_peo( i_pae_id   => l_nt_active_packages(k)
                                   , i_eon_id   => i_eon_id
                                   , i_evt_id   => i_evt_id
                                   );

      end loop;

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );

   end assign_eon_to_packages;

   









































   procedure determine_candidate_proc_spec
   ( i_rt_pae in  pdm_packages%rowtype
   , i_rt_pte in  pdm_package_types%rowtype
   , o_nt_psn out pdm_nt_psn
   )
   is

      l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.determine_candidate_proc_spec';

      
      
      
      
      
      cursor c_expr ( b_rt_pae       in pdm_packages%rowtype
                    , b_rt_pte       in  pdm_package_types%rowtype
                    , b_systimestamp in cmn_constant.st_timestamp
                    )
      is
        
        
        
        
        select psn.id
        ,      psn.type
        ,      psn.id_cust
        ,      psn.version
        ,      psn.event_time
        ,      null esn_id
        from   pdm_process_specifications    psn
        ,      pdm_tpl_monitoring_types      tle
        where  psn.tle_id           = tle.id
        and    psn.pns_id           = pdm_constant.g_con_pns_status_current
        and    psn.timeframe_start <= b_systimestamp
        and    psn.timeframe_end   >  b_systimestamp
        and    psn.esn_id          is null
        and    (   (    b_rt_pte.name   = pdm_constant.g_con_pte_physical
                    and b_rt_pae.status = pdm_constant.g_con_pae_status_open
                   )
                or (    tle.id_cust = pdm_constant.g_con_tle_production
                    and (    b_rt_pte.id          in (pdm_constant.g_con_pte_id_logical, pdm_constant.g_con_pte_id_member)
                         or  (    b_rt_pte.name   =  pdm_constant.g_con_pte_physical
                              and b_rt_pae.status =  pdm_constant.g_con_pae_status_closed
                             )
                        )
                   )
               )
        union
        
        
        
        
        select /*+ORDERED */  psn.id
        ,      psn.type
        ,      psn.id_cust
        ,      psn.version
        ,      psn.event_time
        ,      psn.esn_id
        from   pdm_v_peo_active             peo
        ,      pdm_v_esn_leaves             vel
        ,      pdm_process_spec_expressions prn
        ,      pdm_process_specifications   psn
        ,      pdm_tpl_monitoring_types     tle
        where  prn.psn_id           = psn.id
        and    psn.tle_id           = tle.id
        and    prn.esn_id           = vel.id
        and    vel.eon_id           = peo.eon_id
        and    peo.pae_id           = b_rt_pae.id
        and    psn.pns_id           = pdm_constant.g_con_pns_status_current
        and    psn.timeframe_start <= b_systimestamp
        and    psn.timeframe_end   >  b_systimestamp
        and    (   (    b_rt_pte.name   = pdm_constant.g_con_pte_physical
                    and b_rt_pae.status = pdm_constant.g_con_pae_status_open
                   )
                or (    tle.id_cust = pdm_constant.g_con_tle_production
                    and (    b_rt_pte.id          in (pdm_constant.g_con_pte_id_logical, pdm_constant.g_con_pte_id_member)
                         or  (    b_rt_pte.name   =  pdm_constant.g_con_pte_physical
                              and b_rt_pae.status =  pdm_constant.g_con_pae_status_closed
                             )
                        )
                   )
               )
        ;

      
      l_nt_psn_esn    pdm_nt_psn_esn := pdm_nt_psn_esn();
      l_systimestamp  cmn_constant.st_timestamp;

   begin
      viu_module.enter_module( i_module      => l_con_proc_name );

      
      l_systimestamp := cmn_common.default_timestamp;

      
      for r_expr in c_expr( b_rt_pae       => i_rt_pae
                          , b_rt_pte       => i_rt_pte
                          , b_systimestamp => l_systimestamp
                          )
      loop
         
         if r_expr.esn_id is not null
         then

            if pdm_match.evaluate_expression( i_pae_id   => i_rt_pae.id
                                            , i_esn_id   => r_expr.esn_id
                                            )
            then
              
              l_nt_psn_esn.extend();
              l_nt_psn_esn(l_nt_psn_esn.count) := pdm_ot_psn_esn( r_expr.id
                                                                , r_expr.type
                                                                , r_expr.id_cust
                                                                , r_expr.version
                                                                , r_expr.event_time
                                                                , r_expr.esn_id
                                                                );
            end if;

         else

           
           l_nt_psn_esn.extend();
           l_nt_psn_esn(l_nt_psn_esn.count) := pdm_ot_psn_esn( r_expr.id
                                                             , r_expr.type
                                                             , r_expr.id_cust
                                                             , r_expr.version
                                                             , r_expr.event_time
                                                             , r_expr.esn_id
                                                             );

         end if;

      end loop; 


      











      
      
      

      select pdm_ot_psn( eval1.psn_id
                       , eval1.psn_type
                       , eval1.psn_id_cust
                       , eval1.psn_version
                       , eval1.psn_event_time
                       )
      bulk collect into o_nt_psn
      from   table(l_nt_psn_esn) eval1,
             (  select e.psn_type
                     , max(e.psn_event_time) psn_event_time
                from   table(l_nt_psn_esn) e
                group by e.psn_type
             ) eval2
      where  eval1.psn_type = eval2.psn_type
      and    eval1.psn_event_time = eval2.psn_event_time;


      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );

   end determine_candidate_proc_spec;


   



















   procedure determine_candidate_products
   ( i_pae_id            in  pdm_packages.id%type
   , i_nt_psn            in  pdm_nt_psn
   , o_nt_pdt_id         out pdm_nt_pdt_id
   )
   is

      l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.determine_candidate_products';

      
      cursor c_expr( b_nt_psn  in pdm_nt_psn )
      is
         select /*+ORDERED*/ pdt.id           pdt_id
         ,      pdt.fly_id
         ,      pdt.sequence     pdt_sequence
         ,      pdt.esn_id
         from   table(b_nt_psn)               psn
         ,      pdm_process_spec_families     psy
         ,      pdm_products                  pdt
         where  psy.psn_id = psn.psn_id
         and    pdt.fly_id = psy.fly_id;


      l_nt_pdt_esn    pdm_nt_pdt_esn := pdm_nt_pdt_esn();


   begin
      viu_module.enter_module( i_module      => l_con_proc_name );
      
      if i_nt_psn is not empty
      then

         for r_expr in c_expr( b_nt_psn  => i_nt_psn )
         loop

            if r_expr.esn_id is not null
            then

               if pdm_match.evaluate_expression( i_pae_id   => i_pae_id
                                               , i_esn_id   => r_expr.esn_id
                                               )
               then
                 
                 l_nt_pdt_esn.extend();
                 l_nt_pdt_esn(l_nt_pdt_esn.count) := pdm_ot_pdt_esn( r_expr.pdt_id
                                                                   , r_expr.fly_id
                                                                   , r_expr.pdt_sequence
                                                                   , r_expr.esn_id
                                                                   );
               end if;

            else

              
              l_nt_pdt_esn.extend();
              l_nt_pdt_esn(l_nt_pdt_esn.count) := pdm_ot_pdt_esn( r_expr.pdt_id
                                                                , r_expr.fly_id
                                                                , r_expr.pdt_sequence
                                                                , r_expr.esn_id
                                                                );

            end if;

         end loop;


         
         









         select eval1.pdt_id
         bulk collect into o_nt_pdt_id
         from   table(l_nt_pdt_esn) eval1,
                (  select e.fly_id
                        , min(e.pdt_sequence) pdt_sequence
                   from   table(l_nt_pdt_esn) e
                   group by e.fly_id
                ) eval2
         where  eval1.fly_id = eval2.fly_id
         and    eval1.pdt_sequence = eval2.pdt_sequence;

      end if;

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );

   end determine_candidate_products;

   

















   procedure determine_candidate_processes
   ( i_pae_id            in  pdm_packages.id%type
   , i_nt_psn            in  pdm_nt_psn
   , i_nt_pdt_id         in  pdm_nt_pdt_id
   , o_nt_pcs            out pdm_nt_pcs
   )
   is
      l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.determine_candidate_processes';

      
      
      cursor c_expr
      is
      select /*+ CARDINALITY(psn, 4) */ psn.psn_id
      ,      psn.psn_type
      ,      psn.psn_id_cust
      ,      psn.psn_version
      ,      psn.psn_event_time
      ,      pcs.id              pcs_id
      ,      pcs.type            pcs_type
      ,      pcs.priority        pcs_priority
      ,      pen.esn_id          esn_id
      from   pdm_processes           pcs
      ,      pdm_process_expressions pen
      ,      pdm_process_products    ppt
      ,      table(i_nt_psn)         psn
      where  pcs.psn_id = psn.psn_id
      and    pen.pcs_id (+) = pcs.id
      and    ppt.pcs_id (+) = pcs.id
      and    (   ppt.pdt_id is null
              or ppt.pdt_id in (select /*+ CARDINALITY(pdt, 4) */
                                       column_value
                                from   table(i_nt_pdt_id) pdt
                               )
             )
      ;
      l_systimestamp  cmn_constant.st_timestamp;
   begin
      viu_module.enter_module( i_module      => l_con_proc_name );
      l_systimestamp := cmn_common.default_timestamp;

      o_nt_pcs := pdm_nt_pcs();

      for r_expr in c_expr
      loop

         if r_expr.esn_id is not null
         then

            if evaluate_expression
                      ( i_pae_id   => i_pae_id
                      , i_esn_id   => r_expr.esn_id
                      )
            then
              
              o_nt_pcs.extend();
              o_nt_pcs(o_nt_pcs.count) := pdm_ot_pcs( r_expr.pcs_id
                                                    , r_expr.pcs_type
                                                    , r_expr.pcs_priority
                                                    , r_expr.psn_id
                                                    , r_expr.psn_type
                                                    , r_expr.psn_id_cust
                                                    , r_expr.psn_version
                                                    , r_expr.psn_event_time
                                                    );
            end if;

         else

           
           o_nt_pcs.extend();
           o_nt_pcs(o_nt_pcs.count) := pdm_ot_pcs( r_expr.pcs_id
                                                 , r_expr.pcs_type
                                                 , r_expr.pcs_priority
                                                 , r_expr.psn_id
                                                 , r_expr.psn_type
                                                 , r_expr.psn_id_cust
                                                 , r_expr.psn_version
                                                 , r_expr.psn_event_time
                                                 );

         end if;

      end loop;

      
      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );

   end determine_candidate_processes;

   

















   procedure determine_candidate_activities
   ( i_nt_pcs            in  pdm_nt_pcs
   , i_nt_pdt_id         in  pdm_nt_pdt_id
   , o_nt_aty            out pdm_nt_aty
   )
   is
      l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.determine_candidate_activities';

      
      
      cursor c_expr
      is
         with activities  
         as (
             select /*+ CARDINALITY(pcs, 4) */ aty.id
             ,      aty.id_cust
             ,      pcs.pcs_id
             ,      pcs.pcs_type
             ,      pcs.pcs_priority
             ,      pcs.psn_id
             ,      pcs.psn_type
             ,      pcs.psn_id_cust
             ,      pcs.psn_version
             ,      pcs.psn_event_time
             from   pdm_activities       aty
             ,      table(i_nt_pcs)      pcs
             where  aty.pcs_id = pcs.pcs_id
             and    not exists (select 1
                                from   pdm_activity_products  apt
                                where  apt.aty_id = aty.id
                               )
             union all
             
             select aty.id
             ,      aty.id_cust
             ,      pcs.pcs_id
             ,      pcs.pcs_type
             ,      pcs.pcs_priority
             ,      pcs.psn_id
             ,      pcs.psn_type
             ,      pcs.psn_id_cust
             ,      pcs.psn_version
             ,      pcs.psn_event_time
             from   pdm_activities         aty
             ,      pdm_activity_products  apt
             ,      table(i_nt_pcs)        pcs
             ,      table(i_nt_pdt_id)     pdt
             where  aty.pcs_id = pcs.pcs_id
             and    apt.aty_id = aty.id
             and    apt.pdt_id = pdt.column_value
            )
         , ranked_activities  
         as (select id
             ,      id_cust
             ,      pcs_id
             ,      pcs_type
             ,      pcs_priority
             ,      psn_id
             ,      psn_type
             ,      psn_id_cust
             ,      psn_version
             ,      psn_event_time
             ,      rank() over (partition by pcs_id
                                 order by id_cust asc) as ranking
             from   activities
            )
         
         select pdm_ot_aty(id
                          ,id_cust
                          ,pcs_id
                          ,pcs_type
                          ,pcs_priority
                          ,psn_id
                          ,psn_type
                          ,psn_id_cust
                          ,psn_version
                          ,psn_event_time
                          )
         from   ranked_activities
         where  ranking = 1
         ;
      
      l_systimestamp  cmn_constant.st_timestamp;
   begin
      viu_module.enter_module( i_module      => l_con_proc_name );
      l_systimestamp          := cmn_common.default_timestamp;
      
      
      
      
      open  c_expr;
      fetch c_expr bulk collect into o_nt_aty;
      close c_expr;
      
      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         if c_expr%isopen
         then
            close c_expr;
         end if;
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end determine_candidate_activities;

   




















   procedure determine_candidate_phases
   ( i_nt_aty        in  pdm_nt_aty
   , i_rt_pcs_active in  pdm_processes%rowtype
   , i_rt_aty_active in  pdm_activities%rowtype
   , i_rt_pse_active in  pdm_phases%rowtype
   , o_nt_pse        out pdm_nt_pse
   , o_rematch_time  out pdm_packages.rematch_time%type
   )
   is
      l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.determine_candidate_phases';
      
      
      
      
      
      
      
      
      
      
      
      cursor c_expr (b_systimestamp  pdm_phases.timeframe_start%type)
      is
         select pdm_ot_pse(prio.id
                          ,prio.timeframe_end
                          ,prio.pse_type
                          ,prio.aty_id
                          ,prio.aty_id_cust
                          ,prio.pcs_id
                          ,prio.pcs_type
                          ,prio.pcs_priority
                          ,prio.psn_id
                          ,prio.psn_type
                          ,prio.psn_id_cust
                          ,prio.psn_version
                          ,prio.psn_event_time
                          )
         from (
                select phases.id
                ,      phases.timeframe_end
                ,      phases.pse_type
                ,      phases.aty_id
                ,      phases.aty_id_cust
                ,      phases.pcs_id
                ,      phases.pcs_type
                ,      phases.pcs_priority
                ,      phases.psn_id
                ,      phases.psn_type
                ,      phases.psn_id_cust
                ,      phases.psn_version
                ,      phases.psn_event_time
                ,      max (phases.pcs_priority) over (partition by phases.psn_id)  max_priority
                from (
                       select /*+ CARDINALITY(aty, 4) */ pse.id
                       ,      pse.timeframe_end
                       ,      pse.type as pse_type
                       ,      case
                                 when pse.type = pdm_constant.g_con_tpe_type_execute
                                   or pse.type = pdm_constant.g_con_tpe_type_wrapup then 2
                                 else 1
                              end   pse_type_rank
                       ,      aty.aty_id
                       ,      aty.aty_id_cust
                       ,      aty.pcs_id
                       ,      aty.pcs_type
                       ,      aty.pcs_priority
                       ,      aty.psn_id
                       ,      aty.psn_type
                       ,      aty.psn_id_cust
                       ,      aty.psn_version
                       ,      aty.psn_event_time
                       ,      max (case
                                      when pse.type = pdm_constant.g_con_tpe_type_execute
                                        or pse.type = pdm_constant.g_con_tpe_type_wrapup then 2
                                      else 1
                                   end
                                  ) over (partition by aty.psn_id)  max_pse_type_rank
                       from   pdm_phases       pse
                       ,      table(i_nt_aty)  aty
                       where  pse.aty_id = aty.aty_id
                       and    pse.timeframe_start <= b_systimestamp
                       and    pse.timeframe_end   >  b_systimestamp
                       and   (   (    pse.type = pdm_constant.g_con_tpe_type_wrapup
                                  and i_rt_pse_active.type in (pdm_constant.g_con_tpe_type_execute
                                                              ,pdm_constant.g_con_tpe_type_wrapup
                                                              )
                                  and aty.pcs_type    = i_rt_pcs_active.type
                                  and aty.aty_id_cust = i_rt_aty_active.id_cust
                                 )
                              or pse.type <> pdm_constant.g_con_tpe_type_wrapup
                             )
                     )  phases
                where phases.pse_type_rank = phases.max_pse_type_rank
              ) prio
         where prio.pcs_priority = prio.max_priority
         order by prio.pcs_priority    desc
         ,        prio.id              asc
         ;
      
      
      cursor c_time (b_systimestamp  pdm_phases.timeframe_start%type)
      is
         select min(rmt.rematch_time)
         from  (select /*+ CARDINALITY(aty, 4) */ pse.timeframe_start   rematch_time
                from   pdm_phases            pse
                ,      table(i_nt_aty)       aty
                where  pse.aty_id          = aty.aty_id
                and    pse.timeframe_start > b_systimestamp
                union all
                select pse.pse_timeframe_end   rematch_time
                from   table(o_nt_pse)         pse
                where  pse.pse_timeframe_end > b_systimestamp
               ) rmt

         ;
      
      l_systimestamp  cmn_constant.st_timestamp;
   begin
      viu_module.enter_module( i_module => l_con_proc_name );
      l_systimestamp := cmn_common.default_timestamp;
      
      open  c_expr (b_systimestamp => l_systimestamp);
      fetch c_expr bulk collect into o_nt_pse;
      close c_expr;
      
      open  c_time (b_systimestamp => l_systimestamp);
      fetch c_time into o_rematch_time;
      close c_time;
      
      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         if c_expr%isopen
         then
            close c_expr;
         end if;
         if c_time%isopen
         then
            close c_time;
         end if;
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end determine_candidate_phases;

   
































   procedure determine_active_process
   ( i_pae_id         in   pdm_packages.id%type
   , i_pet_id         in   pdm_package_events.id%type
   , i_nt_pse         in   pdm_nt_pse
   , i_nt_pdt_id      in   pdm_nt_pdt_id
   , o_active_pse     out  rt_active_pse
   , o_nt_pdt_id_act  out  pdm_nt_pdt_id
   )
   is
      l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.determine_active_process';
      
      type rt_pdt is record (psn_id  pdm_process_specifications.id%type
                            ,pdt_id  pdm_products.id%type
                            );
      type it_pdt is table of rt_pdt index by pls_integer;
      
      l_it_pdt        it_pdt;
      l_rt_aae        pdm_assigned_active%rowtype;
      l_systimestamp  cmn_constant.st_timestamp;
   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      l_systimestamp := cmn_common.default_timestamp;

      
      o_nt_pdt_id_act := pdm_nt_pdt_id();

      
      
      
      select /*+ LEADING(t_pdt pdt t_pse psy) */ psy.psn_id
      ,      pdt.id
      bulk collect into l_it_pdt
      from   pdm_products               pdt
      ,      pdm_process_spec_families  psy
      ,      table(i_nt_pse)            t_pse
      ,      table(i_nt_pdt_id)         t_pdt
      where  t_pdt.column_value = pdt.id
      and    pdt.fly_id         = psy.fly_id
      and    psy.psn_id         = t_pse.psn_id
      ;

      
      for idx_fp in 1..l_it_pdt.count
      loop
         o_nt_pdt_id_act.extend;
         o_nt_pdt_id_act(idx_fp) := l_it_pdt(idx_fp).pdt_id;
      end loop;

      
      
      
      for idx_pse in 1..i_nt_pse.count
      loop

         
         for idx_pdt in 1..l_it_pdt.count
         loop
            
            if l_it_pdt(idx_pdt).psn_id = i_nt_pse(idx_pse).psn_id
            then
               l_rt_aae              := null;
               l_rt_aae.pae_id       := i_pae_id;
               l_rt_aae.pet_id       := i_pet_id;
               l_rt_aae.pdt_id       := l_it_pdt(idx_pdt).pdt_id;
               l_rt_aae.ind_active   := cmn_constant.g_con_yesno_no;
               l_rt_aae.date_created := l_systimestamp;
               
               pdm_aae_tapi_pck.aae_insert_row( io_rt_aae   => l_rt_aae );
            end if;
         end loop;

         
         l_rt_aae              := null;
         l_rt_aae.pae_id       := i_pae_id;
         l_rt_aae.pet_id       := i_pet_id;
         l_rt_aae.psn_id       := i_nt_pse(idx_pse).psn_id;
         l_rt_aae.pcs_id       := i_nt_pse(idx_pse).pcs_id;
         l_rt_aae.aty_id       := i_nt_pse(idx_pse).aty_id;
         l_rt_aae.pse_id       := i_nt_pse(idx_pse).pse_id;
         l_rt_aae.date_created := l_systimestamp;
         if idx_pse = 1
         then
            l_rt_aae.ind_active   := cmn_constant.g_con_yesno_yes;

            
            o_active_pse.pcs_id   := i_nt_pse(idx_pse).pcs_id;
            o_active_pse.aty_id   := i_nt_pse(idx_pse).aty_id;
            o_active_pse.pse_id   := i_nt_pse(idx_pse).pse_id;
         else
            l_rt_aae.ind_active   := cmn_constant.g_con_yesno_no;
         end if;
         
         pdm_aae_tapi_pck.aae_insert_row( io_rt_aae   => l_rt_aae );
      end loop;

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end determine_active_process;

   



















   procedure store_process_parameters
   ( i_pae_id         in     pdm_packages.id%type
   , io_it_attributes in out pdm_attributes.attribute_coll
   )
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.store_process_parameters';

      
      
      cursor c_ppr( b_pae_id in pdm_packages.id%type )
      is
         select ppr.adn_id
         ,      ppr.value
         ,      adn.path adn_path
         ,      adn.type adn_type
         from   pdm_assigned_active       aae
         ,      pdm_process_parameters    ppr
         ,      pdm_attribute_definitions adn
         where  aae.pae_id = b_pae_id
         and    ppr.psn_id = aae.psn_id
         and    (ppr.pcs_id is null or ppr.pcs_id = aae.pcs_id)
         and    (ppr.aty_id is null or ppr.aty_id = aae.aty_id)
         and    (ppr.pse_id is null or ppr.pse_id = aae.pse_id)
         and    adn.id = ppr.adn_id
      ;

      

      
      
      
      
      cursor c_pbe( b_pae_id    in pdm_packages.id%type
                  , b_nt_adn_id in pdm_nt_adn_id
                  )
      is
         select adn.id adn_id
         ,      adn.path adn_path
         ,      adn.type adn_type
         from   pdm_attribute_definitions adn
         where  adn.id in ( select pbe.adn_id
                            from   pdm_v_pbe_active pbe
                            ,      pdm_process_parameters ppr
                            where  pbe.pae_id = b_pae_id
                            and    pbe.adn_id = ppr.adn_id
                            and    pbe.adn_id not in ( select /*+ CARDINALITY(adn, 4) */ column_value
                                                       from   table (b_nt_adn_id) adn
                                                     )
                          )
      ;
      l_nt_adn_id     pdm_nt_adn_id := pdm_nt_adn_id();
      l_idx           integer;
   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      
      for r_ppr in c_ppr( i_pae_id )
      loop
         io_it_attributes(r_ppr.adn_path).adn_id   := r_ppr.adn_id;
         io_it_attributes(r_ppr.adn_path).adn_type := r_ppr.adn_type;

         
         l_idx := io_it_attributes(r_ppr.adn_path).value.last;
         if l_idx is null
         then
            l_idx := 1;
         else
            l_idx := l_idx + 1;
         end if;
         io_it_attributes(r_ppr.adn_path).value(l_idx) := r_ppr.value;

         l_nt_adn_id.extend(1);
         l_nt_adn_id(l_nt_adn_id.count) := r_ppr.adn_id;
      end loop;

      
      
      for r_pbe in c_pbe( i_pae_id, l_nt_adn_id )
      loop
         io_it_attributes(r_pbe.adn_path).adn_id   := r_pbe.adn_id;
         io_it_attributes(r_pbe.adn_path).adn_type := r_pbe.adn_type;

         
         io_it_attributes(r_pbe.adn_path).value(1) := null;
      end loop;

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end store_process_parameters;

   














   procedure store_timelimit
   ( i_nt_pse          in      pdm_nt_pse
   , io_it_attributes  in out  pdm_attributes.attribute_coll
   )
   is
      l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.store_timelimit';
      
   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      pdm_attributes.add_attribute_null(pdm_constant.g_con_timelimit_attr,io_it_attributes);

      
      
      begin
         select /*+ CARDINALITY(t_pse,4) */
                cmn_common.timestamp_to_varchar(max(pse.timeframe_end))
         into   io_it_attributes(pdm_constant.g_con_timelimit_attr).value(1)
         from   pdm_phases                  pse
         ,      pdm_process_specifications  psn
         ,      table(i_nt_pse)  t_pse
         where  pse.aty_id   = t_pse.aty_id
         and    psn.id       = t_pse.psn_id
         and    psn.type     = pdm_constant.g_con_psn_flight_build
         ;
      exception
         when no_data_found then
            
            null;
      end;

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end store_timelimit;

   












   procedure store_timelimit_act_phase
   ( i_nt_pse          in      pdm_nt_pse
   , io_it_attributes  in out  pdm_attributes.attribute_coll
   )
   is
      l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.store_timelimit_act_phase';
      
   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      pdm_attributes.add_attribute_null(pdm_constant.g_con_timelimit_active_attr,io_it_attributes);

      if i_nt_pse.exists(1)
      then

         
         io_it_attributes(pdm_constant.g_con_timelimit_active_attr).value(1)
            := cmn_common.timestamp_to_varchar(i_nt_pse(1).pse_timeframe_end);

      end if;

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end store_timelimit_act_phase;

   

























   procedure store_segregation_id
   ( i_nt_pse          in      pdm_nt_pse
   , i_nt_pdt_id       in      pdm_nt_pdt_id
   , io_it_attributes  in out  pdm_attributes.attribute_coll
   )
   is
      l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.store_segregation_id';
      
      l_psn_id             pdm_process_specifications.id%type;
      l_pdt_id_error       pdm_products.id%type;
      l_pdt_id_cust        pdm_products.id_cust%type;
      l_idx_pse            integer;
      l_found_flight_build boolean := false;
   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      pdm_attributes.add_attribute_null(pdm_constant.g_con_processplanidname_attr,io_it_attributes);  
      pdm_attributes.add_attribute_null(pdm_constant.g_con_productname_attr      ,io_it_attributes);  
      pdm_attributes.add_attribute_null(pdm_constant.g_con_cpdname_attr          ,io_it_attributes);  
      pdm_attributes.add_attribute_null(pdm_constant.g_con_processplanidvrsn_attr,io_it_attributes);  
      pdm_attributes.add_attribute_null(pdm_constant.g_con_processname_attr      ,io_it_attributes);  
      pdm_attributes.add_attribute_null(pdm_constant.g_con_activityname_attr     ,io_it_attributes);  

      
      l_idx_pse := i_nt_pse.first;
      while l_idx_pse is not null
      and   not l_found_flight_build
      loop

         
         if i_nt_pse(l_idx_pse).psn_type in (pdm_constant.g_con_psn_flight_build
                                            ,pdm_constant.g_con_psn_ito
                                            ,pdm_constant.g_con_psn_reclaim
                                            )
         then
            
            io_it_attributes(pdm_constant.g_con_processplanidname_attr).value(1) := i_nt_pse(l_idx_pse).psn_id_cust;
            io_it_attributes(pdm_constant.g_con_cpdname_attr).value(1)           := i_nt_pse(l_idx_pse).psn_type;
            io_it_attributes(pdm_constant.g_con_processplanidvrsn_attr).value(1) := i_nt_pse(l_idx_pse).psn_version;
            io_it_attributes(pdm_constant.g_con_processname_attr).value(1)       := i_nt_pse(l_idx_pse).pcs_type;
            io_it_attributes(pdm_constant.g_con_activityname_attr).value(1)      := i_nt_pse(l_idx_pse).aty_id_cust;

            
            if i_nt_pse(l_idx_pse).psn_type = pdm_constant.g_con_psn_flight_build
            then
               l_psn_id := i_nt_pse(l_idx_pse).psn_id;
               l_found_flight_build := true;
            end if;
         end if;

         l_idx_pse := i_nt_pse.next(l_idx_pse);
      end loop;

      
      if l_found_flight_build
      then
         
         
         begin
            select /*+ LEADING(t_pdt pdt fly psy) */ pdt.id_cust
            into   io_it_attributes(pdm_constant.g_con_productname_attr).value(1)
            from   pdm_process_spec_families   psy
            ,      pdm_families                fly
            ,      pdm_products                pdt
            ,      table(i_nt_pdt_id)          t_pdt
            where  pdt.fly_id  = fly.id
            and    psy.fly_id  = fly.id
            and    pdt.id      = t_pdt.column_value
            and    psy.psn_id  = l_psn_id
            and    fly.id_cust = pdm_constant.g_con_fly_segregation
            ;
         exception
            when no_data_found then
               
               null;
            when too_many_rows then
               
               select /*+ LEADING(t_pdt pdt fly psy) */ pdt.id
               ,      pdt.id_cust
               into   l_pdt_id_error
               ,      l_pdt_id_cust
               from   pdm_process_spec_families   psy
               ,      pdm_families                fly
               ,      pdm_products                pdt
               ,      table(i_nt_pdt_id)          t_pdt
               where  pdt.fly_id  = fly.id
               and    psy.fly_id  = fly.id
               and    pdt.id      = t_pdt.column_value
               and    psy.psn_id  = l_psn_id
               and    fly.id_cust = pdm_constant.g_con_fly_segregation
               and    rownum      = 1
               ;
               
               viu_info.raise_info ( i_ifo_nr            => viu_constant.c_ifo_toomanyproductname
                                   , i_calling_procedure => l_con_proc_name
                                   , i_severity          => viu_info.c_severity_error
                                   , i_info_arguments    => l_pdt_id_cust || '##' || io_it_attributes(pdm_constant.g_con_processplanidname_attr).value(1)
                                   , i_additional_data   => 'During determination of ProductName ' ||l_pdt_id_cust || ' (' || to_char(l_pdt_id_error)
                                                            || ') the Process Specification '||io_it_attributes(pdm_constant.g_con_processplanidname_attr).value(1) ||' (' || to_char(l_psn_id)
                                                            || ') of type FLIGHT_BUILD has been found more than once.'
                                   );
         end;
      end if;

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end store_segregation_id;

   












   procedure store_resources_final_stn_ha
   ( i_pse_id          in      pdm_phases.id%type
   , io_it_attributes  in out  pdm_attributes.attribute_coll
   )
   is
      l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.store_resources_final_stn_ha';

      
      cursor c_are ( b_pse_id pdm_phases.id%type
                   , b_rte_id pdm_resource_types.id%type
                   )
      is
         select are.id_cust
         from   pdm_actions           atn
         ,      pdm_action_resources  are
         where  atn.pse_id      = b_pse_id
         and    atn.ind_primary = cmn_constant.g_con_yesno_yes
         and    are.atn_id      = atn.id
         and    are.rte_id      = b_rte_id
         ;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      for r_are in c_are ( b_pse_id => i_pse_id
                         , b_rte_id => pdm_constant.g_con_rte_station
                         )
      loop

         
         io_it_attributes(pdm_constant.g_con_finalexpstationid_attr).value(io_it_attributes(pdm_constant.g_con_finalexpstationid_attr).value.count + 1) := r_are.id_cust;
      end loop;

      
      if not io_it_attributes(pdm_constant.g_con_finalexpstationid_attr).value.exists(1)
      then

         
         for r_are in c_are ( b_pse_id => i_pse_id
                            , b_rte_id => pdm_constant.g_con_rte_handling_area
                            )
         loop

            
            io_it_attributes(pdm_constant.g_con_finalexphandlarea_attr).value(io_it_attributes(pdm_constant.g_con_finalexphandlarea_attr).value.count + 1) := r_are.id_cust;
         end loop;
      end if;

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end store_resources_final_stn_ha;

   


















   procedure store_final_exp_stn_ha
   ( i_nt_pse          in      pdm_nt_pse
   , io_it_attributes  in out  pdm_attributes.attribute_coll
   )
   is
      l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.store_final_exp_stn_ha';

      
      cursor c_pse_execute_after_prepare (b_pse_id pdm_phases.id%type)
      is
         select   pse_execute.id
         from     pdm_phases pse_prepare
         ,        pdm_phases pse_execute
         where    pse_prepare.id              = b_pse_id
         and      pse_prepare.type            = pdm_constant.g_con_tpe_type_prepare
         and      pse_execute.type            = pdm_constant.g_con_tpe_type_execute
         and      pse_execute.aty_id          = pse_prepare.aty_id
         and      pse_execute.timeframe_start > pse_prepare.timeframe_start
         order by pse_execute.timeframe_start
         ;

      l_pse_id pdm_phases.id%type;
      l_found  boolean;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      pdm_attributes.add_attribute(pdm_constant.g_con_finalexpstationid_attr,io_it_attributes);
      pdm_attributes.add_attribute(pdm_constant.g_con_finalexphandlarea_attr,io_it_attributes);

      
      if i_nt_pse.exists(1)
      then

         
         open  c_pse_execute_after_prepare(b_pse_id => i_nt_pse(1).pse_id);
         fetch c_pse_execute_after_prepare into l_pse_id;
         l_found := c_pse_execute_after_prepare%found;
         close c_pse_execute_after_prepare;

         
         if l_found
         then
            
            
            store_resources_final_stn_ha ( i_pse_id          => l_pse_id
                                         , io_it_attributes  => io_it_attributes
                                         );

         else
         
            
            if i_nt_pse.exists(2)
            then

               
               store_resources_final_stn_ha ( i_pse_id          => i_nt_pse(2).pse_id
                                            , io_it_attributes  => io_it_attributes
                                            );
            end if;
         end if;
      end if; 

      
      if not io_it_attributes(pdm_constant.g_con_finalexpstationid_attr).value.exists(1)
      then
         io_it_attributes(pdm_constant.g_con_finalexpstationid_attr).value(1) := null;
      end if;

      
      if not io_it_attributes(pdm_constant.g_con_finalexphandlarea_attr).value.exists(1)
      then
         io_it_attributes(pdm_constant.g_con_finalexphandlarea_attr).value(1) := null;
      end if;

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         if c_pse_execute_after_prepare%isopen
         then
            close c_pse_execute_after_prepare;
         end if;

         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end store_final_exp_stn_ha;

   














   procedure store_handler_product
   ( i_nt_pdt_id       in      pdm_nt_pdt_id
   , io_it_attributes  in out  pdm_attributes.attribute_coll
   )
   is
      l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.store_handler_product';

      
      cursor c_pdt(b_nt_pdt_id in pdm_nt_pdt_id)
      is
         select /*+ LEADING(t_pdt pdt fly) */ pdt.id_cust
         from   pdm_families       fly
         ,      pdm_products       pdt
         ,      table(b_nt_pdt_id) t_pdt
         where  pdt.id      = t_pdt.column_value
         and    pdt.fly_id  = fly.id
         and    fly.id_cust = pdm_constant.g_con_fly_handler
         ;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      pdm_attributes.add_attribute_null(pdm_constant.g_con_handlerproduct_attr,io_it_attributes);

      
      open  c_pdt( b_nt_pdt_id => i_nt_pdt_id);
      fetch c_pdt into io_it_attributes(pdm_constant.g_con_handlerproduct_attr).value(1);
      close c_pdt;

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         if c_pdt%isopen
         then
            close c_pdt;
         end if;

         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end store_handler_product;

   


















   procedure store_expected_build_station
   ( i_nt_pse          in      pdm_nt_pse
   , io_it_attributes  in out  pdm_attributes.attribute_coll
   )
   is
      l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.store_expected_build_station';
      
      
      
      cursor c_are
      is
         select /*+ LEADING(atn are) */ are.id_cust
         from   pdm_actions          atn
         ,      pdm_action_resources are
         where  atn.pse_id      = ( select /*+ CARDINALITY(t_pse, 4) */
                                           max (pse_id) keep (dense_rank last order by pcs_priority)
                                    from   table (i_nt_pse) t_pse
                                    where  psn_type in ( pdm_constant.g_con_psn_flight_build
                                                       , pdm_constant.g_con_psn_reclaim
                                                       , pdm_constant.g_con_psn_ito
                                                       )
                                  )
         and    atn.ind_primary = cmn_constant.g_con_yesno_yes
         and    are.atn_id      = atn.id
         and    are.rte_id      = pdm_constant.g_con_rte_station
         ;
      
   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      pdm_attributes.add_attribute(pdm_constant.g_con_expbuildstationid_attr,io_it_attributes);

      
      
      
      for r_are in c_are
      loop
         io_it_attributes(pdm_constant.g_con_expbuildstationid_attr).value(io_it_attributes(pdm_constant.g_con_expbuildstationid_attr).value.count + 1) := r_are.id_cust;
      end loop;

      
      
      if not io_it_attributes(pdm_constant.g_con_expbuildstationid_attr).value.exists(1)
      then
         io_it_attributes(pdm_constant.g_con_expbuildstationid_attr).value(1) := null;
      end if;

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end store_expected_build_station;

   

















   procedure store_expected_build_handlarea
   ( i_nt_pse          in      pdm_nt_pse
   , io_it_attributes  in out  pdm_attributes.attribute_coll
   )
   is
      l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.store_expected_build_handlarea';
      
      
      
      cursor c_are
      is
         select /*+ LEADING(atn are) */ are.id_cust
         from   pdm_actions          atn
         ,      pdm_action_resources are
         where  atn.pse_id      = ( select /*+ CARDINALITY(t_pse, 4) */
                                           max (pse_id) keep (dense_rank last order by pcs_priority)
                                    from   table (i_nt_pse) t_pse
                                    where  psn_type in ( pdm_constant.g_con_psn_flight_build
                                                       , pdm_constant.g_con_psn_reclaim
                                                       , pdm_constant.g_con_psn_ito
                                                       )
                                  )
         and    atn.ind_primary = cmn_constant.g_con_yesno_yes
         and    are.atn_id      = atn.id
         and    are.rte_id      = pdm_constant.g_con_rte_handling_area
         ;
      
   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      pdm_attributes.add_attribute(pdm_constant.g_con_expbuildhandlarea_attr,io_it_attributes);

      
      
      
      for r_are in c_are
      loop
         io_it_attributes(pdm_constant.g_con_expbuildhandlarea_attr).value(io_it_attributes(pdm_constant.g_con_expbuildhandlarea_attr).value.count + 1) := r_are.id_cust;
      end loop;

      
      
      if not io_it_attributes(pdm_constant.g_con_expbuildhandlarea_attr).value.exists(1)
      then
         io_it_attributes(pdm_constant.g_con_expbuildhandlarea_attr).value(1) := null;
      end if;

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end store_expected_build_handlarea;

   



















   procedure store_buildstationid
   ( i_nt_pse          in      pdm_nt_pse
   , io_it_attributes  in out  pdm_attributes.attribute_coll
   )
   is
      l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.store_buildstationID';

      
      
      cursor c_are
      is
         select /*+ LEADING(atn are) */ are.id_cust
         from   pdm_actions          atn
         ,      pdm_action_resources are
         where  atn.pse_id      = ( select /*+ CARDINALITY(t_pse, 4) */
                                           min(pse.id) keep ( dense_rank first order by t_pse.pcs_priority desc
                                                                               ,        pse.timeframe_start
                                                            )
                                    from   pdm_phases       pse
                                    ,      table (i_nt_pse) t_pse
                                    where  t_pse.psn_type in ( pdm_constant.g_con_psn_flight_build
                                                             , pdm_constant.g_con_psn_reclaim
                                                             , pdm_constant.g_con_psn_ito
                                                             )
                                    and    pse.id         =  t_pse.pse_id
                                    and    pse.type       in ( pdm_constant.g_con_tpe_type_execute
                                                             , pdm_constant.g_con_tpe_type_wrapup
                                                             )
                                  )
         and    atn.ind_primary = cmn_constant.g_con_yesno_yes
         and    are.atn_id      = atn.id
         and    are.rte_id      = pdm_constant.g_con_rte_station
         ;

      
      
      cursor c_are_execute_after_prepare
      is
         select /*+ LEADING(atn are) */ are.id_cust
         from   pdm_actions          atn
         ,      pdm_action_resources are
         where  atn.pse_id      = ( select /*+ CARDINALITY(t_pse, 4) */
                                           min(pse_execute.id) keep ( dense_rank first order by t_pse.pcs_priority desc
                                                                                       ,        pse_execute.timeframe_start
                                                                    )
                                    from   pdm_phases pse_prepare
                                    ,      pdm_phases pse_execute
                                    ,      table(i_nt_pse) t_pse
                                    where  t_pse.psn_type in ( pdm_constant.g_con_psn_flight_build
                                                             , pdm_constant.g_con_psn_reclaim
                                                             , pdm_constant.g_con_psn_ito
                                                             )
                                    and    pse_prepare.id              = t_pse.pse_id
                                    and    pse_prepare.type            = pdm_constant.g_con_tpe_type_prepare
                                    and    pse_execute.type            = pdm_constant.g_con_tpe_type_execute
                                    and    pse_execute.aty_id          = pse_prepare.aty_id
                                    and    pse_execute.timeframe_start > pse_prepare.timeframe_start
                                  )
         and    atn.ind_primary = cmn_constant.g_con_yesno_yes
         and    are.atn_id      = atn.id
         and    are.rte_id      = pdm_constant.g_con_rte_station
         ;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      pdm_attributes.add_attribute(pdm_constant.g_con_buildstationid_attr,io_it_attributes);

      
      for r_are in c_are
      loop

         
         io_it_attributes(pdm_constant.g_con_buildstationid_attr).value(io_it_attributes(pdm_constant.g_con_buildstationid_attr).value.count + 1) := r_are.id_cust;
      end loop;

      
      if not io_it_attributes(pdm_constant.g_con_buildstationid_attr).value.exists(1)
      then

         
         for r_are_execute_after_prepare in c_are_execute_after_prepare
         loop
   
            
            io_it_attributes(pdm_constant.g_con_buildstationid_attr).value(io_it_attributes(pdm_constant.g_con_buildstationid_attr).value.count + 1) := r_are_execute_after_prepare.id_cust;
         end loop;
      end if;

      
      if not io_it_attributes(pdm_constant.g_con_buildstationid_attr).value.exists(1)
      then

         
         
         io_it_attributes(pdm_constant.g_con_buildstationid_attr).value(1) := null;
      end if;

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end store_buildstationid;

   

















   procedure store_action
   ( i_rt_pae          in      pdm_packages%rowtype
   , i_active_pse      in      rt_active_pse
   , io_it_attributes  in out  pdm_attributes.attribute_coll
   , o_rt_atn             out  pdm_actions%rowtype
   )
   is
      l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.store_action';

      
      cursor c_atn
      is
      select atn.*
      from   pdm_actions   atn
      where  atn.pse_id      = i_active_pse.pse_id
      and    atn.ind_primary = cmn_constant.g_con_yesno_yes
      ;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      pdm_attributes.add_attribute_null(pdm_constant.g_con_action_attr,io_it_attributes);

      
      if     i_rt_pae.pte_id     =  pdm_constant.g_con_pte_id_physical
         and i_active_pse.pse_id is null
      then
      	
         viu_info.operator_info( i_ifo_nr            => viu_constant.c_ifo_notmatched
                               , i_calling_procedure => l_con_proc_name
                               , i_severity          => viu_info.severity_warning
                               , i_info_arguments    => i_rt_pae.id
                               );

      else 

         
         open  c_atn;
         fetch c_atn into o_rt_atn;
         close c_atn;
 
         if o_rt_atn.id is not null
         then
 
            
            io_it_attributes(pdm_constant.g_con_action_attr).value(1) := o_rt_atn.type;
         end if;
       end if;


      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         if c_atn%isopen
         then
            close c_atn;
         end if;

         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end store_action;

   















   procedure store_resources
   ( i_rt_atn          in      pdm_actions%rowtype
   , io_it_attributes  in out  pdm_attributes.attribute_coll
   )
   is
      l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.store_resources';

      l_it_are   it_are;
      l_path_cur pdm_attribute_definitions.path%type;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      pdm_attributes.add_attribute_null(pdm_constant.g_con_next_stationid_attr,io_it_attributes);
      
      pdm_attributes.add_attribute_null(pdm_constant.g_con_next_handlingarea_attr,io_it_attributes);

      
      if i_rt_atn.id is not null
      then

         
         select are.id_cust
         ,      are.rte_id
         bulk collect into l_it_are
         from   pdm_action_resources  are
         where  are.atn_id = i_rt_atn.id
         order by are.sequence  asc
         ;

         
         if l_it_are.count > 0
         then
   
            
            if l_it_are(1).rte_id = pdm_constant.g_con_rte_station
            then
               l_path_cur := pdm_constant.g_con_next_stationid_attr;
            elsif l_it_are(1).rte_id = pdm_constant.g_con_rte_handling_area
            then
               l_path_cur := pdm_constant.g_con_next_handlingarea_attr;
            end if;
   
            
            for i in 1..l_it_are.count
            loop
   
               
               if  i > 1
               and l_it_are(i).rte_id <> l_it_are(1).rte_id
               then
                  viu_info.raise_info ( i_ifo_nr            => viu_constant.c_ifo_resourcetypemixed
                                      , i_calling_procedure => l_con_proc_name
                                      , i_severity          => viu_info.c_severity_error
                                      );
               end if;
               io_it_attributes(l_path_cur).value(i) := l_it_are(i).id_cust;
            end loop;
   
         end if; 
      end if; 

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end store_resources;

   












   procedure store_resources_non_primary
   ( i_active_pse      in      rt_active_pse
   , io_it_attributes  in out  pdm_attributes.attribute_coll
   )
   is
      l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.store_resources_non_primary';

      l_it_are it_are;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      pdm_attributes.add_attribute_null(pdm_constant.g_con_storagestationid_attr,io_it_attributes);

      
      select are.id_cust
      ,      are.rte_id
      bulk collect into l_it_are
      from     pdm_actions          atn
      ,        pdm_action_resources are
      where    atn.pse_id      = i_active_pse.pse_id
      and      atn.ind_primary = cmn_constant.g_con_yesno_no
      and      are.atn_id      = atn.id
      and      are.rte_id      = pdm_constant.g_con_rte_station
      order by are.sequence asc
      ;

      for i in 1..l_it_are.count
      loop
         io_it_attributes(pdm_constant.g_con_storagestationid_attr).value(i) := l_it_are(i).id_cust;
      end loop;

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then

         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end store_resources_non_primary;

   























   procedure store_active_and_assigned
   ( i_nt_pse          in      pdm_nt_pse
   , io_it_attributes  in out  pdm_attributes.attribute_coll
   )
   is
      l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.store_active_and_assigned';
      
   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      pdm_attributes.add_attribute_null(pdm_constant.g_con_activephase_attr        ,io_it_attributes);  
      pdm_attributes.add_attribute_null(pdm_constant.g_con_activeactivity_attr     ,io_it_attributes);  
      pdm_attributes.add_attribute_null(pdm_constant.g_con_activeprocess_attr      ,io_it_attributes);  
      pdm_attributes.add_attribute_null(pdm_constant.g_con_activecpd_attr          ,io_it_attributes);  
      pdm_attributes.add_attribute_null(pdm_constant.g_con_activeppnidname_attr    ,io_it_attributes);  
      pdm_attributes.add_attribute_null(pdm_constant.g_con_activeppnidversion_attr ,io_it_attributes);  

      pdm_attributes.add_attribute_null(pdm_constant.g_con_assignedprocess_attr ,io_it_attributes);  
      pdm_attributes.add_attribute_null(pdm_constant.g_con_assignedcpd_attr     ,io_it_attributes);  

      
      if i_nt_pse.exists(1)
      then
         for idx_pse in 1..i_nt_pse.count
         loop
            if idx_pse = 1
            then

               
               io_it_attributes(pdm_constant.g_con_activephase_attr).value(1) := i_nt_pse(idx_pse).pse_type;

               
               io_it_attributes(pdm_constant.g_con_activeactivity_attr).value(1) := i_nt_pse(idx_pse).aty_id_cust;

               
               io_it_attributes(pdm_constant.g_con_activeprocess_attr).value(1) := i_nt_pse(idx_pse).pcs_type;

               
               io_it_attributes(pdm_constant.g_con_activecpd_attr).value(1) := i_nt_pse(idx_pse).psn_type;

               
               io_it_attributes(pdm_constant.g_con_activeppnidname_attr).value(1) := i_nt_pse(idx_pse).psn_id_cust;

               
               io_it_attributes(pdm_constant.g_con_activeppnidversion_attr).value(1) := i_nt_pse(idx_pse).psn_version;
            end if;

            
            io_it_attributes(pdm_constant.g_con_assignedprocess_attr).value(idx_pse) := i_nt_pse(idx_pse).pcs_type;
            
            io_it_attributes(pdm_constant.g_con_assignedcpd_attr).value(idx_pse) := i_nt_pse(idx_pse).psn_type;
         end loop;
      end if;

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end store_active_and_assigned;

   










































































   procedure store_match_attributes
   ( io_rt_pae                in out pdm_packages%rowtype
   , io_ind_update_package    in out boolean
   , i_pet_id                 in     pdm_package_events.id%type
   , i_rt_pte                 in     pdm_package_types%rowtype
   , i_tasktype               in     pdm_task_types.name%type
   , i_ind_deregistration     in     boolean
   , i_ind_packagedata_loaded in     boolean
   , i_active_pse             in     rt_active_pse
   , i_nt_pse                 in     pdm_nt_pse
   , i_nt_pdt_id              in     pdm_nt_pdt_id
   , o_ind_peo_impact         out    boolean
   )
   is
      l_con_proc_name      constant cmn_constant.st_proc_name           := g_con_package || '.store_match_attributes';

      l_systimestamp           cmn_constant.st_timestamp;
      l_it_attributes          pdm_attributes.attribute_coll;
      l_it_attributes_loaded   pdm_attributes.attribute_coll;
      l_rt_atn                 pdm_actions%rowtype;
   begin
      viu_module.enter_module( i_module => l_con_proc_name );
      l_systimestamp := cmn_common.default_timestamp;

      
      store_action(i_rt_pae         => io_rt_pae
                  ,i_active_pse     => i_active_pse
                  ,io_it_attributes => l_it_attributes
                  ,o_rt_atn         => l_rt_atn
                  );

      
      store_resources(i_rt_atn         => l_rt_atn
                     ,io_it_attributes => l_it_attributes
                     );

      
      store_resources_non_primary(i_active_pse     => i_active_pse
                                 ,io_it_attributes => l_it_attributes
                                 );

      
      store_active_and_assigned(i_nt_pse         => i_nt_pse
                               ,io_it_attributes => l_it_attributes
                               );

      
      store_timelimit(i_nt_pse         => i_nt_pse
                     ,io_it_attributes => l_it_attributes
                     );

      
      store_timelimit_act_phase(i_nt_pse         => i_nt_pse
                               ,io_it_attributes => l_it_attributes
                               );

      
      store_segregation_id(i_nt_pse         => i_nt_pse
                          ,i_nt_pdt_id      => i_nt_pdt_id
                          ,io_it_attributes => l_it_attributes
                          );

      
      store_handler_product( i_nt_pdt_id      => i_nt_pdt_id
                           , io_it_attributes => l_it_attributes
                           );

      
      store_final_exp_stn_ha(i_nt_pse         => i_nt_pse
                            ,io_it_attributes => l_it_attributes
                            );

      
      store_expected_build_station(i_nt_pse         => i_nt_pse
                                  ,io_it_attributes => l_it_attributes
                                  );

      
      store_expected_build_handlarea(i_nt_pse         => i_nt_pse
                                    ,io_it_attributes => l_it_attributes
                                    );

      
      store_buildstationid(i_nt_pse         => i_nt_pse
                          ,io_it_attributes => l_it_attributes
                          );

      
      store_process_parameters( i_pae_id         => io_rt_pae.id
                              , io_it_attributes => l_it_attributes
                              );

      
      pdm_taskreport.determine_package_ready( io_rt_pae             => io_rt_pae
                                            , io_ind_update_package => io_ind_update_package
                                            , i_tasktype            => i_tasktype
                                            , i_ind_loaded          => i_ind_packagedata_loaded
                                            );

      
      if i_rt_pte.name = pdm_constant.g_con_pte_physical
      then

         
         pdm_taskreport.situation_physical(i_rt_pae             => io_rt_pae
                                          ,i_ind_deregistration => i_ind_deregistration
                                          ,io_it_attributes     => l_it_attributes
                                          );
      end if;

      
      if i_rt_pte.id in (pdm_constant.g_con_pte_id_logical, pdm_constant.g_con_pte_id_member)
      then
         
         pdm_packagedata.situation_log_member( i_rt_pae            => io_rt_pae
                                             , i_packagedatastatus => null
                                             , io_it_attributes    => l_it_attributes
                                             );
      end if;

      
      
      
      
      pdm_attributes.store_attributes( i_pae_id                     => io_rt_pae.id
                                     , i_it_attributes              => l_it_attributes
                                     , i_pet_id                     => i_pet_id
                                     , i_event_time                 => null
                                     , i_ind_use_attribs_event_time => false
                                     );


      
      if i_ind_packagedata_loaded
      then

         
         pdm_taskreport.determine_loaded_segregation( i_rt_pae           => io_rt_pae
                                                    , i_ind_loaded       => i_ind_packagedata_loaded
                                                    , i_ind_unloaded     => false
                                                    , i_ind_registration => false
                                                    , io_it_attributes   => l_it_attributes_loaded
                                                    );
   
         pdm_attributes.store_attributes( i_pae_id                     => io_rt_pae.id
                                        , i_it_attributes              => l_it_attributes_loaded
                                        , i_pet_id                     => i_pet_id
                                        , i_event_time                 => null
                                        , i_ind_use_attribs_event_time => false
                                        );
      end if;

      
      pdm_attributes.store_derived_attributes( i_pae_id    => io_rt_pae.id
                                             , i_pet_id    => i_pet_id
                                             );
      
      
      
      
      
      
      o_ind_peo_impact := pdm_match.assign_package_to_eons
                                  ( i_rt_pae        => io_rt_pae
                                  , i_rt_pte        => i_rt_pte
                                  , i_pet_id        => i_pet_id
                                  , i_ind_full      => false
                                  );

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end store_match_attributes;


   


























   procedure hdl_package_when_new_psn
   ( io_rt_pae         in out  pdm_packages%rowtype
   , i_rt_pet          in      pdm_package_events%rowtype
   , i_pre_max_psn_id  in      pdm_process_specifications.id%type
   , i_pre_max_eon_id  in      pdm_evaluate_operations.id%type
   )
   is
      l_con_proc_name  constant  cmn_constant.st_proc_name := g_con_package || '.hdl_package_when_new_psn';

      cursor c_eon (b_max_eon_id  pdm_evaluate_operations.id%type)
      is
         select eon.id
         from   pdm_evaluate_operations eon
         where  eon.id > b_max_eon_id
         ;
      
      l_post_max_psn_id pdm_process_specifications.id%type;
      l_dml_amount      pls_integer;
      l_dummy           boolean;
      
   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      select max(psn.id)
      into   l_post_max_psn_id
      from   pdm_process_specifications psn
      ;
      
      
      if l_post_max_psn_id > i_pre_max_psn_id
      then
         
         viu_info.operator_info ( i_ifo_nr            => viu_constant.c_ifo_hdlpaenewpsn
                                , i_calling_procedure => l_con_proc_name
                                , i_severity          => viu_info.c_severity_notification
                                , i_info_arguments    => io_rt_pae.id
                                );

         
         l_dummy := pdm_pae_tapi_pck.pae_select_row_upd( i_pae_id => io_rt_pae.id
                                                       , o_rt_pae => io_rt_pae
                                                       );

         
         if io_rt_pae.status = pdm_constant.g_con_pae_status_obsolete
         then
            viu_info.operator_info( i_ifo_nr            => viu_constant.c_ifo_obsoletepackage
                                  , i_calling_procedure => l_con_proc_name
                                  , i_severity          => viu_info.severity_warning
                                  , i_info_arguments    => io_rt_pae.id
                                  );
            
         else

            
            if io_rt_pae.ind_match_hdl_psn = cmn_constant.g_con_yesno_no
            then

               
               io_rt_pae.ind_match_hdl_psn := cmn_constant.g_con_yesno_yes;
               l_dml_amount := pdm_pae_tapi_pck.pae_update_row( i_pae_id  => io_rt_pae.id
                                                              , io_rt_pae => io_rt_pae
                                                              );
            end if;
   
            
            
            for r_eon in c_eon (b_max_eon_id => i_pre_max_eon_id)
            loop
               assign_package_to_eon(i_pae_id => io_rt_pae.id
                                    ,i_pet_id => i_rt_pet.id
                                    ,i_eon_id => r_eon.id
                                    );
            end loop;
         end if; 

      end if;

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end hdl_package_when_new_psn;

   




















   procedure process_deferred_attributes
   ( i_rt_pae                  in      pdm_packages%rowtype
   , io_rt_pet                 in out  pdm_package_events%rowtype
   , i_rt_pte                  in      pdm_package_types%rowtype
   , i_it_attributes           in      pdm_attributes.attribute_coll
   , o_ind_peo_impact_attr_in     out  boolean
   )
   is
      l_con_proc_name  constant  cmn_constant.st_proc_name := g_con_package || '.process_deferred_attributes';

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      o_ind_peo_impact_attr_in := false;

      
      
      
      if i_it_attributes.count > 0
      then

         
         io_rt_pet.id                   := null;
         io_rt_pet.date_created         := cmn_common.default_timestamp;

         
         
         
         
         io_rt_pet.ind_created_by_match := cmn_constant.g_con_yesno_no;
         
         pdm_common.create_package_event(io_rt_pet                => io_rt_pet
                                        ,i_ind_check_existing_pet => false
                                        );

         
         pdm_attributes.store_attributes( i_pae_id                     => i_rt_pae.id
                                        , i_it_attributes              => i_it_attributes
                                        , i_pet_id                     => io_rt_pet.id
                                        , i_event_time                 => null
                                        , i_ind_use_attribs_event_time => false
                                        );

         
         pdm_attributes.store_derived_attributes( i_pae_id    => i_rt_pae.id
                                                , i_pet_id    => io_rt_pet.id
                                                );

         
         
         o_ind_peo_impact_attr_in := pdm_match.assign_package_to_eons
                                                  ( i_rt_pae        => i_rt_pae
                                                  , i_rt_pte        => i_rt_pte
                                                  , i_pet_id        => io_rt_pet.id
                                                  , i_ind_full      => false
                                                  );
      end if;

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end process_deferred_attributes;

   




















   procedure check_rematch_time
   ( io_rt_pae              in out  pdm_packages%rowtype
   , io_ind_update_package  in out  boolean
   , i_old_rematch_time     in      pdm_packages.rematch_time%type
   , i_ind_package_matched  in      boolean
   )
   is
      l_con_proc_name  constant  cmn_constant.st_proc_name := g_con_package || '.check_rematch_time';

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      if i_ind_package_matched
      then
         
         if     io_rt_pae.rematch_time is null
            and io_rt_pae.ind_match_time = cmn_constant.g_con_yesno_yes
         then

            
            io_rt_pae.ind_match_time := cmn_constant.g_con_yesno_no;
            io_ind_update_package    := true;
         end if;

         
         
         
         
         if     io_rt_pae.rematch_time is not null
            and io_rt_pae.ind_match_time = cmn_constant.g_con_yesno_no
            and io_rt_pae.ind_ready      = cmn_constant.g_con_yesno_no
         then

            
            io_rt_pae.ind_match_time := cmn_constant.g_con_yesno_yes;
            io_ind_update_package    := true;
         end if;
            
         
         if not io_ind_update_package
         then
            
            if    (i_old_rematch_time is null     and io_rt_pae.rematch_time is not null)
               or (i_old_rematch_time is not null and io_rt_pae.rematch_time is null)
               or (i_old_rematch_time != io_rt_pae.rematch_time)
            then
               io_ind_update_package := true;
            end if;
         end if;
         
      end if;

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end check_rematch_time;

   

















   procedure update_package
   ( io_rt_pae                   in out  pdm_packages%rowtype
   , io_rt_pet                   in out  pdm_package_events%rowtype
   , i_rt_pte                    in      pdm_package_types%rowtype
   , i_event_time                in      cmn_constant.st_timestamp
   , i_date_modified             in      cmn_constant.st_timestamp
   , i_ind_update_package        in      boolean
   , i_ind_force_update_package  in      boolean
   , i_ind_deregistration        in      boolean
   )
   is
      l_con_proc_name  constant  cmn_constant.st_proc_name := g_con_package || '.update_package';

      l_dml_amount               pls_integer;
   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      if i_ind_force_update_package
      or i_ind_update_package
      then

         
         if    i_rt_pte.name = pdm_constant.g_con_pte_physical
         then

            
            if i_ind_deregistration
            then
               pdm_taskreport.deregister_package( io_rt_pae   => io_rt_pae
                                                , i_rt_pet    => io_rt_pet
                                                , i_eventtime => i_event_time
                                                );
            end if;

            
            if i_ind_force_update_package
            then

               
               io_rt_pae.date_modified := i_date_modified;
            end if;
         end if;

         
         
         if     i_rt_pte.id in (pdm_constant.g_con_pte_id_logical, pdm_constant.g_con_pte_id_member)
            and i_ind_force_update_package
         then

            
            io_rt_pae.date_modified      := i_date_modified;

            
            io_rt_pae.date_last_event := i_event_time;
         end if;

         
         l_dml_amount := pdm_pae_tapi_pck.pae_update_row( i_pae_id  => io_rt_pae.id
                                                        , io_rt_pae => io_rt_pae
                                                        );

      end if;

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end update_package;

   











   function matched_previously ( i_pae_id in  pdm_packages.id%type )
   return
      boolean
   is
      l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.matched_previously';

      
      cursor c_pet_match_exists( b_pae_id pdm_packages.id%type)
      is
         select 1
         from   pdm_package_events pet
         where  pet.pae_id               = b_pae_id
         and    pet.ind_created_by_match = cmn_constant.g_con_yesno_yes
         and    rownum                   = 1
         ;

      r_pet_match_exists   c_pet_match_exists%rowtype;
      l_matched_previously boolean := false;

   begin
      viu_module.enter_module( i_module      => l_con_proc_name );

      
      open  c_pet_match_exists ( b_pae_id => i_pae_id );
      fetch c_pet_match_exists into r_pet_match_exists;
      l_matched_previously := c_pet_match_exists%found;
      close c_pet_match_exists;

      viu_module.leave_module( i_module => l_con_proc_name );

      return l_matched_previously;
      
   exception
      when others then
         if c_pet_match_exists%isopen
         then
            close c_pet_match_exists;
         end if;
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end matched_previously;

   



















   procedure match_fixed
   ( i_rt_pcs                     in      pdm_processes%rowtype
   , i_rt_pty                     in      cmn_parties%rowtype
   , i_ind_matched_previously_mtt in      boolean
   , io_rt_pae                    in out  pdm_packages%rowtype
   , io_ind_update_package        in out  boolean
   )
   is

      l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.match_fixed';

      
      
      cursor c_psn ( b_systimestamp  cmn_constant.st_timestamp
                   , b_psn_type      pdm_process_specifications.type%type
                   , b_psn_id_cust   pdm_process_specifications.id_cust%type
                   )
      is
        select psn.id
        ,      psn.esn_id
        from   pdm_process_specifications    psn
        where  psn.pns_id           = pdm_constant.g_con_pns_status_current
        and    psn.type             = b_psn_type
        and    psn.id_cust          = b_psn_id_cust
        and    psn.timeframe_start <= b_systimestamp
        and    psn.timeframe_end   >  b_systimestamp
        ;

      r_psn            c_psn%rowtype;
      l_rt_psn_fixed   pdm_process_specifications%rowtype;
      l_systimestamp   cmn_constant.st_timestamp;
      l_dummy          boolean;
      l_found          boolean;
      l_skip_check_psn boolean := false;
      l_ind_ready      boolean;

   begin
      viu_module.enter_module( i_module      => l_con_proc_name );

      
      if io_rt_pae.ind_ready = cmn_constant.g_con_yesno_yes
      then

         
         if     i_rt_pty.type = pdm_constant.g_con_mtt_party_type
            and not i_ind_matched_previously_mtt
         then

            
            l_skip_check_psn := true;
         end if;

         
         if not l_skip_check_psn
         then
            
            l_systimestamp := cmn_common.default_timestamp;
      
            
            
            l_dummy := pdm_psn_tapi_pck.psn_select_row( i_psn_id  => i_rt_pcs.psn_id
                                                      , o_rt_psn  => l_rt_psn_fixed
                                                      );
      
            
            
            open  c_psn ( b_systimestamp => l_systimestamp
                        , b_psn_type     => l_rt_psn_fixed.type
                        , b_psn_id_cust  => l_rt_psn_fixed.id_cust
                        );
            fetch c_psn into r_psn;
            l_found := c_psn%found;
            close c_psn;
      
            if l_found
            then
               
               if r_psn.esn_id is not null
               then
                  l_ind_ready := pdm_match.evaluate_expression( i_pae_id => io_rt_pae.id
                                                              , i_esn_id => r_psn.esn_id
                                                              );
               else
                  
                  l_ind_ready := true;
               end if;
      
            end if;
      
            if not l_found
            or not l_ind_ready
            then
               
               io_ind_update_package    := true;
               io_rt_pae.ind_ready      := cmn_constant.g_con_yesno_no;
               io_rt_pae.ind_match_time := cmn_constant.g_con_yesno_yes;
            end if;
         end if; 
      end if; 

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         if c_psn%isopen
         then
            close c_psn;
         end if;

         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );

   end match_fixed;

   



































































   procedure match
   ( io_rt_pae                    in out pdm_packages%rowtype
   , io_rt_pet                    in out pdm_package_events%rowtype
   , io_ind_update_package        in out boolean
   , io_ind_package_matched       in out boolean
   , i_rt_pte                     in     pdm_package_types%rowtype
   , i_rt_pty                     in     cmn_parties%rowtype
   , i_tasktype                   in     pdm_task_types.name%type
   , i_ind_deregistration         in     boolean
   , i_ind_packagedata_loaded     in     boolean
   , i_ind_matched_previously_mtt in     boolean
   , o_ind_peo_impact                out boolean
   )
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.match';

      
      cursor c_pcs_active
      ( b_pae_id pdm_packages.id%type
      )
      is
         select pcs.*
         from   pdm_processes       pcs
         ,      pdm_assigned_active aae
         where  aae.pcs_id     = pcs.id
         and    aae.pae_id     = b_pae_id
         and    aae.ind_active = cmn_constant.g_con_yesno_yes
         ;

      
      cursor c_aty_active
      ( b_pae_id pdm_packages.id%type
      )
      is
         select aty.*
         from   pdm_activities      aty
         ,      pdm_assigned_active aae
         where  aae.aty_id     = aty.id
         and    aae.pae_id     = b_pae_id
         and    aae.ind_active = cmn_constant.g_con_yesno_yes
         ;
      
      cursor c_pse_active
      ( b_pae_id pdm_packages.id%type
      )
      is
         select pse.*
         from   pdm_phases          pse
         ,      pdm_assigned_active aae
         where  aae.pse_id     = pse.id
         and    aae.pae_id     = b_pae_id
         and    aae.ind_active = cmn_constant.g_con_yesno_yes
         ;

      
      l_nt_psn             pdm_nt_psn     := pdm_nt_psn();
      l_nt_pdt_id          pdm_nt_pdt_id  := pdm_nt_pdt_id();
      l_nt_pdt_id_act      pdm_nt_pdt_id  := pdm_nt_pdt_id();
      l_nt_pcs             pdm_nt_pcs     := pdm_nt_pcs();
      l_nt_aty             pdm_nt_aty     := pdm_nt_aty();
      l_nt_pse             pdm_nt_pse     := pdm_nt_pse();
      l_rt_active_pse      rt_active_pse;
      l_rt_pcs             pdm_processes%rowtype;
      l_rt_aty             pdm_activities%rowtype;
      l_rt_pse             pdm_phases%rowtype;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      o_ind_peo_impact := false;

      
      io_rt_pae.rematch_time := null;

      
      open  c_pcs_active( b_pae_id => io_rt_pae.id );
      fetch c_pcs_active into l_rt_pcs;
      close c_pcs_active;

      
      open  c_aty_active( b_pae_id => io_rt_pae.id );
      fetch c_aty_active into l_rt_aty;
      close c_aty_active;

      
      open  c_pse_active( b_pae_id => io_rt_pae.id );
      fetch c_pse_active into l_rt_pse;
      close c_pse_active;

      
      match_fixed ( i_rt_pcs                     => l_rt_pcs
                  , i_rt_pty                     => i_rt_pty
                  , i_ind_matched_previously_mtt => i_ind_matched_previously_mtt
                  , io_rt_pae                    => io_rt_pae
                  , io_ind_update_package        => io_ind_update_package
                  );
      
      
      io_rt_pet.id                   := null;
      io_rt_pet.ind_created_by_match := cmn_constant.g_con_yesno_yes;
      io_rt_pet.date_created         := cmn_common.default_timestamp;
      
      pdm_common.create_package_event(io_rt_pet                => io_rt_pet
                                     ,i_ind_check_existing_pet => false
                                     );

      
      
      
      if    io_rt_pae.ind_ready = cmn_constant.g_con_yesno_no
         or (    i_rt_pty.type  = pdm_constant.g_con_mtt_party_type
             and not i_ind_matched_previously_mtt
            )
      then

         
         update pdm_assigned_active aae
         set    aae.pae_id = null
         where  aae.pae_id = io_rt_pae.id;

         
         
         determine_candidate_proc_spec( i_rt_pae => io_rt_pae
                                      , i_rt_pte => i_rt_pte
                                      , o_nt_psn => l_nt_psn
                                      );

         
         if l_nt_psn is not empty
         then
            
            determine_candidate_products( i_pae_id    => io_rt_pae.id
                                        , i_nt_psn    => l_nt_psn
                                        , o_nt_pdt_id => l_nt_pdt_id
                                        );

            
            determine_candidate_processes( i_pae_id    => io_rt_pae.id
                                         , i_nt_psn    => l_nt_psn
                                         , i_nt_pdt_id => l_nt_pdt_id
                                         , o_nt_pcs    => l_nt_pcs
                                         );

            
            if l_nt_pcs is not empty
            then
               
               determine_candidate_activities( i_nt_pcs    => l_nt_pcs
                                             , i_nt_pdt_id => l_nt_pdt_id
                                             , o_nt_aty    => l_nt_aty
                                             );

               
               if l_nt_aty is not empty
               then
                  
                  determine_candidate_phases( i_nt_aty        => l_nt_aty
                                            , i_rt_pcs_active => l_rt_pcs
                                            , i_rt_aty_active => l_rt_aty
                                            , i_rt_pse_active => l_rt_pse
                                            , o_nt_pse        => l_nt_pse
                                            , o_rematch_time  => io_rt_pae.rematch_time
                                            );

                  
                  if l_nt_pse is not empty
                  then
                     
                     determine_active_process( i_pae_id        => io_rt_pae.id
                                             , i_pet_id        => io_rt_pet.id
                                             , i_nt_pse        => l_nt_pse
                                             , i_nt_pdt_id     => l_nt_pdt_id
                                             , o_active_pse    => l_rt_active_pse
                                             , o_nt_pdt_id_act => l_nt_pdt_id_act
                                             );
                  end if; 
               end if; 
            end if; 
         end if; 

         
         
         
         store_match_attributes( io_rt_pae                => io_rt_pae
                               , io_ind_update_package    => io_ind_update_package
                               , i_pet_id                 => io_rt_pet.id
                               , i_rt_pte                 => i_rt_pte
                               , i_tasktype               => i_tasktype
                               , i_ind_deregistration     => i_ind_deregistration
                               , i_ind_packagedata_loaded => i_ind_packagedata_loaded
                               , i_active_pse             => l_rt_active_pse
                               , i_nt_pse                 => l_nt_pse
                               , i_nt_pdt_id              => l_nt_pdt_id_act
                               , o_ind_peo_impact         => o_ind_peo_impact
                               );

         
         io_ind_package_matched := true;

      end if;  

      
      if io_rt_pae.ind_match_hdl_psn = cmn_constant.g_con_yesno_yes
         or
         io_rt_pae.ind_match_hdl_time = cmn_constant.g_con_yesno_yes
      then

         
         io_rt_pae.ind_match_hdl_psn  := cmn_constant.g_con_yesno_no;
         io_rt_pae.ind_match_hdl_time := cmn_constant.g_con_yesno_no;
         io_ind_update_package        := true;
      end if;

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         if c_pcs_active%isopen
         then
            close c_pcs_active;
         end if;
         if c_aty_active%isopen
         then
            close c_aty_active;
         end if;
         if c_pse_active%isopen
         then
            close c_pse_active;
         end if;
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end match;

   






























   procedure rematch
   ( io_rt_pae                    in out pdm_packages%rowtype
   , io_rt_pet                    in out pdm_package_events%rowtype
   , io_ind_update_package        in out boolean
   , io_ind_package_matched       in out boolean
   , i_rt_pte                     in     pdm_package_types%rowtype
   , i_rt_pty                     in     cmn_parties%rowtype
   , i_tasktype                   in     pdm_task_types.name%type
   , i_ind_deregistration         in     boolean
   , i_ind_peo_impact_match       in     boolean
   , i_ind_peo_impact_attr_in     in     boolean
   , i_ind_packagedata_loaded     in     boolean
   , i_ind_matched_previously_mtt in     boolean
   )
   is
      l_con_proc_name  constant  cmn_constant.st_proc_name := g_con_package || '.rematch';

      l_ind_peo_impact_rematch boolean     := true;
      l_counter                pls_integer := 0;
      l_max_rematch            pls_integer;
      l_ind_ready_pre          pdm_packages.ind_ready%type;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      

      
      
      
      

      if  (   i_ind_peo_impact_match
          or i_ind_peo_impact_attr_in
          )
          and ( io_rt_pae.ind_ready = cmn_constant.g_con_yesno_no
                or (    i_rt_pty.type  = pdm_constant.g_con_mtt_party_type
                    and not i_ind_matched_previously_mtt
                   )
              )
      then
         l_max_rematch := cmn_common.get_parameter_value(i_prr_name => pdm_constant.g_con_max_rematch);

         l_ind_ready_pre := io_rt_pae.ind_ready;

         
         
         
         
         
         while     l_ind_peo_impact_rematch
               and ( io_rt_pae.ind_ready = cmn_constant.g_con_yesno_no
                     or (    i_rt_pty.type  = pdm_constant.g_con_mtt_party_type
                         and not i_ind_matched_previously_mtt
                        )
                   )
         loop
            
            l_counter := l_counter + 1;
            if l_counter > l_max_rematch
            then

               
               
               
               commit;
               viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_maxrematch
                                  , i_calling_procedure => l_con_proc_name
                                  , i_severity          => viu_info.c_severity_error
                                  , i_info_arguments    => io_rt_pae.id||'##'||to_char(l_max_rematch)
                                  );

            end if;

            
            match ( io_rt_pae                    => io_rt_pae
                  , io_rt_pet                    => io_rt_pet
                  , io_ind_update_package        => io_ind_update_package
                  , io_ind_package_matched       => io_ind_package_matched
                  , i_rt_pte                     => i_rt_pte
                  , i_rt_pty                     => i_rt_pty
                  , i_tasktype                   => i_tasktype
                  , i_ind_deregistration         => i_ind_deregistration
                  , i_ind_packagedata_loaded     => i_ind_packagedata_loaded
                  , i_ind_matched_previously_mtt => i_ind_matched_previously_mtt
                  , o_ind_peo_impact             => l_ind_peo_impact_rematch
                  );
         end loop;

         
         if     l_ind_ready_pre     = cmn_constant.g_con_yesno_no
            and io_rt_pae.ind_ready = cmn_constant.g_con_yesno_yes
         then
            viu_info.operator_info( i_ifo_nr            => viu_constant.c_ifo_rematchsetspaeready
                                  , i_calling_procedure => l_con_proc_name
                                  , i_severity          => viu_info.c_severity_warning
                                  , i_info_arguments    => to_char(io_rt_pae.id)
                                  );
         end if;

      end if; 

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end rematch;

   

























































































   procedure match_main
   ( io_rt_pet                      in out pdm_package_events%rowtype
   , io_rt_pae                      in out pdm_packages%rowtype
   , i_tasktype                     in     pdm_task_types.name%type
   , i_event_time                   in     cmn_constant.st_timestamp
   , i_ind_assign_package_to_eon    in     boolean
   , i_ind_force_match              in     boolean
   , i_ind_force_processstatus      in     boolean
   , i_ind_force_packageinfo        in     boolean
   , i_ind_force_taskinstruction    in     boolean
   , i_party_id_cust                in     cmn_parties.id_cust%type
   , i_instance_id                  in     varchar2
   , i_ind_chk_max_taskreport_error in     boolean
   , i_ind_force_update_package     in     boolean
   , i_ind_deregistration           in     boolean
   , i_it_attributes                in     pdm_attributes.attribute_coll
   , i_it_attributes_extracted      in     pdm_attributes.attribute_coll
   , i_ind_match_physical_pd        in     boolean
   , i_ind_packagedata_loaded       in     boolean
   , i_ind_match_member             in     boolean default false
   )
   is
      l_con_proc_name   constant  cmn_constant.st_proc_name := g_con_package || '.match_main';

      l_rt_pte                     pdm_package_types%rowtype;
      l_rt_pty                     cmn_parties%rowtype;
      l_systimestamp               cmn_constant.st_timestamp;
      l_old_rematch_time           pdm_packages.rematch_time%type;
      l_pre_max_eon_id             pdm_evaluate_operations.id%type;
      l_pre_max_psn_id             pdm_process_specifications.id%type;
      l_ind_peo_impact             boolean := false;
      l_ind_peo_impact_match       boolean := false;
      l_ind_peo_impact_attr_in     boolean := false;
      l_ind_package_matched        boolean := false;
      l_ind_update_package         boolean := false;
      l_ind_force_match            boolean := false;
      l_ind_matched_previously     boolean := false;
      l_dummy                      boolean;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      l_systimestamp := cmn_common.default_timestamp;

      
      
      

      select max(psn.id)
      into   l_pre_max_psn_id
      from   pdm_process_specifications psn
      ;

      select max(eon.id)
      into   l_pre_max_eon_id
      from   pdm_evaluate_operations eon
      ;

      
      
      
      l_ind_matched_previously := matched_previously ( i_pae_id => io_rt_pae.id );

      
      
      
      l_ind_force_match        :=    i_ind_force_match
                                  or not l_ind_matched_previously;

      
      
      

      
      l_dummy := pdm_pte_tapi_pck.pte_select_row( i_pte_id  => io_rt_pae.pte_id
                                                , o_rt_pte  => l_rt_pte
                                                );

      if i_ind_assign_package_to_eon
      then
         l_ind_peo_impact := pdm_match.assign_package_to_eons
                                  ( i_rt_pae     => io_rt_pae
                                  , i_rt_pte     => l_rt_pte
                                  , i_pet_id     => io_rt_pet.id
                                  , i_ind_full   => l_ind_force_match
                                  );
      end if;

      
      
      

      l_old_rematch_time := io_rt_pae.rematch_time;

      
      
      

      l_dummy := cmn_pty_tapi_pck.pty_select_row( i_pty_id => io_rt_pae.pty_id
                                                , o_rt_pty => l_rt_pty
                                                );

      
      
      

      if    l_ind_force_match
         or l_ind_peo_impact
         or i_ind_match_physical_pd
         or i_ind_packagedata_loaded
      then
         match ( io_rt_pae                    => io_rt_pae
               , io_rt_pet                    => io_rt_pet
               , io_ind_update_package        => l_ind_update_package
               , io_ind_package_matched       => l_ind_package_matched
               , i_rt_pte                     => l_rt_pte
               , i_rt_pty                     => l_rt_pty
               , i_tasktype                   => i_tasktype
               , i_ind_deregistration         => i_ind_deregistration
               , i_ind_packagedata_loaded     => i_ind_packagedata_loaded
               , i_ind_matched_previously_mtt => l_ind_matched_previously
               , o_ind_peo_impact             => l_ind_peo_impact_match
               );
      end if;

      
      
      

      process_deferred_attributes ( i_rt_pae                  => io_rt_pae
                                  , io_rt_pet                 => io_rt_pet
                                  , i_rt_pte                  => l_rt_pte
                                  , i_it_attributes           => i_it_attributes
                                  , o_ind_peo_impact_attr_in  => l_ind_peo_impact_attr_in
                                  );
      
      
      
      

      rematch ( io_rt_pae                    => io_rt_pae
              , io_rt_pet                    => io_rt_pet
              , io_ind_update_package        => l_ind_update_package
              , io_ind_package_matched       => l_ind_package_matched
              , i_rt_pte                     => l_rt_pte
              , i_rt_pty                     => l_rt_pty
              , i_tasktype                   => i_tasktype
              , i_ind_deregistration         => i_ind_deregistration
              , i_ind_peo_impact_match       => l_ind_peo_impact_match
              , i_ind_peo_impact_attr_in     => l_ind_peo_impact_attr_in
              , i_ind_packagedata_loaded     => i_ind_packagedata_loaded
              , i_ind_matched_previously_mtt => l_ind_matched_previously
              );

      
      
      

      check_rematch_time ( io_rt_pae              => io_rt_pae
                         , io_ind_update_package  => l_ind_update_package
                         , i_old_rematch_time     => l_old_rematch_time
                         , i_ind_package_matched  => l_ind_package_matched
                         );

      
      
      

      if not i_ind_match_member
      then
   
         
         
         

         pdm_processstatus.match_send_processstatus( i_rt_pae                      => io_rt_pae
                                                   , i_rt_pet                      => io_rt_pet
                                                   , i_rt_pte                      => l_rt_pte
                                                   , i_tasktype                    => i_tasktype
                                                   , i_ind_force_processstatus     => i_ind_force_processstatus
                                                   , i_ind_package_matched         => l_ind_package_matched
                                                   , i_event_time                  => l_systimestamp
                                                   );
         
         
         

         pdm_packageinfo.match_send_packageinfo ( io_rt_pae                  => io_rt_pae
                                                , io_rt_pet                  => io_rt_pet
                                                , i_rt_pte                   => l_rt_pte
                                                , i_tasktype                 => i_tasktype
                                                , i_event_time               => l_systimestamp
                                                , i_it_attributes_extracted  => i_it_attributes_extracted
                                                , i_ind_force_packageinfo    => i_ind_force_packageinfo
                                                );
   
         
         
         

         pdm_taskinstruction.match_send_taskinstruction( io_rt_pae                       => io_rt_pae
                                                       , io_rt_pet                       => io_rt_pet
                                                       , io_ind_update_package           => l_ind_update_package
                                                       , i_rt_pte                        => l_rt_pte
                                                       , i_rt_pty                        => l_rt_pty
                                                       , i_party_id_cust                 => i_party_id_cust
                                                       , i_instance_id                   => i_instance_id
                                                       , i_ind_force_taskinstruction     => i_ind_force_taskinstruction
                                                       , i_ind_chk_max_taskreport_error  => i_ind_chk_max_taskreport_error
                                                       , i_ind_deregistration            => i_ind_deregistration
                                                       );
      end if;

      
      
      

      update_package ( io_rt_pae                   => io_rt_pae
                     , io_rt_pet                   => io_rt_pet
                     , i_rt_pte                    => l_rt_pte
                     , i_event_time                => i_event_time
                     , i_date_modified             => l_systimestamp
                     , i_ind_update_package        => l_ind_update_package
                     , i_ind_force_update_package  => i_ind_force_update_package
                     , i_ind_deregistration        => i_ind_deregistration
                     );




      $if $$test_sleep_before_commit
      $then
          pdm_common.parallel_execution_sleep( i_rt_pae          => io_rt_pae
                                             , i_sleep_seconds   => 10
                                             , i_additional_data => 'test_sleep_before_commit'
                                             );
      $end




      
      
      

      if not i_ind_match_member
      then
         commit;
      end if;

      
      
      

      hdl_package_when_new_psn(io_rt_pae        => io_rt_pae
                              ,i_rt_pet         => io_rt_pet
                              ,i_pre_max_psn_id => l_pre_max_psn_id
                              ,i_pre_max_eon_id => l_pre_max_eon_id
                              );




      $if $$test_sleep_after_commit
      $then
          pdm_common.parallel_execution_sleep( i_rt_pae          => io_rt_pae
                                             , i_sleep_seconds   => 10
                                             , i_additional_data => 'test_sleep_after_commit'
                                             );
      $end




      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end match_main;

   























   function determine_packages_for_esn ( i_esn_id   in pdm_expressions.id%type )
   return pdm_nt_pae_id
   is

      l_con_proc_name  constant cmn_constant.st_proc_name := g_con_package || '.determine_packages_for_esn';

      
      cursor c_esn_sub
      (b_id  pdm_expressions.id%type)
      is
         select esn.id
         from   pdm_expressions  esn
         where  esn.esn_id = b_id
         ;

      
      
      
      
      
      
      
      
      
      
      
      cursor c_packages (b_esn_id pdm_expressions.id%type)
      is
         select pae.id
         from   pdm_expressions  esn
         ,      pdm_v_peo_active peo
         ,      pdm_packages     pae
         where  esn.id           = b_esn_id
         and    esn.eon_id       = peo.eon_id
         and    pae.id           = peo.pae_id
         and    pae.ind_match    = cmn_constant.g_con_yesno_yes
         and    pae.pte_id       = pdm_constant.g_con_pte_id_physical
         and    pae.status       = pdm_constant.g_con_pae_status_open
         union all
         select pae.id
         from   pdm_expressions          esn
         ,      pdm_v_peo_active         peo
         ,      pdm_packages             pae
         ,      pdm_tpl_monitoring_types tle
         where  esn.id                   = b_esn_id
         and    esn.eon_id               = peo.eon_id
         and    pae.id                   = peo.pae_id
         and    pae.ind_match            = cmn_constant.g_con_yesno_yes
         and    esn.tle_id               = tle.id
         and    tle.id_cust              = pdm_constant.g_con_tle_production
         and    pae.pte_id               = pdm_constant.g_con_pte_id_physical
         and    pae.status               = pdm_constant.g_con_pae_status_closed
         union all
         select pae.id
         from   pdm_expressions          esn
         ,      pdm_v_peo_active         peo
         ,      pdm_tpl_monitoring_types tle
         ,      pdm_packages             pae
         where  esn.id                   =  b_esn_id
         and    esn.eon_id               =  peo.eon_id
         and    pae.id                   =  peo.pae_id
         and    pae.ind_match            =  cmn_constant.g_con_yesno_yes
         and    esn.tle_id               =  tle.id
         and    tle.id_cust              =  pdm_constant.g_con_tle_production
         and    pae.pte_id               in ( pdm_constant.g_con_pte_id_logical
                                            , pdm_constant.g_con_pte_id_member
                                            )
         ;

      l_rt_esn_sub            c_esn_sub%rowtype;
      l_rt_esn                pdm_expressions%rowtype;
      l_dummy                 boolean;
      l_continue              boolean := true;
      
      l_nt_paes_esn      pdm_nt_pae_id;
      l_nt_pae_result    pdm_nt_pae_id := pdm_nt_pae_id();
      l_nt_temp          pdm_nt_pae_id;

   begin
      viu_module.enter_module( i_module      => l_con_proc_name );

      
      l_dummy := pdm_esn_tapi_pck.esn_select_row( i_esn_id => i_esn_id
                                                , o_rt_esn => l_rt_esn
                                                );
      
      if    l_rt_esn.operator_type = pdm_constant.g_con_esn_operator_type_and
         or l_rt_esn.operator_type = pdm_constant.g_con_esn_operator_type_or
      then

         open  c_esn_sub ( b_id => l_rt_esn.id );
         
         loop
            fetch c_esn_sub into l_rt_esn_sub;
            exit when c_esn_sub%notfound
                   or not l_continue;

            
            l_nt_paes_esn := determine_packages_for_esn( i_esn_id   => l_rt_esn_sub.id );

            
            if    l_rt_esn.operator_type = pdm_constant.g_con_esn_operator_type_and
            and   l_nt_paes_esn.count = 0
            then
               
               l_nt_pae_result := l_nt_paes_esn;
               l_continue := false;

            elsif l_rt_esn.operator_type = pdm_constant.g_con_esn_operator_type_and
            and   l_nt_paes_esn.count > 0
            then

               if l_nt_pae_result.count = 0
               then
                  l_nt_pae_result := l_nt_paes_esn;
               else
                  select * bulk collect into l_nt_temp from (
                     select column_value from table(l_nt_pae_result)
                     intersect
                     select column_value from table(l_nt_paes_esn)
                  );
                  l_nt_pae_result := l_nt_temp;
                  l_continue := l_nt_pae_result.count > 0;
               end if;

               

            elsif l_rt_esn.operator_type = pdm_constant.g_con_esn_operator_type_or
            then
               
               select * bulk collect into l_nt_temp from (
                  select column_value from table(l_nt_pae_result)
                  union
                  select column_value from table(l_nt_paes_esn)
               );
               l_nt_pae_result := l_nt_temp;
            end if;
         end loop;
         
         close c_esn_sub;

      
      elsif l_rt_esn.operator_type is null
      then

         open  c_packages (b_esn_id => i_esn_id);
         fetch c_packages bulk collect into l_nt_pae_result;
         close c_packages;
            
      end if; 

      viu_module.leave_module( i_module      => l_con_proc_name );

      return l_nt_pae_result;

   exception
      when others
      then
         if c_esn_sub%isopen
         then
            close c_esn_sub;
         end if;
         if c_packages%isopen
         then
            close c_packages;
         end if;

         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );

   end determine_packages_for_esn;

   












   procedure determine_packages
   ( i_esn_id   in     pdm_expressions.id%type
   , i_tle_id   in     pdm_tpl_monitoring_types.id%type
   , io_nt_paes in out pdm_nt_pae_id
   )
   is
      l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.determine_packages';

      
      
      
      
      
      
      
      
      

      cursor c_packages (b_tle_id_cust pdm_tpl_monitoring_types.id_cust%type)
      is
         select  pae.id
         from    pdm_packages  pae
         where   pae.ind_match = cmn_constant.g_con_yesno_yes
         and     pae.pte_id    = pdm_constant.g_con_pte_id_physical
         and     pae.status    = pdm_constant.g_con_pae_status_open
         union all
         select  pae.id
         from    pdm_packages  pae
         where   pae.ind_match =  cmn_constant.g_con_yesno_yes
         and     pae.pte_id    in ( pdm_constant.g_con_pte_id_logical
                                  , pdm_constant.g_con_pte_id_member
                                  )
         and     b_tle_id_cust =  pdm_constant.g_con_tle_production
         union all
         select  pae.id
         from    pdm_packages  pae
         where   pae.ind_match = cmn_constant.g_con_yesno_yes
         and     pae.pte_id    = pdm_constant.g_con_pte_id_physical
         and     pae.status    = pdm_constant.g_con_pae_status_closed
         and     b_tle_id_cust = pdm_constant.g_con_tle_production
         ;

      l_result   boolean;
      l_nt_temp1 pdm_nt_pae_id;
      l_nt_temp2 pdm_nt_pae_id;
      l_rt_tle   pdm_tpl_monitoring_types%rowtype;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );
      
      
      if i_esn_id is not null
      then

         
         l_nt_temp1 := determine_packages_for_esn( i_esn_id   => i_esn_id );

      else

         
         l_result := pdm_tle_tapi_pck.tle_select_row( i_tle_id => i_tle_id
                                                    , o_rt_tle => l_rt_tle
                                                    );

         open  c_packages(b_tle_id_cust => l_rt_tle.id_cust);
         fetch c_packages bulk collect into l_nt_temp1;
         close c_packages;

      end if; 

      
      select *
      bulk collect into l_nt_temp2
      from ( select column_value from table(io_nt_paes)
             union
             select column_value from table(l_nt_temp1)
           );
      io_nt_paes := l_nt_temp2;

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         if c_packages%isopen
         then
            close c_packages;
         end if;

         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end determine_packages;

   












   procedure prepare_package_evaluation ( i_rt_pae   in pdm_packages%rowtype
                                        , i_evt_id   in pdm_events.id%type
                                        , i_ind_psn  in boolean
                                        , i_ind_time in boolean
                                        )
   is
      l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.prepare_package_evaluation';

      l_rt_pae             pdm_packages%rowtype;
      l_rt_pet             pdm_package_events%rowtype;
      l_nr_rows_updated    number;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      l_rt_pae := i_rt_pae;

      
      if (
             i_ind_psn
         and l_rt_pae.ind_match = cmn_constant.g_con_yesno_yes
         )
         or
         (
             i_ind_time
         and l_rt_pae.ind_match_time = cmn_constant.g_con_yesno_yes
         and (
             cmn_common.default_timestamp >= l_rt_pae.rematch_time
             or
             l_rt_pae.rematch_time        is null
             )
         )
      then

         
         l_rt_pet                     := null;
         l_rt_pet.evt_id              := i_evt_id;
         l_rt_pet.pae_id              := l_rt_pae.id;
         l_rt_pet.date_created        := cmn_common.default_timestamp;

         pdm_common.create_package_event( io_rt_pet                => l_rt_pet
                                        , i_ind_check_existing_pet => false
                                        );

         
         if i_ind_psn
         then
            
            
            l_rt_pae.ind_match_hdl_psn  := cmn_constant.g_con_yesno_yes;
         else

            
            l_rt_pae.ind_match_hdl_time := cmn_constant.g_con_yesno_yes;
         end if;
         
         l_nr_rows_updated  := pdm_pae_tapi_pck.pae_update_row( i_pae_id  => l_rt_pae.id
                                                              , io_rt_pae => l_rt_pae
                                                              );

      end if; 

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end prepare_package_evaluation;

   
















   procedure prepare_packages_evaluation
      ( i_evt_id   in pdm_events.id%type
      , i_nt_paes  in pdm_nt_pae_id
      , i_ind_psn  in boolean
      , i_ind_time in boolean
      )
   is
      l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.prepare_packages_evaluation';

      
      cursor c_pae (b_nt_pae in pdm_nt_pae_id )
      is
         select   /*+ CARDINALITY(nt_pae, 1000) */
                  pae.id
         ,        pae.pd_id
         from     pdm_packages        pae
         ,        table(b_nt_pae)     nt_pae
         where    nt_pae.column_value = pae.id
         order by pd_id nulls last
         ;

      l_rt_pae             pdm_packages%rowtype;
      l_rt_pet             pdm_package_events%rowtype;
      l_pae_pd_id_old      pdm_packages.pd_id%type;
      l_nr_rows_updated    number;
      l_dummy              boolean;
      l_found              boolean;
      l_pas_lock_completed boolean;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      for r_pae in c_pae (b_nt_pae => i_nt_paes)
      loop

         
         l_dummy := pdm_pae_tapi_pck.pae_select_row( i_pae_id => r_pae.id
                                                   , o_rt_pae => l_rt_pae
                                                   );

         
         
         if (       l_pae_pd_id_old <> l_rt_pae.pd_id
            or (    l_pae_pd_id_old is not null
            	  and l_rt_pae.pd_id  is     null
               )
            )
         then
         
            
            
            commit;
         end if;
   
         
         l_pas_lock_completed := false;
         while not l_pas_lock_completed
         loop
   
            
            if pdm_common.pd_id_differs( i_pae_pd_id_new => l_rt_pae.pd_id
                                       , i_pae_pd_id_old => l_pae_pd_id_old
                                       )
            then
   
               
               pdm_common.lock_package_access( i_pd_id  => l_rt_pae.pd_id
                                             , i_evt_id => i_evt_id
                                             );

               
               l_pae_pd_id_old := l_rt_pae.pd_id;
               
            end if;
   
   
            
            l_found := pdm_pae_tapi_pck.pae_select_row_upd( i_pae_id => l_rt_pae.id
                                                          , o_rt_pae => l_rt_pae
                                                          );
                             
            
            if pdm_common.pd_id_differs( i_pae_pd_id_new => l_rt_pae.pd_id
                                       , i_pae_pd_id_old => l_pae_pd_id_old
                                       )
            then

               
               commit;
           
               
            
            else
            
               
               l_pas_lock_completed := true;

               prepare_package_evaluation ( i_rt_pae   => l_rt_pae
                                          , i_evt_id   => i_evt_id
                                          , i_ind_psn  => i_ind_psn
                                          , i_ind_time => i_ind_time
                                          );

            end if; 
   
         end loop; 

         
         if l_rt_pae.pd_id is null
         then
         
            
            commit;

            
            l_pae_pd_id_old := null;

         end if;

      end loop; 

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end prepare_packages_evaluation;

   













   procedure hdl_psn_tasks ( i_aet_id   in pdm_events.aet_id%type )
   is
      l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.hdl_psn_tasks';

      

      
      
      
      
      
      

      cursor c_psn
      is
         select psn.id      psn_id
         ,      psn.tpn_id  psn_tpn_id
         ,      psn.type    psn_type
         ,      psn.id_cust psn_id_cust
         ,      ptk.id      ptk_id
         from   pdm_v_ptk_active           ptk
         ,      pdm_process_specifications psn
         where  psn.id   =  ptk.psn_id
         and    not exists ( select etk1.id
                             from   pdm_process_spec_ev_operations pon
                             ,      pdm_v_etk_active               etk1
                             where  pon.psn_id = psn.id
                             and    pon.eon_id = etk1.eon_id
                           )
         and    not exists ( select etk2.id
                             from   pdm_v_etk_active_cpd etk2
                           )
         ;

      l_rt_psn          pdm_process_specifications%rowtype;
      l_rt_ptk          pdm_process_spec_tasks%rowtype;
      l_rt_pgp          pdm_process_spec_groups%rowtype;
      l_rt_evt          pdm_events%rowtype;
      l_dummy           boolean;
      l_nt_paes         pdm_nt_pae_id := pdm_nt_pae_id();
      l_nt_temp1        pdm_nt_pae_id;
      l_nr_rows_updated number;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      for r_psn in c_psn
      loop

         
         if l_rt_evt.id is null
         then
   
            
            l_rt_evt.date_created := cmn_common.default_timestamp;
            l_rt_evt.aet_id       := i_aet_id;
            pdm_evt_tapi_pck.evt_insert_row( io_rt_evt => l_rt_evt );
         end if;

         
         l_dummy := pdm_pgp_tapi_pck.pgp_select_row_uk1( i_pgp_tpn_id  => r_psn.psn_tpn_id
                                                       , i_pgp_type    => r_psn.psn_type
                                                       , i_pgp_id_cust => r_psn.psn_id_cust
                                                       , o_rt_pgp      => l_rt_pgp
                                                       );
         pdm_pgp_tapi_pck.pgp_lock_row( i_pgp_id => l_rt_pgp.id );

         
         
         l_dummy := pdm_psn_tapi_pck.psn_select_row( i_psn_id => r_psn.psn_id
                                                   , o_rt_psn => l_rt_psn
                                                   );

         
         commit;

         
         if l_rt_psn.pns_id = pdm_constant.g_con_pns_status_current
         then

            
            determine_packages( i_esn_id   => l_rt_psn.esn_id
                              , i_tle_id   => l_rt_psn.tle_id
                              , io_nt_paes => l_nt_paes
                              );

         
         elsif l_rt_psn.pns_id = pdm_constant.g_con_pns_status_obsolete
         then

            
            
            select *
            bulk collect into l_nt_temp1
            from (select column_value
                  from   table(l_nt_paes)
                  union
                  select pae.id
                  from   pdm_assigned_active      aae
                  ,      pdm_v_pae_match pae
                  where  aae.psn_id = l_rt_psn.id
                  and    aae.pae_id = pae.id
               );
            l_nt_paes := l_nt_temp1;

         end if;

         
         l_dummy := pdm_ptk_tapi_pck.ptk_select_row( i_ptk_id => r_psn.ptk_id
                                                   , o_rt_ptk => l_rt_ptk
                                                   );

         
         l_rt_ptk.deactivated_by_evt_id := l_rt_evt.id;
         l_rt_ptk.deactivated_date      := cmn_common.default_timestamp;
         l_nr_rows_updated := pdm_ptk_tapi_pck.ptk_update_row( i_ptk_id  => l_rt_ptk.id
                                                             , io_rt_ptk => l_rt_ptk
                                                             );

         
         commit;
      end loop; 

      
      prepare_packages_evaluation( i_evt_id   => l_rt_evt.id
                                 , i_nt_paes  => l_nt_paes
                                 , i_ind_psn  => true
                                 , i_ind_time => false
                                 );

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end hdl_psn_tasks;

   













   procedure hdl_eon_task ( i_aet_id        in     pdm_events.aet_id%type
                          , i_etk_id        in     pdm_evaluate_operation_tasks.id%type
                          , i_eon_id        in     pdm_evaluate_operations.id%type
                          , i_eon_agp_id    in     pdm_attribute_groups.id%type
                          , i_ote_operation in     pdm_operation_types.operation%type
                          , io_rt_evt       in out pdm_events%rowtype
                          )
   is
      l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.hdl_eon_task';

      l_rt_etk          pdm_evaluate_operation_tasks%rowtype;
      l_dummy           boolean;
      l_nr_rows_updated number;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );
         
      
      if io_rt_evt.id is null
      then

         
         io_rt_evt.date_created := cmn_common.default_timestamp;
         io_rt_evt.aet_id       := i_aet_id;
         pdm_evt_tapi_pck.evt_insert_row( io_rt_evt => io_rt_evt );
      end if;

      
      assign_eon_to_packages
         ( i_evt_id        => io_rt_evt.id
         , i_eon_id        => i_eon_id
         , i_eon_agp_id    => i_eon_agp_id
         , i_ote_operation => i_ote_operation
         );

      
      l_dummy := pdm_etk_tapi_pck.etk_select_row( i_etk_id => i_etk_id
                                                , o_rt_etk => l_rt_etk
                                                );

      
      l_rt_etk.deactivated_by_evt_id := io_rt_evt.id;
      l_rt_etk.deactivated_date      := cmn_common.default_timestamp;
      l_nr_rows_updated := pdm_etk_tapi_pck.etk_update_row( i_etk_id  => l_rt_etk.id
                                                          , io_rt_etk => l_rt_etk
                                                          );

      commit;

      
      acl_application_control.check_halt_signal;

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );

   end hdl_eon_task;

   












   procedure hdl_eon_tasks ( i_aet_id in pdm_events.aet_id%type )
   is
      l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.hdl_eon_tasks';

      
      
      
      
      cursor c_eon_high_priority
      is
         select distinct(eon.id) eon_id
         ,      eon.agp_id       eon_agp_id
         ,      ote.operation    ote_operation
         ,      etk1.id          etk_id
         from   pdm_v_etk_active               etk1
         ,      pdm_process_spec_ev_operations pon
         ,      pdm_process_specifications     psn
         ,      pdm_v_eon_in_use               eon
         ,      pdm_operation_types            ote
         where  pon.psn_id =  psn.id
         and    pon.eon_id =  etk1.eon_id
         and    psn.pns_id <> pdm_constant.g_con_pns_status_future
         and    eon.id     =  etk1.eon_id
         and    ote.id     =  eon.ote_id
         union all
         select distinct(eon.id) eon_id
         ,      eon.agp_id       eon_agp_id
         ,      ote.operation    ote_operation
         ,      etk2.id          etk_id
         from   pdm_v_etk_active_cpd etk2
         ,      pdm_v_eon_in_use     eon
         ,      pdm_operation_types  ote
         where  eon.id =  etk2.eon_id
         and    ote.id =  eon.ote_id
         ;

      
      
      cursor c_eon_low_priority
      is
         select distinct(eon.id) eon_id
         ,      eon.agp_id       eon_agp_id
         ,      ote.operation    ote_operation
         ,      etk.id           etk_id
         from   pdm_v_etk_active               etk
         ,      pdm_process_spec_ev_operations pon
         ,      pdm_process_specifications     psn
         ,      pdm_v_eon_in_use               eon
         ,      pdm_operation_types            ote
         where  pon.psn_id =  psn.id
         and    pon.eon_id =  etk.eon_id
         and    psn.pns_id =  pdm_constant.g_con_pns_status_future
         and    eon.id     =  etk.eon_id
         and    ote.id     =  eon.ote_id
         ;

      l_rt_evt               pdm_events%rowtype;
      l_ptr_hdl_etk_low_prio cmn_parameter_values.value%type;
      l_count                number:=0;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      for r_eon_high_priority in c_eon_high_priority
      loop
         hdl_eon_task ( i_aet_id        => i_aet_id
                      , i_etk_id        => r_eon_high_priority.etk_id
                      , i_eon_id        => r_eon_high_priority.eon_id
                      , i_eon_agp_id    => r_eon_high_priority.eon_agp_id
                      , i_ote_operation => r_eon_high_priority.ote_operation
                      , io_rt_evt       => l_rt_evt
                      );
      end loop;
      
      
      l_ptr_hdl_etk_low_prio :=
         cmn_common.get_parameter_value ( i_prr_name => pdm_constant.g_con_ptr_hdl_etk_low_prio );

      
      for r_eon_low_priority in c_eon_low_priority
      loop
         hdl_eon_task ( i_aet_id        => i_aet_id
                      , i_etk_id        => r_eon_low_priority.etk_id
                      , i_eon_id        => r_eon_low_priority.eon_id
                      , i_eon_agp_id    => r_eon_low_priority.eon_agp_id
                      , i_ote_operation => r_eon_low_priority.ote_operation
                      , io_rt_evt       => l_rt_evt
                      );
                      
         
         
         
         
         l_count := l_count + 1;
         exit when l_count >= l_ptr_hdl_etk_low_prio;
      end loop;

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );

   end hdl_eon_tasks;

   














   procedure main_hdl_ptk ( i_aet_id    in pdm_events.aet_id%type
                          , i_timestamp in cmn_constant.st_timestamp
                          )
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.main_hdl_ptk';

      l_alertname_dummy varchar2( 40 );
      l_message         varchar2( 40 );
      l_alertstatus     varchar2( 40 );
      l_timeout         number;
      l_restart_period  number;

   begin
      viu_module.enter_module( i_module      => l_con_proc_name );

      
      l_alertstatus := pdm_constant.g_con_timeout_occurred;

      
      l_restart_period := cmn_common.get_parameter_value(i_prr_name => pdm_constant.g_con_ptr_restart_hdl_ptk);

      
      l_timeout := pdm_common.interval_to_seconds ( cmn_common.varchar_to_interval ( 'd00h00m00s01f000' ));

      dbms_alert.register(pdm_common.build_signal(pdm_constant.g_con_alrt_psn_task));

      
      

      
      
      
      
      

      
      
      
      
      
      
      while     l_alertstatus = pdm_constant.g_con_timeout_occurred
            and (    l_restart_period is null
            	    or (cmn_common.default_timestamp - i_timestamp ) < numtodsinterval( l_restart_period, 'SECOND' )
            	  )
      loop
         begin

            
            hdl_psn_tasks ( i_aet_id   => i_aet_id );

            dbms_alert.waitany( name    => l_alertname_dummy
                              , message => l_message
                              , status  => l_alertstatus
                              , timeout => l_timeout
                              );

            commit;

         exception
            when viu_constant.exc_aclprocessstopped
            then
               viu_info.raise_info( i_calling_procedure  => l_con_proc_name );

            when others
            then
               rollback;
               viu_info.handle_info;

               
               if l_alertstatus = pdm_constant.g_con_timeout_occurred
               then
                  dbms_alert.waitany( name    => l_alertname_dummy
                                    , message => l_message
                                    , status  => l_alertstatus
                                    , timeout => pdm_constant.g_con_job_wait_delay
                                    );
               end if;
         end;
      end loop;

      dbms_alert.removeall;
      viu_module.leave_module( i_module      => l_con_proc_name );
   exception
      when viu_constant.exc_aclprocessstopped
      then
         dbms_alert.removeall;
         commit;

         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure  => l_con_proc_name );
      when others
      then
         rollback;
         dbms_alert.removeall;

         viu_module.leave_module( i_module      => l_con_proc_name
                                , i_debug_info  => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure  => l_con_proc_name );
   end main_hdl_ptk;

   

















   procedure main_hdl_psn
      (i_timestamp           in   cmn_constant.st_timestamp
      ,i_aet_id              in   pdm_events.aet_id%type
      )
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.main_hdl_psn';

      
      cursor c_psn_future (b_timestamp cmn_constant.st_timestamp)
      is
         select psn.id      psn_id
         ,      psn.tpn_id  psn_tpn_id
         ,      psn.type    psn_type
         ,      psn.id_cust psn_id_cust
         from   pdm_process_specifications psn
         where  psn.pns_id          =  pdm_constant.g_con_pns_status_future
         and    psn.timeframe_start <= b_timestamp
         and    psn.timeframe_end   >  b_timestamp
         ;

      
      cursor c_psn_expired (b_timestamp cmn_constant.st_timestamp)
      is
         select psn.id      psn_id
         ,      psn.tpn_id  psn_tpn_id
         ,      psn.type    psn_type
         ,      psn.id_cust psn_id_cust
         from   pdm_process_specifications psn
         where  psn.pns_id  in ( pdm_constant.g_con_pns_status_current
                               , pdm_constant.g_con_pns_status_future
                               )
         and    b_timestamp >= psn.timeframe_end
         ;

      l_rt_evt          pdm_events%rowtype;
      l_evt_created     boolean := false;
      l_rt_psn          pdm_process_specifications%rowtype;
      l_rt_pgp          pdm_process_spec_groups%rowtype;
      l_dummy           boolean;
      l_nr_rows_updated number;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      for r_psn_future in c_psn_future (b_timestamp => i_timestamp)
      loop

         
         if not l_evt_created
         then
            
            l_rt_evt.date_created := cmn_common.default_timestamp;
            l_rt_evt.aet_id       := i_aet_id;
            pdm_evt_tapi_pck.evt_insert_row( io_rt_evt => l_rt_evt );

            
            l_evt_created := true;
         end if;

         
         l_dummy := pdm_pgp_tapi_pck.pgp_select_row_uk1( i_pgp_tpn_id  => r_psn_future.psn_tpn_id
                                                       , i_pgp_type    => r_psn_future.psn_type
                                                       , i_pgp_id_cust => r_psn_future.psn_id_cust
                                                       , o_rt_pgp      => l_rt_pgp
                                                       );
         pdm_pgp_tapi_pck.pgp_lock_row( i_pgp_id => l_rt_pgp.id );

         
         
         l_dummy := pdm_psn_tapi_pck.psn_select_row( i_psn_id => r_psn_future.psn_id
                                                   , o_rt_psn => l_rt_psn
                                                   );

         
         if  l_rt_psn.pns_id =  pdm_constant.g_con_pns_status_future
         then

            
            l_rt_psn.pns_id          := pdm_constant.g_con_pns_status_current;
            l_rt_psn.evt_id_modified := l_rt_evt.id;
            l_nr_rows_updated := pdm_psn_tapi_pck.psn_update_row( i_psn_id  => l_rt_psn.id
                                                                , io_rt_psn => l_rt_psn
                                                                );
                                                                
            
            pdm_processplan.create_psn_task( i_evt_id   => l_rt_evt.id
                                           , i_rt_psn   => l_rt_psn
                                           );
                                    
         end if;

         
         commit;

      end loop; 

      
      for r_psn_expired in c_psn_expired (b_timestamp => i_timestamp)
      loop

         
         if not l_evt_created
         then
            
            l_rt_evt.date_created := cmn_common.default_timestamp;
            l_rt_evt.aet_id       := i_aet_id;
            pdm_evt_tapi_pck.evt_insert_row( io_rt_evt => l_rt_evt );

            
            l_evt_created := true;
         end if;

         
         l_dummy := pdm_pgp_tapi_pck.pgp_select_row_uk1( i_pgp_tpn_id  => r_psn_expired.psn_tpn_id
                                                       , i_pgp_type    => r_psn_expired.psn_type
                                                       , i_pgp_id_cust => r_psn_expired.psn_id_cust
                                                       , o_rt_pgp      => l_rt_pgp
                                                       );
         pdm_pgp_tapi_pck.pgp_lock_row( i_pgp_id => l_rt_pgp.id );

         
         
         l_dummy := pdm_psn_tapi_pck.psn_select_row( i_psn_id => r_psn_expired.psn_id
                                                   , o_rt_psn => l_rt_psn
                                                   );

         
         if l_rt_psn.pns_id in ( pdm_constant.g_con_pns_status_current
                               , pdm_constant.g_con_pns_status_future
                               )
         then

            
            l_rt_psn.pns_id          := pdm_constant.g_con_pns_status_obsolete;
            l_rt_psn.evt_id_modified := l_rt_evt.id;
            l_nr_rows_updated := pdm_psn_tapi_pck.psn_update_row( i_psn_id  => l_rt_psn.id
                                                                , io_rt_psn => l_rt_psn
                                                                );
                                                                
         end if;

         
         commit;

      end loop; 

      viu_module.leave_module( i_module => l_con_proc_name );

      
      commit;

   exception
      when viu_constant.exc_aclprocessstopped
      then

         
         rollback;
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );

      when others
      then

         
         rollback;
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
         viu_info.handle_info;
   end main_hdl_psn;

   





















   procedure hdl_pae_time
      ( i_aet_id    in pdm_events.aet_id%type
      , i_priority  in varchar2
      )
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.hdl_pae_time';

      
      cursor c_pae_prio_high
      is
         select pae.id pae_id
         from   pdm_v_pae_match_time_prio_high pae
         ;

      
      cursor c_pae_prio_low
      is
         select pae.id pae_id
         from   pdm_v_pae_match_time_prio_low pae
         ;

      l_nt_pae              pdm_nt_pae_id := pdm_nt_pae_id();
      l_systimestamp        cmn_constant.st_timestamp;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      l_systimestamp := cmn_common.default_timestamp;

      
      if i_priority = pdm_constant.g_con_prio_high
      then

         
         open  c_pae_prio_high;
         fetch c_pae_prio_high bulk collect into l_nt_pae;
         close c_pae_prio_high;
         
      
      elsif i_priority = pdm_constant.g_con_prio_low
      then
      
         
         open  c_pae_prio_low;
         fetch c_pae_prio_low bulk collect into l_nt_pae;
         close c_pae_prio_low;
         
      end if;

      
      match_packages ( i_aet_id    => i_aet_id
                     , i_nt_pae    => l_nt_pae
                     , i_timestamp => l_systimestamp
                     );

      viu_module.leave_module( i_module => l_con_proc_name );

   exception
      when others
      then
         if c_pae_prio_high%isopen
         then
            close c_pae_prio_high;
         end if;
         if c_pae_prio_low%isopen
         then
            close c_pae_prio_low;
         end if;

         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end hdl_pae_time;

   













   procedure main_hdl_pae_time
      ( i_aet_id    in pdm_events.aet_id%type
      , i_priority  in varchar2
      , i_timestamp in cmn_constant.st_timestamp
      )
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.main_hdl_pae_time';

      l_alertname_dummy varchar2( 40 );
      l_message         varchar2( 40 );
      l_alertstatus     varchar2( 40 );
      l_timeout         number;
      l_restart_period  number;

   begin
      viu_module.enter_module( i_module      => l_con_proc_name );

      
      l_alertstatus := pdm_constant.g_con_timeout_occurred;

      
      l_restart_period := cmn_common.get_parameter_value(i_prr_name => pdm_constant.g_con_ptr_restart_hdl_pae_time);

      
      l_timeout := pdm_common.interval_to_seconds ( cmn_common.varchar_to_interval ( 'd00h00m00s01f000' ));

      
      if i_priority = pdm_constant.g_con_prio_high
      then
         dbms_alert.register(pdm_common.build_signal(pdm_constant.g_con_alrt_pae_time_prio_high));
      else
         dbms_alert.register(pdm_common.build_signal(pdm_constant.g_con_alrt_pae_time_prio_low));
      end if;

      
      

      
      
      
      
      

      
      
      
      
      
      
      while     l_alertstatus = pdm_constant.g_con_timeout_occurred
            and (    l_restart_period is null
            	    or (cmn_common.default_timestamp - i_timestamp ) < numtodsinterval( l_restart_period, 'SECOND' )
            	  )
      loop
         begin

            
            hdl_pae_time ( i_aet_id    => i_aet_id
                         , i_priority  => i_priority
                         );

            dbms_alert.waitany( name    => l_alertname_dummy
                              , message => l_message
                              , status  => l_alertstatus
                              , timeout => l_timeout
                              );

            commit;

         exception
            when viu_constant.exc_aclprocessstopped
            then
               viu_info.raise_info( i_calling_procedure  => l_con_proc_name );

            when others
            then
               rollback;
               viu_info.handle_info;

               
               if l_alertstatus = pdm_constant.g_con_timeout_occurred
               then
                  dbms_alert.waitany( name    => l_alertname_dummy
                                    , message => l_message
                                    , status  => l_alertstatus
                                    , timeout => pdm_constant.g_con_job_wait_delay
                                    );
               end if;
         end;
      end loop;

      dbms_alert.removeall;
      viu_module.leave_module( i_module      => l_con_proc_name );
   exception
      when viu_constant.exc_aclprocessstopped
      then
         dbms_alert.removeall;
         commit;

         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure  => l_con_proc_name );
      when others
      then
         rollback;
         dbms_alert.removeall;

         viu_module.leave_module( i_module      => l_con_proc_name
                                , i_debug_info  => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure  => l_con_proc_name );
   end main_hdl_pae_time;

   












   procedure hdl_time ( i_aet_id    in pdm_events.aet_id%type )
   is
      l_con_proc_name   constant cmn_constant.st_proc_name := g_con_package || '.hdl_time';

      
      cursor c_packages ( b_timestamp in cmn_constant.st_timestamp )
      is
         select  pae.id
         from    pdm_packages  pae
         where   pae.ind_match_time     = cmn_constant.g_con_yesno_yes
         and     pae.ind_match_hdl_time = cmn_constant.g_con_yesno_no
         and     (
                 b_timestamp      >= pae.rematch_time
                 or
                 pae.rematch_time is null
                 )
         ;

      l_nt_paes                   pdm_nt_pae_id := pdm_nt_pae_id();
      l_rt_evt                    pdm_events%rowtype;
      l_systimestamp              cmn_constant.st_timestamp;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      l_systimestamp := cmn_common.default_timestamp;

      
      open  c_packages ( b_timestamp => l_systimestamp );
      fetch c_packages bulk collect into l_nt_paes;
      close c_packages;

      
      if l_nt_paes.count > 0
      then

         
         l_rt_evt.date_created := l_systimestamp;
         l_rt_evt.aet_id       := i_aet_id;
         pdm_evt_tapi_pck.evt_insert_row( io_rt_evt => l_rt_evt );

         commit;

         
         prepare_packages_evaluation( i_evt_id   => l_rt_evt.id
                                    , i_nt_paes  => l_nt_paes
                                    , i_ind_psn  => false
                                    , i_ind_time => true
                                    );

      end if;

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         if c_packages%isopen
         then
            close c_packages;
         end if;

         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end hdl_time;

   













   procedure main_hdl_time ( i_aet_id    in pdm_events.aet_id%type
                           , i_timestamp in cmn_constant.st_timestamp
                           )
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.main_hdl_time';

      l_alertname_dummy varchar2( 40 );
      l_message         varchar2( 40 );
      l_alertstatus     varchar2( 40 );
      l_timeout         number;
      l_restart_period  number;

   begin
      viu_module.enter_module( i_module      => l_con_proc_name );

      
      l_alertstatus := pdm_constant.g_con_timeout_occurred;

      
      l_restart_period := cmn_common.get_parameter_value(i_prr_name => pdm_constant.g_con_ptr_restart_hdl_time);

      
      l_timeout := pdm_common.interval_to_seconds ( cmn_common.varchar_to_interval ( 'd00h00m00s01f000' ));

      dbms_alert.register(pdm_common.build_signal(pdm_constant.g_con_alrt_time));

      
      

      
      
      
      
      

      
      
      
      
      
      
      while     l_alertstatus = pdm_constant.g_con_timeout_occurred
            and (    l_restart_period is null
            	    or (cmn_common.default_timestamp - i_timestamp ) < numtodsinterval( l_restart_period, 'SECOND' )
            	  )
      loop
         begin

            
            hdl_time ( i_aet_id    => i_aet_id );

            dbms_alert.waitany( name    => l_alertname_dummy
                              , message => l_message
                              , status  => l_alertstatus
                              , timeout => l_timeout
                              );

            commit;

         exception
            when viu_constant.exc_aclprocessstopped
            then
               viu_info.raise_info( i_calling_procedure  => l_con_proc_name );

            when others
            then
               rollback;
               viu_info.handle_info;

               
               if l_alertstatus = pdm_constant.g_con_timeout_occurred
               then
                  dbms_alert.waitany( name    => l_alertname_dummy
                                    , message => l_message
                                    , status  => l_alertstatus
                                    , timeout => pdm_constant.g_con_job_wait_delay
                                    );
               end if;
         end;
      end loop;

      dbms_alert.removeall;
      viu_module.leave_module( i_module      => l_con_proc_name );
   exception
      when viu_constant.exc_aclprocessstopped
      then
         dbms_alert.removeall;
         commit;

         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure  => l_con_proc_name );
      when others
      then
         rollback;
         dbms_alert.removeall;

         viu_module.leave_module( i_module      => l_con_proc_name
                                , i_debug_info  => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure  => l_con_proc_name );
   end main_hdl_time;

   


















   procedure hdl_pae_psn ( i_aet_id   in pdm_events.aet_id%type
                         , i_priority in varchar2
                         )
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.hdl_pae_psn';


      
      cursor c_pae_prio_high (b_max_rownum number)
      is
         select pae.id pae_id
         from   pdm_v_pae_match_psn_prio_high pae
         where  rownum <= b_max_rownum
         ;

      
      cursor c_pae_prio_low (b_max_rownum number)
      is
         select pae.id pae_id
         from   pdm_v_pae_match_psn_prio_low pae
         where  rownum <= b_max_rownum
         ;

      l_nt_pae                    pdm_nt_pae_id := pdm_nt_pae_id();
      l_systimestamp              cmn_constant.st_timestamp;
      l_max_rownum                number;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      l_systimestamp := cmn_common.default_timestamp;

      
      l_max_rownum := cmn_common.get_parameter_value(i_prr_name => pdm_constant.g_con_ptr_maxrow_hdl_pae_psn);

      
      if i_priority = pdm_constant.g_con_prio_high
      then

         
         open  c_pae_prio_high (b_max_rownum => l_max_rownum);
         fetch c_pae_prio_high bulk collect into l_nt_pae;
         close c_pae_prio_high;
      
      else
      
         
         open  c_pae_prio_low (b_max_rownum => l_max_rownum);
         fetch c_pae_prio_low bulk collect into l_nt_pae;
         close c_pae_prio_low;
         
      end if;

      
      match_packages ( i_aet_id    => i_aet_id
                     , i_nt_pae    => l_nt_pae
                     , i_timestamp => l_systimestamp
                     );

      viu_module.leave_module( i_module => l_con_proc_name );

   exception
      when others
      then
         if c_pae_prio_high%isopen
         then
            close c_pae_prio_high;
         end if;
         if c_pae_prio_low%isopen
         then
            close c_pae_prio_low;
         end if;

         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end hdl_pae_psn;

   













   procedure main_hdl_pae_psn
      ( i_aet_id    in pdm_events.aet_id%type
      , i_priority  in varchar2
      , i_timestamp in cmn_constant.st_timestamp
      )
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.main_hdl_pae_psn';

      l_alertname_dummy varchar2( 40 );
      l_message         varchar2( 40 );
      l_alertstatus     varchar2( 40 );
      l_timeout         number;
      l_restart_period  number;

   begin
      viu_module.enter_module( i_module      => l_con_proc_name );

      
      l_alertstatus := pdm_constant.g_con_timeout_occurred;

      
      l_restart_period := cmn_common.get_parameter_value(i_prr_name => pdm_constant.g_con_ptr_restart_hdl_pae_psn);

      
      l_timeout := pdm_common.interval_to_seconds ( cmn_common.varchar_to_interval ( 'd00h00m00s01f000' ));

      
      if i_priority = pdm_constant.g_con_prio_high
      then
         dbms_alert.register(pdm_common.build_signal(pdm_constant.g_con_alrt_pae_psn_prio_high));
      else
         dbms_alert.register(pdm_common.build_signal(pdm_constant.g_con_alrt_pae_psn_prio_low));
      end if;

      
      

      
      
      
      
      

      
      
      
      
      
      
      while     l_alertstatus = pdm_constant.g_con_timeout_occurred
            and (    l_restart_period is null
            	    or (cmn_common.default_timestamp - i_timestamp ) < numtodsinterval( l_restart_period, 'SECOND' )
            	  )
      loop
         begin
            hdl_pae_psn ( i_aet_id   => i_aet_id
                        , i_priority => i_priority
                        );

            dbms_alert.waitany( name    => l_alertname_dummy
                              , message => l_message
                              , status  => l_alertstatus
                              , timeout => l_timeout
                              );

            commit;

         exception
            when viu_constant.exc_aclprocessstopped
            then
               viu_info.raise_info( i_calling_procedure  => l_con_proc_name );

            when others
            then
               rollback;
               viu_info.handle_info;

               
               if l_alertstatus = pdm_constant.g_con_timeout_occurred
               then
                  dbms_alert.waitany( name    => l_alertname_dummy
                                    , message => l_message
                                    , status  => l_alertstatus
                                    , timeout => pdm_constant.g_con_job_wait_delay
                                    );
               end if;
         end;
      end loop;

      dbms_alert.removeall;
      viu_module.leave_module( i_module      => l_con_proc_name );
   exception
      when viu_constant.exc_aclprocessstopped
      then
         dbms_alert.removeall;
         commit;

         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure  => l_con_proc_name );
      when others
      then
         rollback;
         dbms_alert.removeall;

         viu_module.leave_module( i_module      => l_con_proc_name
                                , i_debug_info  => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure  => l_con_proc_name );
   end main_hdl_pae_psn;

   












   procedure main_hdl_etk ( i_aet_id    in pdm_events.aet_id%type
                          , i_timestamp in cmn_constant.st_timestamp
                          )
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.main_hdl_etk';

      l_alertname_dummy varchar2( 40 );
      l_message         varchar2( 40 );
      l_alertstatus     varchar2( 40 );
      l_timeout         number;
      l_restart_period  number;

   begin
      viu_module.enter_module( i_module      => l_con_proc_name );

      
      l_alertstatus := pdm_constant.g_con_timeout_occurred;

      
      l_restart_period := cmn_common.get_parameter_value(i_prr_name => pdm_constant.g_con_ptr_restart_hdl_etk);

      
      l_timeout := pdm_common.interval_to_seconds ( cmn_common.varchar_to_interval ( 'd00h00m00s01f000' ));

      dbms_alert.register(pdm_common.build_signal(pdm_constant.g_con_alrt_etk));

      
      

      
      
      
      
      

      
      
      
      
      
      
      while     l_alertstatus = pdm_constant.g_con_timeout_occurred
            and (    l_restart_period is null
            	    or (cmn_common.default_timestamp - i_timestamp ) < numtodsinterval( l_restart_period, 'SECOND' )
            	  )
      loop
         begin

            
            hdl_eon_tasks ( i_aet_id => i_aet_id );

            dbms_alert.waitany( name    => l_alertname_dummy
                              , message => l_message
                              , status  => l_alertstatus
                              , timeout => l_timeout
                              );

            commit;

         exception
            when viu_constant.exc_aclprocessstopped
            then
               viu_info.raise_info( i_calling_procedure  => l_con_proc_name );

            when others
            then
               rollback;
               viu_info.handle_info;

               
               if l_alertstatus = pdm_constant.g_con_timeout_occurred
               then
                  dbms_alert.waitany( name    => l_alertname_dummy
                                    , message => l_message
                                    , status  => l_alertstatus
                                    , timeout => pdm_constant.g_con_job_wait_delay
                                    );
               end if;
         end;
      end loop;

      dbms_alert.removeall;
      viu_module.leave_module( i_module      => l_con_proc_name );
   exception
      when viu_constant.exc_aclprocessstopped
      then
         dbms_alert.removeall;
         commit;

         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure  => l_con_proc_name );
      when others
      then
         rollback;
         dbms_alert.removeall;

         viu_module.leave_module( i_module      => l_con_proc_name
                                , i_debug_info  => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure  => l_con_proc_name );
   end main_hdl_etk;

begin
   init;
end pdm_match;
/