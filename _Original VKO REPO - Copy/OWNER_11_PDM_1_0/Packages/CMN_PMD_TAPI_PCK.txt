create or replace PACKAGE cmn_pmd_tapi_pck
IS
-- Table API package for table cmn_party_msg_definitions
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:40:57)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'CMN_PMD_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'CMN_PARTY_MSG_DEFINITIONS';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION pmd_select_row( i_pmd_ID   IN  cmn_party_msg_definitions.ID%TYPE
                       , o_rt_pmd   OUT cmn_party_msg_definitions%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION pmd_select_row_uk( i_pmd_IMD_ID   IN  cmn_party_msg_definitions.IMD_ID%TYPE
                          , i_pmd_PTY_ID   IN  cmn_party_msg_definitions.PTY_ID%TYPE
                          , i_pmd_DIRECTION   IN  cmn_party_msg_definitions.DIRECTION%TYPE
                          , o_rt_pmd  OUT cmn_party_msg_definitions%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION pmd_select_row_upd( i_pmd_ID   IN  cmn_party_msg_definitions.ID%TYPE
                           , o_rt_pmd   OUT cmn_party_msg_definitions%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION pmd_select_row_upd_uk( i_pmd_IMD_ID   IN  cmn_party_msg_definitions.IMD_ID%TYPE
                              , i_pmd_PTY_ID   IN  cmn_party_msg_definitions.PTY_ID%TYPE
                              , i_pmd_DIRECTION   IN  cmn_party_msg_definitions.DIRECTION%TYPE
                              , o_rt_pmd  OUT cmn_party_msg_definitions%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE pmd_lock_row( i_pmd_ID   IN  cmn_party_msg_definitions.ID%TYPE )
;

PROCEDURE pmd_lock_row_nowait( i_pmd_ID   IN  cmn_party_msg_definitions.ID%TYPE )
;

FUNCTION pmd_seq1_nextval
RETURN cmn_party_msg_definitions.ID%TYPE
;


END cmn_pmd_tapi_pck;
/




package body cmn_pmd_tapi_pck
is




function pmd_select_row( i_pmd_id   in  cmn_party_msg_definitions.id%type
                       , o_rt_pmd   out cmn_party_msg_definitions%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pmd_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_pmd ( i_pmd_id   in  cmn_party_msg_definitions.id%type )
      is 
           select *
             from cmn_party_msg_definitions pmd
            where pmd.id = i_pmd_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_pmd( i_pmd_id => i_pmd_id );
         fetch c_pmd into o_rt_pmd;
         l_found := c_pmd%found;
         close c_pmd;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_pmd%isopen
         then
            close c_pmd;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pmd_select_row;

function pmd_select_row_uk( i_pmd_imd_id   in  cmn_party_msg_definitions.imd_id%type
                          , i_pmd_pty_id   in  cmn_party_msg_definitions.pty_id%type
                          , i_pmd_direction   in  cmn_party_msg_definitions.direction%type
                          , o_rt_pmd  out cmn_party_msg_definitions%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pmd_select_row_uk';
   l_found                boolean      := false;
begin
   declare
      cursor c_pmd ( i_pmd_imd_id   in  cmn_party_msg_definitions.imd_id%type
                   , i_pmd_pty_id   in  cmn_party_msg_definitions.pty_id%type
                   , i_pmd_direction   in  cmn_party_msg_definitions.direction%type )
      is
         select *
           from cmn_party_msg_definitions pmd
          where pmd.imd_id = i_pmd_imd_id 
            and pmd.pty_id = i_pmd_pty_id 
            and pmd.direction = i_pmd_direction ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_pmd(i_pmd_imd_id => i_pmd_imd_id, i_pmd_pty_id => i_pmd_pty_id, i_pmd_direction => i_pmd_direction);
         fetch c_pmd into o_rt_pmd;
         l_found := c_pmd%found;
         close c_pmd;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_pmd%isopen
      then
         close c_pmd;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pmd_select_row_uk;

function pmd_select_row_upd( i_pmd_id   in  cmn_party_msg_definitions.id%type
                           , o_rt_pmd   out cmn_party_msg_definitions%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pmd_select_row_upd';
   l_found                boolean      := false;

   cursor c_pmd ( i_pmd_id   in  cmn_party_msg_definitions.id%type )
   is
           select *
             from cmn_party_msg_definitions pmd
            where pmd.id = i_pmd_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_pmd( i_pmd_id => i_pmd_id );
   fetch c_pmd into o_rt_pmd;
   l_found := c_pmd%found;
   close c_pmd;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_pmd%isopen
      then
         close c_pmd;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end pmd_select_row_upd;

function pmd_select_row_upd_uk( i_pmd_imd_id   in  cmn_party_msg_definitions.imd_id%type
                              , i_pmd_pty_id   in  cmn_party_msg_definitions.pty_id%type
                              , i_pmd_direction   in  cmn_party_msg_definitions.direction%type
                              , o_rt_pmd  out cmn_party_msg_definitions%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pmd_select_row_upd_uk';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := pmd_select_row_uk( i_pmd_imd_id   =>  i_pmd_imd_id
                                  , i_pmd_pty_id   =>  i_pmd_pty_id
                                  , i_pmd_direction   =>  i_pmd_direction
                                  , o_rt_pmd => o_rt_pmd );
      if l_found
      then
         
         l_found := pmd_select_row_upd( i_pmd_id => o_rt_pmd.id
                                      , o_rt_pmd => o_rt_pmd );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end pmd_select_row_upd_uk;

procedure pmd_lock_row( i_pmd_id   in  cmn_party_msg_definitions.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pmd_lock_row';
begin
  declare
     cursor c_pmd ( i_pmd_id   in  cmn_party_msg_definitions.id%type )
     is
             select ''
               from cmn_party_msg_definitions pmd
              where pmd.id = i_pmd_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_pmd_id is not null
         then
            begin
                
                pmd_lock_row_nowait( i_pmd_id => i_pmd_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_pmd( i_pmd_id => i_pmd_id );
                  close c_pmd;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_pmd%isopen
         then
            close c_pmd;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end pmd_lock_row;

procedure pmd_lock_row_nowait( i_pmd_id   in  cmn_party_msg_definitions.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pmd_lock_row_nowait';
begin
   declare
      cursor c_pmd ( i_pmd_id   in  cmn_party_msg_definitions.id%type )
      is
              select ''
                from cmn_party_msg_definitions pmd
               where pmd.id = i_pmd_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_pmd_id is not null
         then
            
            open c_pmd( i_pmd_id => i_pmd_id );

            close c_pmd;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_pmd%isopen
        then
           close c_pmd;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_pmd_id||'"' );
   end;                                                          
end pmd_lock_row_nowait;

function pmd_seq1_nextval
return cmn_party_msg_definitions.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pmd_seq1_nextval';
   l_pmd_id  cmn_party_msg_definitions.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select cmn_pmd_seq1.nextval 
           into l_pmd_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_pmd_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pmd_seq1_nextval;


end cmn_pmd_tapi_pck;
/