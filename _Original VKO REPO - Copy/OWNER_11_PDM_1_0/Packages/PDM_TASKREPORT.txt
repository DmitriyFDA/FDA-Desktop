create or replace PACKAGE pdm_taskreport
IS
   PROCEDURE hdl_taskreport( i_message IN XMLTYPE );

   PROCEDURE resume_pending_task( i_rt_pta              IN     pdm_pending_tasks%ROWTYPE
                                , i_it_attributes       IN     pdm_attributes.attribute_coll
                                , i_evt_id              IN     pdm_events.id%TYPE
                                , i_timestamp           IN     cmn_constant.st_timestamp
                                , i_event_time          IN     cmn_constant.st_timestamp
                                , i_rt_imd_packageinfo  IN     cmn_ifc_msg_definitions%ROWTYPE
                                , i_packageinfo_pd_id   IN     pdm_packages.pd_id%TYPE
                                , i_packageinfo_lpc_ext IN     pdm_packages.place_of_birth%TYPE
                                );

   PROCEDURE main_monitor_timeout ( i_aet_id    IN acl_application_elements.id%TYPE
                                  , i_timestamp IN cmn_constant.st_timestamp
                                  );

   PROCEDURE deregister_package( io_rt_pae   IN OUT pdm_packages%ROWTYPE
                               , i_rt_pet    IN     pdm_package_events%ROWTYPE
                               , i_eventtime IN     cmn_constant.st_timestamp
                               );

   PROCEDURE situation_physical( i_rt_pae             IN     pdm_packages%ROWTYPE
                               , i_ind_deregistration IN     BOOLEAN
                               , io_it_attributes     IN OUT pdm_attributes.attribute_coll
                               );

   PROCEDURE determine_package_ready( io_rt_pae             IN OUT pdm_packages%ROWTYPE
                                    , io_ind_update_package IN OUT BOOLEAN
                                    , i_tasktype            IN     pdm_task_types.name%TYPE
                                    , i_ind_loaded          IN     BOOLEAN
                                    );

   PROCEDURE determine_package_not_ready( io_rt_pae             IN OUT pdm_packages%ROWTYPE
                                        , io_ind_update_package IN OUT BOOLEAN
                                        , i_party_type          IN     cmn_parties.type%TYPE
                                        , i_tasktype            IN     pdm_task_types.name%TYPE
                                        , i_deregistration      IN     BOOLEAN
                                        , i_ind_physical_event  IN     BOOLEAN
                                        , i_it_attributes       IN     pdm_attributes.attribute_coll
                                        );

   PROCEDURE determine_loaded_segregation( i_rt_pae           IN     pdm_packages%ROWTYPE
                                         , i_ind_loaded       IN     BOOLEAN
                                         , i_ind_unloaded     IN     BOOLEAN
                                         , i_ind_registration IN     BOOLEAN
                                         , io_it_attributes   IN OUT pdm_attributes.attribute_coll
                                         );

   PROCEDURE select_one_active_package_link( i_rt_pae IN     pdm_packages%ROWTYPE
                                           , o_rt_plk    OUT pdm_package_links%ROWTYPE
                                           );
END pdm_taskreport;
/





package body pdm_taskreport
is
   




   g_con_package                constant varchar2( 19 ) := 'pdm_taskreport';

   
   g_con_fty_registration       constant varchar2( 20 ) := 'Registration';
   g_con_fty_identification     constant varchar2( 20 ) := 'Identification';
   g_con_fty_reporting          constant varchar2( 20 ) := 'Reporting';
   g_con_fty_deregistration     constant varchar2( 20 ) := 'Deregistration';

   g_con_deregisterreason_eot   constant varchar2( 20 ) := 'END-OF-TRACING';
   g_con_deregisterreason_ho    constant varchar2( 20 ) := 'HAND-OVER';
   g_con_routeresult_arrived    constant varchar2( 20 ) := 'ARRIVED';
   g_con_tte_reclaim            constant varchar2( 20 ) := 'Reclaim';

   
   procedure init
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.' || 'Init';
   begin
      viu_module.enter_module( i_module      => l_con_proc_name );
      
      viu_module.leave_module( i_module      => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
   end;

   











   procedure log_pae_event( i_event_time in  cmn_constant.st_timestamp
                          , i_evt_id     in  pdm_events.id%type
                          , i_rt_pae     in  pdm_packages%rowtype
                          , o_rt_pet     out pdm_package_events%rowtype
                          )
   is
      l_con_proc_name   constant cmn_constant.st_proc_name
                                                        := g_con_package || '.log_pae_event';

   begin
      viu_module.enter_module( i_module          => l_con_proc_name );

      

      o_rt_pet.id           := null;
      o_rt_pet.evt_id       := i_evt_id;
      o_rt_pet.pae_id       := i_rt_pae.id;
      o_rt_pet.date_created := i_event_time;

      pdm_common.create_package_event( io_rt_pet                => o_rt_pet
                                     , i_ind_check_existing_pet => false
                                     );

      viu_module.leave_module( i_module      => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
   end log_pae_event;

   















   procedure resume_previous_schema( io_rt_pae    in out pdm_packages%rowtype
                                   , i_pet_id     in     pdm_package_events.id%type
                                   , i_rt_stn     in     pdm_stations%rowtype
                                   , i_event_time in     cmn_constant.st_timestamp
                                   )
   is
      l_con_proc_name constant varchar2( 61 ) := g_con_package || '.resume_previous_schema';

      type rct_origin_pae is ref cursor;

      c_origin_pae    rct_origin_pae;
      l_origin_pae_id pdm_packages.id%type;
      l_query         varchar2(4000);
      l_schema_prefix cmn_parameter_values.value%type;
      l_found         boolean;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      if i_rt_stn.type = pdm_constant.g_con_stn_type_store
      then

         begin

            
            
            l_schema_prefix := cmn_common.get_parameter_value( i_prr_name => pdm_constant.g_con_ptr_previous_schema ) || '.';
            l_query :=
                    ' SELECT   pae.id                                                      '
                  ||' FROM     '||l_schema_prefix||'pdm_packages      pae                  '
                  ||' ,                             pdm_package_types pte                  '
                  ||' WHERE    pae.pd_id  = :pd_id                                         '
                  ||' AND      pae.status = '''||pdm_constant.g_con_pae_status_closed||''' '
                  ||' AND      pae.pte_id = pte.id                                         '
                  ||' AND      pte.name   = '''||pdm_constant.g_con_pte_physical||'''      '
                  ||' AND      ( :date_registered - pae.date_deregistered )        <=      '
                  ||'          NUMTODSINTERVAL( :tracking_timeout_pull, ''SECOND'' )       '
                  ||' ORDER BY pae.date_modified DESC                                      '
                  ;

            
            open  c_origin_pae for l_query using io_rt_pae.pd_id
                                           ,     io_rt_pae.date_registered
                                           ,     i_rt_stn.tracking_timeout_pull
            ;
            fetch c_origin_pae into l_origin_pae_id;
            l_found := c_origin_pae%found;
            close c_origin_pae;

            if l_found
            then

               
               pdm_attributes.copy_resume_tracking_attribs( i_origin_pae_id => l_origin_pae_id
                                                          , i_target_pae_id => io_rt_pae.id
                                                          , i_target_pet_id => i_pet_id
                                                          , i_stn_id_cust   => i_rt_stn.id_cust
                                                          , i_event_time    => i_event_time
                                                          , i_schema_prefix => l_schema_prefix
                                                          );

            else

               
               
               viu_info.operator_info( i_ifo_nr            => viu_constant.c_ifo_packagenotinprevschema
                                     , i_calling_procedure => l_con_proc_name
                                     , i_severity          => viu_info.severity_warning
                                     , i_additional_data   =>      'schema_prefix='             || l_schema_prefix
                                                              || ', pae.id='                    || io_rt_pae.id
                                                              || ', pae.pd_id='                 || io_rt_pae.pd_id
                                                              || ', pae.date_registered='       || io_rt_pae.date_registered
                                                              || ', stn.id='                    || i_rt_stn.id
                                                              || ', stn.tracking_timeout_pull=' || i_rt_stn.tracking_timeout_pull
                                     );

            end if;

         exception
            when others
            then

                
                viu_info.operator_info( i_ifo_nr            => viu_constant.c_ifo_prevschemanotaccessible
                                      , i_calling_procedure => l_con_proc_name
                                      , i_severity          => viu_info.severity_warning
                                      , i_additional_data   =>      'schema_prefix='             || l_schema_prefix
                                                               || ', pae.id='                    || io_rt_pae.id
                                                               || ', pae.pd_id='                 || io_rt_pae.pd_id
                                                               || ', pae.date_registered='       || io_rt_pae.date_registered
                                                               || ', stn.id='                    || i_rt_stn.id
                                                               || ', stn.tracking_timeout_pull=' || i_rt_stn.tracking_timeout_pull
                                      );

               
               
               
               
               viu_info.reset_package_variables;

         end;

      end if; 


      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then

         if c_origin_pae%isopen
         then
            close c_origin_pae;
         end if;

         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end resume_previous_schema;

   























   procedure pull_resume_tracking_attribs(
      io_rt_pae             in out pdm_packages%rowtype
    , i_pet_id              in     pdm_package_events.id%type
    , i_rt_stn              in     pdm_stations%rowtype
    , i_party_type          in     cmn_parties.type%type
    , i_ind_package_created in     boolean
    , i_event_time          in     cmn_constant.st_timestamp
   )
   is
      l_con_proc_name constant varchar2( 61 ) := g_con_package || '.pull_resume_tracking_attribs';

      
      
      cursor c_origin_pae( b_rt_pae                pdm_packages%rowtype
                         , b_tracking_timeout_pull pdm_stations.tracking_timeout_pull%type
                         )
      is
         select   pae.*
         from     pdm_packages      pae
         ,        pdm_package_types pte
         where    pae.pd_id  = b_rt_pae.pd_id
         and      pae.status = pdm_constant.g_con_pae_status_closed
         and      pae.pte_id = pte.id
         and      pte.name   = pdm_constant.g_con_pte_physical
         and      ( b_rt_pae.date_registered - pae.date_deregistered ) <=
                  numtodsinterval( b_tracking_timeout_pull, 'SECOND' )
         order by pae.date_modified desc;

      l_rt_origin_pae          pdm_packages%rowtype;
      l_rt_plk                 pdm_package_links%rowtype;
      l_found                  boolean;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      if i_rt_stn.tracking_timeout_pull is not null
      then

         
         open  c_origin_pae( b_rt_pae                => io_rt_pae
                           , b_tracking_timeout_pull => i_rt_stn.tracking_timeout_pull
                           );
         fetch c_origin_pae into l_rt_origin_pae;
         l_found := c_origin_pae%found;
         close c_origin_pae;

         if l_found
         then
            
            l_rt_plk.pln_id                := pdm_constant.g_con_pln_physical_resume;
            l_rt_plk.pae_id_primary        := l_rt_origin_pae.id;
            l_rt_plk.pae_id_secondary      := io_rt_pae.id;
            l_rt_plk.activated_by_pet_id   := i_pet_id;
            l_rt_plk.deactivated_by_pet_id := null;
            pdm_plk_tapi_pck.plk_insert_row( io_rt_plk => l_rt_plk );

            
            pdm_attributes.copy_resume_tracking_attribs( i_origin_pae_id => l_rt_origin_pae.id
                                                       , i_target_pae_id => io_rt_pae.id
                                                       , i_target_pet_id => i_pet_id
                                                       , i_stn_id_cust   => i_rt_stn.id_cust
                                                       , i_event_time    => i_event_time
                                                       , i_schema_prefix => null
                                                       );

            
            
            
            
            if     l_rt_origin_pae.ind_ready = cmn_constant.g_con_yesno_yes
               and i_party_type              = pdm_constant.g_con_mtt_party_type
               and i_ind_package_created
            then
               io_rt_pae.ind_ready                := cmn_constant.g_con_yesno_yes;
               io_rt_pae.ind_match_time           := cmn_constant.g_con_yesno_no;
            end if;

         else

            
            
            resume_previous_schema( io_rt_pae      => io_rt_pae
                                  , i_pet_id       => i_pet_id
                                  , i_rt_stn       => i_rt_stn
                                  , i_event_time   => i_event_time
                                  );
         end if; 
      end if; 

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         if c_origin_pae%isopen
         then
            close c_origin_pae;
         end if;

         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end pull_resume_tracking_attribs;

   
























   procedure check_for_routing_exception ( io_it_attributes           in out pdm_attributes.attribute_coll
                                         , o_found_routing_exception     out boolean
                                         )
   is
      l_con_proc_name   constant cmn_constant.st_proc_name
                                                      := g_con_package || '.check_for_routing_exception';
      l_adn_path                 pdm_attribute_definitions.path%type;

   begin
      viu_module.enter_module( i_module          => l_con_proc_name );

      
      
      l_adn_path := pdm_constant.g_con_xpath_error;
      case
         when io_it_attributes.exists(l_adn_path)
         and  io_it_attributes(l_adn_path).value(1) is null
         then
            io_it_attributes.delete(l_adn_path);
            o_found_routing_exception := false;

         when io_it_attributes.exists(l_adn_path)
         and  io_it_attributes(l_adn_path).value(1) is not null
         then
            o_found_routing_exception := true;

         else
            o_found_routing_exception := false;
      end case;

      viu_module.leave_module( i_module      => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
   end check_for_routing_exception;

   













   procedure insert_pending_task(
      i_event_time       in   cmn_constant.st_timestamp
    , i_pae_id           in   pdm_packages.id%type
    , i_tasktype         in   pdm_task_types.name%type
    , i_stn_id           in   pdm_stations.id%type
    , i_reason_request   in   varchar2
   )
   is
      l_con_proc_name   constant cmn_constant.st_proc_name
                                                         := g_con_package || '.insert_pending_task';
      l_rt_pta                   pdm_pending_tasks%rowtype;
      l_rt_tte                   pdm_task_types%rowtype;
      l_dummy                    boolean;
      l_timestamp                cmn_constant.st_timestamp;

   begin
      viu_module.enter_module( i_module      => l_con_proc_name );

      
      l_timestamp := cmn_common.default_timestamp;

      
      l_dummy := pdm_tte_tapi_pck.tte_select_row_uk1( i_tte_name      => i_tasktype
                                                    , o_rt_tte        => l_rt_tte
                                                    );

      
      l_rt_pta.event_time      := i_event_time;
      l_rt_pta.date_created    := l_timestamp;
      l_rt_pta.pae_id          := i_pae_id;
      l_rt_pta.tte_id          := l_rt_tte.id;
      l_rt_pta.stn_id          := i_stn_id;
      l_rt_pta.reason_request  := i_reason_request;
      l_rt_pta.timeout_time    := l_timestamp + cmn_common.varchar_to_interval (i_int => cmn_common.get_parameter_value( i_prr_name => pdm_constant.g_con_pi_request_timeout ));

      pdm_pta_tapi_pck.pta_insert_row( io_rt_pta => l_rt_pta );

      viu_module.leave_module( i_module => l_con_proc_name );

   exception
      when others
      then
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
   end insert_pending_task;

   






















   function send_stn_dependent_msg(
      i_stn_id   in pdm_stations.id%type
    , i_rt_pae   in pdm_packages%rowtype
    , i_imd_name in cmn_ifc_msg_definitions.name%type
    , i_rt_pet   in pdm_package_events%rowtype
  )
      return boolean
   is
      l_con_proc_name   constant cmn_constant.st_proc_name
                                                      := g_con_package || '.send_stn_dependent_msg';
      l_result                   boolean                   := false;
      l_rt_pae                   pdm_packages%rowtype;

      cursor c_smd(
         b_stn_id      pdm_stations.id%type
       , b_direction   cmn_party_msg_definitions.direction%type
       , b_imd_name    cmn_ifc_msg_definitions.name%type
      )
      is
         select smd.pmd_id
              , smd.pty_id_cust
              , smd.imd_id
         from   pdm_v_stn_msg_definitions smd
         where  smd.stn_id = b_stn_id
         and    smd.direction = b_direction
         and    smd.message_name = b_imd_name;
      r_smd  c_smd%rowtype;
   
   begin
      viu_module.enter_module( i_module          => l_con_proc_name
                             , i_debug_info      =>    'station_id='
                                                    || to_char( i_stn_id )
                                                    || ' pi_id='
                                                    || to_char( i_rt_pae.pi_id )
                                                    || ' messagename='
                                                    || i_imd_name
                             );

      if i_stn_id is not null
      then
         
         l_rt_pae  := i_rt_pae;

         for r_smd in c_smd( b_stn_id         => i_stn_id
                           , b_direction      => cmn_constant.g_con_msg_direction_outgoing
                           , b_imd_name       => i_imd_name
                           )
         loop
            l_result  := true;
            pdm_packageinfo.send_packageinforequest_pi( i_rt_pae           => l_rt_pae
                                                      , i_pty_id_cust      => r_smd.pty_id_cust
                                                      , i_rt_pet           => i_rt_pet
                                                      );
         end loop;
      end if;

      viu_module.leave_module( i_module      => l_con_proc_name );
      return l_result;
   exception
      when others
      then
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
   end send_stn_dependent_msg;

   











   function get_baggagetags( i_it_attributes  in pdm_attributes.attribute_coll)
      return pdm_constant.it_baggagetag
   is
      l_con_proc_name   constant cmn_constant.st_proc_name    := g_con_package || '.get_baggagetags';
      l_it_baggagetag            pdm_constant.it_baggagetag;
      i                          pls_integer;
   begin
      viu_module.enter_module( i_module      => l_con_proc_name );

      
      if i_it_attributes.exists(pdm_constant.g_con_retaglpc_attr)
      then

         
         l_it_baggagetag(1).lpc := i_it_attributes(pdm_constant.g_con_retaglpc_attr).value(1);

         
         if i_it_attributes.exists(pdm_constant.g_con_retaglpcext_attr)
         then

            
            l_it_baggagetag(1).lpc_extension := i_it_attributes(pdm_constant.g_con_retaglpcext_attr).value(1);
         end if;


      else 

         
         i := pdm_constant.g_con_it_scanresult_attr.first;
         while i is not null
         loop

            
            if i_it_attributes.exists(pdm_constant.g_con_it_scanresult_attr(i).lpc)
            then

               
               l_it_baggagetag(i).lpc := i_it_attributes(pdm_constant.g_con_it_scanresult_attr(i).lpc).value(1);

               
               if i_it_attributes.exists(pdm_constant.g_con_it_scanresult_attr(i).lpc_extension)
               then

                  
                  l_it_baggagetag(i).lpc_extension := i_it_attributes(pdm_constant.g_con_it_scanresult_attr(i).lpc_extension).value(1);
               end if;
            end if;

            i := pdm_constant.g_con_it_scanresult_attr.next(i);

         end loop; 
      end if; 

      viu_module.leave_module( i_module      => l_con_proc_name );
      return l_it_baggagetag;
   exception
      when others
      then
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
   end get_baggagetags;

   























   procedure determine_functions( i_rt_tte          in     pdm_task_types%rowtype
                                , i_stationid       in     pdm_stations.id%type
                                , i_tr_error        in     varchar2
                                , i_ind_loaded      in     boolean
                                , o_identification     out boolean
                                , o_taskinstruction    out boolean
                                , o_reporting          out boolean
                                , o_registration       out boolean
                                , o_deregistration     out boolean
                                )
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.determine_functions';

      cursor c_functionalities( b_tte_id pdm_task_types.id%type )
      is
         select fty.name
         from   pdm_task_type_handlings tth
         ,      pdm_functionalities     fty
         where  fty.id     = tth.fty_id
         and    tth.tte_id = b_tte_id;

      cursor c_smd_exists( b_stn_id        pdm_stations.id%type
                         , b_imd_name      cmn_ifc_msg_definitions.name%type
                         )
      is
         select 1
         from   pdm_v_stn_msg_definitions v_smd
         where  v_smd.stn_id       = b_stn_id
         and    v_smd.message_name = b_imd_name
         and    rownum           = 1
         ;

      l_dummy                   number;
   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      o_identification  := false;
      o_taskinstruction := false;
      o_reporting       := false;
      o_registration    := false;
      o_deregistration  := false;

      
      if i_tr_error = pdm_constant.g_con_tr_error_bag_dereg or i_ind_loaded
      then
         o_reporting      := true;
         o_deregistration := true;

      else 

         
         for l_rt_fty in c_functionalities( b_tte_id => i_rt_tte.id )
         loop
            case l_rt_fty.name
               when g_con_fty_reporting
               then
                  o_reporting := true;

               when g_con_fty_identification
               then
                  o_identification := true;

               when g_con_fty_registration
               then
                  o_registration := true;

               when g_con_fty_deregistration
               then
                  o_deregistration := true;

               else
                  
                  viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_configurationinvalid
                                     , i_calling_procedure => l_con_proc_name
                                     , i_severity          => viu_info.severity_error
                                     , i_additional_data   =>    'Unexpected FUNCTIONALITY: '
                                                              || l_rt_fty.name
                                                              || ' for given TASK TYPE: '
                                                              || i_rt_tte.name
                                     );
            end case;
         end loop; 

         
         
         open c_smd_exists( b_stn_id        => i_stationid
                          , b_imd_name      => pdm_constant.g_con_taskinstruction
                          );
         fetch c_smd_exists into l_dummy;
         o_taskinstruction := c_smd_exists%found;
         close c_smd_exists;

      end if; 

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         if c_smd_exists%isopen
         then
            close c_smd_exists;
         end if;

         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end determine_functions;

   




















   procedure set_routing_exception_handled( i_value          in     pdm_attribute_definitions.value%type
                                          , io_it_attributes in out pdm_attributes.attribute_coll
                                          )
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.set_routing_exception_handled';

      l_rt_adn        pdm_attribute_definitions%rowtype;
      l_found         boolean;
   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      l_found := pdm_adn_tapi_pck.adn_select_row_uk1( i_adn_path => pdm_constant.g_con_routingexcept_hdld_attr
                                                    , o_rt_adn   => l_rt_adn
                                                    );

      
      io_it_attributes(l_rt_adn.path).adn_id   := l_rt_adn.id;
      io_it_attributes(l_rt_adn.path).value(1) := i_value;
      io_it_attributes(l_rt_adn.path).adn_type := l_rt_adn.type;

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end set_routing_exception_handled;

   


















   procedure determine_baggage_hdlr_attribs( i_pae_id        in pdm_packages.id%type
                                           , i_pet_id        in pdm_package_events.id%type
                                           , i_event_time    in cmn_constant.st_timestamp
                                           , i_it_baggagetag in pdm_constant.it_baggagetag
                                           )
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.determine_baggage_hdlr_attribs';

      
      
      
      cursor c_secondary_pbe ( b_pd_id    in pdm_packages.pd_id%type
                             , b_adn_path in pdm_attribute_definitions.path%type
                             )
      is
         select   vpbe.value
         from     pdm_v_pbe_active          vpbe
         ,        pdm_attribute_definitions adn
         ,        pdm_packages              pae
         where    vpbe.adn_id               = adn.id
         and      adn.path                  = b_adn_path
         and      vpbe.pae_id               = pae.id
         and      pae.status                = pdm_constant.g_con_pae_status_open
         and      pae.pd_id                 = b_pd_id
         and      (       pae.pte_id        = pdm_constant.g_con_pte_id_logical
                  or (    pae.pte_id        = pdm_constant.g_con_pte_id_member
                      and pae.ind_chosen    = cmn_constant.g_con_yesno_yes
                     )
                  )
         ;

      l_it_attributes          pdm_attributes.attribute_coll;
      l_rt_adn                 pdm_attribute_definitions%rowtype;
      l_pbe_value              pdm_package_attributes.value%type;
      l_pbe_found              boolean;
      l_dummy                  boolean;

      l_adn_path_source        pdm_attribute_definitions.path%type;
      l_adn_path_target        pdm_attribute_definitions.path%type;
   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      for i in 1 .. 2      
      loop
         for j in 1 .. 3   
         loop
            if i = 1
            then
               l_adn_path_source := pdm_constant.g_con_baggage_handler_attr;
               l_adn_path_target := pdm_constant.g_con_it_scanresult_attr(j).handler;
            elsif i = 2
            then
               l_adn_path_source := pdm_constant.g_con_baggage_hdlrairline_attr;
               l_adn_path_target := pdm_constant.g_con_it_scanresult_attr(j).airline;
            end if;

            l_dummy := pdm_adn_tapi_pck.adn_select_row_uk1
                          ( i_adn_path => l_adn_path_target
                          , o_rt_adn   => l_rt_adn
                          );

            if j <= i_it_baggagetag.count
            then
               open  c_secondary_pbe( b_pd_id    => i_it_baggagetag(j).lpc
                                    , b_adn_path => l_adn_path_source
                                    );
               fetch c_secondary_pbe into l_pbe_value;
               l_pbe_found := c_secondary_pbe%found;
               close c_secondary_pbe;
            end if;

            if j <= i_it_baggagetag.count
            and l_pbe_found
            then
               l_it_attributes(l_adn_path_target).adn_id   := l_rt_adn.id;
               l_it_attributes(l_adn_path_target).value(1) := l_pbe_value;
               l_it_attributes(l_adn_path_target).adn_type := l_rt_adn.type;
            else
               l_it_attributes(l_adn_path_target).adn_id   := l_rt_adn.id;
               l_it_attributes(l_adn_path_target).value(1) := null;
               l_it_attributes(l_adn_path_target).adn_type := l_rt_adn.type;
            end if;
         end loop;
      end loop;

      pdm_attributes.store_attributes( i_pae_id                     => i_pae_id
                                     , i_it_attributes              => l_it_attributes
                                     , i_pet_id                     => i_pet_id
                                     , i_event_time                 => i_event_time
                                     , i_ind_use_attribs_event_time => false
                                     );

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         if c_secondary_pbe%isopen
         then
            close c_secondary_pbe;
         end if;

         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end determine_baggage_hdlr_attribs;

   



















   procedure set_scanresult_pd_id( i_pae_id     in pdm_packages.id%type
                                 , i_pet_id     in pdm_package_events.id%type
                                 , i_scanresult in pdm_package_attributes.value%type
                                 )
   is
      l_con_proc_name constant cmn_constant.st_proc_name
                                                        := g_con_package || '.set_scanresult_pd_id';
      l_it_attributes          pdm_attributes.attribute_coll;
      l_rt_adn                 pdm_attribute_definitions%rowtype;
      l_found                  boolean;
   begin
      viu_module.enter_module( i_module     => l_con_proc_name
                             , i_debug_info =>    'io_rt_pae.id='
                                               || i_pae_id
                                               || ' i_scanresult='
                                               || i_scanresult
                             );

      
      l_found := pdm_adn_tapi_pck.adn_select_row_uk1( i_adn_path => pdm_constant.g_con_lpc_status_attr
                                                    , o_rt_adn   => l_rt_adn
                                                    );

      
      l_it_attributes(l_rt_adn.path).adn_id   := l_rt_adn.id;
      l_it_attributes(l_rt_adn.path).value(1) := i_scanresult;
      l_it_attributes(l_rt_adn.path).adn_type := l_rt_adn.type;

      pdm_attributes.store_attributes( i_pae_id                     => i_pae_id
                                     , i_it_attributes              => l_it_attributes
                                     , i_pet_id                     => i_pet_id
                                     , i_event_time                 => null 
                                     , i_ind_use_attribs_event_time => false
                                     );

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end set_scanresult_pd_id;

   



















   procedure set_baggagetag( i_pae_id        in pdm_packages.id%type
                           , i_pet_id        in pdm_package_events.id%type
                           , i_lpc           in pdm_package_attributes.value%type
                           , i_lpc_extension in pdm_package_attributes.value%type
                           , i_event_time    in cmn_constant.st_timestamp
                           )
   is
      l_con_proc_name constant cmn_constant.st_proc_name
                                                        := g_con_package || '.set_baggagetag';
      l_it_attributes          pdm_attributes.attribute_coll;
      l_rt_adn                 pdm_attribute_definitions%rowtype;
      l_found                  boolean;
   begin
      viu_module.enter_module( i_module     => l_con_proc_name
                             , i_debug_info =>    'io_rt_pae.id='
                                               || i_pae_id
                                               || ' i_lpc='
                                               || i_lpc
                             );

      
      l_found := pdm_adn_tapi_pck.adn_select_row_uk1( i_adn_path => pdm_constant.g_con_lpc_attr_func
                                                    , o_rt_adn   => l_rt_adn
                                                    );

      if i_lpc is not null
      then
         
         l_it_attributes(l_rt_adn.path).adn_id   := l_rt_adn.id;
         l_it_attributes(l_rt_adn.path).value(1) := i_lpc;
         l_it_attributes(l_rt_adn.path).adn_type := l_rt_adn.type;
      else
         
         pdm_attributes.delete_package_attribute( i_pae_id     => i_pae_id
                                                , i_adn_id     => l_rt_adn.id
                                                , i_pet_id     => i_pet_id
                                                , i_event_time => i_event_time
                                                );
      end if;

      
      l_found := pdm_adn_tapi_pck.adn_select_row_uk1( i_adn_path => pdm_constant.g_con_lpc_extension_attr_func
                                                    , o_rt_adn   => l_rt_adn
                                                    );

      if i_lpc_extension is not null
      then
         
         l_it_attributes(l_rt_adn.path).adn_id   := l_rt_adn.id;
         l_it_attributes(l_rt_adn.path).value(1) := i_lpc_extension;
         l_it_attributes(l_rt_adn.path).adn_type := l_rt_adn.type;
      else
         
         pdm_attributes.delete_package_attribute( i_pae_id     => i_pae_id
                                                , i_adn_id     => l_rt_adn.id
                                                , i_pet_id     => i_pet_id
                                                , i_event_time => i_event_time
                                                );
      end if;

      if l_it_attributes.count > 0
      then
         pdm_attributes.store_attributes( i_pae_id                     => i_pae_id
                                        , i_it_attributes              => l_it_attributes
                                        , i_pet_id                     => i_pet_id
                                        , i_event_time                 => i_event_time
                                        , i_ind_use_attribs_event_time => false
                                        );
      end if;

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end set_baggagetag;

   
















   procedure set_baggageidentifier( i_rt_pae     in pdm_packages%rowtype
                                  , i_pet_id     in pdm_package_events.id%type
                                  , i_event_time in cmn_constant.st_timestamp
                                  )
   is
      l_con_proc_name constant cmn_constant.st_proc_name
                                                        := g_con_package || '.set_baggageidentifier';
      l_it_attributes          pdm_attributes.attribute_coll;
      l_rt_adn                 pdm_attribute_definitions%rowtype;
      l_found                  boolean;
   begin
      viu_module.enter_module( i_module     => l_con_proc_name
                             , i_debug_info =>    'i_rt_pae.id='
                                               || i_rt_pae.id
                                               || ' i_pi_id='
                                               || i_rt_pae.pi_id
                             );

      
      l_found := pdm_adn_tapi_pck.adn_select_row_uk1( i_adn_path => pdm_constant.g_con_bid_attr
                                                    , o_rt_adn   => l_rt_adn
                                                    );

      l_it_attributes(l_rt_adn.path).adn_id   := l_rt_adn.id;
      l_it_attributes(l_rt_adn.path).value(1) := i_rt_pae.pi_id;
      l_it_attributes(l_rt_adn.path).adn_type := l_rt_adn.type;

      
      l_found := pdm_adn_tapi_pck.adn_select_row_uk1( i_adn_path => pdm_constant.g_con_bid_extension_attr
                                                    , o_rt_adn   => l_rt_adn
                                                    );

      l_it_attributes(l_rt_adn.path).adn_id   := l_rt_adn.id;
      l_it_attributes(l_rt_adn.path).value(1) := i_rt_pae.place_of_birth;
      l_it_attributes(l_rt_adn.path).adn_type := l_rt_adn.type;

      
      l_found := pdm_adn_tapi_pck.adn_select_row_uk1( i_adn_path => pdm_constant.g_con_pid_attr
                                                    , o_rt_adn   => l_rt_adn
                                                    );

      l_it_attributes(l_rt_adn.path).adn_id   := l_rt_adn.id;
      l_it_attributes(l_rt_adn.path).value(1) := i_rt_pae.pid;
      l_it_attributes(l_rt_adn.path).adn_type := l_rt_adn.type;

      
      pdm_attributes.store_attributes( i_pae_id                     => i_rt_pae.id
                                     , i_it_attributes              => l_it_attributes
                                     , i_pet_id                     => i_pet_id
                                     , i_event_time                 => i_event_time
                                     , i_ind_use_attribs_event_time => false
                                     );

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end set_baggageidentifier;

   











   procedure select_one_active_package_link( i_rt_pae in     pdm_packages%rowtype
                                           , o_rt_plk    out pdm_package_links%rowtype
                                           )
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.select_one_active_package_link';
   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      begin
         select plk.*
         into   o_rt_plk
         from   pdm_package_links            plk
         where  plk.deactivated_by_pet_id is null
         and    plk.pae_id_primary        =  i_rt_pae.id
         and    plk.pln_id                =  pdm_constant.g_con_pln_compose_attributes
         ;
      exception
         when no_data_found then null;
         when too_many_rows
         then
            viu_info.raise_info
                        ( i_ifo_nr            => viu_constant.c_ifo_toomanypackagelinks
                        , i_calling_procedure => l_con_proc_name
                        , i_severity          => viu_info.c_severity_error
                        , i_info_arguments    => i_rt_pae.id
                        );
      end;

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end select_one_active_package_link;

   














   procedure prepare_phys_logical_link( i_rt_pae_physical      in     pdm_packages%rowtype
                                      , i_rt_pet               in     pdm_package_events%rowtype
                                      , i_plk_id_active        in     pdm_package_links.id%type
                                      , i_ind_use_mult_bagdata in     boolean
                                      , o_rt_pae_log_act_link     out pdm_packages%rowtype
                                      )
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.prepare_phys_logical_link';

      

      
      
      
      
      
      
      
      cursor c_pae_logical( b_pd_id in pdm_packages.pd_id%type )
      is
         select   pae.*
         from     pdm_packages pae
         where    pae.pd_id  = b_pd_id
         and      pae.pte_id = pdm_constant.g_con_pte_id_logical
         order by case pae.status
                     when pdm_constant.g_con_pae_status_open   then 1
                     when pdm_constant.g_con_pae_status_closed then 2
                  end
         ,        pae.date_last_event desc
         ;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      if     pdm_package.is_valid_pd_id( i_pd_id => i_rt_pae_physical.pd_id )
         and i_plk_id_active is null
      then

         
         open  c_pae_logical( b_pd_id => i_rt_pae_physical.pd_id );
         fetch c_pae_logical into o_rt_pae_log_act_link;
         close c_pae_logical;

         
         if o_rt_pae_log_act_link.id is not null
         then

            
            pdm_package.act_physical_member( i_rt_pae_physical      => i_rt_pae_physical
                                           , i_rt_pet_physical      => i_rt_pet
                                           , i_rt_pae_logical       => o_rt_pae_log_act_link
                                           , i_ind_use_mult_bagdata => i_ind_use_mult_bagdata
                                           );

         end if; 
      end if; 

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         if c_pae_logical%isopen
         then
            close c_pae_logical;
         end if;

         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end prepare_phys_logical_link;

   











   procedure deact_phys_log_link_lpc( io_rt_pae            in out pdm_packages%rowtype
                                    , io_rt_plk_active     in out pdm_package_links%rowtype
                                    , i_rt_pet             in     pdm_package_events%rowtype
                                    , o_rt_plk_deactivated    out pdm_package_links%rowtype
                                    , o_lpc_changed           out boolean
                                    )
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.deact_phys_log_link_lpc';

      l_rt_pae_secondary pdm_packages%rowtype;
      l_result           number;
      l_dummy            boolean;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      o_lpc_changed := false;

      
      if io_rt_plk_active.id is not null
      then

         
         l_dummy := pdm_pae_tapi_pck.pae_select_row( i_pae_id => io_rt_plk_active.pae_id_secondary
                                                   , o_rt_pae => l_rt_pae_secondary
                                                   );

         
         if    io_rt_pae.pd_id is null
            or io_rt_pae.pd_id <> l_rt_pae_secondary.pd_id
         then

            o_lpc_changed := true;

            
            io_rt_plk_active.deactivated_by_pet_id := i_rt_pet.id;
            l_result := pdm_plk_tapi_pck.plk_update_row( i_plk_id  => io_rt_plk_active.id
                                                       , io_rt_plk => io_rt_plk_active
                                                       );

            
            o_rt_plk_deactivated := io_rt_plk_active;

            
            io_rt_plk_active := null;

            
            pdm_package.deact_physical_member( i_rt_pae_physical => io_rt_pae
                                             , i_rt_pet_physical => i_rt_pet
                                             );

            
            
            io_rt_pae.ind_packagedata_deleted  := cmn_constant.g_con_yesno_no;
            io_rt_pae.ind_packagedata_multiple := cmn_constant.g_con_yesno_no;
            io_rt_pae.ind_chosen               := cmn_constant.g_con_yesno_no;
            io_rt_pae.nof_bagdata              := 0;

         end if; 
      end if; 

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end deact_phys_log_link_lpc;

   











   procedure match_physical_packages( i_rt_pae_physical           in pdm_packages%rowtype
                                    , i_rt_pae_log_related_member in pdm_packages%rowtype
                                    , i_rt_pae_member_chosen_old  in pdm_packages%rowtype
                                    , i_rt_pae_member_chosen_new  in pdm_packages%rowtype
                                    , i_evt_id                    in pdm_events.id%type
                                    , i_systimestamp              in cmn_constant.st_timestamp
                                    , i_choice_changed            in boolean
                                    , i_pae_member_old_hdl_psn    in boolean
                                    )
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.match_physical_packages';

      
      cursor c_package_link_other( b_pae_id_primary   in pdm_packages.id%type
                                 , b_pae_id_secondary in pdm_packages.id%type
                                 )
      is
      select plk.*
      from   pdm_package_links plk
      where  plk.pln_id                =  pdm_constant.g_con_pln_compose_attributes
      and    plk.deactivated_by_pet_id is null
      and    plk.pae_id_primary   <> b_pae_id_primary
      and    plk.pae_id_secondary =  b_pae_id_secondary
      ;

      l_pae_id_secondary pdm_packages.id%type;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      
      if    i_choice_changed
         or i_pae_member_old_hdl_psn
      then

         
         if i_rt_pae_member_chosen_old.id is not null
         then

            
            l_pae_id_secondary := i_rt_pae_member_chosen_old.id;

         else

            
            
            
            

            
            
            l_pae_id_secondary := i_rt_pae_log_related_member.id;

         end if;

         
         for r_package_link_other in c_package_link_other( b_pae_id_primary   => i_rt_pae_physical.id
                                                         , b_pae_id_secondary => l_pae_id_secondary
                                                         )
         loop

            
            pdm_match.match_physical_package( i_rt_plk                   => r_package_link_other
                                            , i_rt_pae_logical           => i_rt_pae_log_related_member
                                            , i_rt_pae_member_chosen_new => i_rt_pae_member_chosen_new
                                            , i_evt_id                   => i_evt_id
                                            , i_systimestamp             => i_systimestamp
                                            , i_choice_changed           => i_choice_changed
                                            );

         end loop;
      end if;

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end match_physical_packages;

   











   procedure deact_phys_log_link_choice( io_rt_plk_active      in out pdm_package_links%rowtype
                                       , io_rt_plk_deactivated in out pdm_package_links%rowtype
                                       , i_rt_pet              in     pdm_package_events%rowtype
                                       , i_choice_changed      in boolean
                                       )
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.deact_phys_log_link_choice';

      l_result number;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      
      if      io_rt_plk_active.id is not null
      	  and i_choice_changed
      then

         
         io_rt_plk_active.deactivated_by_pet_id := i_rt_pet.id;
         l_result := pdm_plk_tapi_pck.plk_update_row( i_plk_id  => io_rt_plk_active.id
                                                    , io_rt_plk => io_rt_plk_active
                                                    );

         
         io_rt_plk_deactivated := io_rt_plk_active;

      end if;

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end deact_phys_log_link_choice;

   











   procedure act_phys_log_link( io_rt_plk_active            in out pdm_package_links%rowtype
                              , io_rt_pae_physical          in out pdm_packages%rowtype
                              , i_rt_pae_log_act_link       in     pdm_packages%rowtype
                              , i_rt_pae_log_related_member in     pdm_packages%rowtype
                              , i_rt_pae_member_chosen_new  in     pdm_packages%rowtype
                              , i_rt_pet                    in     pdm_package_events%rowtype
                              , i_choice_changed            in     boolean
                              )
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.act_phys_log_link';

      l_rt_pae_secondary pdm_packages%rowtype;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      
      
      
      
      
      

      if     (   io_rt_plk_active.id      is     null
      	     and i_rt_pae_log_act_link.id is not null
      	     )
      	  or (   io_rt_plk_active.id      is not null
      	     and i_choice_changed
      	     )
      then

         
         if i_rt_pae_member_chosen_new.id is not null
         then

            
            l_rt_pae_secondary := i_rt_pae_member_chosen_new;

         
         elsif io_rt_plk_active.id is null
         then

            
            l_rt_pae_secondary := i_rt_pae_log_act_link;

         else

            
            l_rt_pae_secondary := i_rt_pae_log_related_member;
         end if;

         
         io_rt_plk_active                       := null;
         io_rt_plk_active.pln_id                := pdm_constant.g_con_pln_compose_attributes;
         io_rt_plk_active.pae_id_primary        := io_rt_pae_physical.id;
         io_rt_plk_active.pae_id_secondary      := l_rt_pae_secondary.id;
         io_rt_plk_active.activated_by_pet_id   := i_rt_pet.id;
         io_rt_plk_active.deactivated_by_pet_id := null;

         pdm_plk_tapi_pck.plk_insert_row( io_rt_plk => io_rt_plk_active );

         
         
         
         
         
         io_rt_pae_physical.ind_packagedata_deleted  := l_rt_pae_secondary.ind_packagedata_deleted;
         io_rt_pae_physical.ind_packagedata_multiple := l_rt_pae_secondary.ind_packagedata_multiple;
         io_rt_pae_physical.ind_chosen               := l_rt_pae_secondary.ind_chosen;
         io_rt_pae_physical.nof_bagdata              := l_rt_pae_secondary.nof_bagdata;

      end if;

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end act_phys_log_link;

   































   procedure handle_package_link( io_rt_pae              in out pdm_packages%rowtype
                                , i_rt_pet               in     pdm_package_events%rowtype
                                , i_systimestamp         in     cmn_constant.st_timestamp
                                , i_ind_use_mult_bagdata in     boolean
                                , o_rt_plk_active           out pdm_package_links%rowtype
                                , o_rt_plk_deactivated      out pdm_package_links%rowtype
                                , o_lpc_changed             out boolean
                                , o_hdl_psn                 out boolean
                                )
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.handle_package_link';

      l_rt_pet                    pdm_package_events%rowtype;
      l_rt_pae_secondary_old      pdm_packages%rowtype;
      l_rt_pae_log_act_link       pdm_packages%rowtype;
      l_rt_pae_member_chosen_new  pdm_packages%rowtype;
      l_rt_pae_member_chosen_old  pdm_packages%rowtype;
      l_rt_pae_log_related_member pdm_packages%rowtype;
      l_pae_id_secondary          pdm_packages.id%type;
      l_result                    number;
      l_dummy                     boolean;
      l_choice_changed            boolean;
      l_pae_member_old_hdl_psn    boolean;
      l_pae_member_count          number;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      o_lpc_changed := false;
      o_hdl_psn     := false;

      
      if io_rt_pae.ind_match_hdl_psn = cmn_constant.g_con_yesno_yes
      then

         
         
         

         
         
         o_hdl_psn := true;
      end if;

      
      select_one_active_package_link( i_rt_pae => io_rt_pae
                                    , o_rt_plk => o_rt_plk_active
                                    );

      
      if     io_rt_pae.status = pdm_constant.g_con_pae_status_open
      then

         deact_phys_log_link_lpc( io_rt_pae            => io_rt_pae
                                , io_rt_plk_active     => o_rt_plk_active
                                , i_rt_pet             => i_rt_pet
                                , o_rt_plk_deactivated => o_rt_plk_deactivated
                                , o_lpc_changed        => o_lpc_changed
                                );

         prepare_phys_logical_link( i_rt_pae_physical      => io_rt_pae
                                  , i_rt_pet               => i_rt_pet
                                  , i_plk_id_active        => o_rt_plk_active.id
                                  , i_ind_use_mult_bagdata => i_ind_use_mult_bagdata
                                  , o_rt_pae_log_act_link  => l_rt_pae_log_act_link
                                  );

         
         l_rt_pet := i_rt_pet;
         pdm_match.evaluate_members( io_rt_pae                  => io_rt_pae
                                   , io_rt_pet                  => l_rt_pet
                                   , i_evt_id                   => l_rt_pet.evt_id
                                   , i_timestamp                => cmn_common.default_timestamp
                                   , i_ind_use_mult_bagdata     => i_ind_use_mult_bagdata
                                   , o_rt_pae_logical           => l_rt_pae_log_related_member
                                   , o_rt_pae_member_chosen_new => l_rt_pae_member_chosen_new
                                   , o_rt_pae_member_chosen_old => l_rt_pae_member_chosen_old
                                   , o_choice_changed           => l_choice_changed
                                   , o_pae_member_old_hdl_psn   => l_pae_member_old_hdl_psn
                                   , o_pae_member_count         => l_pae_member_count
                                   );

         match_physical_packages( i_rt_pae_physical           => io_rt_pae
                                , i_rt_pae_log_related_member => l_rt_pae_log_related_member
                                , i_rt_pae_member_chosen_old  => l_rt_pae_member_chosen_old
                                , i_rt_pae_member_chosen_new  => l_rt_pae_member_chosen_new
                                , i_evt_id                    => i_rt_pet.evt_id
                                , i_systimestamp              => i_systimestamp
                                , i_choice_changed            => l_choice_changed
                                , i_pae_member_old_hdl_psn    => l_pae_member_old_hdl_psn
                                );

         deact_phys_log_link_choice( io_rt_plk_active      => o_rt_plk_active
                                   , io_rt_plk_deactivated => o_rt_plk_deactivated
                                   , i_rt_pet              => i_rt_pet
                                   , i_choice_changed      => l_choice_changed
                                   );

         act_phys_log_link( io_rt_plk_active            => o_rt_plk_active
                          , io_rt_pae_physical          => io_rt_pae
                          , i_rt_pae_log_act_link       => l_rt_pae_log_act_link
                          , i_rt_pae_log_related_member => l_rt_pae_log_related_member
                          , i_rt_pae_member_chosen_new  => l_rt_pae_member_chosen_new
                          , i_rt_pet                    => i_rt_pet
                          , i_choice_changed            => l_choice_changed
                          );

      end if; 

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end handle_package_link;

   




















   procedure handle_tr_suspended_package( io_rt_pae            in out pdm_packages%rowtype
                                        , i_deregistration     in     boolean
                                        , i_stationid          in     pdm_stations.id%type
                                        , i_areaid             in     varchar2
                                        , i_zoneid             in     varchar2
                                        , i_ind_physical_event in     boolean
                                        , i_event_time         in     cmn_constant.st_timestamp
                                        , i_it_attributes      in     pdm_attributes.attribute_coll
                                        , o_ind_force_match       out boolean
                                        )
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.handle_tr_suspended_package';

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      o_ind_force_match := false;

      
      if io_rt_pae.status = pdm_constant.g_con_pae_status_suspended
      then

         
         if i_event_time < io_rt_pae.date_last_event
         then
            viu_info.raise_info
               ( i_ifo_nr            => viu_constant.c_ifo_opensuspendedphysical
               , i_calling_procedure => l_con_proc_name
               , i_severity          => viu_info.c_severity_warning
               , i_additional_data   =>
                    'EventTime (' || i_event_time || ') < PACKAGE.DATE LAST DETECTED (' || io_rt_pae.date_last_event || ')'
                 || ', PI ID=' || io_rt_pae.pi_id
                 || ', Message ID=' || cmn_interface.get_message_id
                                          ( i_direction => cmn_constant.g_con_msg_direction_incoming
                                          )
               );
         end if;

         
        if not i_ind_physical_event
        then
           viu_info.raise_info
              ( i_ifo_nr            => viu_constant.c_ifo_opensuspendedphysical
              , i_calling_procedure => l_con_proc_name
              , i_severity          => viu_info.severity_warning
              , i_additional_data   =>
                      'STATION.ID=' || i_stationid
                 || ', AreaID='     || i_areaid
                 || ', ZoneID='     || i_zoneid
                 || ', PID='        || io_rt_pae.pid
                 || ', Message ID=' || cmn_interface.get_message_id
                                          ( i_direction => cmn_constant.g_con_msg_direction_incoming)
              );
        end if;

         
         if i_it_attributes.exists(pdm_constant.g_con_deregreason_attr)
         then
            if i_it_attributes(pdm_constant.g_con_deregreason_attr).value(1) = pdm_constant.g_con_tr_dereg_missing
            then
               viu_info.raise_info
                  ( i_ifo_nr            => viu_constant.c_ifo_opensuspendedphysical
                  , i_calling_procedure => l_con_proc_name
                  , i_severity          => viu_info.c_severity_warning
                  , i_additional_data   =>
                       'DeRegisterReason = MISSING'
                    || ', PI ID=' || io_rt_pae.pi_id
                    || ', Message ID=' || cmn_interface.get_message_id
                                             ( i_direction => cmn_constant.g_con_msg_direction_incoming
                                             )
                  );
            end if;
         end if;

         
         io_rt_pae.status         := pdm_constant.g_con_pae_status_open;
         io_rt_pae.ind_match      := cmn_constant.g_con_yesno_yes;

         

         
         
         
         if io_rt_pae.ind_ready = cmn_constant.g_con_yesno_no
         then
         	  io_rt_pae.ind_match_time := cmn_constant.g_con_yesno_yes;
         end if;

         
         o_ind_force_match := not i_deregistration;
      end if;

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end handle_tr_suspended_package;

   






















   procedure handle_suspended_packages( i_rt_pae       in pdm_packages%rowtype
                                      , i_evt_id       in pdm_events.id%type
                                      , i_systimestamp in cmn_constant.st_timestamp
                                      )
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.handle_suspended_packages';

      
      cursor c_suspended_packages( b_pae_id              in pdm_packages.id%type
                                 , b_pae_pd_id           in pdm_packages.pd_id%type
                                 , b_pae_date_registered in pdm_packages.date_registered%type
                                 )
      is
         select pae.id     as pae_id
         ,      pae.status as pae_status
         from   pdm_packages       pae
         ,      pdm_package_types  pte
         where  pae.id              <> b_pae_id
         and    pae.pte_id          =  pte.id
         and    pte.name            =  pdm_constant.g_con_pte_physical
         and    pae.pd_id           =  b_pae_pd_id
         and    pae.date_last_event <  b_pae_date_registered;

      l_rt_pae                 pdm_packages%rowtype;
      l_rt_pet                 pdm_package_events%rowtype;
      l_rt_plk                 pdm_package_links%rowtype;
      l_result                 number;
      l_dummy                  boolean;
   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      if     i_rt_pae.status = pdm_constant.g_con_pae_status_open
         and pdm_package.is_valid_pd_id( i_pd_id => i_rt_pae.pd_id )
      then
         
         for rec_suspended_packages in c_suspended_packages( b_pae_id              => i_rt_pae.id
                                                           , b_pae_pd_id           => i_rt_pae.pd_id
                                                           , b_pae_date_registered => i_rt_pae.date_registered
                                                           )
         loop

            
            if rec_suspended_packages.pae_status = pdm_constant.g_con_pae_status_open
            then

               
               l_dummy := pdm_pae_tapi_pck.pae_select_row_upd( i_pae_id => rec_suspended_packages.pae_id
                                                             , o_rt_pae => l_rt_pae
                                                             );

               
               if     l_rt_pae.pd_id           = i_rt_pae.pd_id
                  and l_rt_pae.status          = pdm_constant.g_con_pae_status_open
                  and l_rt_pae.date_last_event < i_rt_pae.date_registered
               then
                  
                  l_rt_pet              := null;
                  l_rt_pet.evt_id       := i_evt_id;
                  l_rt_pet.pae_id       := l_rt_pae.id;
                  l_rt_pet.date_created := i_systimestamp;

                  pdm_common.create_package_event( io_rt_pet                => l_rt_pet
                                                 , i_ind_check_existing_pet => false
                                                 );

                  
                  l_rt_pae.status             := pdm_constant.g_con_pae_status_suspended;
                  l_rt_pae.ind_match          := cmn_constant.g_con_yesno_no;
                  l_rt_pae.ind_match_hdl_psn  := cmn_constant.g_con_yesno_no;
                  l_rt_pae.ind_match_hdl_time := cmn_constant.g_con_yesno_no;
                  l_rt_pae.ind_match_time     := cmn_constant.g_con_yesno_no;
                  l_result := pdm_pae_tapi_pck.pae_update_row( i_pae_id  => l_rt_pae.id
                                                             , io_rt_pae => l_rt_pae
                                                             );

                  
                  select_one_active_package_link( i_rt_pae => l_rt_pae
                                                , o_rt_plk => l_rt_plk
                                                );
                  if l_rt_plk.id is not null
                  then
                     
                     l_rt_plk.deactivated_by_pet_id := l_rt_pet.id;
                     l_result := pdm_plk_tapi_pck.plk_update_row( i_plk_id  => l_rt_plk.id
                                                                , io_rt_plk => l_rt_plk
                                                                );

                     
                     pdm_package.deact_physical_member( i_rt_pae_physical => l_rt_pae
                                                      , i_rt_pet_physical => l_rt_pet
                                                      );

                  end if;
               end if; 
            end if; 

         end loop; 
      end if; 

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end handle_suspended_packages;

   




















   procedure disable_log_pae_active_plk( i_rt_plk_active in pdm_package_links%rowtype
                                       , i_evt_id        in pdm_events.id%type
                                       , i_event_time    in cmn_constant.st_timestamp
                                       )
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.disable_log_pae_active_plk';

      l_rt_pae                 pdm_packages%rowtype;
      l_rt_pet                 pdm_package_events%rowtype;
      l_result                 number;
      l_dummy                  boolean;
      l_nt_pae_member          pdm_nt_pae_id := pdm_nt_pae_id();

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      if i_rt_plk_active.id is not null
      then

         
         pdm_common.plk_select_secondary_pae( i_pae_id_primary => i_rt_plk_active.pae_id_primary
                                            , i_pln_id         => pdm_constant.g_con_pln_physical_member
                                            , o_nt_pae_member  => l_nt_pae_member
                                            );

         
         if l_nt_pae_member.count <= 1
         then

            
            
            l_dummy := pdm_pae_tapi_pck.pae_select_row( i_pae_id => i_rt_plk_active.pae_id_secondary
                                                      , o_rt_pae => l_rt_pae
                                                      );

            
            if     l_rt_pae.status    = pdm_constant.g_con_pae_status_open
               and l_rt_pae.ind_match = cmn_constant.g_con_yesno_yes
            then
               
               log_pae_event( i_event_time => cmn_common.default_timestamp
                            , i_evt_id     => i_evt_id
                            , i_rt_pae     => l_rt_pae
                            , o_rt_pet     => l_rt_pet
                            );

               
               l_rt_pae.ind_ready          := cmn_constant.g_con_yesno_no;
               l_rt_pae.ind_match          := cmn_constant.g_con_yesno_no;
               l_rt_pae.ind_match_hdl_psn  := cmn_constant.g_con_yesno_no;
               l_rt_pae.ind_match_hdl_time := cmn_constant.g_con_yesno_no;
               l_rt_pae.ind_match_time     := cmn_constant.g_con_yesno_no;
               l_result := pdm_pae_tapi_pck.pae_update_row( i_pae_id  => l_rt_pae.id
                                                          , io_rt_pae => l_rt_pae
                                                          );
            end if;
         end if;

      end if;

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end disable_log_pae_active_plk;

   





























   procedure enable_log_pae_deactivated_plk( i_rt_plk_deactivated   in pdm_package_links%rowtype
                                           , i_evt_id               in pdm_events.id%type
                                           , i_event_time           in cmn_constant.st_timestamp
                                           , i_lpc_changed          in boolean
                                           , i_ind_use_mult_bagdata in boolean
                                           )
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.enable_log_pae_deactivated_plk';

      l_rt_pae_log_member      pdm_packages%rowtype;
      l_rt_pae_primary         pdm_packages%rowtype;
      l_rt_pet                 pdm_package_events%rowtype;
      l_it_attributes          pdm_attributes.attribute_coll;
      l_it_attributes_empty    pdm_attributes.attribute_coll;
      l_found                  boolean;
      l_dummy                  boolean;
      l_number                 number;
   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      
      
      if     i_rt_plk_deactivated.id is not null
         and i_lpc_changed
         and cmn_common.get_parameter_value( i_prr_name => pdm_constant.g_con_send_ps_logical )
                  = cmn_constant.g_con_yesno_yes
      then

         
         
         l_dummy := pdm_pae_tapi_pck.pae_select_row( i_pae_id => i_rt_plk_deactivated.pae_id_secondary
                                                   , o_rt_pae => l_rt_pae_log_member
                                                   );

         
         l_found := pdm_common.plk_select_primary_pae( i_pae_id_secondary => i_rt_plk_deactivated.pae_id_secondary
                                                     , i_pln_id           => pdm_constant.g_con_pln_compose_attributes
                                                     , o_rt_pae_primary   => l_rt_pae_primary
                                                     );

         
         
         if l_rt_pae_log_member.status = pdm_constant.g_con_pae_status_open and not l_found
         then
            
            log_pae_event( i_event_time => cmn_common.default_timestamp
                         , i_evt_id     => i_evt_id
                         , i_rt_pae     => l_rt_pae_log_member
                         , o_rt_pet     => l_rt_pet
                         );

            
            
            if     l_rt_pae_log_member.pte_id = pdm_constant.g_con_pte_id_member
               or
               (
                   l_rt_pae_log_member.pte_id = pdm_constant.g_con_pte_id_logical
               and not i_ind_use_mult_bagdata
               )
            then

               
               l_rt_pae_log_member.ind_match      := cmn_constant.g_con_yesno_yes;
               l_rt_pae_log_member.ind_match_time := cmn_constant.g_con_yesno_yes;
               l_number := pdm_pae_tapi_pck.pae_update_row( i_pae_id  => l_rt_pae_log_member.id
                                                          , io_rt_pae => l_rt_pae_log_member
                                                          );
            end if;

            
            pdm_packagedata.situation_log_member( i_rt_pae            => l_rt_pae_log_member
                                                , i_packagedatastatus => null
                                                , io_it_attributes    => l_it_attributes
                                                );

            
            pdm_attributes.store_attributes( i_pae_id                     => l_rt_pae_log_member.id
                                           , i_it_attributes              => l_it_attributes
                                           , i_pet_id                     => l_rt_pet.id
                                           , i_event_time                 => null 
                                           , i_ind_use_attribs_event_time => false
                                           );

            
            pdm_attributes.store_derived_attributes( i_pae_id    => l_rt_pae_log_member.id
                                                   , i_pet_id    => l_rt_pet.id
                                                   );

            
            pdm_match.match_main( io_rt_pet                      => l_rt_pet
                                , io_rt_pae                      => l_rt_pae_log_member
                                , i_tasktype                     => null
                                , i_event_time                   => i_event_time
                                , i_ind_assign_package_to_eon    => true
                                , i_ind_force_match              => true
                                , i_ind_force_processstatus      => true
                                , i_ind_force_packageinfo        => false
                                , i_ind_force_taskinstruction    => false
                                , i_party_id_cust                => null
                                , i_instance_id                  => null
                                , i_ind_chk_max_taskreport_error => null
                                , i_ind_force_update_package     => false
                                , i_ind_deregistration           => false
                                , i_it_attributes                => l_it_attributes_empty
                                , i_it_attributes_extracted      => l_it_attributes_empty
                                , i_ind_match_physical_pd        => false
                                , i_ind_packagedata_loaded       => false
                                );
         end if;
      end if;

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end enable_log_pae_deactivated_plk;

   



















   procedure handle_logical_package( i_rt_plk_active        in pdm_package_links%rowtype
                                   , i_rt_plk_deactivated   in pdm_package_links%rowtype
                                   , i_evt_id               in pdm_events.id%type
                                   , i_event_time           in cmn_constant.st_timestamp
                                   , i_lpc_changed          in boolean
                                   , i_ind_use_mult_bagdata in boolean
                                   )
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.handle_logical_package';
   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      enable_log_pae_deactivated_plk( i_rt_plk_deactivated   => i_rt_plk_deactivated
                                    , i_evt_id               => i_evt_id
                                    , i_event_time           => i_event_time
                                    , i_lpc_changed          => i_lpc_changed
                                    , i_ind_use_mult_bagdata => i_ind_use_mult_bagdata
                                    );

      disable_log_pae_active_plk( i_rt_plk_active => i_rt_plk_active
                                , i_evt_id        => i_evt_id
                                , i_event_time    => i_event_time
                                );

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end handle_logical_package;

   











   procedure situation_physical_no_mult( i_rt_pae             in     pdm_packages%rowtype
                                       , i_ind_deregistration in     boolean
                                       , io_it_attributes     in out pdm_attributes.attribute_coll
                                       )
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.situation_physical_no_mult';

      l_rt_adn pdm_attribute_definitions%rowtype;
      l_dummy  boolean;
   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      l_dummy := pdm_adn_tapi_pck.adn_select_row_uk1( i_adn_path => pdm_constant.g_con_derivedpaestatus_attr
                                                    , o_rt_adn   => l_rt_adn
                                                    );
      io_it_attributes(pdm_constant.g_con_derivedpaestatus_attr).adn_id   := l_rt_adn.id;
      io_it_attributes(pdm_constant.g_con_derivedpaestatus_attr).adn_type := l_rt_adn.type;

      
      if i_rt_pae.ind_ready = cmn_constant.g_con_yesno_yes
      then

         
         if    i_rt_pae.status = pdm_constant.g_con_pae_status_closed
            or i_ind_deregistration
         then

            
            if i_rt_pae.ind_packagedata_deleted = cmn_constant.g_con_yesno_yes
            then
               io_it_attributes(pdm_constant.g_con_derivedpaestatus_attr).value(1) := pdm_constant.g_con_derpaests_not_sys_rdydel;
            else
               io_it_attributes(pdm_constant.g_con_derivedpaestatus_attr).value(1) := pdm_constant.g_con_derpaests_not_sys_ready;
            end if;

         else

            
            if i_rt_pae.ind_packagedata_deleted = cmn_constant.g_con_yesno_yes
            then
               io_it_attributes(pdm_constant.g_con_derivedpaestatus_attr).value(1) := pdm_constant.g_con_derpaests_sys_rdydel;
            else
               io_it_attributes(pdm_constant.g_con_derivedpaestatus_attr).value(1) := pdm_constant.g_con_derpaests_sys_ready;
            end if;

         end if; 
      end if; 

      
      if  not io_it_attributes(pdm_constant.g_con_derivedpaestatus_attr).value.exists(1)
      and i_rt_pae.ind_packagedata_deleted = cmn_constant.g_con_yesno_yes
      then

         
         if    i_rt_pae.status = pdm_constant.g_con_pae_status_closed
            or i_ind_deregistration
         then
            io_it_attributes(pdm_constant.g_con_derivedpaestatus_attr).value(1) := pdm_constant.g_con_derpaests_not_sys_pd_del;
         else
            io_it_attributes(pdm_constant.g_con_derivedpaestatus_attr).value(1) := pdm_constant.g_con_derpaests_sys_pd_del;
         end if;
      end if;

      
      if  not io_it_attributes(pdm_constant.g_con_derivedpaestatus_attr).value.exists(1)
      and i_rt_pae.ind_packagedata_multiple = cmn_constant.g_con_yesno_yes
      then

         
         if    i_rt_pae.status = pdm_constant.g_con_pae_status_closed
            or i_ind_deregistration
         then
            io_it_attributes(pdm_constant.g_con_derivedpaestatus_attr).value(1) := pdm_constant.g_con_derpaests_not_sys_pd_mlt;
         else
            io_it_attributes(pdm_constant.g_con_derivedpaestatus_attr).value(1) := pdm_constant.g_con_derpaests_sys_pd_mlt;
         end if;
      end if;

      
      if not io_it_attributes(pdm_constant.g_con_derivedpaestatus_attr).value.exists(1)
      then

         
         if    i_rt_pae.status = pdm_constant.g_con_pae_status_closed
            or i_ind_deregistration
         then
            io_it_attributes(pdm_constant.g_con_derivedpaestatus_attr).value(1) := pdm_constant.g_con_derpaests_not_sys;
         else
            io_it_attributes(pdm_constant.g_con_derivedpaestatus_attr).value(1) := pdm_constant.g_con_derpaests_sys;
         end if;
      end if;

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end situation_physical_no_mult;

   











   procedure situation_physical_mult( i_rt_pae             in     pdm_packages%rowtype
                                    , i_ind_deregistration in     boolean
                                    , io_it_attributes     in out pdm_attributes.attribute_coll
                                    )
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.situation_physical_mult';

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      pdm_attributes.add_attribute( i_adn_path       => pdm_constant.g_con_status_attr
                                  , io_it_attributes => io_it_attributes
                                  );

      
      if    i_rt_pae.status = pdm_constant.g_con_pae_status_closed
         or i_ind_deregistration
      then
         io_it_attributes(pdm_constant.g_con_status_attr).value(1) := pdm_constant.g_con_derpaests_not_sys;
      else
         io_it_attributes(pdm_constant.g_con_status_attr).value(1) := pdm_constant.g_con_derpaests_sys;
      end if;

      
      pdm_attributes.add_attribute_null( i_adn_path       => pdm_constant.g_con_delivered_attr
                                       , io_it_attributes => io_it_attributes
                                       );

      
      if i_rt_pae.ind_ready = cmn_constant.g_con_yesno_yes
      then
         io_it_attributes(pdm_constant.g_con_delivered_attr).value(1) := cmn_constant.g_con_yesno_yes;
      end if;

      
      pdm_attributes.add_attribute_null( i_adn_path       => pdm_constant.g_con_packagedatadeleted_attr
                                       , io_it_attributes => io_it_attributes
                                       );

      
      if i_rt_pae.ind_packagedata_deleted = cmn_constant.g_con_yesno_yes
      then
         io_it_attributes(pdm_constant.g_con_packagedatadeleted_attr).value(1) := cmn_constant.g_con_yesno_yes;
      end if;

      
      pdm_attributes.add_attribute_null( i_adn_path       => pdm_constant.g_con_bagdatachosen_attr
                                       , io_it_attributes => io_it_attributes
                                       );

      if i_rt_pae.ind_chosen = cmn_constant.g_con_yesno_yes
      then
         io_it_attributes(pdm_constant.g_con_bagdatachosen_attr).value(1) := cmn_constant.g_con_yesno_yes;
      end if;

      
      pdm_attributes.add_attribute_value( i_adn_path       => pdm_constant.g_con_nofbagdata_attr
                                        , i_value          => i_rt_pae.nof_bagdata
                                        , io_it_attributes => io_it_attributes
                                        );

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end situation_physical_mult;

   














   procedure situation_physical( i_rt_pae             in     pdm_packages%rowtype
                               , i_ind_deregistration in     boolean
                               , io_it_attributes     in out pdm_attributes.attribute_coll
                               )
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.situation_physical';

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      if pdm_common.use_mult_bagdata
      then
         situation_physical_mult( i_rt_pae             => i_rt_pae
                                , i_ind_deregistration => i_ind_deregistration
                                , io_it_attributes     => io_it_attributes
                                );
      else
         situation_physical_no_mult( i_rt_pae             => i_rt_pae
                                   , i_ind_deregistration => i_ind_deregistration
                                   , io_it_attributes     => io_it_attributes
                                   );
      end if;

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end situation_physical;

   
















   procedure handle_closed_packages( i_rt_pae       in pdm_packages%rowtype
                                   , i_evt_id       in pdm_events.id%type
                                   , i_systimestamp in cmn_constant.st_timestamp
                                   )
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.handle_closed_packages';

      
      cursor c_closed_packages( b_pd_id pdm_packages.pd_id%type )
      is
         select pae.*
         from   pdm_packages      pae
         ,      pdm_package_types pte
         where  pae.pd_id     = b_pd_id
         and    pae.status    = pdm_constant.g_con_pae_status_closed
         and    pae.ind_match = cmn_constant.g_con_yesno_yes
         and    pae.pte_id    = pte.id
         and    pte.name      = pdm_constant.g_con_pte_physical;

      l_rt_pet                 pdm_package_events%rowtype;
      l_rt_plk                 pdm_package_links%rowtype;
      l_result                 number;
      l_dummy                  boolean;
   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      if     i_rt_pae.status = pdm_constant.g_con_pae_status_open
         and pdm_package.is_valid_pd_id( i_pd_id => i_rt_pae.pd_id )
      then
         
         for l_rt_pae in c_closed_packages( i_rt_pae.pd_id )
         loop
            
            l_dummy := pdm_pae_tapi_pck.pae_select_row_upd( i_pae_id => l_rt_pae.id
                                                          , o_rt_pae => l_rt_pae
                                                          );

            
            if     l_rt_pae.pd_id     = i_rt_pae.pd_id
               and l_rt_pae.status    = pdm_constant.g_con_pae_status_closed
               and l_rt_pae.ind_match = cmn_constant.g_con_yesno_yes
            then
               
               l_rt_pet              := null;
               l_rt_pet.evt_id       := i_evt_id;
               l_rt_pet.pae_id       := l_rt_pae.id;
               l_rt_pet.date_created := i_systimestamp;
               pdm_common.create_package_event( io_rt_pet                => l_rt_pet
                                              , i_ind_check_existing_pet => false
                                              );

               
               l_rt_pae.ind_match          := cmn_constant.g_con_yesno_no;
               l_rt_pae.ind_match_hdl_psn  := cmn_constant.g_con_yesno_no;
               l_rt_pae.ind_match_hdl_time := cmn_constant.g_con_yesno_no;
               l_rt_pae.ind_match_time     := cmn_constant.g_con_yesno_no;
               l_result := pdm_pae_tapi_pck.pae_update_row( i_pae_id  => l_rt_pae.id
                                                          , io_rt_pae => l_rt_pae
                                                          );

               
               select_one_active_package_link( i_rt_pae => l_rt_pae
                                             , o_rt_plk => l_rt_plk
                                             );
               if l_rt_plk.id is not null
               then
                  
                  l_rt_plk.deactivated_by_pet_id := l_rt_pet.id;
                  l_result := pdm_plk_tapi_pck.plk_update_row( i_plk_id  => l_rt_plk.id
                                                             , io_rt_plk => l_rt_plk
                                                             );

                  
                  pdm_package.deact_physical_member( i_rt_pae_physical => l_rt_pae
                                                   , i_rt_pet_physical => l_rt_pet
                                                   );

               end if;
            end if; 
         end loop; 
      end if; 

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end handle_closed_packages;

   












   procedure handle_ghost_indicator( io_rt_pae            in out pdm_packages%rowtype
                                   , io_it_attributes     in out pdm_attributes.attribute_coll
                                   , i_tr_error           in     varchar2
                                   , i_event_time         in     cmn_constant.st_timestamp
                                   , i_ind_physical_event in     boolean
                                   , o_taskinstruction       out boolean
                                   )

   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.handle_ghost_indicator';

      l_rt_adn      pdm_attribute_definitions%rowtype;
      l_dummy       boolean;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      o_taskinstruction := false;

      
      if     io_rt_pae.ind_ghost = cmn_constant.g_con_yesno_no
         and i_tr_error          = pdm_constant.g_con_tr_error_inactivated
         and not i_ind_physical_event
      then

         
         if i_event_time < io_rt_pae.date_last_event
         then
            viu_info.raise_info
               ( i_ifo_nr            => viu_constant.c_ifo_defineghost
               , i_calling_procedure => l_con_proc_name
               , i_severity          => viu_info.c_severity_warning
               , i_additional_data   =>
                    'EventTime (' || i_event_time || ') < PACKAGE.DATE LAST DETECTED (' || io_rt_pae.date_last_event || ')'
                 || ', PI ID=' || io_rt_pae.pi_id
                 || ', Message ID=' || cmn_interface.get_message_id
                                          ( i_direction => cmn_constant.g_con_msg_direction_incoming
                                          )
               );
         end if;

         
         io_rt_pae.ind_ghost := cmn_constant.g_con_yesno_yes;

         
         l_dummy := pdm_adn_tapi_pck.adn_select_row_uk1( i_adn_path => pdm_constant.g_con_ghost_attr
                                                       , o_rt_adn   => l_rt_adn
                                                       );
         io_it_attributes(l_rt_adn.path).adn_id   := l_rt_adn.id;
         io_it_attributes(l_rt_adn.path).value(1) := cmn_constant.g_con_yesno_yes;
         io_it_attributes(l_rt_adn.path).adn_type := l_rt_adn.type;

      end if;

      
      if     io_rt_pae.ind_ghost = cmn_constant.g_con_yesno_yes
         and i_ind_physical_event
      then

         
         if i_event_time < io_rt_pae.date_last_event
         then
            viu_info.raise_info
               ( i_ifo_nr            => viu_constant.c_ifo_undefineghost
               , i_calling_procedure => l_con_proc_name
               , i_severity          => viu_info.c_severity_warning
               , i_additional_data   =>
                    'EventTime (' || i_event_time || ') < PACKAGE.DATE LAST DETECTED (' || io_rt_pae.date_last_event || ')'
                 || ', PI ID=' || io_rt_pae.pi_id
                 || ', Message ID=' || cmn_interface.get_message_id
                                          ( i_direction => cmn_constant.g_con_msg_direction_incoming
                                          )
               );
         end if;

         
         io_rt_pae.ind_ghost := cmn_constant.g_con_yesno_no;

         
         l_dummy := pdm_adn_tapi_pck.adn_select_row_uk1( i_adn_path => pdm_constant.g_con_ghost_attr
                                                       , o_rt_adn   => l_rt_adn
                                                       );
         io_it_attributes(l_rt_adn.path).adn_id   := l_rt_adn.id;
         io_it_attributes(l_rt_adn.path).value(1) := null;
         io_it_attributes(l_rt_adn.path).adn_type := l_rt_adn.type;

         
         o_taskinstruction := true;

      end if;

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
   end handle_ghost_indicator;

   









































































   procedure hdl_taskreport_registration( io_rt_pae               in out pdm_packages%rowtype
                                        , i_eventtime             in     cmn_constant.st_timestamp
                                        , i_systimestamp          in     cmn_constant.st_timestamp
                                        , i_tasktype              in     pdm_task_types.name%type
                                        , i_stationid_cust        in     pdm_stations.id_cust%type
                                        , i_rt_stn                in     pdm_stations%rowtype
                                        , i_pi_id                 in     pdm_packages.pi_id%type
                                        , i_place_of_birth        in     pdm_packages.place_of_birth%type
                                        , io_it_attributes        in out pdm_attributes.attribute_coll
                                        , io_rt_pet               in out pdm_package_events%rowtype
                                        , i_lpc_old               in     pdm_package_attributes.value%type
                                        , i_lpc_extension_old     in     pdm_package_attributes.value%type
                                        , i_reporting             in     boolean
                                        , o_pending_task_inserted    out boolean
                                        , i_ind_force_match       in     boolean
                                        , i_ind_package_created   in     boolean
                                        , i_ind_use_mult_bagdata  in     boolean
                                        )
   is
      l_con_proc_name  constant cmn_constant.st_proc_name := g_con_package || '.hdl_taskreport_registration';

      
      cursor c_smd_exists( b_stn_id        pdm_stations.id%type
                         , b_pmd_direction cmn_party_msg_definitions.direction%type
                         , b_imd_name      cmn_ifc_msg_definitions.name%type
                         )
      is
         select 1
         from   pdm_v_stn_msg_definitions smd
         where  smd.stn_id       = b_stn_id
         and    smd.direction    = b_pmd_direction
         and    smd.message_name = b_imd_name
         and    rownum           = 1;

      l_found                   boolean;
      l_dummy                   number;
      l_result                  boolean;
      l_lpc_changed             boolean;
      l_hdl_psn                 boolean;
      l_rt_plk_active           pdm_package_links%rowtype;
      l_rt_plk_deactivated      pdm_package_links%rowtype;
      l_it_attributes_situation pdm_attributes.attribute_coll;
      l_it_attributes_empty     pdm_attributes.attribute_coll;
   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      o_pending_task_inserted := false;

      
      if i_stationid_cust is not null
      then

         
         pdm_attributes.add_attribute_value( i_adn_path       => pdm_constant.g_con_input_stationid_attr
                                           , i_value          => i_stationid_cust
                                           , io_it_attributes => io_it_attributes
                                           );
      end if;

      
      open c_smd_exists( b_stn_id        => i_rt_stn.id
                       , b_pmd_direction => cmn_constant.g_con_msg_direction_outgoing
                       , b_imd_name      => pdm_constant.g_con_pirequest_pi
                       );
      fetch c_smd_exists into l_dummy;
      l_found := c_smd_exists%found;
      close c_smd_exists;

      
      
      if     i_pi_id is not null
         and i_place_of_birth is not null
         and not pdm_package.is_valid_fallback_tag( i_pd_id => io_rt_pae.pd_id )
         and l_found
      then
         pdm_attributes.store_attributes( i_pae_id                     => io_rt_pae.id
                                        , i_it_attributes              => io_it_attributes
                                        , i_pet_id                     => io_rt_pet.id
                                        , i_event_time                 => i_eventtime
                                        , i_ind_use_attribs_event_time => false
                                        );

         
         handle_suspended_packages( i_rt_pae       => io_rt_pae
                                  , i_evt_id       => io_rt_pet.evt_id
                                  , i_systimestamp => i_systimestamp
                                  );

         
         handle_closed_packages( i_rt_pae       => io_rt_pae
                               , i_evt_id       => io_rt_pet.evt_id
                               , i_systimestamp => i_systimestamp
                               );

         
         handle_package_link( io_rt_pae              => io_rt_pae
                            , i_rt_pet               => io_rt_pet
                            , i_systimestamp         => i_systimestamp
                            , i_ind_use_mult_bagdata => i_ind_use_mult_bagdata
                            , o_rt_plk_active        => l_rt_plk_active
                            , o_rt_plk_deactivated   => l_rt_plk_deactivated
                            , o_lpc_changed          => l_lpc_changed
                            , o_hdl_psn              => l_hdl_psn
                            );

         
         pdm_attributes.store_functional_src_attribs
                                 ( i_pae_id_orig        => io_rt_pae.id
                                 , i_pet_id_orig        => io_rt_pet.id
                                 , i_pet_id_curr        => io_rt_pet.id
                                 , i_rt_plk_active      => l_rt_plk_active
                                 , i_rt_plk_deactivated => l_rt_plk_deactivated
                                 , i_ind_pae_reopened   => i_ind_force_match
                                 );

         
         situation_physical( i_rt_pae             => io_rt_pae
                           , i_ind_deregistration => false
                           , io_it_attributes     => l_it_attributes_situation
                           );

         
         pdm_attributes.store_attributes( i_pae_id                     => io_rt_pae.id
                                        , i_it_attributes              => l_it_attributes_situation
                                        , i_pet_id                     => io_rt_pet.id
                                        , i_event_time                 => null 
                                        , i_ind_use_attribs_event_time => false
                                        );

         
         pdm_common.hdl_functional_extensions( i_rt_pae       => io_rt_pae
                                             , i_rt_pet       => io_rt_pet
                                             , i_message_type => pdm_constant.g_con_taskreport
                                             );

         
         
         pdm_attributes.store_derived_attributes( i_pae_id    => io_rt_pae.id
                                                , i_pet_id    => io_rt_pet.id
                                                );

         insert_pending_task( i_event_time     => i_eventtime
                            , i_pae_id         => io_rt_pae.id
                            , i_tasktype       => i_tasktype
                            , i_stn_id         => i_rt_stn.id
                            , i_reason_request => pdm_constant.g_con_pirequest_pi
                            );

         o_pending_task_inserted := true;

         
         pdm_processstatus.send_processstatus
            ( i_rt_pae                   => io_rt_pae
            , i_rt_pet                   => io_rt_pet
            , i_tasktype                 => null
            , i_pty_id_cust              => pdm_common.get_process_id( i_ptr_name => pdm_constant.g_con_odb_party_process_id )
            , i_event_time               => cmn_common.default_timestamp
            , i_rt_plk_deactivated       => l_rt_plk_deactivated
            , i_lpc_old                  => i_lpc_old
            , i_lpc_extension_old        => i_lpc_extension_old
            , i_ind_lpc_old              => true
            , i_ind_triggered_by_cleanup => false
            );

         
         handle_logical_package( i_rt_plk_active        => l_rt_plk_active
                               , i_rt_plk_deactivated   => l_rt_plk_deactivated
                               , i_evt_id               => io_rt_pet.evt_id
                               , i_event_time           => i_eventtime
                               , i_lpc_changed          => l_lpc_changed
                               , i_ind_use_mult_bagdata => i_ind_use_mult_bagdata
                               );

         pdm_match.match_main( io_rt_pet                      => io_rt_pet
                             , io_rt_pae                      => io_rt_pae
                             , i_tasktype                     => i_tasktype
                             , i_event_time                   => i_eventtime
                             , i_ind_assign_package_to_eon    => true
                             , i_ind_force_match              => i_ind_force_match or l_hdl_psn
                             , i_ind_force_processstatus      => false
                             , i_ind_force_packageinfo        => i_reporting
                             , i_ind_force_taskinstruction    => true
                             , i_party_id_cust                => null
                             , i_instance_id                  => null
                             , i_ind_chk_max_taskreport_error => false
                             , i_ind_force_update_package     => true
                             , i_ind_deregistration           => false
                             , i_it_attributes                => l_it_attributes_empty
                             , i_it_attributes_extracted      => io_it_attributes
                             , i_ind_match_physical_pd        => false
                             , i_ind_packagedata_loaded       => false
                             );

         l_result :=
            send_stn_dependent_msg( i_stn_id   => i_rt_stn.id
                                  , i_rt_pae   => io_rt_pae
                                  , i_imd_name => pdm_constant.g_con_pirequest_pi
                                  , i_rt_pet   => io_rt_pet
                                  );
      end if;

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         if c_smd_exists%isopen
         then
            close c_smd_exists;
         end if;

         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end hdl_taskreport_registration;

   






































   procedure hdl_taskreport_identification1( io_rt_pae             in out pdm_packages%rowtype
                                           , i_pet_id              in     pdm_package_events.id%type
                                           , i_eventtime           in     cmn_constant.st_timestamp
                                           , i_rt_stn              in     pdm_stations%rowtype
                                           , i_party_type          in     cmn_parties.type%type
                                           , i_ind_package_created in     boolean
                                           , i_it_attributes       in     pdm_attributes.attribute_coll
                                           )
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.hdl_taskreport_identification1';

      l_it_baggagetag          pdm_constant.it_baggagetag;
      l_pd_ids                 pdm_constant.it_pd_id;
      l_count_vfbta            pls_integer :=0;
      l_count_valid            pls_integer :=0;
      l_count_existing         pls_integer :=0;
      l_current_pd_id          pdm_packages.pd_id%type;
      l_pd_id_vfbta            pdm_packages.pd_id%type;
      l_pd_id_valid            pdm_packages.pd_id%type;
      l_lpc_status             varchar2( 30 );
      l_lpc_extension          pdm_package_attributes.value%type;
      l_pd_id_found            boolean := false;

      
      cursor c_exist_secondary_pae( b_pd_id  in pdm_packages.pd_id%type )
      is
         select pae.pd_id
         from   pdm_packages pae
         where  pae.status = pdm_constant.g_con_pae_status_open
         and    pae.pd_id  = b_pd_id
         and    pae.pte_id = pdm_constant.g_con_pte_id_logical
         ;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      if io_rt_pae.status = pdm_constant.g_con_pae_status_open
      then
         l_it_baggagetag := get_baggagetags( i_it_attributes => i_it_attributes );

         
         determine_baggage_hdlr_attribs( i_pae_id        => io_rt_pae.id
                                       , i_pet_id        => i_pet_id
                                       , i_event_time    => i_eventtime
                                       , i_it_baggagetag => l_it_baggagetag
                                       );

         l_current_pd_id := io_rt_pae.pd_id;

         
         

         if l_it_baggagetag.count > 0
         then
            for i in l_it_baggagetag.first .. l_it_baggagetag.count
            loop
               if pdm_package.is_valid_fallback_tag( i_pd_id => l_it_baggagetag(i).lpc )
               then
                  l_pd_id_vfbta   := l_it_baggagetag(i).lpc;
                  l_lpc_extension := l_it_baggagetag(i).lpc_extension;
                  l_count_vfbta   := l_count_vfbta +1;
               elsif pdm_package.is_valid_pd_id( i_pd_id => l_it_baggagetag(i).lpc )
               then
                  l_count_valid           := l_count_valid +1;
                  l_pd_ids(l_count_valid) := l_it_baggagetag(i).lpc;
                  l_lpc_extension         := l_it_baggagetag(i).lpc_extension;
                  l_pd_id_valid           := l_pd_ids(l_count_valid);
                  if l_current_pd_id = l_pd_ids(l_count_valid)
                  then
                     l_pd_id_found := true;
                  end if;
               end if;
            end loop;
         end if;

         

         
            
         if    ( l_it_baggagetag.count = 0 and l_current_pd_id is not null )

            
            
            or ( l_count_vfbta = 1         and l_current_pd_id = l_pd_id_vfbta )

            
            
            
            
            or (    l_count_vfbta = 0
                and l_pd_id_found
                and (   cmn_common.get_parameter_value(i_prr_name => pdm_constant.g_con_ptr_use_current_pd_id) = cmn_constant.g_con_yesno_yes
                     or l_count_valid = 1
                    )
               )
         then
            null;
         else 
            

            case 
            when l_count_vfbta = 0
            then
              case 

              when l_count_valid = 0
              then
                 l_lpc_status := pdm_constant.g_con_lpc_status_noread;

              when l_count_valid = 1
              then
                 l_lpc_status    := pdm_constant.g_con_lpc_status_read;
                 io_rt_pae.pd_id := l_pd_id_valid;

              when l_count_valid > 1
              then 
                 for i in l_pd_ids.first .. l_pd_ids.count
                 loop
                    open c_exist_secondary_pae(l_pd_ids(i));
                    fetch c_exist_secondary_pae into l_pd_id_valid;
                    if c_exist_secondary_pae%found
                    then
                       l_count_existing := l_count_existing +1;
                    end if;
                    close c_exist_secondary_pae;
                 end loop;

                 if l_count_existing = 0
                 then
                    l_lpc_status := pdm_constant.g_con_lpc_status_multi_nolog;
                 elsif l_count_existing = 1
                 then
                    l_lpc_status    := pdm_constant.g_con_lpc_status_read;
                    io_rt_pae.pd_id := l_pd_id_valid;
                 else
                    l_lpc_status := pdm_constant.g_con_lpc_status_multiread;
                 end if;
              end case;

            when l_count_vfbta = 1
            then
              l_lpc_status    := pdm_constant.g_con_lpc_status_vfbta;
              io_rt_pae.pd_id := l_pd_id_vfbta;

            when l_count_vfbta > 1
            then
              l_lpc_status := pdm_constant.g_con_lpc_status_multi_vfbta;
            end case;

            set_scanresult_pd_id
               ( i_pae_id     => io_rt_pae.id
               , i_pet_id     => i_pet_id
               , i_scanresult => l_lpc_status
               );

            
            if    l_lpc_status = pdm_constant.g_con_lpc_status_read
               or l_lpc_status = pdm_constant.g_con_lpc_status_vfbta
            then
               set_baggagetag( i_pae_id        => io_rt_pae.id
                             , i_pet_id        => i_pet_id
                             , i_lpc           => io_rt_pae.pd_id
                             , i_lpc_extension => l_lpc_extension
                             , i_event_time    => i_eventtime
                             );

               
               if l_lpc_status = pdm_constant.g_con_lpc_status_read
               then
                  
                  
                  if l_current_pd_id is null
                  then
                     pull_resume_tracking_attribs( io_rt_pae             => io_rt_pae
                                                 , i_pet_id              => i_pet_id
                                                 , i_rt_stn              => i_rt_stn
                                                 , i_party_type          => i_party_type
                                                 , i_ind_package_created => i_ind_package_created
                                                 , i_event_time          => i_eventtime
                                                 );
                  end if;
               end if; 
            else 
               io_rt_pae.pd_id := null;

               set_baggagetag( i_pae_id        => io_rt_pae.id
                             , i_pet_id        => i_pet_id
                             , i_lpc           => null
                             , i_lpc_extension => null
                             , i_event_time    => i_eventtime
                             );
            end if; 
         end if; 
      end if; 

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         if c_exist_secondary_pae%isopen
         then
            close c_exist_secondary_pae;
         end if;

         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end hdl_taskreport_identification1;

   











   procedure delete_tag_attributes ( io_it_attributes  in out  pdm_attributes.attribute_coll )
   is
      l_con_proc_name   constant cmn_constant.st_proc_name    := g_con_package || '.delete_tag_attributes';

   begin
      viu_module.enter_module( i_module      => l_con_proc_name );

      
      pdm_attributes.add_attribute_null( i_adn_path       => pdm_constant.g_con_lpc_attr_func
                                       , io_it_attributes => io_it_attributes
                                       );

      
      pdm_attributes.add_attribute_null( i_adn_path       => pdm_constant.g_con_lpc_status_attr
                                       , io_it_attributes => io_it_attributes
                                       );

      
      pdm_attributes.add_attribute_null( i_adn_path       => pdm_constant.g_con_pd_id1_attr
                                       , io_it_attributes => io_it_attributes
                                       );
      pdm_attributes.add_attribute_null( i_adn_path       => pdm_constant.g_con_pd_id2_attr
                                       , io_it_attributes => io_it_attributes
                                       );
      pdm_attributes.add_attribute_null( i_adn_path       => pdm_constant.g_con_pd_id3_attr
                                       , io_it_attributes => io_it_attributes
                                       );

      
      pdm_attributes.add_attribute_null( i_adn_path       => pdm_constant.g_con_vfbta1_attr
                                       , io_it_attributes => io_it_attributes
                                       );
      pdm_attributes.add_attribute_null( i_adn_path       => pdm_constant.g_con_vfbta2_attr
                                       , io_it_attributes => io_it_attributes
                                       );
      pdm_attributes.add_attribute_null( i_adn_path       => pdm_constant.g_con_vfbta3_attr
                                       , io_it_attributes => io_it_attributes
                                       );

      viu_module.leave_module( i_module      => l_con_proc_name );

   exception
      when others
      then
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
   end delete_tag_attributes;

   











   procedure lpc_rule_no_pdid_vfbta ( io_continue      in out boolean
                                    , io_it_attributes in out pdm_attributes.attribute_coll
                                    , i_pae_id         in     pdm_packages.id%type
                                    , i_nt_pd_id       in     pdm_nt_lpc
                                    , i_nt_vfbta       in     pdm_nt_lpc
                                    , i_nt_invalid     in     pdm_nt_lpc
                                    )
   is
      l_con_proc_name   constant cmn_constant.st_proc_name    := g_con_package || '.lpc_rule_no_pdid_vfbta';

      l_lpc_status pdm_package_attributes.value%type;

   begin
      viu_module.enter_module( i_module      => l_con_proc_name );

      
      
      if     io_continue
         and i_nt_pd_id is empty
      	 and i_nt_vfbta is empty
      then

         
         io_continue := false;

         
         l_lpc_status := pdm_common.pbe_select_value( i_pae_id   => i_pae_id
                                                    , i_adn_path => pdm_constant.g_con_lpc_status_attr
                                                    );

         
         if l_lpc_status is null
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_selectreturnednorecords
                               , i_calling_procedure => l_con_proc_name
                               , i_severity          => viu_info.c_severity_error
                               , i_additional_data   => 'No PACKAGE ATTRIBUTE Internal/Special/LPC_Status found'
                               );

         
         elsif l_lpc_status =  pdm_constant.g_con_lpc_status_unknown
         then

            
            pdm_attributes.add_attribute_value( i_adn_path       => pdm_constant.g_con_lpc_status_attr
                                              , i_value          => pdm_constant.g_con_lpc_status_noread
                                              , io_it_attributes => io_it_attributes
                                              );

         else

            
            pdm_attributes.add_attribute_value( i_adn_path       => pdm_constant.g_con_lpc_status_attr
                                              , i_value          => l_lpc_status
                                              , io_it_attributes => io_it_attributes
                                              );
         end if; 
      end if;

      viu_module.leave_module( i_module      => l_con_proc_name );

   exception
      when others
      then
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
   end lpc_rule_no_pdid_vfbta;

   











   procedure lpc_rule_manual_vfbta ( io_continue      in out boolean
                                   , io_it_attributes in out pdm_attributes.attribute_coll
                                   , io_rt_pae        in out pdm_packages%rowtype
                                   , i_nt_vfbta       in     pdm_nt_lpc
                                   , i_tasktype       in     pdm_task_types.name%type
                                   )
   is
      l_con_proc_name   constant cmn_constant.st_proc_name    := g_con_package || '.lpc_rule_manual_vfbta';

   begin
      viu_module.enter_module( i_module      => l_con_proc_name );

      
      
      if     io_continue
         and i_nt_vfbta.count = 1
         and i_tasktype in ( pdm_constant.g_con_tte_manualscan
                           , pdm_constant.g_con_tte_retag
                           )
      then

         
         io_continue := false;

         
         delete_tag_attributes(io_it_attributes => io_it_attributes);

         
         pdm_attributes.add_attribute_null( i_adn_path       => pdm_constant.g_con_ident_manual_attr
                                          , io_it_attributes => io_it_attributes
                                          );

         io_rt_pae.pd_id                                               := i_nt_vfbta(1);
         io_it_attributes(pdm_constant.g_con_lpc_attr_func).value(1)   := i_nt_vfbta(1);
         io_it_attributes(pdm_constant.g_con_vfbta1_attr).value(1)     := i_nt_vfbta(1);

         
         io_it_attributes(pdm_constant.g_con_lpc_status_attr).value(1) := pdm_constant.g_con_lpc_status_vfbta;
      end if;

      viu_module.leave_module( i_module      => l_con_proc_name );

   exception
      when others
      then
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
   end lpc_rule_manual_vfbta;

   











   procedure lpc_rule_manual_pdid ( io_continue      in out boolean
                                  , io_it_attributes in out pdm_attributes.attribute_coll
                                  , io_rt_pae        in out pdm_packages%rowtype
                                  , i_nt_pd_id       in     pdm_nt_lpc
                                  , i_tasktype       in     pdm_task_types.name%type
                                  )
   is
      l_con_proc_name   constant cmn_constant.st_proc_name    := g_con_package || '.lpc_rule_manual_pdid';

   begin
      viu_module.enter_module( i_module      => l_con_proc_name );

      if     io_continue
         and i_nt_pd_id.count = 1
         and i_tasktype in ( pdm_constant.g_con_tte_manualscan
                           , pdm_constant.g_con_tte_retag
                           )
      then

         io_continue := false;

         
         delete_tag_attributes(io_it_attributes => io_it_attributes);

         
         pdm_attributes.add_attribute_value( i_adn_path       => pdm_constant.g_con_ident_manual_attr
                                           , i_value          => pdm_constant.g_con_attr_value_true
                                           , io_it_attributes => io_it_attributes
                                           );

         io_rt_pae.pd_id                                                 := i_nt_pd_id(1);
         io_it_attributes(pdm_constant.g_con_lpc_attr_func).value(1)     := i_nt_pd_id(1);
         io_it_attributes(pdm_constant.g_con_pd_id1_attr).value(1)       := i_nt_pd_id(1);

         
         io_it_attributes(pdm_constant.g_con_lpc_status_attr).value(1)   := pdm_constant.g_con_lpc_status_read;

      end if;

      viu_module.leave_module( i_module      => l_con_proc_name );

   exception
      when others
      then
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
   end lpc_rule_manual_pdid;

   











   procedure lpc_rule_one_vfbta ( io_continue         in out boolean
                                , io_it_attributes    in out pdm_attributes.attribute_coll
                                , io_rt_pae           in out pdm_packages%rowtype
                                , i_nt_vfbta_combined in     pdm_nt_lpc
                                )
   is
      l_con_proc_name   constant cmn_constant.st_proc_name    := g_con_package || '.lpc_rule_one_vfbta';

   begin
      viu_module.enter_module( i_module      => l_con_proc_name );

      if     io_continue
         and i_nt_vfbta_combined.count = 1
      then

         io_continue := false;

         
         delete_tag_attributes(io_it_attributes => io_it_attributes);

         
         pdm_attributes.add_attribute_null( i_adn_path       => pdm_constant.g_con_ident_manual_attr
                                          , io_it_attributes => io_it_attributes
                                          );

         io_rt_pae.pd_id                                               := i_nt_vfbta_combined(1);
         io_it_attributes(pdm_constant.g_con_lpc_attr_func).value(1)   := i_nt_vfbta_combined(1);
         io_it_attributes(pdm_constant.g_con_vfbta1_attr).value(1)     := i_nt_vfbta_combined(1);

         
         io_it_attributes(pdm_constant.g_con_lpc_status_attr).value(1) := pdm_constant.g_con_lpc_status_vfbta;

      end if;

      viu_module.leave_module( i_module      => l_con_proc_name );

   exception
      when others
      then
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
   end lpc_rule_one_vfbta;

   











   procedure lpc_rule_multi_vfbta ( io_continue         in out boolean
                                  , io_it_attributes    in out pdm_attributes.attribute_coll
                                  , io_rt_pae           in out pdm_packages%rowtype
                                  , i_nt_vfbta_combined in     pdm_nt_lpc
                                  )
   is
      l_con_proc_name   constant cmn_constant.st_proc_name    := g_con_package || '.lpc_rule_multi_vfbta';

   begin
      viu_module.enter_module( i_module      => l_con_proc_name );

      if     io_continue
         and i_nt_vfbta_combined.count > 1
      then

         io_continue := false;

         
         delete_tag_attributes(io_it_attributes => io_it_attributes);

         
         pdm_attributes.add_attribute_null( i_adn_path       => pdm_constant.g_con_ident_manual_attr
                                          , io_it_attributes => io_it_attributes
                                          );

         io_rt_pae.pd_id                                               := null;

         io_it_attributes(pdm_constant.g_con_vfbta1_attr).value(1)     := i_nt_vfbta_combined(1);
         io_it_attributes(pdm_constant.g_con_vfbta2_attr).value(1)     := i_nt_vfbta_combined(2);

         if i_nt_vfbta_combined.exists(3)
         then
            io_it_attributes(pdm_constant.g_con_vfbta3_attr).value(1)     := i_nt_vfbta_combined(3);
         end if;

         
         io_it_attributes(pdm_constant.g_con_lpc_status_attr).value(1) := pdm_constant.g_con_lpc_status_multi_vfbta;

      end if;

      viu_module.leave_module( i_module      => l_con_proc_name );

   exception
      when others
      then
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
   end lpc_rule_multi_vfbta;

   











   procedure lpc_rule_one_pdid ( io_continue         in out boolean
                               , io_it_attributes    in out pdm_attributes.attribute_coll
                               , io_rt_pae           in out pdm_packages%rowtype
                               , i_nt_pd_id_combined in     pdm_nt_lpc
                               )
   is
      l_con_proc_name   constant cmn_constant.st_proc_name    := g_con_package || '.lpc_rule_one_pdid';

   begin
      viu_module.enter_module( i_module      => l_con_proc_name );

      if     io_continue
         and i_nt_pd_id_combined.count = 1
      then

         io_continue := false;

         
         delete_tag_attributes(io_it_attributes => io_it_attributes);

         io_rt_pae.pd_id                                               := i_nt_pd_id_combined(1);
         io_it_attributes(pdm_constant.g_con_lpc_attr_func).value(1)   := i_nt_pd_id_combined(1);
         io_it_attributes(pdm_constant.g_con_pd_id1_attr).value(1)     := i_nt_pd_id_combined(1);

         
         io_it_attributes(pdm_constant.g_con_lpc_status_attr).value(1) := pdm_constant.g_con_lpc_status_read;

      end if;

      viu_module.leave_module( i_module      => l_con_proc_name );

   exception
      when others
      then
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
   end lpc_rule_one_pdid;

   










   procedure lpc_rule_man_no_logical ( io_continue         in out boolean
                                     , io_it_attributes    in out pdm_attributes.attribute_coll
                                     , i_pae_id            in     pdm_packages.id%type
                                     , i_nt_logical_pae    in     pdm_nt_logical_pae
                                     , i_nt_pd_id_combined in     pdm_nt_lpc
                                     )
   is
      l_con_proc_name   constant cmn_constant.st_proc_name    := g_con_package || '.lpc_rule_man_no_logical';

      l_ident_manual pdm_package_attributes.value%type;
      l_lpc_status   pdm_package_attributes.value%type;

   begin
      viu_module.enter_module( i_module      => l_con_proc_name );

      
      l_ident_manual := pdm_common.pbe_select_value( i_pae_id   => i_pae_id
                                                   , i_adn_path => pdm_constant.g_con_ident_manual_attr
                                                   );

      if     io_continue
         and i_nt_pd_id_combined.count >  1
         and i_nt_logical_pae          is empty
      	 and l_ident_manual            =  pdm_constant.g_con_attr_value_true
      then

         io_continue := false;

         

         
         l_lpc_status := pdm_common.pbe_select_value( i_pae_id   => i_pae_id
                                                    , i_adn_path => pdm_constant.g_con_lpc_status_attr
                                                    );
         pdm_attributes.add_attribute_value( i_adn_path       => pdm_constant.g_con_lpc_status_attr
                                           , i_value          => l_lpc_status
                                           , io_it_attributes => io_it_attributes
                                           );

      end if;

      viu_module.leave_module( i_module      => l_con_proc_name );

   exception
      when others
      then
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
   end lpc_rule_man_no_logical;

   











   procedure lpc_rule_mult_pdid_no_log ( io_continue         in out boolean
                                       , io_it_attributes    in out pdm_attributes.attribute_coll
                                       , io_rt_pae           in out pdm_packages%rowtype
                                       , i_nt_logical_pae    in     pdm_nt_logical_pae
                                       , i_nt_pd_id_combined in     pdm_nt_lpc
                                       )
   is
      l_con_proc_name   constant cmn_constant.st_proc_name    := g_con_package || '.lpc_rule_mult_pdid_no_log';

   begin
      viu_module.enter_module( i_module      => l_con_proc_name );

      if     io_continue
         and i_nt_pd_id_combined.count > 1
         and i_nt_logical_pae.count    = 0
      then

         io_continue := false;

         
         delete_tag_attributes(io_it_attributes => io_it_attributes);

         
         pdm_attributes.add_attribute_null( i_adn_path       => pdm_constant.g_con_ident_manual_attr
                                          , io_it_attributes => io_it_attributes
                                          );

         io_rt_pae.pd_id                                               := null;

         io_it_attributes(pdm_constant.g_con_pd_id1_attr).value(1)     := i_nt_pd_id_combined(1);
         io_it_attributes(pdm_constant.g_con_pd_id2_attr).value(1)     := i_nt_pd_id_combined(2);

         if i_nt_pd_id_combined.exists(3) 
         then
            io_it_attributes(pdm_constant.g_con_pd_id3_attr).value(1)     := i_nt_pd_id_combined(3);
         end if;

         
         io_it_attributes(pdm_constant.g_con_lpc_status_attr).value(1) := pdm_constant.g_con_lpc_status_multi_nolog;

      end if;

      viu_module.leave_module( i_module      => l_con_proc_name );

   exception
      when others
      then
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
   end lpc_rule_mult_pdid_no_log;

   












   procedure lpc_rule_mult_pdid_one_log ( io_continue         in out boolean
                                        , io_it_attributes    in out pdm_attributes.attribute_coll
                                        , io_rt_pae           in out pdm_packages%rowtype
                                        , i_nt_logical_pae    in     pdm_nt_logical_pae
                                        , i_nt_pd_id_combined in     pdm_nt_lpc
                                        )
   is
      l_con_proc_name   constant cmn_constant.st_proc_name    := g_con_package || '.lpc_rule_mult_pdid_one_log';

   begin
      viu_module.enter_module( i_module      => l_con_proc_name );

      if     io_continue
         and i_nt_pd_id_combined.count > 1
         and i_nt_logical_pae.count    = 1
      then

         io_continue := false;

         
         delete_tag_attributes(io_it_attributes => io_it_attributes);

         
         pdm_attributes.add_attribute_null( i_adn_path       => pdm_constant.g_con_ident_manual_attr
                                          , io_it_attributes => io_it_attributes
                                          );

         io_rt_pae.pd_id                                               := i_nt_logical_pae(1).pd_id;
         io_it_attributes(pdm_constant.g_con_lpc_attr_func).value(1)   := i_nt_logical_pae(1).pd_id;
         io_it_attributes(pdm_constant.g_con_pd_id1_attr).value(1)     := i_nt_logical_pae(1).pd_id;

         
         io_it_attributes(pdm_constant.g_con_lpc_status_attr).value(1) := pdm_constant.g_con_lpc_status_read;

      end if;

      viu_module.leave_module( i_module      => l_con_proc_name );

   exception
      when others
      then
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
   end lpc_rule_mult_pdid_one_log;

   











   procedure lpc_rule_mult_pdid_mult_log ( io_continue        in out boolean
                                         , io_it_attributes   in out pdm_attributes.attribute_coll
                                         , io_rt_pae          in out pdm_packages%rowtype
                                         , i_nt_logical_pae   in     pdm_nt_logical_pae
                                         )
   is
      l_con_proc_name   constant cmn_constant.st_proc_name    := g_con_package || '.lpc_rule_mult_pdid_mult_log';

   begin
      viu_module.enter_module( i_module      => l_con_proc_name );

      if     io_continue
         and i_nt_logical_pae.count > 1
      then

         io_continue := false;

         
         delete_tag_attributes(io_it_attributes => io_it_attributes);

         
         pdm_attributes.add_attribute_null( i_adn_path       => pdm_constant.g_con_ident_manual_attr
                                          , io_it_attributes => io_it_attributes
                                          );

         io_rt_pae.pd_id                                               := null;

         io_it_attributes(pdm_constant.g_con_pd_id1_attr).value(1)     := i_nt_logical_pae(1).pd_id;
         io_it_attributes(pdm_constant.g_con_pd_id2_attr).value(1)     := i_nt_logical_pae(2).pd_id;

         if i_nt_logical_pae.exists(3) 
         then
            io_it_attributes(pdm_constant.g_con_pd_id3_attr).value(1)     := i_nt_logical_pae(3).pd_id;
         end if;

         
         io_it_attributes(pdm_constant.g_con_lpc_status_attr).value(1) := pdm_constant.g_con_lpc_status_multiread;

      end if;

      viu_module.leave_module( i_module      => l_con_proc_name );

   exception
      when others
      then
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
   end lpc_rule_mult_pdid_mult_log;

   










   procedure check_lpc_rule ( i_continue in boolean
                            , i_rt_pae   in pdm_packages%rowtype
                            )
   is
      l_con_proc_name   constant cmn_constant.st_proc_name    := g_con_package || '.check_lpc_rule';

   begin
      viu_module.enter_module( i_module      => l_con_proc_name );

      
      if i_continue
      then
         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_nolpcruleapplied
                            , i_calling_procedure => l_con_proc_name
                            , i_severity          => viu_info.severity_error
                            , i_additional_data   => 'Package: id=' || i_rt_pae.id
                                                     || ', pd_id='  || i_rt_pae.pd_id
                                                     || ', pi_id='  || i_rt_pae.pi_id
                                                     || ', pid='    || i_rt_pae.pid
                            );
      end if;

      viu_module.leave_module( i_module      => l_con_proc_name );

   exception
      when others
      then
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
   end check_lpc_rule;

   











   procedure determine_logical_pae( i_nt_pd_id_combined in     pdm_nt_lpc
                                  , o_nt_logical_pae       out pdm_nt_logical_pae
                                  )
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.determine_logical_pae';

      
      
      
      cursor c_logical_pae( b_pd_id in pdm_packages.pd_id%type )
      is
         select   pae.id
         from     pdm_packages                pae
         where    pae.pd_id                   = b_pd_id
         and      pae.ind_consider_multi_read = cmn_constant.g_con_yesno_yes
         and      (       pae.pte_id          = pdm_constant.g_con_pte_id_logical
                  or (    pae.pte_id          = pdm_constant.g_con_pte_id_member
                      and pae.ind_chosen      = cmn_constant.g_con_yesno_yes
                     )
                  )
         ;

      r_logical_pae c_logical_pae%rowtype;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      o_nt_logical_pae := pdm_nt_logical_pae();

      
      if i_nt_pd_id_combined.count > 1
      then

         
         for i in 1..i_nt_pd_id_combined.count
         loop

            
            open  c_logical_pae( b_pd_id  => i_nt_pd_id_combined(i));
            fetch c_logical_pae into r_logical_pae;

            if c_logical_pae%found
            then

               
               o_nt_logical_pae.extend();
               o_nt_logical_pae(o_nt_logical_pae.count) := pdm_ot_logical_pae( r_logical_pae.id
                                                                             , i_nt_pd_id_combined(i)
                                                                             );

               
               if o_nt_logical_pae.count = 3
               then
                  exit;
               end if;

            end if;

            close c_logical_pae;
         end loop;
      end if; 


      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         if c_logical_pae%isopen
         then
            close c_logical_pae;
         end if;

         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end determine_logical_pae;

   










   procedure lpc_rules2( io_it_attributes    in out pdm_attributes.attribute_coll
                       , io_rt_pae           in out pdm_packages%rowtype
                       , i_tasktype          in     pdm_task_types.name%type
                       , i_nt_pd_id          in     pdm_nt_lpc
                       , i_nt_pd_id_combined in     pdm_nt_lpc
                       , i_nt_vfbta          in     pdm_nt_lpc
                       , i_nt_vfbta_combined in     pdm_nt_lpc
                       , i_nt_invalid        in     pdm_nt_lpc
                       , i_nt_logical_pae    in     pdm_nt_logical_pae
                       )

   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.lpc_rules2';

      l_continue boolean := true;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      lpc_rule_no_pdid_vfbta ( io_continue      => l_continue
                             , io_it_attributes => io_it_attributes
                             , i_pae_id         => io_rt_pae.id
                             , i_nt_pd_id       => i_nt_pd_id
                             , i_nt_vfbta       => i_nt_vfbta
                             , i_nt_invalid     => i_nt_invalid
                             );

      lpc_rule_manual_vfbta ( io_continue      => l_continue
                            , io_it_attributes => io_it_attributes
                            , io_rt_pae        => io_rt_pae
                            , i_nt_vfbta       => i_nt_vfbta
                            , i_tasktype       => i_tasktype
                            );

      lpc_rule_manual_pdid ( io_continue      => l_continue
                           , io_it_attributes => io_it_attributes
                           , io_rt_pae        => io_rt_pae
                           , i_nt_pd_id       => i_nt_pd_id
                           , i_tasktype       => i_tasktype
                           );

      lpc_rule_one_vfbta ( io_continue         => l_continue
                         , io_it_attributes    => io_it_attributes
                         , io_rt_pae           => io_rt_pae
                         , i_nt_vfbta_combined => i_nt_vfbta_combined
                         );

      lpc_rule_multi_vfbta ( io_continue         => l_continue
                           , io_it_attributes    => io_it_attributes
                           , io_rt_pae           => io_rt_pae
                           , i_nt_vfbta_combined => i_nt_vfbta_combined
                           );

      lpc_rule_one_pdid ( io_continue         => l_continue
                        , io_it_attributes    => io_it_attributes
                        , io_rt_pae           => io_rt_pae
                        , i_nt_pd_id_combined => i_nt_pd_id_combined
                        );

      lpc_rule_man_no_logical ( io_continue         => l_continue
                              , io_it_attributes    => io_it_attributes
                              , i_pae_id            => io_rt_pae.id
                              , i_nt_logical_pae    => i_nt_logical_pae
                              , i_nt_pd_id_combined => i_nt_pd_id_combined
                              );

      lpc_rule_mult_pdid_no_log ( io_continue         => l_continue
                                , io_it_attributes    => io_it_attributes
                                , io_rt_pae           => io_rt_pae
                                , i_nt_logical_pae    => i_nt_logical_pae
                                , i_nt_pd_id_combined => i_nt_pd_id_combined
                                );

      lpc_rule_mult_pdid_one_log ( io_continue         => l_continue
                                 , io_it_attributes    => io_it_attributes
                                 , io_rt_pae           => io_rt_pae
                                 , i_nt_logical_pae    => i_nt_logical_pae
                                 , i_nt_pd_id_combined => i_nt_pd_id_combined
                                 );

      lpc_rule_mult_pdid_mult_log ( io_continue        => l_continue
                                  , io_it_attributes   => io_it_attributes
                                  , io_rt_pae          => io_rt_pae
                                  , i_nt_logical_pae   => i_nt_logical_pae
                                  );

      check_lpc_rule ( i_continue => l_continue
                     , i_rt_pae   => io_rt_pae
                     );

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end lpc_rules2;

   










   procedure add_to_lpc_list ( i_lpc         in     varchar2
                             , io_nt_pd_id   in out pdm_nt_lpc
                             , io_nt_vfbta   in out pdm_nt_lpc
                             , io_nt_invalid in out pdm_nt_lpc
                             )
   is
      l_con_proc_name   constant cmn_constant.st_proc_name    := g_con_package || '.add_to_lpc_list';

   begin
      viu_module.enter_module( i_module      => l_con_proc_name );

      
      if pdm_package.is_valid_pd_id( i_pd_id => i_lpc )
      then

         
         if not (i_lpc member of io_nt_pd_id)
         then

            
            io_nt_pd_id.extend();
            io_nt_pd_id(io_nt_pd_id.count) := i_lpc;
         end if;


      
      elsif pdm_package.is_valid_fallback_tag( i_pd_id => i_lpc )
      then

         
         if not (i_lpc member of io_nt_vfbta)
         then

            
            io_nt_vfbta.extend();
            io_nt_vfbta(io_nt_vfbta.count) := i_lpc;
         end if;

      
      elsif not (i_lpc member of io_nt_invalid)
      then

         
         io_nt_invalid.extend();
         io_nt_invalid(io_nt_invalid.count) := i_lpc;

      end if;

      viu_module.leave_module( i_module      => l_con_proc_name );

   exception
      when others
      then
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
   end add_to_lpc_list;

   











   procedure add_to_lpc_list ( i_rt_pae   in     pdm_packages%rowtype
                             , i_adn_path in     pdm_attribute_definitions.path%type
                             , io_nt_lpc  in out pdm_nt_lpc
                             )
   is
      l_con_proc_name   constant cmn_constant.st_proc_name    := g_con_package || '.add_to_lpc_list';

      l_lpc pdm_package_attributes.value%type;

   begin
      viu_module.enter_module( i_module      => l_con_proc_name );

      
      l_lpc := pdm_common.pbe_select_value( i_pae_id   => i_rt_pae.id
                                          , i_adn_path => i_adn_path
                                          );

      
      if     l_lpc is not null
      	 and not (l_lpc member of io_nt_lpc)
      then

         
         io_nt_lpc.extend();
         io_nt_lpc(io_nt_lpc.count) := l_lpc;
      end if;

      viu_module.leave_module( i_module      => l_con_proc_name );

   exception
      when others
      then
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
   end add_to_lpc_list;

   











   procedure get_tags_message( i_identification in  boolean
                             , i_it_attributes  in  pdm_attributes.attribute_coll
                             , o_nt_pd_id       out pdm_nt_lpc
                             , o_nt_vfbta       out pdm_nt_lpc
                             , o_nt_invalid     out pdm_nt_lpc
                             )
   is
      l_con_proc_name   constant cmn_constant.st_proc_name    := g_con_package || '.get_tags_message';

      i pls_integer;

   begin
      viu_module.enter_module( i_module      => l_con_proc_name );

      
      o_nt_pd_id   := pdm_nt_lpc();
      o_nt_vfbta   := pdm_nt_lpc();
      o_nt_invalid := pdm_nt_lpc();

      
      if i_identification
      then
         
         if i_it_attributes.exists(pdm_constant.g_con_retaglpc_attr)
         then

            
            add_to_lpc_list ( i_lpc         => i_it_attributes(pdm_constant.g_con_retaglpc_attr).value(1)
                            , io_nt_pd_id   => o_nt_pd_id
                            , io_nt_vfbta   => o_nt_vfbta
                            , io_nt_invalid => o_nt_invalid
                            );

         else 

            
            i := pdm_constant.g_con_it_scanresult_attr.first;
            while i is not null
            loop

               
               if i_it_attributes.exists(pdm_constant.g_con_it_scanresult_attr(i).lpc)
               then

                  
                  add_to_lpc_list ( i_lpc         => i_it_attributes(pdm_constant.g_con_it_scanresult_attr(i).lpc).value(1)
                                  , io_nt_pd_id   => o_nt_pd_id
                                  , io_nt_vfbta   => o_nt_vfbta
                                  , io_nt_invalid => o_nt_invalid
                                  );

               end if;

               i := pdm_constant.g_con_it_scanresult_attr.next(i);

            end loop; 
         end if; 
      end if; 

      viu_module.leave_module( i_module      => l_con_proc_name );

   exception
      when others
      then
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
   end get_tags_message;

   











   procedure get_baggagetags2( i_rt_pae            in  pdm_packages%rowtype
                             , i_nt_pd_id          in  pdm_nt_lpc
                             , i_nt_vfbta          in  pdm_nt_lpc
                             , o_nt_pd_id_combined out pdm_nt_lpc
                             , o_nt_vfbta_combined out pdm_nt_lpc
                             )
   is
      l_con_proc_name   constant cmn_constant.st_proc_name    := g_con_package || '.get_baggagetags2';

   begin
      viu_module.enter_module( i_module      => l_con_proc_name );

      
      o_nt_pd_id_combined := pdm_nt_lpc();
      o_nt_vfbta_combined := pdm_nt_lpc();

      
      
      o_nt_pd_id_combined := i_nt_pd_id;

      
      
      add_to_lpc_list ( i_rt_pae   => i_rt_pae
                      , i_adn_path => pdm_constant.g_con_pd_id1_attr
                      , io_nt_lpc  => o_nt_pd_id_combined
                      );
      add_to_lpc_list ( i_rt_pae   => i_rt_pae
                      , i_adn_path => pdm_constant.g_con_pd_id2_attr
                      , io_nt_lpc  => o_nt_pd_id_combined
                      );
      add_to_lpc_list ( i_rt_pae   => i_rt_pae
                      , i_adn_path => pdm_constant.g_con_pd_id3_attr
                      , io_nt_lpc  => o_nt_pd_id_combined
                      );

      
      
      o_nt_vfbta_combined := i_nt_vfbta;

      
      
      add_to_lpc_list ( i_rt_pae   => i_rt_pae
                      , i_adn_path => pdm_constant.g_con_vfbta1_attr
                      , io_nt_lpc  => o_nt_vfbta_combined
                      );
      add_to_lpc_list ( i_rt_pae   => i_rt_pae
                      , i_adn_path => pdm_constant.g_con_vfbta2_attr
                      , io_nt_lpc  => o_nt_vfbta_combined
                      );
      add_to_lpc_list ( i_rt_pae   => i_rt_pae
                      , i_adn_path => pdm_constant.g_con_vfbta3_attr
                      , io_nt_lpc  => o_nt_vfbta_combined
                      );

      viu_module.leave_module( i_module      => l_con_proc_name );

   exception
      when others
      then
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
   end get_baggagetags2;

   










   procedure determine_baggage_hdlr_attr2( i_nt_logical_pae in     pdm_nt_logical_pae
                                         , io_it_attributes in out pdm_attributes.attribute_coll
                                         )
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.determine_baggage_hdlr_attr2';

      
      cursor c_logical_pbe ( b_id       in pdm_packages.id%type
                           , b_adn_path in pdm_attribute_definitions.path%type
                           )
      is
         select vpbe.value
         from   pdm_v_pbe_active             vpbe
         ,      pdm_attribute_definitions    adn
         ,      pdm_packages                 pae
         where  vpbe.adn_id = adn.id
         and    adn.path    = b_adn_path
         and    vpbe.pae_id = pae.id
         and    pae.id      = b_id
         ;

      l_pbe_value              pdm_package_attributes.value%type;
      l_pbe_found              boolean;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      
      
      for i in 1..3
      loop
         pdm_attributes.add_attribute_null( i_adn_path       => pdm_constant.g_con_it_scanresult_attr(i).handler
                                          , io_it_attributes => io_it_attributes
                                          );
         pdm_attributes.add_attribute_null( i_adn_path       => pdm_constant.g_con_it_scanresult_attr(i).airline
                                          , io_it_attributes => io_it_attributes
                                          );
      end loop;

      
      if     io_it_attributes.exists(pdm_constant.g_con_lpc_status_attr)
         and io_it_attributes(pdm_constant.g_con_lpc_status_attr).value(1) = pdm_constant.g_con_lpc_status_multiread
      then

         
         for i in 1..i_nt_logical_pae.count
         loop

            
            open  c_logical_pbe( b_id       => i_nt_logical_pae(i).pae_id
                               , b_adn_path => pdm_constant.g_con_baggage_handler_attr
                               );
            fetch c_logical_pbe into l_pbe_value;
            l_pbe_found := c_logical_pbe%found;
            close c_logical_pbe;

            if l_pbe_found
            then

               
               io_it_attributes(pdm_constant.g_con_it_scanresult_attr(i).handler).value(1) := l_pbe_value;
            end if;

            
            open  c_logical_pbe( b_id       => i_nt_logical_pae(i).pae_id
                               , b_adn_path => pdm_constant.g_con_baggage_hdlrairline_attr
                               );
            fetch c_logical_pbe into l_pbe_value;
            l_pbe_found := c_logical_pbe%found;
            close c_logical_pbe;

            if l_pbe_found
            then

               
               io_it_attributes(pdm_constant.g_con_it_scanresult_attr(i).airline).value(1) := l_pbe_value;
            end if;

         end loop;
      end if;

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         if c_logical_pbe%isopen
         then
            close c_logical_pbe;
         end if;

         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end determine_baggage_hdlr_attr2;

   













   procedure hdl_taskreport_identification2( io_rt_pae             in out pdm_packages%rowtype
                                           , i_pet_id              in     pdm_package_events.id%type
                                           , i_eventtime           in     cmn_constant.st_timestamp
                                           , i_rt_stn              in     pdm_stations%rowtype
                                           , i_party_type          in     cmn_parties.type%type
                                           , i_ind_package_created in     boolean
                                           , i_tasktype            in     pdm_task_types.name%type
                                           , i_nt_pd_id_message    in     pdm_nt_lpc
                                           , i_nt_pd_id_combined   in     pdm_nt_lpc
                                           , i_nt_vfbta_message    in     pdm_nt_lpc
                                           , i_nt_vfbta_combined   in     pdm_nt_lpc
                                           , i_nt_invalid_message  in     pdm_nt_lpc
                                           , io_it_attributes      in out pdm_attributes.attribute_coll
                                           )
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.hdl_taskreport_identification2';

      l_current_pd_id  pdm_packages.pd_id%type;
      l_nt_logical_pae pdm_nt_logical_pae := pdm_nt_logical_pae();

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      if io_rt_pae.status = pdm_constant.g_con_pae_status_open
      then

         l_current_pd_id := io_rt_pae.pd_id;

         
         
         
         determine_logical_pae( i_nt_pd_id_combined => i_nt_pd_id_combined
                              , o_nt_logical_pae    => l_nt_logical_pae
                              );

         lpc_rules2( io_it_attributes    => io_it_attributes
                   , io_rt_pae           => io_rt_pae
                   , i_tasktype          => i_tasktype
                   , i_nt_pd_id          => i_nt_pd_id_message
                   , i_nt_pd_id_combined => i_nt_pd_id_combined
                   , i_nt_vfbta          => i_nt_vfbta_message
                   , i_nt_vfbta_combined => i_nt_vfbta_combined
                   , i_nt_invalid        => i_nt_invalid_message
                   , i_nt_logical_pae    => l_nt_logical_pae
                   );

         determine_baggage_hdlr_attr2( i_nt_logical_pae => l_nt_logical_pae
                                     , io_it_attributes => io_it_attributes
                                     );

         
         
         if     io_it_attributes.exists(pdm_constant.g_con_lpc_status_attr)
            and io_it_attributes(pdm_constant.g_con_lpc_status_attr).value(1) = pdm_constant.g_con_lpc_status_read
            and l_current_pd_id is null
         then
            pull_resume_tracking_attribs( io_rt_pae             => io_rt_pae
                                        , i_pet_id              => i_pet_id
                                        , i_rt_stn              => i_rt_stn
                                        , i_party_type          => i_party_type
                                        , i_ind_package_created => i_ind_package_created
                                        , i_event_time          => i_eventtime
                                        );
         end if;

      end if; 

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end hdl_taskreport_identification2;

   











   procedure determine_airport_tag( io_it_attributes in out pdm_attributes.attribute_coll)

   is
      pragma autonomous_transaction;

      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.determine_airport_tag';

      l_rt_pve      cmn_parameter_values%rowtype;
      l_rt_adn      pdm_attribute_definitions%rowtype;
      l_airport_tag varchar2(10);
      l_found       boolean;
      l_dummy       boolean;
   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      l_found := cmn_pve_tapi_pck.pve_select_row_upd ( i_pve_id  => pdm_constant.g_con_ptrid_cyclic_number
                                                     , o_rt_pve  => l_rt_pve
                                                     );

      
      
      
      if    l_rt_pve.value <= 0
         or l_rt_pve.value >= 9999
      then

      	  
      	  l_rt_pve.value := 1;
      else

      	  
         l_rt_pve.value := l_rt_pve.value + 1;
      end if;

      
      update cmn_parameter_values pve
      set    pve.value = l_rt_pve.value
      where  pve.id    = pdm_constant.g_con_ptrid_cyclic_number
      ;

      
      
      
      
      
      l_airport_tag :=    lpad (cmn_common.get_parameter_value( i_prr_name => pdm_constant.g_con_ptr_digit_1_airport_tag),1,0)
                       || '000'
                       || lpad (cmn_common.get_parameter_value( i_prr_name => pdm_constant.g_con_prr_handling_area),2,0)
                       || lpad (l_rt_pve.value,4,0)
                       ;

      
      l_dummy := pdm_adn_tapi_pck.adn_select_row_uk1( i_adn_path => pdm_constant.g_con_airporttaglpc_attr
                                                    , o_rt_adn   => l_rt_adn
                                                    );
      io_it_attributes(l_rt_adn.path).adn_id   := l_rt_adn.id;
      io_it_attributes(l_rt_adn.path).adn_type := l_rt_adn.type;
      io_it_attributes(l_rt_adn.path).value(1) := l_airport_tag;

      
      commit;

      viu_module.leave_module( i_module      => l_con_proc_name );
   exception
      when others
      then
         
         rollback;

         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
   end determine_airport_tag;

   













   procedure deregister_pae_copy_attributes( i_rt_pae in pdm_packages%rowtype
                                           , i_rt_pet in pdm_package_events%rowtype
                                           )
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.deregister_pae_copy_attributes';

      l_it_attributes          pdm_attributes.attribute_coll;
      l_pbe_value              pdm_package_attributes.value%type;
      l_found                  boolean;
      l_rt_adn                 pdm_attribute_definitions%rowtype;
      l_dummy                  boolean;
   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      l_pbe_value := pdm_common.pbe_select_value( i_pae_id   => i_rt_pae.id
                                                , i_adn_path => pdm_constant.g_con_activeprocess_attr
                                                );
      if l_pbe_value is not null
      then
         l_dummy := pdm_adn_tapi_pck.adn_select_row_uk1( i_adn_path => pdm_constant.g_con_dereg_activeprocess_attr
                                                       , o_rt_adn   => l_rt_adn
                                                       );
         l_it_attributes(l_rt_adn.path).adn_id   := l_rt_adn.id;
         l_it_attributes(l_rt_adn.path).adn_type := l_rt_adn.type;
         l_it_attributes(l_rt_adn.path).value(1) := l_pbe_value;
      end if;

      
      l_found := pdm_adn_tapi_pck.adn_select_row_uk1( i_adn_path => pdm_constant.g_con_deriv_prodprogress_attr
                                                    , o_rt_adn   => l_rt_adn
                                                    );
      
      l_pbe_value := pdm_common.pbe_select_value( i_pae_id   => i_rt_pae.id
                                                , i_adn_path => pdm_constant.g_con_deriv_prodprogress_attr
                                                );
      if l_pbe_value is not null
      then
         l_dummy := pdm_adn_tapi_pck.adn_select_row_uk1( i_adn_path => pdm_constant.g_con_dereg_prodprogress_attr
                                                       , o_rt_adn   => l_rt_adn
                                                       );
         l_it_attributes(l_rt_adn.path).adn_id   := l_rt_adn.id;
         l_it_attributes(l_rt_adn.path).adn_type := l_rt_adn.type;
         l_it_attributes(l_rt_adn.path).value(1) := l_pbe_value;
      end if;

      
      pdm_attributes.store_attributes( i_pae_id                     => i_rt_pae.id
                                     , i_it_attributes              => l_it_attributes
                                     , i_pet_id                     => i_rt_pet.id
                                     , i_event_time                 => null 
                                     , i_ind_use_attribs_event_time => false
                                     );

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end deregister_pae_copy_attributes;

   

























   procedure deregister_package( io_rt_pae   in out pdm_packages%rowtype
                               , i_rt_pet    in     pdm_package_events%rowtype
                               , i_eventtime in     cmn_constant.st_timestamp
                               )
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.deregister_package';
   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      io_rt_pae.date_deregistered := i_eventtime;

      
      deregister_pae_copy_attributes( i_rt_pae => io_rt_pae
                                    , i_rt_pet => i_rt_pet
                                    );

      
      io_rt_pae.status := pdm_constant.g_con_pae_status_closed;

      
      
      if    cmn_common.get_parameter_value( i_prr_name => pdm_constant.g_con_send_ps_logical )
               = cmn_constant.g_con_yesno_no
         or io_rt_pae.pd_id is null
      then
         io_rt_pae.ind_match          := cmn_constant.g_con_yesno_no;
         io_rt_pae.ind_match_hdl_psn  := cmn_constant.g_con_yesno_no;
         io_rt_pae.ind_match_hdl_time := cmn_constant.g_con_yesno_no;
         io_rt_pae.ind_match_time     := cmn_constant.g_con_yesno_no;
      end if;

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end deregister_package;

   















   procedure handle_lpc_registration( io_rt_pae            in out pdm_packages%rowtype
                                    , i_pet_id             in     pdm_package_events.id%type
                                    , i_stn_id             in     pdm_stations.id%type
                                    , i_ind_create_package in     boolean
                                    , i_identification     in     boolean
                                    , i_new_pd_id          in     pdm_packages.pd_id%type
                                    , i_new_lpc_extension  in     pdm_package_attributes.value%type
                                    , i_event_time         in     cmn_constant.st_timestamp
                                    , o_lpc_status            out pdm_package_attributes.value%type
                                    )
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.handle_lpc_registration';

      l_rt_stn        pdm_stations%rowtype;
      l_found         boolean;
      l_new_pd_id     pdm_packages.pd_id%type;
      l_it_attributes pdm_attributes.attribute_coll;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      l_found := pdm_stn_tapi_pck.stn_select_row( i_stn_id => i_stn_id
                                                , o_rt_stn => l_rt_stn
                                                );

      
      if     i_ind_create_package
         and i_new_pd_id is not null
         and (   not l_found
              or l_rt_stn.ind_registration_lpc = cmn_constant.g_con_yesno_no
             )
      then

         

         
         if i_identification
         then

            
            viu_info.operator_info( i_ifo_nr            => viu_constant.c_ifo_pdidatpackagecreation
                                  , i_calling_procedure => l_con_proc_name
                                  , i_severity          => viu_info.severity_warning
                                  , i_additional_data   =>    'PAE.ID='   || io_rt_pae.id
                                                           || ', PET.ID=' || i_pet_id
                                                           || ', PD ID='  || i_new_pd_id
                                  );

         end if;
      else

         
         l_new_pd_id := i_new_pd_id;
      end if;

      
      if l_new_pd_id is not null
      then

         if pdm_package.is_valid_pd_id( i_pd_id => l_new_pd_id )
         then 
            o_lpc_status := pdm_constant.g_con_lpc_status_read;
         elsif pdm_package.is_valid_fallback_tag( i_pd_id  => l_new_pd_id )
         then 
            o_lpc_status := pdm_constant.g_con_lpc_status_vfbta;
         else
            viu_info.operator_info( i_ifo_nr            => viu_constant.c_ifo_invalidpdidfallbacktag
                                  , i_calling_procedure => l_con_proc_name
                                  , i_severity          => viu_info.severity_warning
                                  , i_additional_data   =>    'PAE.ID='   || io_rt_pae.id
                                                           || ', PET.ID=' || i_pet_id
                                                           || ', PD ID='  || l_new_pd_id
                                  );

            if l_rt_stn.ind_registration_lpc = cmn_constant.g_con_yesno_yes
            then
               o_lpc_status := pdm_constant.g_con_lpc_status_noread;
            else
               o_lpc_status := pdm_constant.g_con_lpc_status_unknown;
            end if;
         end if;

      else 

         if l_rt_stn.ind_registration_lpc = cmn_constant.g_con_yesno_yes
         then
            o_lpc_status := pdm_constant.g_con_lpc_status_noread;
         else
            o_lpc_status := pdm_constant.g_con_lpc_status_unknown;
         end if;

      end if;

      
      if     l_new_pd_id     is not null
         and o_lpc_status    not in ( pdm_constant.g_con_lpc_status_read
                                    , pdm_constant.g_con_lpc_status_vfbta
                                    )
      then

         
         pdm_attributes.add_attribute_value( i_adn_path       => pdm_constant.g_con_lpc_status_attr
                                           , i_value          => o_lpc_status
                                           , io_it_attributes => l_it_attributes
                                           );
      else

         
         delete_tag_attributes(io_it_attributes => l_it_attributes);

         
         l_it_attributes(pdm_constant.g_con_lpc_status_attr).value(1) := o_lpc_status;

         
         if    (   io_rt_pae.pd_id is not null
               and l_new_pd_id     is     null
               )
            or l_new_pd_id     is not null
         then

            
            io_rt_pae.pd_id := l_new_pd_id;

            
            if l_new_pd_id is not null
            then

               l_it_attributes(pdm_constant.g_con_lpc_attr_func).value(1):= l_new_pd_id;

               if o_lpc_status =  pdm_constant.g_con_lpc_status_read
               then
               	  l_it_attributes(pdm_constant.g_con_pd_id1_attr).value(1) := l_new_pd_id;
               else
               	  l_it_attributes(pdm_constant.g_con_vfbta1_attr).value(1) := l_new_pd_id;
               end if;

            end if;
         end if; 
      end if; 

      
      pdm_attributes.add_attribute_null( i_adn_path       => pdm_constant.g_con_ident_manual_attr
                                       , io_it_attributes => l_it_attributes
                                       );

      
      pdm_attributes.add_attribute_value( i_adn_path       => pdm_constant.g_con_lpc_extension_attr_func
                                        , i_value          => i_new_lpc_extension
                                        , io_it_attributes => l_it_attributes
                                        );

      
      pdm_attributes.store_attributes( i_pae_id                     => io_rt_pae.id
                                     , i_it_attributes              => l_it_attributes
                                     , i_pet_id                     => i_pet_id
                                     , i_event_time                 => i_event_time
                                     , i_ind_use_attribs_event_time => false
                                     );

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end handle_lpc_registration;

   


















   procedure handle_tr_closed_package( io_rt_pae            in out pdm_packages%rowtype
                                     , i_rt_pet             in     pdm_package_events%rowtype
                                     , i_ind_registration   in     boolean
                                     , i_pid                in     pdm_packages.pid%type
                                     , i_lpc                in     pdm_package_attributes.value%type
                                     , i_lpc_extension      in     pdm_package_attributes.value%type
                                     , i_stn_id             in     pdm_stations.id%type
                                     , i_areaid             in     pdm_package_attributes.value%type
                                     , i_zoneid             in     pdm_package_attributes.value%type
                                     , i_ind_physical_event in     boolean
                                     , i_event_time         in     cmn_constant.st_timestamp
                                     , io_it_attributes     in out pdm_attributes.attribute_coll
                                     , o_ind_force_match       out boolean
                                     , o_lpc_status            out pdm_package_attributes.value%type
                                     )
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.handle_tr_closed_package';

      l_rt_adn                 pdm_attribute_definitions%rowtype;
      l_dummy                  boolean;
   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      o_ind_force_match := false;

      
      if io_rt_pae.status = pdm_constant.g_con_pae_status_closed
      then
         if i_ind_registration
         then
            if i_event_time < io_rt_pae.date_last_event
            then
               viu_info.raise_info
                  ( i_ifo_nr            => viu_constant.c_ifo_openclosedphysical
                  , i_calling_procedure => l_con_proc_name
                  , i_severity          => viu_info.c_severity_warning
                  , i_additional_data   =>
                       'EventTime (' || i_event_time || ') < PACKAGE.DATE LAST DETECTED (' || io_rt_pae.date_last_event || ')'
                    || ', PI ID=' || io_rt_pae.pi_id
                    || ', Message ID=' || cmn_interface.get_message_id
                                             ( i_direction => cmn_constant.g_con_msg_direction_incoming
                                             )
                  );
            end if;

            
            io_rt_pae.status                   := pdm_constant.g_con_pae_status_open;
            io_rt_pae.date_registered          := i_event_time;
            io_rt_pae.ind_ready                := cmn_constant.g_con_yesno_no;
            io_rt_pae.ind_match                := cmn_constant.g_con_yesno_yes;
            io_rt_pae.ind_match_time           := cmn_constant.g_con_yesno_yes;
            io_rt_pae.pid                      := i_pid;

            
            l_dummy := pdm_adn_tapi_pck.adn_select_row_uk1( i_adn_path => pdm_constant.g_con_pid_attr
                                                          , o_rt_adn   => l_rt_adn
                                                          );
            io_it_attributes(l_rt_adn.path).adn_id   := l_rt_adn.id;
            io_it_attributes(l_rt_adn.path).adn_type := l_rt_adn.type;
            io_it_attributes(l_rt_adn.path).value(1) := i_pid;

            
            handle_lpc_registration( io_rt_pae            => io_rt_pae
                                   , i_pet_id             => i_rt_pet.id
                                   , i_stn_id             => i_stn_id
                                   , i_ind_create_package => false
                                   , i_identification     => false
                                   , i_new_pd_id          => i_lpc
                                   , i_new_lpc_extension  => i_lpc_extension
                                   , i_event_time         => i_event_time
                                   , o_lpc_status         => o_lpc_status
                                   );

            
            o_ind_force_match := true;
         else

             
            if not i_ind_physical_event
            then
               viu_info.raise_info
                  ( i_ifo_nr            => viu_constant.c_ifo_openclosedphysical
                  , i_calling_procedure => l_con_proc_name
                  , i_severity          => viu_info.severity_warning
                  , i_additional_data   =>
                          'STATION.ID=' || i_stn_id
                     || ', AreaID='     || i_areaid
                     || ', ZoneID='     || i_zoneid
                     || ', PID='        || io_rt_pae.pid
                     || ', Message ID=' || cmn_interface.get_message_id
                                              ( i_direction => cmn_constant.g_con_msg_direction_incoming)
                  );
            end if;

            
            if i_event_time > io_rt_pae.date_last_event
            then
               viu_info.operator_info
                  ( i_ifo_nr            => viu_constant.c_ifo_openclosedphysical
                  , i_calling_procedure => l_con_proc_name
                  , i_severity          => viu_info.c_severity_warning
                  , i_additional_data   =>
                       'EventTime (' || i_event_time || ') > PACKAGE.DATE LAST DETECTED (' || io_rt_pae.date_last_event || ')'
                    || ', PI ID=' || io_rt_pae.pi_id
                    || ', Message ID=' || cmn_interface.get_message_id
                                             ( i_direction => cmn_constant.g_con_msg_direction_incoming
                                             )
                  );
            end if;
         end if;
      end if;

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end handle_tr_closed_package;

   














   procedure delete_attributes_taskreport( i_ind_physical_event in     boolean
                                         , i_ind_registration   in     boolean
                                         , i_ind_deregistration in     boolean
                                         , io_it_attributes     in out pdm_attributes.attribute_coll
                                         )
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.delete_attributes_taskreport';

      l_rt_adn                 pdm_attribute_definitions%rowtype;
      l_dummy                  boolean;
   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      if i_ind_registration
      then
         
         l_dummy := pdm_adn_tapi_pck.adn_select_row_uk1( i_adn_path => pdm_constant.g_con_deregreason_attr
                                                       , o_rt_adn   => l_rt_adn
                                                       );
         io_it_attributes(l_rt_adn.path).adn_id   := l_rt_adn.id;
         io_it_attributes(l_rt_adn.path).adn_type := l_rt_adn.type;
         io_it_attributes(l_rt_adn.path).value(1) := null;

         
         l_dummy := pdm_adn_tapi_pck.adn_select_row_uk1( i_adn_path => pdm_constant.g_con_dereg_activeprocess_attr
                                                       , o_rt_adn   => l_rt_adn
                                                       );
         io_it_attributes(l_rt_adn.path).adn_id   := l_rt_adn.id;
         io_it_attributes(l_rt_adn.path).adn_type := l_rt_adn.type;
         io_it_attributes(l_rt_adn.path).value(1) := null;

         
         l_dummy := pdm_adn_tapi_pck.adn_select_row_uk1( i_adn_path => pdm_constant.g_con_dereg_prodprogress_attr
                                                       , o_rt_adn   => l_rt_adn
                                                       );
         io_it_attributes(l_rt_adn.path).adn_id   := l_rt_adn.id;
         io_it_attributes(l_rt_adn.path).adn_type := l_rt_adn.type;
         io_it_attributes(l_rt_adn.path).value(1) := null;
      end if;

      
      if     not i_ind_deregistration
         and i_ind_physical_event
      then
         
         l_dummy := pdm_adn_tapi_pck.adn_select_row_uk1( i_adn_path => pdm_constant.g_con_routeresult_attr
                                                       , o_rt_adn   => l_rt_adn
                                                       );
         if not io_it_attributes.exists(l_rt_adn.path)
         then
            io_it_attributes(l_rt_adn.path).adn_id   := l_rt_adn.id;
            io_it_attributes(l_rt_adn.path).adn_type := l_rt_adn.type;
            io_it_attributes(l_rt_adn.path).value(1) := null;
         end if;

         
         l_dummy := pdm_adn_tapi_pck.adn_select_row_uk1( i_adn_path => pdm_constant.g_con_routeresult_noerror_attr
                                                       , o_rt_adn   => l_rt_adn
                                                       );
         if not io_it_attributes.exists(l_rt_adn.path)
         then
            io_it_attributes(l_rt_adn.path).adn_id   := l_rt_adn.id;
            io_it_attributes(l_rt_adn.path).adn_type := l_rt_adn.type;
            io_it_attributes(l_rt_adn.path).value(1) := null;
         end if;
      end if;

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end delete_attributes_taskreport;

   













   procedure determine_loaded_segregation( i_rt_pae           in     pdm_packages%rowtype
                                         , i_ind_loaded       in     boolean
                                         , i_ind_unloaded     in     boolean
                                         , i_ind_registration in     boolean
                                         , io_it_attributes   in out pdm_attributes.attribute_coll
                                         )
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.determine_loaded_segregation';

      l_pbe_value              pdm_package_attributes.value%type;
      l_rt_adn                 pdm_attribute_definitions%rowtype;
      l_dummy                  boolean;
   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      if i_ind_loaded
      then
         
         l_pbe_value := pdm_common.pbe_select_value( i_pae_id   => i_rt_pae.id
                                                   , i_adn_path => pdm_constant.g_con_processplanidname_attr
                                                   );
         if l_pbe_value is not null
         then
            l_dummy := pdm_adn_tapi_pck.adn_select_row_uk1( i_adn_path => pdm_constant.g_con_segr_pcsplanidname_attr
                                                          , o_rt_adn   => l_rt_adn
                                                          );
            io_it_attributes(l_rt_adn.path).adn_id   := l_rt_adn.id;
            io_it_attributes(l_rt_adn.path).adn_type := l_rt_adn.type;
            io_it_attributes(l_rt_adn.path).value(1) := l_pbe_value;
         end if;

         
         l_pbe_value := pdm_common.pbe_select_value( i_pae_id   => i_rt_pae.id
                                                   , i_adn_path => pdm_constant.g_con_processname_attr
                                                   );
         if l_pbe_value is not null
         then
            l_dummy := pdm_adn_tapi_pck.adn_select_row_uk1( i_adn_path => pdm_constant.g_con_segr_pcsdefname_attr
                                                          , o_rt_adn   => l_rt_adn
                                                          );
            io_it_attributes(l_rt_adn.path).adn_id   := l_rt_adn.id;
            io_it_attributes(l_rt_adn.path).adn_type := l_rt_adn.type;
            io_it_attributes(l_rt_adn.path).value(1) := l_pbe_value;
         end if;

         
         l_pbe_value := pdm_common.pbe_select_value( i_pae_id   => i_rt_pae.id
                                                   , i_adn_path => pdm_constant.g_con_productname_attr
                                                   );
         if l_pbe_value is not null
         then
            l_dummy := pdm_adn_tapi_pck.adn_select_row_uk1( i_adn_path => pdm_constant.g_con_segr_productname_attr
                                                          , o_rt_adn   => l_rt_adn
                                                          );
            io_it_attributes(l_rt_adn.path).adn_id   := l_rt_adn.id;
            io_it_attributes(l_rt_adn.path).adn_type := l_rt_adn.type;
            io_it_attributes(l_rt_adn.path).value(1) := l_pbe_value;
         end if;
      end if;

      
      if    i_ind_unloaded
         or i_ind_registration
      then
         
         l_dummy := pdm_adn_tapi_pck.adn_select_row_uk1( i_adn_path => pdm_constant.g_con_segr_pcsplanidname_attr
                                                       , o_rt_adn   => l_rt_adn
                                                       );
         io_it_attributes(l_rt_adn.path).adn_id   := l_rt_adn.id;
         io_it_attributes(l_rt_adn.path).adn_type := l_rt_adn.type;
         io_it_attributes(l_rt_adn.path).value(1) := null;

         
         l_dummy := pdm_adn_tapi_pck.adn_select_row_uk1( i_adn_path => pdm_constant.g_con_segr_pcsdefname_attr
                                                       , o_rt_adn   => l_rt_adn
                                                       );
         io_it_attributes(l_rt_adn.path).adn_id   := l_rt_adn.id;
         io_it_attributes(l_rt_adn.path).adn_type := l_rt_adn.type;
         io_it_attributes(l_rt_adn.path).value(1) := null;

         
         l_dummy := pdm_adn_tapi_pck.adn_select_row_uk1( i_adn_path => pdm_constant.g_con_segr_productname_attr
                                                       , o_rt_adn   => l_rt_adn
                                                       );
         io_it_attributes(l_rt_adn.path).adn_id   := l_rt_adn.id;
         io_it_attributes(l_rt_adn.path).adn_type := l_rt_adn.type;
         io_it_attributes(l_rt_adn.path).value(1) := null;
      end if;

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end determine_loaded_segregation;

   



















   procedure determine_package_ready( io_rt_pae                in out pdm_packages%rowtype
                                    , io_ind_update_package    in out boolean
                                    , i_tasktype               in     pdm_task_types.name%type
                                    , i_ind_loaded             in     boolean
                                    )
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.determine_package_ready';

      
      cursor c_psn_active( b_pae_id pdm_packages.id%type )
      is
         select psn.*
         from   pdm_assigned_active        aae
         ,      pdm_process_specifications psn
         where  aae.pae_id     = b_pae_id
         and    aae.ind_active = cmn_constant.g_con_yesno_yes
         and    aae.psn_id     = psn.id;

      
      cursor c_dereg_for_reclaim
      is
         select 1
         from   pdm_task_type_handlings tth
         ,      pdm_task_types          tte
         ,      pdm_functionalities     fty
         where  tte.id     = tth.tte_id
         and    tte.name   = g_con_tte_reclaim
         and    fty.id     = tth.fty_id
         and    fty.name   = g_con_fty_deregistration
         ;

      l_rt_psn_active     c_psn_active%rowtype;
      l_deregisterreason  pdm_package_attributes.value%type;
      l_routeresult       pdm_package_attributes.value%type;
      l_rt_tle_production pdm_tpl_monitoring_types%rowtype;
      l_ind_ready         boolean;
      l_dummy             boolean;
      l_found             boolean := false;
      l_dummy_number      number;
   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      if     io_rt_pae.ind_ready = cmn_constant.g_con_yesno_no
         and (   i_tasktype is not null
      	      or i_ind_loaded
             )
      then

         
         l_deregisterreason := pdm_common.pbe_select_value( i_pae_id   => io_rt_pae.id
                                                          , i_adn_path => pdm_constant.g_con_deregreason_attr
                                                          );

         
         l_routeresult := pdm_common.pbe_select_value( i_pae_id   => io_rt_pae.id
                                                     , i_adn_path => pdm_constant.g_con_routeresult_noerror_attr
                                                     );

         
         if i_tasktype = g_con_tte_reclaim
         then

            
            open  c_dereg_for_reclaim;
            fetch c_dereg_for_reclaim into l_dummy_number;
            l_found := c_dereg_for_reclaim%found;
            close c_dereg_for_reclaim;
         end if;

         
         l_ind_ready :=    
                           (   l_routeresult      = g_con_routeresult_arrived
                           and l_deregisterreason = g_con_deregisterreason_eot
                           )

                           
                        or (   i_tasktype = g_con_tte_reclaim
                           and l_found
                           )

                           
                        or l_deregisterreason = g_con_deregisterreason_ho

                           
                        or i_ind_loaded
                        ;

         
         if l_ind_ready
         then

            
            open  c_psn_active( b_pae_id => io_rt_pae.id );
            fetch c_psn_active into l_rt_psn_active;
            close c_psn_active;

            
            l_dummy := pdm_tle_tapi_pck.tle_select_row_uk1( i_tle_id_cust => pdm_constant.g_con_tle_production
                                                          , o_rt_tle      => l_rt_tle_production
                                                          );

            
            
            if l_rt_psn_active.tle_id = l_rt_tle_production.id
            then
               io_rt_pae.ind_ready         := cmn_constant.g_con_yesno_yes;
               io_rt_pae.ind_match_time    := cmn_constant.g_con_yesno_no;
               io_ind_update_package       := true;
            end if;

         end if; 
      end if; 

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         if c_psn_active%isopen
         then
            close c_psn_active;
         end if;

         if c_dereg_for_reclaim%isopen
         then
            close c_dereg_for_reclaim;
         end if;

         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end determine_package_ready;

   
















   procedure determine_package_not_ready( io_rt_pae             in out pdm_packages%rowtype
                                        , io_ind_update_package in out boolean
                                        , i_party_type          in     cmn_parties.type%type
                                        , i_tasktype            in     pdm_task_types.name%type
                                        , i_deregistration      in     boolean
                                        , i_ind_physical_event  in     boolean
                                        , i_it_attributes       in     pdm_attributes.attribute_coll
                                        )
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.determine_package_not_ready';

      l_routeresult_arrived    boolean := false;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );


      
      if     i_it_attributes.exists(pdm_constant.g_con_routeresult_attr)
         and i_it_attributes(pdm_constant.g_con_routeresult_attr).value(1) = g_con_routeresult_arrived
      then
         l_routeresult_arrived := true;
      end if;

      
      if         io_rt_pae.ind_ready = cmn_constant.g_con_yesno_yes
         and     i_ind_physical_event
         and not i_deregistration
         and not l_routeresult_arrived
         and (    i_party_type <> pdm_constant.g_con_mtt_party_type
               or i_tasktype not in ( pdm_constant.g_con_tte_requesttask
                                    , pdm_constant.g_con_tte_release
                                    , pdm_constant.g_con_tte_manualstore
                                    , pdm_constant.g_con_tte_problembagstore
                                    , pdm_constant.g_con_tte_store
                                    , pdm_constant.g_con_tte_storeproduct
                                    )
             )

      then
      	 io_rt_pae.ind_ready      := cmn_constant.g_con_yesno_no;
      	 io_rt_pae.ind_match_time := cmn_constant.g_con_yesno_yes;
         io_ind_update_package    := true;
      end if;

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module     => l_con_proc_name
                                , i_debug_info => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure => l_con_proc_name );
   end determine_package_not_ready;

   

















   procedure create_package( i_pi_id          in  pdm_packages.pi_id%type
                           , i_place_of_birth in  pdm_packages.place_of_birth%type
                           , i_pid            in  pdm_packages.pid%type
                           , i_party_id       in  cmn_parties.id%type
                           , i_systimestamp   in  cmn_constant.st_timestamp
                           , i_eventtime      in  cmn_constant.st_timestamp
                           , o_rt_pae         out pdm_packages%rowtype
                           , o_found          out boolean
                           )
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.create_package';

      l_rt_pae pdm_packages%rowtype;
      l_rt_pte pdm_package_types%rowtype;
      l_dummy  boolean;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      o_found := false;

      
      
      
      l_rt_pae.id := pdm_pae_tapi_pck.pae_seq1_nextval;

      
      if i_pi_id is not null
      then

         
         l_rt_pae.pi_id := i_pi_id;
      else

         
         l_rt_pae.pi_id := l_rt_pae.id;
      end if;

      
      l_rt_pae.place_of_birth := nvl( i_place_of_birth
                                    , cmn_common.get_parameter_value
                                         ( i_prr_name => pdm_constant.g_con_pae_place_of_birth )
                                    );
      
      l_dummy := pdm_pte_tapi_pck.pte_select_row_uk1 ( i_pte_name => pdm_constant.g_con_pte_physical
                                                     , o_rt_pte   => l_rt_pte
                                                     );
      l_rt_pae.pte_id                   := l_rt_pte.id;
      l_rt_pae.status                   := pdm_constant.g_con_pae_status_open;
      l_rt_pae.pid                      := i_pid;
      l_rt_pae.pty_id                   := i_party_id;
      l_rt_pae.date_created             := i_systimestamp;
      l_rt_pae.date_last_event          := i_eventtime;
      l_rt_pae.date_registered          := i_eventtime;
      l_rt_pae.ind_match                := cmn_constant.g_con_yesno_yes;
      l_rt_pae.ind_match_time           := cmn_constant.g_con_yesno_yes;
      l_rt_pae.ind_ready                := cmn_constant.g_con_yesno_no;
      l_rt_pae.ind_match_hdl_psn        := cmn_constant.g_con_yesno_no;
      l_rt_pae.ind_match_hdl_time       := cmn_constant.g_con_yesno_no;
      l_rt_pae.ind_packagedata_deleted  := cmn_constant.g_con_yesno_no;
      l_rt_pae.ind_packagedata_multiple := cmn_constant.g_con_yesno_no;
      l_rt_pae.ind_chosen               := cmn_constant.g_con_yesno_no;
      l_rt_pae.ind_consider_multi_read  := cmn_constant.g_con_yesno_no;
      l_rt_pae.ind_ghost                := cmn_constant.g_con_yesno_no;
      l_rt_pae.nof_bagdata              := 0;

      begin
         pdm_pae_tapi_pck.pae_insert_row( io_rt_pae => l_rt_pae );
      exception
         when viu_constant.exc_insertfailed then

            
            
            
            
            
            viu_info.handle_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                                , i_calling_procedure => l_con_proc_name
                                , i_severity          => viu_info.severity_notification
                                , i_additional_data   =>    'i_pi_id: '            || i_pi_id
                                                         || ', i_place_of_birth: ' || i_place_of_birth
                                                         || ', i_pid: '            || i_pid
                                );

            
            o_found := pdm_common.pae_lock_and_select( i_pi_id          => i_pi_id
                                                     , i_place_of_birth => i_place_of_birth
                                                     , i_pid            => i_pid
                                                     , o_rt_pae         => l_rt_pae
                                                     );
 
            
            if not o_found
            then
               viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_expectedpackagenotfound
                                  , i_calling_procedure => l_con_proc_name
                                  , i_severity          => viu_info.severity_error
                                  , i_additional_data   =>    'i_pi_id: '            || i_pi_id
                                                           || ', i_place_of_birth: ' || i_place_of_birth
                                                           || ', i_pid: '            || i_pid
                                  );
            end if;

      end;

      
      o_rt_pae := l_rt_pae;

      viu_module.leave_module( i_module      => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
   end create_package;

   
















   procedure handle_first_taskreport( io_rt_pae         in out pdm_packages%rowtype
                                    , i_party_id        in     cmn_parties.id%type
                                    , i_party_type      in     cmn_parties.type%type
                                    , o_taskinstruction    out boolean
                                    )
   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.handle_first_taskreport';

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      o_taskinstruction := false;

      
      
      if i_party_type in ( pdm_constant.g_con_lm_party_type
                         , pdm_constant.g_con_bcm_party_type
                         )
         and
         i_party_id <> io_rt_pae.pty_id

      then

         
         io_rt_pae.pty_id  := i_party_id;

         
         
         o_taskinstruction := true;

      end if; 

      viu_module.leave_module( i_module      => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
   end handle_first_taskreport;

   













   procedure modify_package( io_rt_pae            in out pdm_packages%rowtype
                           , i_ind_physical_event in     boolean
                           , i_eventtime          in     cmn_constant.st_timestamp
                           )

   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.modify_package';

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      if     i_ind_physical_event
      	 and i_eventtime > io_rt_pae.date_last_event
      then

          
         io_rt_pae.date_last_event := i_eventtime;
      end if;

      viu_module.leave_module( i_module      => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
   end modify_package;

   










   procedure handle_changed_pid( io_rt_pae         in out pdm_packages%rowtype
                               , io_rt_pet         in out pdm_package_events%rowtype
                               , io_pi_id          in out pdm_packages.pi_id%type
                               , io_place_of_birth in out pdm_packages.place_of_birth%type
                               , i_pid             in     pdm_packages.pid%type
                               , i_systimestamp    in     cmn_constant.st_timestamp
                               , i_eventtime       in     cmn_constant.st_timestamp
                               , i_party_id        in     cmn_parties.id%type
                               , i_evt_id          in     pdm_events.id%type
                               , o_package_created    out boolean
                               )

   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.handle_changed_pid';

      l_found_insert boolean;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      o_package_created := false;

      
      if io_rt_pae.pid <> i_pid
      then

         
         viu_info.operator_info( i_ifo_nr                 => viu_constant.c_ifo_changedpid
                               , i_calling_procedure      => l_con_proc_name
                               , i_severity               => viu_info.severity_warning
                               , i_info_arguments         =>    io_rt_pae.pid
                                                             || '##'
                                                             || i_pid
                               );

         
         if io_rt_pae.status =  pdm_constant.g_con_pae_status_open
         then

            
            
            commit;

            
            
            
            
            
            io_pi_id          := null;
            io_place_of_birth := null;

            
            create_package( i_pi_id          => null
                          , i_place_of_birth => null
                          , i_pid            => i_pid
                          , i_party_id       => i_party_id
                          , i_systimestamp   => i_systimestamp
                          , i_eventtime      => i_eventtime
                          , o_rt_pae         => io_rt_pae
                          , o_found          => l_found_insert
                          );

            
            if l_found_insert
            then
               
               log_pae_event( i_event_time => i_systimestamp
                            , i_evt_id     => i_evt_id
                            , i_rt_pae     => io_rt_pae
                            , o_rt_pet     => io_rt_pet
                            );
            else
               o_package_created := true;
            end if;

         end if; 
      end if; 

      viu_module.leave_module( i_module      => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
   end handle_changed_pid;

   










   procedure delete_attributes_packageinfo( i_rt_pae    in pdm_packages%rowtype
                                          , i_rt_pet    in pdm_package_events%rowtype
                                          , i_eventtime in cmn_constant.st_timestamp
                                          )

   is
      l_con_proc_name constant cmn_constant.st_proc_name := g_con_package || '.delete_attributes_packageinfo';

      l_packageinfo_lpc           pdm_package_attributes.value%type;
      l_dummy                     boolean;
      l_rt_imd                    cmn_ifc_msg_definitions%rowtype;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      l_packageinfo_lpc := pdm_common.pbe_select_value( i_pae_id   => i_rt_pae.id
                                                      , i_adn_path => pdm_constant.g_con_pi_lpc_attr
                                                      );

      
      
      if     l_packageinfo_lpc is not null
      	 and (   i_rt_pae.pd_id is null
      	 	    or i_rt_pae.pd_id <> l_packageinfo_lpc
      	     )
      then

         
         l_dummy := cmn_imd_tapi_pck.imd_select_row_uk
                            ( i_imd_name => pdm_constant.g_con_packagedata
                            , o_rt_imd   => l_rt_imd
                            );

         
         pdm_attributes.delete_temporary_attributes
                                    ( i_pae_id     => i_rt_pae.id
                                    , i_imd_id     => l_rt_imd.id
                                    , i_pet_id     => i_rt_pet.id
                                    , i_tte_id     => null
                                    , i_pd_status  => pdm_constant.g_con_packagedatasts_deleted
                                    , i_event_time => i_eventtime
                                    );
      end if;

      viu_module.leave_module( i_module      => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
   end delete_attributes_packageinfo;

   













   procedure hdl_tr_autonomous( io_rt_pae             in out pdm_packages%rowtype
                              , i_it_attributes       in     pdm_attributes.attribute_coll
                              , i_systimestamp        in     cmn_constant.st_timestamp
                              , i_evt_id              in     pdm_events.id%type
                              , i_nt_pd_id_message    in     pdm_nt_lpc
                              , i_nt_vfbta_message    in     pdm_nt_lpc
                              , i_nt_invalid_message  in     pdm_nt_lpc
                              , i_nt_pd_id_combined   in     pdm_nt_lpc
                              , i_nt_vfbta_combined   in     pdm_nt_lpc
                              , io_pas_lock_completed in out boolean
                              , i_rt_tte              in     pdm_task_types%rowtype
                              , i_rt_imd              in     cmn_ifc_msg_definitions%rowtype
                              , i_pi_id               in     pdm_packages.pi_id%type
                              , i_place_of_birth      in     pdm_packages.place_of_birth%type
                              , i_tasktype            in     pdm_task_types.name%type
                              , i_stationid_cust      in     pdm_stations.id_cust%type
                              , i_rt_stn              in     pdm_stations%rowtype
                              , i_areaid              in     varchar2
                              , i_zoneid              in     varchar2
                              , i_pid                 in     pdm_packages.pid%type
                              , i_pd_id               in     pdm_packages.pd_id%type
                              , i_bir_lpc_ext         in     pdm_package_attributes.value%type
                              , i_party_id_cust       in     cmn_parties.id_cust%type
                              , i_party_id            in     cmn_parties.id%type
                              , i_party_type          in     cmn_parties.type%type
                              , i_instance_id         in     varchar2
                              , i_eventtime           in     cmn_constant.st_timestamp
                              , i_tr_error            in     varchar2
                              , i_ind_loaded          in     boolean
                              , i_ind_unloaded        in     boolean
                              , i_ind_physical_event  in     boolean
                              , i_identification      in     boolean
                              , i_taskinstruction     in     boolean
                              , i_reporting           in     boolean
                              , i_registration        in     boolean
                              , i_deregistration      in     boolean
                              , i_identification_mode in     cmn_parameter_values.value%type
                              )
   is
      
      pragma autonomous_transaction;

      l_con_proc_name       constant cmn_constant.st_proc_name := g_con_package || '.hdl_tr_autonomous';

      l_rt_pet                       pdm_package_events%rowtype;
      l_rt_plk_active                pdm_package_links%rowtype;
      l_rt_plk_deactivated           pdm_package_links%rowtype;

      l_pi_id                        pdm_packages.pi_id%type;
      l_place_of_birth               pdm_packages.place_of_birth%type;
      l_party_id_cust                cmn_parties.id_cust%type;
      l_lpc_status                   pdm_package_attributes.value%type;
      l_lpc_old                      pdm_package_attributes.value%type;
      l_lpc_extension_old            pdm_package_attributes.value%type;
      l_pae_pd_id_old                pdm_packages.pd_id%type;
      l_instance_id                  pdm_package_attributes.value%type;

      l_it_attributes                pdm_attributes.attribute_coll;
      l_it_attributes_match          pdm_attributes.attribute_coll;
      l_it_attributes_situation      pdm_attributes.attribute_coll;

      l_nt_pd_id_combined            pdm_nt_lpc := pdm_nt_lpc();
      l_nt_vfbta_combined            pdm_nt_lpc := pdm_nt_lpc();

      l_found_routing_exception      boolean;
      l_ind_temp                     boolean;
      l_dummy                        boolean;
      l_ind_chk_max_taskreport_error boolean;
      l_lpc_changed                  boolean;
      l_hdl_psn                      boolean;
      l_found_initial                boolean := false;
      l_found_insert                 boolean := false;
      l_package_created_changed_pid  boolean := false;
      l_taskinstruction              boolean := false;
      l_pending_task_inserted        boolean := false;
      l_ind_force_match              boolean := false;
      l_ind_package_created          boolean := false;
      l_ind_use_mult_bagdata         boolean;

   begin
      viu_module.enter_module( i_module      => l_con_proc_name );

      
      l_ind_use_mult_bagdata := pdm_common.use_mult_bagdata;

      
      l_it_attributes := i_it_attributes;

      
      l_pae_pd_id_old := io_rt_pae.pd_id;

      
      
      
      l_found_initial := pdm_common.pae_lock_and_select( i_pi_id          => i_pi_id
                                                       , i_place_of_birth => i_place_of_birth
                                                       , i_pid            => i_pid
                                                       , o_rt_pae         => io_rt_pae
                                                       );

      
      
      

      
      if not l_found_initial
      then

         
         
         
         create_package( i_pi_id          => i_pi_id
                       , i_place_of_birth => i_place_of_birth
                       , i_pid            => i_pid
                       , i_party_id       => i_party_id
                       , i_systimestamp   => i_systimestamp
                       , i_eventtime      => i_eventtime
                       , o_rt_pae         => io_rt_pae
                       , o_found          => l_found_insert
                       );
      end if;

      
      
      

      
      if     i_identification
         and i_identification_mode = 2
      then

         
         get_baggagetags2( i_rt_pae            => io_rt_pae
                         , i_nt_pd_id          => i_nt_pd_id_message
                         , i_nt_vfbta          => i_nt_vfbta_message
                         , o_nt_pd_id_combined => l_nt_pd_id_combined
                         , o_nt_vfbta_combined => l_nt_vfbta_combined
                         );
      else

         
         
         l_nt_pd_id_combined := i_nt_pd_id_message;
      end if;

      
      
      

      if         l_nt_pd_id_combined <> i_nt_pd_id_combined
         or (    pdm_common.pd_id_differs( i_pae_pd_id_new => io_rt_pae.pd_id
                                         , i_pae_pd_id_old => l_pae_pd_id_old
                                         )
             and not (io_rt_pae.pd_id member of i_nt_pd_id_combined)
            )
      then

         null;
      else




         $if $$test_sleep_after_lock_package
         $then
             pdm_common.parallel_execution_sleep( i_rt_pae          => io_rt_pae
                                                , i_sleep_seconds   => 10
                                                , i_additional_data => 'test_sleep_after_lock_package'
                                                );
         $end




         
         io_pas_lock_completed := true;

         
         l_pi_id          := i_pi_id;
         l_place_of_birth := i_place_of_birth;

         
         
         

         
         if l_found_initial or l_found_insert
         then

            
            
            
            l_lpc_old           := io_rt_pae.pd_id;
            l_lpc_extension_old := pdm_common.pbe_select_value( i_pae_id   => io_rt_pae.id
                                                              , i_adn_path => pdm_constant.g_con_lpc_extension_attr_func
                                                              );

            
            
            
            log_pae_event( i_event_time => i_systimestamp
                         , i_evt_id     => i_evt_id
                         , i_rt_pae     => io_rt_pae
                         , o_rt_pet     => l_rt_pet
                         );

            
            
            
            handle_tr_closed_package( io_rt_pae            => io_rt_pae
                                    , i_rt_pet             => l_rt_pet
                                    , i_ind_registration   => i_registration
                                    , i_pid                => i_pid
                                    , i_lpc                => i_pd_id
                                    , i_lpc_extension      => i_bir_lpc_ext
                                    , i_stn_id             => i_rt_stn.id
                                    , i_areaid             => i_areaid
                                    , i_zoneid             => i_zoneid
                                    , i_ind_physical_event => i_ind_physical_event
                                    , i_event_time         => i_eventtime
                                    , io_it_attributes     => l_it_attributes
                                    , o_ind_force_match    => l_ind_force_match
                                    , o_lpc_status         => l_lpc_status
                                    );

            
            
            
            handle_changed_pid( io_rt_pae         => io_rt_pae
                              , io_rt_pet         => l_rt_pet
                              , io_pi_id          => l_pi_id
                              , io_place_of_birth => l_place_of_birth
                              , i_pid             => i_pid
                              , i_systimestamp    => i_systimestamp
                              , i_eventtime       => i_eventtime
                              , i_party_id        => i_party_id
                              , i_evt_id          => i_evt_id
                              , o_package_created => l_package_created_changed_pid
                              );

            
            
            
            if not l_package_created_changed_pid
            then

               
               
               
               handle_ghost_indicator( io_rt_pae            => io_rt_pae
                                     , io_it_attributes     => l_it_attributes
                                     , i_tr_error           => i_tr_error
                                     , i_event_time         => i_eventtime
                                     , i_ind_physical_event => i_ind_physical_event
                                     , o_taskinstruction    => l_ind_temp
                                     );
               l_taskinstruction := i_taskinstruction or l_ind_temp;

               
               
               
               handle_tr_suspended_package( io_rt_pae            => io_rt_pae
                                          , i_deregistration     => i_deregistration
                                          , i_stationid          => i_rt_stn.id
                                          , i_areaid             => i_areaid
                                          , i_zoneid             => i_zoneid
                                          , i_ind_physical_event => i_ind_physical_event
                                          , i_event_time         => i_eventtime
                                          , i_it_attributes      => l_it_attributes
                                          , o_ind_force_match    => l_ind_temp
                                          );
               l_ind_force_match := l_ind_force_match or l_ind_temp;

               
               
               
               modify_package( io_rt_pae            => io_rt_pae
                             , i_ind_physical_event => i_ind_physical_event
                             , i_eventtime          => i_eventtime
                             );

               
               
               
               handle_first_taskreport( io_rt_pae         => io_rt_pae
                                      , i_party_id        => i_party_id
                                      , i_party_type      => i_party_type
                                      , o_taskinstruction => l_ind_temp
                                      );
               l_taskinstruction := l_taskinstruction or l_ind_temp;

               
               
               
               determine_package_not_ready( io_rt_pae             => io_rt_pae
                                          , io_ind_update_package => l_dummy
                                          , i_party_type          => i_party_type
                                          , i_tasktype            => i_tasktype
                                          , i_deregistration      => i_deregistration
                                          , i_ind_physical_event  => i_ind_physical_event
                                          , i_it_attributes       => l_it_attributes
                                          );

               
               
               
               pdm_attributes.delete_temporary_attributes
                                           ( i_pae_id     => io_rt_pae.id
                                           , i_imd_id     => i_rt_imd.id
                                           , i_pet_id     => l_rt_pet.id
                                           , i_tte_id     => i_rt_tte.id
                                           , i_pd_status  => null
                                           , i_event_time => i_eventtime
                                           );

               
               
               
               delete_attributes_taskreport( i_ind_physical_event => i_ind_physical_event
                                           , i_ind_registration   => i_registration
                                           , i_ind_deregistration => i_deregistration
                                           , io_it_attributes     => l_it_attributes
                                           );
            end if; 
         end if; 

         
         
         

         
         if    (not l_found_initial and not l_found_insert)
            or l_package_created_changed_pid
         then

            
            
            
            if not i_ind_physical_event
            then
               viu_info.raise_info
                  ( i_ifo_nr            => viu_constant.c_ifo_nophysicalreportedbylcl
                  , i_calling_procedure => l_con_proc_name
                  , i_severity          => viu_info.severity_warning
                  , i_additional_data   =>
                          'STATION.ID=' || i_rt_stn.id
                     || ', AreaID='     || i_areaid
                     || ', ZoneID='     || i_zoneid
                     || ', PID='        || i_pid
                     || ', Message ID=' || cmn_interface.get_message_id
                                              ( i_direction => cmn_constant.g_con_msg_direction_incoming)
                  );
            end if;

            
            
            

            
            log_pae_event( i_event_time => i_systimestamp
                         , i_evt_id     => i_evt_id
                         , i_rt_pae     => io_rt_pae
                         , o_rt_pet     => l_rt_pet
                         );

            
            
            
            set_baggageidentifier( i_rt_pae           => io_rt_pae
                                 , i_pet_id           => l_rt_pet.id
                                 , i_event_time       => i_eventtime
                                 );

            
            
            
            pdm_attributes.initialize_package_attributes( io_it_attributes => l_it_attributes );

            
            
            
            l_ind_force_match     := true;
            l_ind_package_created := true;

            
            
            
            handle_lpc_registration( io_rt_pae            => io_rt_pae
                                   , i_pet_id             => l_rt_pet.id
                                   , i_stn_id             => i_rt_stn.id
                                   , i_ind_create_package => true
                                   , i_identification     => i_identification
                                   , i_new_pd_id          => i_pd_id
                                   , i_new_lpc_extension  => i_bir_lpc_ext
                                   , i_event_time         => i_eventtime
                                   , o_lpc_status         => l_lpc_status
                                   );

         end if; 

         
         
         
         if l_lpc_status = pdm_constant.g_con_lpc_status_read
         then
            pull_resume_tracking_attribs
               ( io_rt_pae             => io_rt_pae
               , i_pet_id              => l_rt_pet.id
               , i_rt_stn              => i_rt_stn
               , i_party_type          => i_party_type
               , i_ind_package_created => l_ind_package_created
               , i_event_time          => i_eventtime
               );
         end if;

         
         
         
         if i_registration
         then

            
            
            
            hdl_taskreport_registration( io_rt_pae               => io_rt_pae
                                       , i_eventtime             => i_eventtime
                                       , i_systimestamp          => i_systimestamp
                                       , i_tasktype              => i_tasktype
                                       , i_stationid_cust        => i_stationid_cust
                                       , i_rt_stn                => i_rt_stn
                                       , i_pi_id                 => l_pi_id
                                       , i_place_of_birth        => l_place_of_birth
                                       , io_it_attributes        => l_it_attributes
                                       , io_rt_pet               => l_rt_pet
                                       , i_lpc_old               => l_lpc_old
                                       , i_lpc_extension_old     => l_lpc_extension_old
                                       , i_reporting             => i_reporting
                                       , o_pending_task_inserted => l_pending_task_inserted
                                       , i_ind_force_match       => l_ind_force_match
                                       , i_ind_package_created   => l_ind_package_created
                                       , i_ind_use_mult_bagdata  => l_ind_use_mult_bagdata
                                       );

         end if;

         
         if not l_pending_task_inserted
         then

            
            
            
            if io_rt_pae.status = pdm_constant.g_con_pae_status_open
            then
               check_for_routing_exception( io_it_attributes          => l_it_attributes
                                          , o_found_routing_exception => l_found_routing_exception
                                          );
            end if;

            
            
            
            if l_found_routing_exception
            then
               set_routing_exception_handled( i_value          => pdm_constant.g_con_rout_except_hdld_false
                                            , io_it_attributes => l_it_attributes
                                            );
               set_routing_exception_handled( i_value          => pdm_constant.g_con_rout_except_hdld_true
                                            , io_it_attributes => l_it_attributes_match
                                            );
            end if;

            
            
            
            if i_rt_tte.name = pdm_constant.g_con_tte_requestairporttag
            then
               determine_airport_tag(io_it_attributes => l_it_attributes);
            end if;

            
            
            
            if i_identification
            then

               
               if i_identification_mode = 1
               then
                  hdl_taskreport_identification1( io_rt_pae             => io_rt_pae
                                                , i_pet_id              => l_rt_pet.id
                                                , i_eventtime           => i_eventtime
                                                , i_rt_stn              => i_rt_stn
                                                , i_party_type          => i_party_type
                                                , i_ind_package_created => l_ind_package_created
                                                , i_it_attributes       => l_it_attributes
                                                );
               else
                  hdl_taskreport_identification2( io_rt_pae             => io_rt_pae
                                                , i_pet_id              => l_rt_pet.id
                                                , i_eventtime           => i_eventtime
                                                , i_rt_stn              => i_rt_stn
                                                , i_party_type          => i_party_type
                                                , i_ind_package_created => l_ind_package_created
                                                , i_tasktype            => i_tasktype
                                                , i_nt_pd_id_message    => i_nt_pd_id_message
                                                , i_nt_pd_id_combined   => l_nt_pd_id_combined
                                                , i_nt_vfbta_message    => i_nt_vfbta_message
                                                , i_nt_vfbta_combined   => l_nt_vfbta_combined
                                                , i_nt_invalid_message  => i_nt_invalid_message
                                                , io_it_attributes      => l_it_attributes
                                                );
               end if;
            end if;

            
            
            
            determine_loaded_segregation( i_rt_pae           => io_rt_pae
                                        , i_ind_loaded       => i_ind_loaded
                                        , i_ind_unloaded     => i_ind_unloaded
                                        , i_ind_registration => i_registration
                                        , io_it_attributes   => l_it_attributes
                                        );

            
            
            
            delete_attributes_packageinfo( i_rt_pae    => io_rt_pae
                                         , i_rt_pet    => l_rt_pet
                                         , i_eventtime => i_eventtime
                                         );

            
            
            
            pdm_attributes.store_attributes( i_pae_id                     => io_rt_pae.id
                                           , i_it_attributes              => l_it_attributes
                                           , i_pet_id                     => l_rt_pet.id
                                           , i_event_time                 => i_eventtime
                                           , i_ind_use_attribs_event_time => false
                                           );

            
            
            
            handle_suspended_packages ( i_rt_pae       => io_rt_pae
                                      , i_evt_id       => i_evt_id
                                      , i_systimestamp => i_systimestamp
                                      );

            
            
            
            handle_closed_packages( i_rt_pae       => io_rt_pae
                                  , i_evt_id       => i_evt_id
                                  , i_systimestamp => i_systimestamp
                                  );

            
            
            
            handle_package_link ( io_rt_pae              => io_rt_pae
                                , i_rt_pet               => l_rt_pet
                                , i_systimestamp         => i_systimestamp
                                , i_ind_use_mult_bagdata => l_ind_use_mult_bagdata
                                , o_rt_plk_active        => l_rt_plk_active
                                , o_rt_plk_deactivated   => l_rt_plk_deactivated
                                , o_lpc_changed          => l_lpc_changed
                                , o_hdl_psn              => l_hdl_psn
                                );

            
            
            
            pdm_attributes.store_functional_src_attribs
                                    ( i_pae_id_orig        =>  io_rt_pae.id
                                    , i_pet_id_orig        =>  l_rt_pet.id
                                    , i_pet_id_curr        =>  l_rt_pet.id
                                    , i_rt_plk_active      =>  l_rt_plk_active
                                    , i_rt_plk_deactivated =>  l_rt_plk_deactivated
                                    , i_ind_pae_reopened   =>  l_ind_force_match
                                    );

            
            
            
            determine_package_ready( io_rt_pae             => io_rt_pae
                                   , io_ind_update_package => l_dummy
                                   , i_tasktype            => i_tasktype
                                   , i_ind_loaded          => i_ind_loaded
                                   );

            
            
            
            situation_physical( i_rt_pae             => io_rt_pae
                              , i_ind_deregistration => i_deregistration
                              , io_it_attributes     => l_it_attributes_situation
                              );

            
            
            
            pdm_attributes.store_attributes( i_pae_id                     => io_rt_pae.id
                                           , i_it_attributes              => l_it_attributes_situation
                                           , i_pet_id                     => l_rt_pet.id
                                           , i_event_time                 => null 
                                           , i_ind_use_attribs_event_time => false
                                           );



            
            
            
            pdm_common.hdl_functional_extensions( i_rt_pae       => io_rt_pae
                                                , i_rt_pet       => l_rt_pet
                                                , i_message_type => pdm_constant.g_con_taskreport
                                                );

            
            
            
            pdm_attributes.store_derived_attributes( i_pae_id    => io_rt_pae.id
                                                   , i_pet_id    => l_rt_pet.id
                                                   );

            
            
            

            if i_tr_error is not null
            then
               l_ind_chk_max_taskreport_error := true;
            else
               l_ind_chk_max_taskreport_error := false;
               io_rt_pae.count_suspect_ti_sent := null;
            end if;

            
            
            
            pdm_processstatus.send_processstatus
               ( i_rt_pae                   => io_rt_pae
               , i_rt_pet                   => l_rt_pet
               , i_tasktype                 => null
               , i_pty_id_cust              => pdm_common.get_process_id( i_ptr_name => pdm_constant.g_con_odb_party_process_id )
               , i_event_time               => cmn_common.default_timestamp
               , i_rt_plk_deactivated       => l_rt_plk_deactivated
               , i_lpc_old                  => l_lpc_old
               , i_lpc_extension_old        => l_lpc_extension_old
               , i_ind_lpc_old              => true
               , i_ind_triggered_by_cleanup => false
               );

            
            
            
            handle_logical_package( i_rt_plk_active        => l_rt_plk_active
                                  , i_rt_plk_deactivated   => l_rt_plk_deactivated
                                  , i_evt_id               => i_evt_id
                                  , i_event_time           => i_eventtime
                                  , i_lpc_changed          => l_lpc_changed
                                  , i_ind_use_mult_bagdata => l_ind_use_mult_bagdata
                                  );

            
            
            

            
            if    i_deregistration
               or i_party_type in ( pdm_constant.g_con_lm_party_type
                                  , pdm_constant.g_con_bcm_party_type
                                  , pdm_constant.g_con_odb_party_type
                                  )
            then
               
               l_party_id_cust := null;
               l_instance_id   := null;
            else
               l_party_id_cust := i_party_id_cust;
               l_instance_id   := i_instance_id;
            end if;




            $if $$test_sleep_before_match
            $then
                pdm_common.parallel_execution_sleep( i_rt_pae          => io_rt_pae
                                                  , i_sleep_seconds   => 10
                                                  , i_additional_data => 'test_sleep_before_match'
                                                  );
            $end




            pdm_match.match_main( io_rt_pet                      => l_rt_pet
                                , io_rt_pae                      => io_rt_pae
                                , i_tasktype                     => i_tasktype
                                , i_event_time                   => i_eventtime
                                , i_ind_assign_package_to_eon    => io_rt_pae.status = pdm_constant.g_con_pae_status_open
                                , i_ind_force_match              => l_ind_force_match or l_hdl_psn
                                , i_ind_force_processstatus      => (i_deregistration and io_rt_pae.status = pdm_constant.g_con_pae_status_open)
                                , i_ind_force_packageinfo        => i_reporting
                                , i_ind_force_taskinstruction    => l_taskinstruction
                                , i_party_id_cust                => l_party_id_cust
                                , i_instance_id                  => l_instance_id
                                , i_ind_chk_max_taskreport_error => l_ind_chk_max_taskreport_error
                                , i_ind_force_update_package     => true
                                , i_ind_deregistration           => i_deregistration
                                , i_it_attributes                => l_it_attributes_match
                                , i_it_attributes_extracted      => l_it_attributes
                                , i_ind_match_physical_pd        => false
                                , i_ind_packagedata_loaded       => false
                                );

         end if; 

      end if; 

      
      
      
      commit;

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then

         
         
         
         rollback;

         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
   end hdl_tr_autonomous;

   











   procedure lock_package_accesses( i_rt_pae              in     pdm_packages%rowtype
                                  , i_identification      in     boolean
                                  , i_identification_mode in     cmn_parameter_values.value%type
                                  , i_nt_pd_id_message    in     pdm_nt_lpc
                                  , i_nt_vfbta_message    in     pdm_nt_lpc
                                  , i_pd_id               in     pdm_packages.pd_id%type
                                  , i_evt_id              in     pdm_events.id%type
                                  , i_rt_stn              in     pdm_stations%rowtype
                                  , o_nt_pd_id_combined      out pdm_nt_lpc
                                  , o_nt_vfbta_combined      out pdm_nt_lpc
                                  , o_pas_locked             out boolean
                                  )
   is
      l_con_proc_name       constant cmn_constant.st_proc_name := g_con_package || '.lock_package_accesses';

      l_rt_pas              pdm_package_accesses%rowtype;
      l_nt_pd_id_lock       pdm_nt_lpc := pdm_nt_lpc();
      l_found               boolean;

   begin
      viu_module.enter_module( i_module      => l_con_proc_name );

      
      o_nt_pd_id_combined := pdm_nt_lpc();
      o_nt_vfbta_combined := pdm_nt_lpc();
      o_pas_locked        := false;

      
      
      if     i_identification
         and i_identification_mode = 2
      then

         
         get_baggagetags2( i_rt_pae            => i_rt_pae
                         , i_nt_pd_id          => i_nt_pd_id_message
                         , i_nt_vfbta          => i_nt_vfbta_message
                         , o_nt_pd_id_combined => o_nt_pd_id_combined
                         , o_nt_vfbta_combined => o_nt_vfbta_combined
                         );

      else

         
         
         o_nt_pd_id_combined := i_nt_pd_id_message;
      end if;

      
      
      l_nt_pd_id_lock := o_nt_pd_id_combined;

      
      
      if     i_rt_pae.pd_id is not null
      	 and not (i_rt_pae.pd_id member of l_nt_pd_id_lock)
      then

         
         l_nt_pd_id_lock.extend();
         l_nt_pd_id_lock(l_nt_pd_id_lock.count) := i_rt_pae.pd_id;
      end if;

      
      
      
      if     i_pd_id is not null
      	 and i_rt_stn.ind_registration_lpc = cmn_constant.g_con_yesno_yes
      	 and not (i_pd_id member of l_nt_pd_id_lock)
      then

         
         l_nt_pd_id_lock.extend();
         l_nt_pd_id_lock(l_nt_pd_id_lock.count) := i_pd_id;
      end if;

      
      if l_nt_pd_id_lock is not empty
      then

         
         o_pas_locked := true;

         
         for i in 1..l_nt_pd_id_lock.count
         loop

            
            pdm_common.lock_package_access( i_pd_id  => l_nt_pd_id_lock(i)
                                          , i_evt_id => i_evt_id
                                          );

         end loop;
      end if;

      viu_module.leave_module( i_module      => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
   end lock_package_accesses;

   





































































































































   procedure hdl_taskreport( i_message in xmltype )
   is
      l_con_proc_name       constant cmn_constant.st_proc_name := g_con_package || '.hdl_taskreport';

      l_rt_pae              pdm_packages%rowtype;
      l_rt_tte              pdm_task_types%rowtype;
      l_rt_imd              cmn_ifc_msg_definitions%rowtype;
      l_rt_stn              pdm_stations%rowtype;
      l_rt_evt              pdm_events%rowtype;

      l_tasktype            pdm_task_types.name%type;
      l_pd_id               pdm_packages.pd_id%type;
      l_bir_lpc_ext         pdm_package_attributes.value%type;
      l_pi_id               pdm_packages.pi_id%type;
      l_place_of_birth      pdm_packages.place_of_birth%type;
      l_party_id_cust       cmn_parties.id_cust%type;
      l_party_id            cmn_parties.id%type;
      l_party_type          cmn_parties.type%type;
      l_pid                 pdm_packages.pid%type;
      l_tr_error            cmn_parameter_values.value%type;
      l_ims_id              cmn_ifc_messages.id%type;
      l_stationid_cust      pdm_stations.id_cust%type;
      l_areaid              pdm_package_attributes.value%type;
      l_zoneid              pdm_package_attributes.value%type;
      l_instance_id         pdm_package_attributes.value%type;
      l_identification_mode cmn_parameter_values.value%type;

      l_systimestamp        cmn_constant.st_timestamp;
      l_eventtime           cmn_constant.st_timestamp;

      l_it_attributes       pdm_attributes.attribute_coll;

      l_nt_pd_id_message    pdm_nt_lpc := pdm_nt_lpc();
      l_nt_pd_id_combined   pdm_nt_lpc := pdm_nt_lpc();
      l_nt_vfbta_message    pdm_nt_lpc := pdm_nt_lpc();
      l_nt_vfbta_combined   pdm_nt_lpc := pdm_nt_lpc();
      l_nt_invalid_message  pdm_nt_lpc := pdm_nt_lpc();

      l_reporting           boolean;
      l_identification      boolean;
      l_taskinstruction     boolean;
      l_registration        boolean;
      l_deregistration      boolean;
      l_ind_loaded          boolean;
      l_ind_unloaded        boolean;
      l_found               boolean;
      l_dummy               boolean;
      l_ind_physical_event  boolean;
      l_pas_lock_completed  boolean := false;
      l_pas_locked          boolean := false;

   begin
      viu_module.enter_module( i_module      => l_con_proc_name );

      
      l_systimestamp := cmn_common.default_timestamp;

      
      l_dummy := cmn_imd_tapi_pck.imd_select_row_uk ( i_imd_name => pdm_constant.g_con_taskreport
                                                    , o_rt_imd   => l_rt_imd
                                                    );

      pdm_taskreport_ifc.extract_attributes( i_message       => i_message
                                           , i_imd_id        => l_rt_imd.id
                                           , o_it_attributes => l_it_attributes
                                           );

      
      pdm_taskreport_ifc.determine_taskreport_data( i_msg                => i_message
                                                  , i_it_attributes      => l_it_attributes
                                                  , o_pi_id              => l_pi_id
                                                  , o_place_of_birth     => l_place_of_birth
                                                  , o_tasktype           => l_tasktype
                                                  , o_stationid_cust     => l_stationid_cust
                                                  , o_rt_stn             => l_rt_stn
                                                  , o_areaid             => l_areaid
                                                  , o_zoneid             => l_zoneid
                                                  , o_pid                => l_pid
                                                  , o_pd_id              => l_pd_id
                                                  , o_bir_lpc_ext        => l_bir_lpc_ext
                                                  , o_party_id_cust      => l_party_id_cust
                                                  , o_party_id           => l_party_id
                                                  , o_party_type         => l_party_type
                                                  , o_instance_id        => l_instance_id
                                                  , o_eventtime          => l_eventtime
                                                  , o_tr_error           => l_tr_error
                                                  , o_ind_loaded         => l_ind_loaded
                                                  , o_ind_unloaded       => l_ind_unloaded
                                                  , o_ind_physical_event => l_ind_physical_event
                                                  );

      
      if not pdm_tte_tapi_pck.tte_select_row_uk1( i_tte_name => l_tasktype
                                                , o_rt_tte   => l_rt_tte
                                                )
      then
         viu_info.raise_info( i_ifo_nr                 => viu_constant.c_ifo_tasktypenotfound
                            , i_calling_procedure      => l_con_proc_name
                            , i_severity               => viu_info.severity_error
                            , i_info_arguments         => l_tasktype || '##' || l_pid
                            , i_additional_data        => 'Message ID: ' || cmn_interface.get_message_id
                                                                            ( i_direction => cmn_constant.g_con_msg_direction_incoming
                                                                            )
                            );
      else

         
         l_ims_id := cmn_interface.get_message_id ( i_direction => cmn_constant.g_con_msg_direction_incoming );

         pdm_common.create_evt_eme( i_event_time => l_eventtime
                                  , i_timestamp  => l_systimestamp
                                  , i_ims_id     => l_ims_id
                                  , i_imd_id     => l_rt_imd.id
                                  , o_rt_evt     => l_rt_evt
                                  );

         
         
         commit;

         
         determine_functions( i_rt_tte            => l_rt_tte
                            , i_stationid         => l_rt_stn.id
                            , i_tr_error          => l_tr_error
                            , i_ind_loaded        => l_ind_loaded
                            , o_registration      => l_registration
                            , o_identification    => l_identification
                            , o_taskinstruction   => l_taskinstruction
                            , o_reporting         => l_reporting
                            , o_deregistration    => l_deregistration
                            );

         
         get_tags_message( i_identification => l_identification
                         , i_it_attributes  => l_it_attributes
                         , o_nt_pd_id       => l_nt_pd_id_message
                         , o_nt_vfbta       => l_nt_vfbta_message
                         , o_nt_invalid     => l_nt_invalid_message
                         );

         
         l_identification_mode := cmn_common.get_parameter_value
                                     ( i_prr_name => pdm_constant.g_con_ptr_ident_logic_mode );

         
         l_found := pdm_common.pae_select( i_pi_id          => l_pi_id
                                         , i_place_of_birth => l_place_of_birth
                                         , i_pid            => l_pid
                                         , o_rt_pae         => l_rt_pae
                                         );

         
         while not l_pas_lock_completed
         loop

            
            lock_package_accesses( i_rt_pae              => l_rt_pae
                                 , i_identification      => l_identification
                                 , i_identification_mode => l_identification_mode
                                 , i_nt_pd_id_message    => l_nt_pd_id_message
                                 , i_nt_vfbta_message    => l_nt_vfbta_message
                                 , i_pd_id               => l_pd_id
                                 , i_evt_id              => l_rt_evt.id
                                 , i_rt_stn              => l_rt_stn
                                 , o_nt_pd_id_combined   => l_nt_pd_id_combined
                                 , o_nt_vfbta_combined   => l_nt_vfbta_combined
                                 , o_pas_locked          => l_pas_locked
                                 );

            
            hdl_tr_autonomous( io_rt_pae             => l_rt_pae
                             , i_it_attributes       => l_it_attributes
                             , i_systimestamp        => l_systimestamp
                             , i_evt_id              => l_rt_evt.id
                             , i_nt_pd_id_message    => l_nt_pd_id_message
                             , i_nt_vfbta_message    => l_nt_vfbta_message
                             , i_nt_invalid_message  => l_nt_invalid_message
                             , i_nt_pd_id_combined   => l_nt_pd_id_combined
                             , i_nt_vfbta_combined   => l_nt_vfbta_combined
                             , io_pas_lock_completed => l_pas_lock_completed
                             , i_rt_tte              => l_rt_tte
                             , i_rt_imd              => l_rt_imd
                             , i_pi_id               => l_pi_id
                             , i_place_of_birth      => l_place_of_birth
                             , i_tasktype            => l_tasktype
                             , i_stationid_cust      => l_stationid_cust
                             , i_rt_stn              => l_rt_stn
                             , i_areaid              => l_areaid
                             , i_zoneid              => l_zoneid
                             , i_pid                 => l_pid
                             , i_pd_id               => l_pd_id
                             , i_bir_lpc_ext         => l_bir_lpc_ext
                             , i_party_id_cust       => l_party_id_cust
                             , i_party_id            => l_party_id
                             , i_party_type          => l_party_type
                             , i_instance_id         => l_instance_id
                             , i_eventtime           => l_eventtime
                             , i_tr_error            => l_tr_error
                             , i_ind_loaded          => l_ind_loaded
                             , i_ind_unloaded        => l_ind_unloaded
                             , i_ind_physical_event  => l_ind_physical_event
                             , i_registration        => l_registration
                             , i_identification      => l_identification
                             , i_taskinstruction     => l_taskinstruction
                             , i_reporting           => l_reporting
                             , i_deregistration      => l_deregistration
                             , i_identification_mode => l_identification_mode
                             );

            
            
            if     not l_pas_lock_completed
               and l_pas_locked
            then

               
               commit;

            end if;
         end loop;

      end if; 

      viu_module.leave_module( i_module      => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
   end hdl_taskreport;

   























   procedure monitor_timeout ( i_aet_id      in acl_application_elements.id%type
                             , i_alertname   in varchar2
                             , i_message     in varchar2
                             , i_alertstatus in varchar2
                             )
   is
      l_con_proc_name   constant cmn_constant.st_proc_name   := g_con_package || '.monitor_timeout';

      cursor c_pta( b_timestamp in cmn_constant.st_timestamp )
      is
         select *
         from   pdm_pending_tasks
         where  timeout_time <= b_timestamp;

      l_rt_evt              pdm_events%rowtype;
      l_timestamp           cmn_constant.st_timestamp;
      l_it_attributes       pdm_attributes.attribute_coll;
      l_dummy               boolean;
      l_evt_created         boolean := false;

   begin
      viu_module.enter_module( i_module      => l_con_proc_name );

      
      l_timestamp := cmn_common.default_timestamp;

      
      for l_rt_pta in c_pta( b_timestamp => l_timestamp )
      loop
         begin

            
            if not l_evt_created
            then
               
               l_rt_evt.date_created := l_timestamp;
               l_rt_evt.aet_id       := i_aet_id;
               pdm_evt_tapi_pck.evt_insert_row( io_rt_evt => l_rt_evt );

               
               l_evt_created := true;

               
               
               commit;
            end if;

            viu_info.operator_info( i_ifo_nr                 => viu_constant.c_ifo_pendingtasktimedout
                                  , i_calling_procedure      => l_con_proc_name
                                  , i_severity               => viu_info.severity_warning
                                  , i_additional_data        => ' package.id=' || l_rt_pta.pae_id
                                  );

            
            resume_pending_task( i_rt_pta              => l_rt_pta
                               , i_it_attributes       => l_it_attributes
                               , i_evt_id              => l_rt_evt.id
                               , i_timestamp           => l_timestamp
                               , i_event_time          => null
                               , i_rt_imd_packageinfo  => null
                               , i_packageinfo_pd_id   => null
                               , i_packageinfo_lpc_ext => null
                               );

         exception
            when others
            then
               viu_info.handle_info;

               
               l_dummy := pdm_pta_tapi_pck.pta_delete_row( i_pta_id => l_rt_pta.id);

         end;
      end loop; 

      viu_module.leave_module( i_module      => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module ( i_module          => l_con_proc_name
                                 ,  i_debug_info      => sqlerrm
                                 );

         viu_info.raise_info (i_calling_procedure => l_con_proc_name);
   end monitor_timeout;

   
















   procedure main_monitor_timeout ( i_aet_id    in acl_application_elements.id%type
                                  , i_timestamp in cmn_constant.st_timestamp
                                  )
   is
      l_con_proc_name   constant cmn_constant.st_proc_name   := g_con_package || '.main_monitor_timeout';

      l_alertname_dummy varchar2( 40 );
      l_message         varchar2( 40 );
      l_alertstatus     varchar2( 40 );
      l_timeout         number;
      l_restart_period  number;

   begin
      viu_module.enter_module( i_module      => l_con_proc_name );

      
      l_alertstatus := pdm_constant.g_con_timeout_occurred;

      
      l_restart_period := cmn_common.get_parameter_value(i_prr_name => pdm_constant.g_con_ptr_restart_mon_timeout);

      
      l_timeout := pdm_common.interval_to_seconds ( cmn_common.varchar_to_interval ( 'd00h00m00s01f000' ));

      dbms_alert.register(pdm_common.build_signal(pdm_constant.g_con_alrt_monitor_timeout));

      
      

      
      
      
      
      

      
      
      
      
      
      
      while     l_alertstatus = pdm_constant.g_con_timeout_occurred
            and (    l_restart_period is null
            	    or (cmn_common.default_timestamp - i_timestamp ) < numtodsinterval( l_restart_period, 'SECOND' )
            	  )
      loop
         begin
            monitor_timeout ( i_aet_id      => i_aet_id
                            , i_alertname   => l_alertname_dummy
                            , i_message     => l_message
                            , i_alertstatus => l_alertstatus
                            );

            dbms_alert.waitany( name    => l_alertname_dummy
                              , message => l_message
                              , status  => l_alertstatus
                              , timeout => l_timeout
                              );

            commit;

         exception
            when viu_constant.exc_aclprocessstopped
            then
               viu_info.raise_info( i_calling_procedure  => l_con_proc_name );

            when others
            then
               rollback;
               viu_info.handle_info;

               
               if l_alertstatus = pdm_constant.g_con_timeout_occurred
               then
                  dbms_alert.waitany( name    => l_alertname_dummy
                                    , message => l_message
                                    , status  => l_alertstatus
                                    , timeout => pdm_constant.g_con_job_wait_delay
                                    );
               end if;
         end;
      end loop;

      dbms_alert.removeall;
      viu_module.leave_module( i_module      => l_con_proc_name );
   exception
      when viu_constant.exc_aclprocessstopped
      then
         dbms_alert.removeall;
         commit;

         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure  => l_con_proc_name );
      when others
      then
         rollback;
         dbms_alert.removeall;

         viu_module.leave_module( i_module      => l_con_proc_name
                                , i_debug_info  => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure  => l_con_proc_name );
   end main_monitor_timeout;

     










































































   procedure resume_pta_autonomous( i_rt_pta              in     pdm_pending_tasks%rowtype
                                  , i_it_attributes       in     pdm_attributes.attribute_coll
                                  , i_evt_id              in     pdm_events.id%type
                                  , i_timestamp           in     cmn_constant.st_timestamp
                                  , i_event_time          in     cmn_constant.st_timestamp
                                  , i_rt_imd_packageinfo  in     cmn_ifc_msg_definitions%rowtype
                                  , i_packageinfo_pd_id   in     pdm_packages.pd_id%type
                                  , i_packageinfo_lpc_ext in     pdm_packages.place_of_birth%type
                                  , io_rt_pae             in out pdm_packages%rowtype
                                  , io_pas_lock_completed in out boolean
                                  )
   is
      
      pragma autonomous_transaction;

      l_con_proc_name    constant cmn_constant.st_proc_name := g_con_package || '.resume_pta_autonomous';

      l_rt_tte                    pdm_task_types%rowtype;
      l_dummy                     boolean;
      
      l_reporting                 boolean                   := false;
      l_identification            boolean                   := false;
      l_force_ti                  boolean                   := false;
      l_registration              boolean                   := false;
      l_deregistration            boolean                   := false;
      l_rt_plk_active             pdm_package_links%rowtype;
      l_rt_plk_deactivated        pdm_package_links%rowtype;
      l_lpc_status                pdm_package_attributes.value%type;
      l_it_attributes_situation   pdm_attributes.attribute_coll;
      l_it_attributes_empty       pdm_attributes.attribute_coll;
      l_rt_pet                    pdm_package_events%rowtype;
      l_pae_pd_id_old             pdm_packages.pd_id%type;
      l_lpc_changed               boolean;
      l_hdl_psn                   boolean;
      l_ind_use_mult_bagdata      boolean;

   begin
      viu_module.enter_module( i_module      => l_con_proc_name );

      
      l_ind_use_mult_bagdata := pdm_common.use_mult_bagdata;

      
      l_pae_pd_id_old := io_rt_pae.pd_id;

      
      l_dummy := pdm_pae_tapi_pck.pae_select_row_upd( i_pae_id => io_rt_pae.id
                                                    , o_rt_pae => io_rt_pae
                                                    );

      
      if pdm_common.pd_id_differs( i_pae_pd_id_new => io_rt_pae.pd_id
                                 , i_pae_pd_id_old => l_pae_pd_id_old
                                 )
      then

         
         null;

      else

         
         io_pas_lock_completed := true;

         
         l_rt_pet              := null;
         l_rt_pet.evt_id       := i_evt_id;
         l_rt_pet.pae_id       := io_rt_pae.id;
         l_rt_pet.date_created := i_timestamp;

         pdm_common.create_package_event( io_rt_pet                => l_rt_pet
                                        , i_ind_check_existing_pet => false
                                        );

         if i_rt_imd_packageinfo.id is not null
         then
            
            pdm_attributes.delete_temporary_attributes( i_pae_id     => io_rt_pae.id
                                                      , i_imd_id     => i_rt_imd_packageinfo.id
                                                      , i_pet_id     => l_rt_pet.id
                                                      , i_tte_id     => null
                                                      , i_pd_status  => null
                                                      , i_event_time => i_event_time
                                                      );
         end if;


         
         l_dummy  := pdm_tte_tapi_pck.tte_select_row( i_tte_id      => i_rt_pta.tte_id
                                                    , o_rt_tte      => l_rt_tte
                                                    );

         
         l_dummy  := pdm_pta_tapi_pck.pta_delete_row( i_pta_id      => i_rt_pta.id );

         
         determine_functions( i_rt_tte          => l_rt_tte
                            , i_stationid       => i_rt_pta.stn_id
                            , i_tr_error        => null
                            , i_ind_loaded      => false
                            , o_registration    => l_registration
                            , o_identification  => l_identification
                            , o_taskinstruction => l_force_ti
                            , o_reporting       => l_reporting
                            , o_deregistration  => l_deregistration
                            );

         
         if io_rt_pae.status = pdm_constant.g_con_pae_status_suspended
         then
            
            pdm_attributes.store_attributes( i_pae_id                     => io_rt_pae.id
                                           , i_it_attributes              => i_it_attributes
                                           , i_pet_id                     => l_rt_pet.id
                                           , i_event_time                 => i_rt_pta.event_time
                                           , i_ind_use_attribs_event_time => false
                                           );
         else

            
            case io_rt_pae.status

               
               when pdm_constant.g_con_pae_status_closed
               then
                  
                  pdm_attributes.store_attributes( i_pae_id                     => io_rt_pae.id
                                                 , i_it_attributes              => i_it_attributes
                                                 , i_pet_id                     => l_rt_pet.id
                                                 , i_event_time                 => i_rt_pta.event_time
                                                 , i_ind_use_attribs_event_time => false
                                                 );

               
               else
                  
                  pdm_attributes.store_attributes( i_pae_id                     => io_rt_pae.id
                                                 , i_it_attributes              => i_it_attributes
                                                 , i_pet_id                     => l_rt_pet.id
                                                 , i_event_time                 => i_rt_pta.event_time
                                                 , i_ind_use_attribs_event_time => false
                                                 );

                  
                  if i_rt_imd_packageinfo.id is not null
                  then

                     
                     if     io_rt_pae.pd_id     is     null
                        and i_packageinfo_pd_id is not null
                     then

                        
                        handle_lpc_registration( io_rt_pae            => io_rt_pae
                                               , i_pet_id             => l_rt_pet.id
                                               , i_stn_id             => i_rt_pta.stn_id
                                               , i_ind_create_package => false
                                               , i_identification     => false
                                               , i_new_pd_id          => i_packageinfo_pd_id
                                               , i_new_lpc_extension  => i_packageinfo_lpc_ext
                                               , i_event_time         => i_rt_pta.event_time
                                               , o_lpc_status         => l_lpc_status
                                               );

                        
                        handle_suspended_packages( i_rt_pae       => io_rt_pae
                                                 , i_evt_id       => i_evt_id
                                                 , i_systimestamp => i_timestamp
                                                 );

                        
                        handle_closed_packages( i_rt_pae       => io_rt_pae
                                              , i_evt_id       => i_evt_id
                                              , i_systimestamp => i_timestamp
                                              );

                     end if; 

                  end if; 
            end case;

            
            handle_package_link ( io_rt_pae              => io_rt_pae
                                , i_rt_pet               => l_rt_pet
                                , i_systimestamp         => i_timestamp
                                , i_ind_use_mult_bagdata => l_ind_use_mult_bagdata
                                , o_rt_plk_active        => l_rt_plk_active
                                , o_rt_plk_deactivated   => l_rt_plk_deactivated
                                , o_lpc_changed          => l_lpc_changed
                                , o_hdl_psn              => l_hdl_psn
                                );

            
            pdm_attributes.store_functional_src_attribs
                                    ( i_pae_id_orig        =>  io_rt_pae.id
                                    , i_pet_id_orig        =>  l_rt_pet.id
                                    , i_pet_id_curr        =>  l_rt_pet.id
                                    , i_rt_plk_active      =>  l_rt_plk_active
                                    , i_rt_plk_deactivated =>  l_rt_plk_deactivated
                                    , i_ind_pae_reopened   =>  false
                                    );

            
            situation_physical( i_rt_pae             => io_rt_pae
                              , i_ind_deregistration => false
                              , io_it_attributes     => l_it_attributes_situation
                              );

            
            pdm_attributes.store_attributes( i_pae_id                     => io_rt_pae.id
                                           , i_it_attributes              => l_it_attributes_situation
                                           , i_pet_id                     => l_rt_pet.id
                                           , i_event_time                 => null 
                                           , i_ind_use_attribs_event_time => false
                                           );

            
            pdm_common.hdl_functional_extensions( i_rt_pae       => io_rt_pae
                                                , i_rt_pet       => l_rt_pet
                                                , i_message_type => case
                                                                       when i_rt_imd_packageinfo.id is not null
                                                                       then
                                                                          pdm_constant.g_con_packageinfo
                                                                    end
                                                );

            
            pdm_attributes.store_derived_attributes( i_pae_id    => io_rt_pae.id
                                                   , i_pet_id    => l_rt_pet.id
                                                   );

            
            handle_logical_package( i_rt_plk_active        => l_rt_plk_active
                                  , i_rt_plk_deactivated   => l_rt_plk_deactivated
                                  , i_evt_id               => i_evt_id
                                  , i_event_time           => i_rt_pta.event_time
                                  , i_lpc_changed          => l_lpc_changed
                                  , i_ind_use_mult_bagdata => l_ind_use_mult_bagdata
                                  );

            pdm_match.match_main( io_rt_pet                      => l_rt_pet
                                , io_rt_pae                      => io_rt_pae
                                , i_tasktype                     => null
                                , i_event_time                   => i_rt_pta.event_time
                                , i_ind_assign_package_to_eon    => true
                                , i_ind_force_match              => l_hdl_psn
                                , i_ind_force_processstatus      => false
                                , i_ind_force_packageinfo        => l_reporting
                                , i_ind_force_taskinstruction    => false
                                , i_party_id_cust                => null
                                , i_instance_id                  => null
                                , i_ind_chk_max_taskreport_error => false
                                , i_ind_force_update_package     => true
                                , i_ind_deregistration           => false
                                , i_it_attributes                => l_it_attributes_empty
                                , i_it_attributes_extracted      => i_it_attributes
                                , i_ind_match_physical_pd        => false
                                , i_ind_packagedata_loaded       => false
                                );

         end if; 
      end if; 

      
      commit;

      viu_module.leave_module( i_module => l_con_proc_name );
   exception
      when others
      then
         
         rollback;

         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );
         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );
   end resume_pta_autonomous;

   











   procedure resume_pending_task( i_rt_pta              in pdm_pending_tasks%rowtype
                                , i_it_attributes       in pdm_attributes.attribute_coll
                                , i_evt_id              in pdm_events.id%type
                                , i_timestamp           in cmn_constant.st_timestamp
                                , i_event_time          in cmn_constant.st_timestamp
                                , i_rt_imd_packageinfo  in cmn_ifc_msg_definitions%rowtype
                                , i_packageinfo_pd_id   in pdm_packages.pd_id%type
                                , i_packageinfo_lpc_ext in pdm_packages.place_of_birth%type
                                )
   is
      l_con_proc_name   constant cmn_constant.st_proc_name      := g_con_package || '.resume_pending_task';

      l_rt_pae             pdm_packages%rowtype;
      l_dummy              boolean := false;
      l_pas_lock_completed boolean := false;
      l_pas_locked         boolean := false;

   begin
      viu_module.enter_module( i_module => l_con_proc_name );

      
      l_dummy := pdm_pae_tapi_pck.pae_select_row( i_pae_id => i_rt_pta.pae_id
                                                , o_rt_pae => l_rt_pae
                                                );

      
      while not l_pas_lock_completed
      loop

         
         if l_rt_pae.pd_id is not null
         then

            
            pdm_common.lock_package_access( i_pd_id  => l_rt_pae.pd_id
                                          , i_evt_id => i_evt_id
                                          );

            l_pas_locked := true;

         end if;

         
         
         if         i_packageinfo_pd_id <> l_rt_pae.pd_id
            or (    l_rt_pae.pd_id      is     null
            	  and i_packageinfo_pd_id is not null
               )
         then

            
            pdm_common.lock_package_access( i_pd_id  => i_packageinfo_pd_id
                                          , i_evt_id => i_evt_id
                                          );

            l_pas_locked := true;

         end if;

         
         resume_pta_autonomous( i_rt_pta              => i_rt_pta
                              , i_it_attributes       => i_it_attributes
                              , i_evt_id              => i_evt_id
                              , i_timestamp           => i_timestamp
                              , i_event_time          => i_event_time
                              , i_rt_imd_packageinfo  => i_rt_imd_packageinfo
                              , i_packageinfo_pd_id   => i_packageinfo_pd_id
                              , i_packageinfo_lpc_ext => i_packageinfo_lpc_ext
                              , io_rt_pae             => l_rt_pae
                              , io_pas_lock_completed => l_pas_lock_completed
                              );

         
         
         if     not l_pas_lock_completed
            and l_pas_locked
         then

            
            
            commit;
         end if;
      end loop;

      
      if l_pas_locked
      then
         
         commit;
      end if;

      viu_module.leave_module( i_module      => l_con_proc_name );
   exception
      when others
      then
         viu_module.leave_module( i_module          => l_con_proc_name
                                , i_debug_info      => sqlerrm
                                );

         viu_info.raise_info( i_calling_procedure      => l_con_proc_name );

   end resume_pending_task;

begin
   init;
end pdm_taskreport;
/