create or replace PACKAGE pdm_ptk_tapi_pck
IS
-- Table API package for table pdm_process_spec_tasks
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:41:01)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'PDM_PTK_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'PDM_PROCESS_SPEC_TASKS';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION ptk_select_row( i_ptk_ID   IN  pdm_process_spec_tasks.ID%TYPE
                       , o_rt_ptk   OUT pdm_process_spec_tasks%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION ptk_select_row_uk1( i_ptk_PSN_ID   IN  pdm_process_spec_tasks.PSN_ID%TYPE
                           , i_ptk_ACTIVATED_BY_EVT_ID   IN  pdm_process_spec_tasks.ACTIVATED_BY_EVT_ID%TYPE
                           , o_rt_ptk  OUT pdm_process_spec_tasks%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION ptk_select_row_upd( i_ptk_ID   IN  pdm_process_spec_tasks.ID%TYPE
                           , o_rt_ptk   OUT pdm_process_spec_tasks%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION ptk_select_row_upd_uk1( i_ptk_PSN_ID   IN  pdm_process_spec_tasks.PSN_ID%TYPE
                               , i_ptk_ACTIVATED_BY_EVT_ID   IN  pdm_process_spec_tasks.ACTIVATED_BY_EVT_ID%TYPE
                               , o_rt_ptk  OUT pdm_process_spec_tasks%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE ptk_lock_row( i_ptk_ID   IN  pdm_process_spec_tasks.ID%TYPE )
;

PROCEDURE ptk_lock_row_nowait( i_ptk_ID   IN  pdm_process_spec_tasks.ID%TYPE )
;

PROCEDURE ptk_insert_row ( io_rt_ptk  IN OUT pdm_process_spec_tasks%ROWTYPE )
;

FUNCTION ptk_update_row( i_ptk_ID   IN     pdm_process_spec_tasks.ID%TYPE
                       , io_rt_ptk  IN OUT pdm_process_spec_tasks%ROWTYPE )
RETURN NUMBER
;

FUNCTION ptk_delete_row( i_ptk_ID   IN  pdm_process_spec_tasks.ID%TYPE )
RETURN BOOLEAN
;

FUNCTION ptk_seq1_nextval
RETURN pdm_process_spec_tasks.ID%TYPE
;


END pdm_ptk_tapi_pck;
/




package body pdm_ptk_tapi_pck
is




function ptk_select_row( i_ptk_id   in  pdm_process_spec_tasks.id%type
                       , o_rt_ptk   out pdm_process_spec_tasks%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ptk_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_ptk ( i_ptk_id   in  pdm_process_spec_tasks.id%type )
      is 
           select *
             from pdm_process_spec_tasks ptk
            where ptk.id = i_ptk_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_ptk( i_ptk_id => i_ptk_id );
         fetch c_ptk into o_rt_ptk;
         l_found := c_ptk%found;
         close c_ptk;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_ptk%isopen
         then
            close c_ptk;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end ptk_select_row;

function ptk_select_row_uk1( i_ptk_psn_id   in  pdm_process_spec_tasks.psn_id%type
                           , i_ptk_activated_by_evt_id   in  pdm_process_spec_tasks.activated_by_evt_id%type
                           , o_rt_ptk  out pdm_process_spec_tasks%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ptk_select_row_uk1';
   l_found                boolean      := false;
begin
   declare
      cursor c_ptk ( i_ptk_psn_id   in  pdm_process_spec_tasks.psn_id%type
                   , i_ptk_activated_by_evt_id   in  pdm_process_spec_tasks.activated_by_evt_id%type )
      is
         select *
           from pdm_process_spec_tasks ptk
          where ptk.psn_id = i_ptk_psn_id 
            and ptk.activated_by_evt_id = i_ptk_activated_by_evt_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_ptk(i_ptk_psn_id => i_ptk_psn_id, i_ptk_activated_by_evt_id => i_ptk_activated_by_evt_id);
         fetch c_ptk into o_rt_ptk;
         l_found := c_ptk%found;
         close c_ptk;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_ptk%isopen
      then
         close c_ptk;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end ptk_select_row_uk1;

function ptk_select_row_upd( i_ptk_id   in  pdm_process_spec_tasks.id%type
                           , o_rt_ptk   out pdm_process_spec_tasks%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ptk_select_row_upd';
   l_found                boolean      := false;

   cursor c_ptk ( i_ptk_id   in  pdm_process_spec_tasks.id%type )
   is
           select *
             from pdm_process_spec_tasks ptk
            where ptk.id = i_ptk_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_ptk( i_ptk_id => i_ptk_id );
   fetch c_ptk into o_rt_ptk;
   l_found := c_ptk%found;
   close c_ptk;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_ptk%isopen
      then
         close c_ptk;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end ptk_select_row_upd;

function ptk_select_row_upd_uk1( i_ptk_psn_id   in  pdm_process_spec_tasks.psn_id%type
                               , i_ptk_activated_by_evt_id   in  pdm_process_spec_tasks.activated_by_evt_id%type
                               , o_rt_ptk  out pdm_process_spec_tasks%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ptk_select_row_upd_uk1';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := ptk_select_row_uk1( i_ptk_psn_id   =>  i_ptk_psn_id
                                   , i_ptk_activated_by_evt_id   =>  i_ptk_activated_by_evt_id
                                   , o_rt_ptk => o_rt_ptk );
      if l_found
      then
         
         l_found := ptk_select_row_upd( i_ptk_id => o_rt_ptk.id
                                      , o_rt_ptk => o_rt_ptk );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end ptk_select_row_upd_uk1;

procedure ptk_lock_row( i_ptk_id   in  pdm_process_spec_tasks.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ptk_lock_row';
begin
  declare
     cursor c_ptk ( i_ptk_id   in  pdm_process_spec_tasks.id%type )
     is
             select ''
               from pdm_process_spec_tasks ptk
              where ptk.id = i_ptk_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_ptk_id is not null
         then
            begin
                
                ptk_lock_row_nowait( i_ptk_id => i_ptk_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_ptk( i_ptk_id => i_ptk_id );
                  close c_ptk;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_ptk%isopen
         then
            close c_ptk;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end ptk_lock_row;

procedure ptk_lock_row_nowait( i_ptk_id   in  pdm_process_spec_tasks.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ptk_lock_row_nowait';
begin
   declare
      cursor c_ptk ( i_ptk_id   in  pdm_process_spec_tasks.id%type )
      is
              select ''
                from pdm_process_spec_tasks ptk
               where ptk.id = i_ptk_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_ptk_id is not null
         then
            
            open c_ptk( i_ptk_id => i_ptk_id );

            close c_ptk;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_ptk%isopen
        then
           close c_ptk;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_ptk_id||'"' );
   end;                                                          
end ptk_lock_row_nowait;

function ptk_perform_update( i_ptk_id   in     pdm_process_spec_tasks.id%type
                           , io_rt_ptk  in out pdm_process_spec_tasks%rowtype )
return number
;

function ptk_perform_delete( i_ptk_id   in  pdm_process_spec_tasks.id%type )
return boolean
;

procedure ptk_insert_row ( io_rt_ptk  in out pdm_process_spec_tasks%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ptk_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into pdm_process_spec_tasks( id
                                , psn_id
                                , activated_by_evt_id
                                , activated_date
                                , deactivated_by_evt_id
                                , deactivated_date )
              values ( io_rt_ptk.id
                     , io_rt_ptk.psn_id
                     , io_rt_ptk.activated_by_evt_id
                     , io_rt_ptk.activated_date
                     , io_rt_ptk.deactivated_by_evt_id
                     , io_rt_ptk.deactivated_date )
           returning id
                   , psn_id
                   , activated_by_evt_id
                   , activated_date
                   , deactivated_by_evt_id
                   , deactivated_date
                into io_rt_ptk.id
                   , io_rt_ptk.psn_id
                   , io_rt_ptk.activated_by_evt_id
                   , io_rt_ptk.activated_date
                   , io_rt_ptk.deactivated_by_evt_id
                   , io_rt_ptk.deactivated_date;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_ptk.id||'"'
                                                             ||', PSN_ID = "'||io_rt_ptk.psn_id||'"'
                                                             ||', ACTIVATED_BY_EVT_ID = "'||io_rt_ptk.activated_by_evt_id||'"'
                                                             ||', ACTIVATED_DATE = "'||io_rt_ptk.activated_date||'"'
                                                             ||', DEACTIVATED_BY_EVT_ID = "'||io_rt_ptk.deactivated_by_evt_id||'"'
                                                             ||', DEACTIVATED_DATE = "'||io_rt_ptk.deactivated_date||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end ptk_insert_row;

function ptk_perform_update( i_ptk_id   in     pdm_process_spec_tasks.id%type
                           , io_rt_ptk  in out pdm_process_spec_tasks%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ptk_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update pdm_process_spec_tasks
            set id = io_rt_ptk.id
              , psn_id = io_rt_ptk.psn_id
              , activated_by_evt_id = io_rt_ptk.activated_by_evt_id
              , activated_date = io_rt_ptk.activated_date
              , deactivated_by_evt_id = io_rt_ptk.deactivated_by_evt_id
              , deactivated_date = io_rt_ptk.deactivated_date
          where id = i_ptk_id
      returning id
              , psn_id
              , activated_by_evt_id
              , activated_date
              , deactivated_by_evt_id
              , deactivated_date
           into io_rt_ptk.id
              , io_rt_ptk.psn_id
              , io_rt_ptk.activated_by_evt_id
              , io_rt_ptk.activated_date
              , io_rt_ptk.deactivated_by_evt_id
              , io_rt_ptk.deactivated_date;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_ptk.id||'"'
                                                             ||', PSN_ID = "'||io_rt_ptk.psn_id||'"'
                                                             ||', ACTIVATED_BY_EVT_ID = "'||io_rt_ptk.activated_by_evt_id||'"'
                                                             ||', ACTIVATED_DATE = "'||io_rt_ptk.activated_date||'"'
                                                             ||', DEACTIVATED_BY_EVT_ID = "'||io_rt_ptk.deactivated_by_evt_id||'"'
                                                             ||', DEACTIVATED_DATE = "'||io_rt_ptk.deactivated_date||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end ptk_perform_update;

function ptk_perform_delete( i_ptk_id   in  pdm_process_spec_tasks.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ptk_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from pdm_process_spec_tasks
          where id = i_ptk_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_ptk_id||'"' );
   end;                                                          
end ptk_perform_delete;

function ptk_update_row( i_ptk_id   in     pdm_process_spec_tasks.id%type
                       , io_rt_ptk  in out pdm_process_spec_tasks%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ptk_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         ptk_lock_row( i_ptk_id   =>  i_ptk_id );

         
         l_rowcount := 
            ptk_perform_update( i_ptk_id   =>  i_ptk_id
                              , io_rt_ptk  => io_rt_ptk );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_ptk.id||'"'
                                                          ||', PSN_ID = "'||io_rt_ptk.psn_id||'"'
                                                          ||', ACTIVATED_BY_EVT_ID = "'||io_rt_ptk.activated_by_evt_id||'"'
                                                          ||', ACTIVATED_DATE = "'||io_rt_ptk.activated_date||'"'
                                                          ||', DEACTIVATED_BY_EVT_ID = "'||io_rt_ptk.deactivated_by_evt_id||'"'
                                                          ||', DEACTIVATED_DATE = "'||io_rt_ptk.deactivated_date||'"'                                                           , 1, 4000));
   end;                                                          
end ptk_update_row;

function ptk_delete_row( i_ptk_id   in  pdm_process_spec_tasks.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ptk_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         ptk_lock_row( i_ptk_id   =>  i_ptk_id );

         
         l_deleted := ptk_perform_delete( i_ptk_id   =>  i_ptk_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_ptk_id||'"' );
   end;                                                          
end ptk_delete_row;

function ptk_seq1_nextval
return pdm_process_spec_tasks.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.ptk_seq1_nextval';
   l_ptk_id  pdm_process_spec_tasks.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select pdm_ptk_seq1.nextval 
           into l_ptk_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_ptk_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end ptk_seq1_nextval;


end pdm_ptk_tapi_pck;
/