create or replace PACKAGE pdm_mse_tapi_pck
IS
-- Table API package for table pdm_message_subtypes
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:40:59)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'PDM_MSE_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'PDM_MESSAGE_SUBTYPES';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION mse_select_row( i_mse_ID   IN  pdm_message_subtypes.ID%TYPE
                       , o_rt_mse   OUT pdm_message_subtypes%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION mse_select_row_uk1( i_mse_PD_STATUS   IN  pdm_message_subtypes.PD_STATUS%TYPE
                           , i_mse_IMD_ID   IN  pdm_message_subtypes.IMD_ID%TYPE
                           , i_mse_TTE_ID   IN  pdm_message_subtypes.TTE_ID%TYPE
                           , o_rt_mse  OUT pdm_message_subtypes%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION mse_select_row_upd( i_mse_ID   IN  pdm_message_subtypes.ID%TYPE
                           , o_rt_mse   OUT pdm_message_subtypes%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION mse_select_row_upd_uk1( i_mse_PD_STATUS   IN  pdm_message_subtypes.PD_STATUS%TYPE
                               , i_mse_IMD_ID   IN  pdm_message_subtypes.IMD_ID%TYPE
                               , i_mse_TTE_ID   IN  pdm_message_subtypes.TTE_ID%TYPE
                               , o_rt_mse  OUT pdm_message_subtypes%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE mse_lock_row( i_mse_ID   IN  pdm_message_subtypes.ID%TYPE )
;

PROCEDURE mse_lock_row_nowait( i_mse_ID   IN  pdm_message_subtypes.ID%TYPE )
;


END pdm_mse_tapi_pck;
/




package body pdm_mse_tapi_pck
is




function mse_select_row( i_mse_id   in  pdm_message_subtypes.id%type
                       , o_rt_mse   out pdm_message_subtypes%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.mse_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_mse ( i_mse_id   in  pdm_message_subtypes.id%type )
      is 
           select *
             from pdm_message_subtypes mse
            where mse.id = i_mse_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_mse( i_mse_id => i_mse_id );
         fetch c_mse into o_rt_mse;
         l_found := c_mse%found;
         close c_mse;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_mse%isopen
         then
            close c_mse;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end mse_select_row;

function mse_select_row_uk1( i_mse_pd_status   in  pdm_message_subtypes.pd_status%type
                           , i_mse_imd_id   in  pdm_message_subtypes.imd_id%type
                           , i_mse_tte_id   in  pdm_message_subtypes.tte_id%type
                           , o_rt_mse  out pdm_message_subtypes%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.mse_select_row_uk1';
   l_found                boolean      := false;
begin
   declare
      cursor c_mse ( i_mse_pd_status   in  pdm_message_subtypes.pd_status%type
                   , i_mse_imd_id   in  pdm_message_subtypes.imd_id%type
                   , i_mse_tte_id   in  pdm_message_subtypes.tte_id%type )
      is
         select *
           from pdm_message_subtypes mse
          where ( mse.pd_status = i_mse_pd_status or (mse.pd_status is null  and i_mse_pd_status is null  ))
            and mse.imd_id = i_mse_imd_id 
            and ( mse.tte_id = i_mse_tte_id or (mse.tte_id is null  and i_mse_tte_id is null  ));
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_mse(i_mse_pd_status => i_mse_pd_status, i_mse_imd_id => i_mse_imd_id, i_mse_tte_id => i_mse_tte_id);
         fetch c_mse into o_rt_mse;
         l_found := c_mse%found;
         close c_mse;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
   when others
    then
      if c_mse%isopen
      then
         close c_mse;
      end if;
      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end mse_select_row_uk1;

function mse_select_row_upd( i_mse_id   in  pdm_message_subtypes.id%type
                           , o_rt_mse   out pdm_message_subtypes%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.mse_select_row_upd';
   l_found                boolean      := false;

   cursor c_mse ( i_mse_id   in  pdm_message_subtypes.id%type )
   is
           select *
             from pdm_message_subtypes mse
            where mse.id = i_mse_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_mse( i_mse_id => i_mse_id );
   fetch c_mse into o_rt_mse;
   l_found := c_mse%found;
   close c_mse;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_mse%isopen
      then
         close c_mse;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end mse_select_row_upd;

function mse_select_row_upd_uk1( i_mse_pd_status   in  pdm_message_subtypes.pd_status%type
                               , i_mse_imd_id   in  pdm_message_subtypes.imd_id%type
                               , i_mse_tte_id   in  pdm_message_subtypes.tte_id%type
                               , o_rt_mse  out pdm_message_subtypes%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.mse_select_row_upd_uk1';
   l_found                boolean      := false;
begin
   begin
      viu_module.enter_module( i_module => con_proc );

      
      l_found := mse_select_row_uk1( i_mse_pd_status   =>  i_mse_pd_status
                                   , i_mse_imd_id   =>  i_mse_imd_id
                                   , i_mse_tte_id   =>  i_mse_tte_id
                                   , o_rt_mse => o_rt_mse );
      if l_found
      then
         
         l_found := mse_select_row_upd( i_mse_id => o_rt_mse.id
                                      , o_rt_mse => o_rt_mse );
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm);

        viu_info.raise_info(i_calling_procedure => con_proc);
   end;
end mse_select_row_upd_uk1;

procedure mse_lock_row( i_mse_id   in  pdm_message_subtypes.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.mse_lock_row';
begin
  declare
     cursor c_mse ( i_mse_id   in  pdm_message_subtypes.id%type )
     is
             select ''
               from pdm_message_subtypes mse
              where mse.id = i_mse_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_mse_id is not null
         then
            begin
                
                mse_lock_row_nowait( i_mse_id => i_mse_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_mse( i_mse_id => i_mse_id );
                  close c_mse;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_mse%isopen
         then
            close c_mse;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end mse_lock_row;

procedure mse_lock_row_nowait( i_mse_id   in  pdm_message_subtypes.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.mse_lock_row_nowait';
begin
   declare
      cursor c_mse ( i_mse_id   in  pdm_message_subtypes.id%type )
      is
              select ''
                from pdm_message_subtypes mse
               where mse.id = i_mse_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_mse_id is not null
         then
            
            open c_mse( i_mse_id => i_mse_id );

            close c_mse;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_mse%isopen
        then
           close c_mse;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_mse_id||'"' );
   end;                                                          
end mse_lock_row_nowait;


end pdm_mse_tapi_pck;
/