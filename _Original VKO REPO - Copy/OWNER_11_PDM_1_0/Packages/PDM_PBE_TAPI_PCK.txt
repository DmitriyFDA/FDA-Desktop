create or replace PACKAGE pdm_pbe_tapi_pck
IS
-- Table API package for table pdm_package_attributes
-- Generated by VI TAPI generator version 6.2  (TAPI generated 03-Jan-2022  05:40:59)

-- Generated global constants
g_con_pack        CONSTANT     VARCHAR2(30) := 'PDM_PBE_TAPI_PCK';
g_con_table_name  CONSTANT     VARCHAR2(61) := 'PDM_PACKAGE_ATTRIBUTES';
g_lock_conflicts  PLS_INTEGER := 0;


FUNCTION pbe_select_row( i_pbe_ID   IN  pdm_package_attributes.ID%TYPE
                       , o_rt_pbe   OUT pdm_package_attributes%ROWTYPE )
RETURN BOOLEAN
;

FUNCTION pbe_select_row_upd( i_pbe_ID   IN  pdm_package_attributes.ID%TYPE
                           , o_rt_pbe   OUT pdm_package_attributes%ROWTYPE )
RETURN BOOLEAN
;

PROCEDURE pbe_lock_row( i_pbe_ID   IN  pdm_package_attributes.ID%TYPE )
;

PROCEDURE pbe_lock_row_nowait( i_pbe_ID   IN  pdm_package_attributes.ID%TYPE )
;

PROCEDURE pbe_insert_row ( io_rt_pbe  IN OUT pdm_package_attributes%ROWTYPE )
;

FUNCTION pbe_update_row( i_pbe_ID   IN     pdm_package_attributes.ID%TYPE
                       , io_rt_pbe  IN OUT pdm_package_attributes%ROWTYPE )
RETURN NUMBER
;

FUNCTION pbe_delete_row( i_pbe_ID   IN  pdm_package_attributes.ID%TYPE )
RETURN BOOLEAN
;

FUNCTION pbe_seq1_nextval
RETURN pdm_package_attributes.ID%TYPE
;


END pdm_pbe_tapi_pck;
/




package body pdm_pbe_tapi_pck
is




function pbe_select_row( i_pbe_id   in  pdm_package_attributes.id%type
                       , o_rt_pbe   out pdm_package_attributes%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pbe_select_row';
   l_found                boolean      := false;
begin
   declare
      cursor c_pbe ( i_pbe_id   in  pdm_package_attributes.id%type )
      is 
           select *
             from pdm_package_attributes pbe
            where pbe.id = i_pbe_id ;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         open c_pbe( i_pbe_id => i_pbe_id );
         fetch c_pbe into o_rt_pbe;
         l_found := c_pbe%found;
         close c_pbe;
      end;

      viu_module.leave_module( i_module     => con_proc 
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );

      return l_found;

   exception
      when others
      then
         if c_pbe%isopen
         then
            close c_pbe;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pbe_select_row;

function pbe_select_row_upd( i_pbe_id   in  pdm_package_attributes.id%type
                           , o_rt_pbe   out pdm_package_attributes%rowtype )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pbe_select_row_upd';
   l_found                boolean      := false;

   cursor c_pbe ( i_pbe_id   in  pdm_package_attributes.id%type )
   is
           select *
             from pdm_package_attributes pbe
            where pbe.id = i_pbe_id 
         for update;
begin
   viu_module.enter_module( i_module => con_proc );

   
   open c_pbe( i_pbe_id => i_pbe_id );
   fetch c_pbe into o_rt_pbe;
   l_found := c_pbe%found;
   close c_pbe;

   viu_module.leave_module( i_module     => con_proc
                          , i_debug_info => case l_found when true then 'found' else 'notfound' end );

   return l_found;

exception
   when others
   then
      if c_pbe%isopen
      then
         close c_pbe;
      end if;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => sqlerrm );

      viu_info.raise_info( i_calling_procedure => con_proc );

end pbe_select_row_upd;

procedure pbe_lock_row( i_pbe_id   in  pdm_package_attributes.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pbe_lock_row';
begin
  declare
     cursor c_pbe ( i_pbe_id   in  pdm_package_attributes.id%type )
     is
             select ''
               from pdm_package_attributes pbe
              where pbe.id = i_pbe_id 
         for update;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         
         if i_pbe_id is not null
         then
            begin
                
                pbe_lock_row_nowait( i_pbe_id => i_pbe_id );
            exception
               when viu_constant.exc_lockfailed
               then
                  
                  g_lock_conflicts := g_lock_conflicts + 1;

                  
                  viu_info.reset_package_variables;

                  
                  open c_pbe( i_pbe_id => i_pbe_id );
                  close c_pbe;
               end;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         if c_pbe%isopen
         then
            close c_pbe;
         end if;

         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info(i_calling_procedure => con_proc );
   end;                                                          
end pbe_lock_row;

procedure pbe_lock_row_nowait( i_pbe_id   in  pdm_package_attributes.id%type )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pbe_lock_row_nowait';
begin
   declare
      cursor c_pbe ( i_pbe_id   in  pdm_package_attributes.id%type )
      is
              select ''
                from pdm_package_attributes pbe
               where pbe.id = i_pbe_id 
          for update nowait;

   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin

         
         if i_pbe_id is not null
         then
            
            open c_pbe( i_pbe_id => i_pbe_id );

            close c_pbe;
         end if;
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
        if c_pbe%isopen
        then
           close c_pbe;
        end if;

        viu_module.leave_module( i_module     => con_proc
                               , i_debug_info => sqlerrm );

        viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_lockfailed
                           , i_calling_procedure => con_proc
                           , i_severity          => viu_info.c_severity_error
                           , i_info_arguments    => g_con_table_name
                           , i_additional_data   =>   'ID = "'||i_pbe_id||'"' );
   end;                                                          
end pbe_lock_row_nowait;

function pbe_perform_update( i_pbe_id   in     pdm_package_attributes.id%type
                           , io_rt_pbe  in out pdm_package_attributes%rowtype )
return number
;

function pbe_perform_delete( i_pbe_id   in  pdm_package_attributes.id%type )
return boolean
;

procedure pbe_insert_row ( io_rt_pbe  in out pdm_package_attributes%rowtype )
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pbe_insert_row';
begin
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      
      begin
         insert into pdm_package_attributes( id
                                , adn_id
                                , pae_id
                                , value
                                , value_nr
                                , event_time
                                , pet_id
                                , created_by_pet_id
                                , modified_by_pet_id
                                , deleted_by_pet_id
                                , adn_id_source )
              values ( io_rt_pbe.id
                     , io_rt_pbe.adn_id
                     , io_rt_pbe.pae_id
                     , io_rt_pbe.value
                     , io_rt_pbe.value_nr
                     , io_rt_pbe.event_time
                     , io_rt_pbe.pet_id
                     , io_rt_pbe.created_by_pet_id
                     , io_rt_pbe.modified_by_pet_id
                     , io_rt_pbe.deleted_by_pet_id
                     , io_rt_pbe.adn_id_source )
           returning id
                   , adn_id
                   , pae_id
                   , value
                   , value_nr
                   , event_time
                   , pet_id
                   , created_by_pet_id
                   , modified_by_pet_id
                   , deleted_by_pet_id
                   , adn_id_source
                into io_rt_pbe.id
                   , io_rt_pbe.adn_id
                   , io_rt_pbe.pae_id
                   , io_rt_pbe.value
                   , io_rt_pbe.value_nr
                   , io_rt_pbe.event_time
                   , io_rt_pbe.pet_id
                   , io_rt_pbe.created_by_pet_id
                   , io_rt_pbe.modified_by_pet_id
                   , io_rt_pbe.deleted_by_pet_id
                   , io_rt_pbe.adn_id_source;

      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_insertfailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_pbe.id||'"'
                                                             ||', ADN_ID = "'||io_rt_pbe.adn_id||'"'
                                                             ||', PAE_ID = "'||io_rt_pbe.pae_id||'"'
                                                             ||', VALUE = "'||io_rt_pbe.value||'"'
                                                             ||', VALUE_NR = "'||io_rt_pbe.value_nr||'"'
                                                             ||', EVENT_TIME = "'||io_rt_pbe.event_time||'"'
                                                             ||', PET_ID = "'||io_rt_pbe.pet_id||'"'
                                                             ||', CREATED_BY_PET_ID = "'||io_rt_pbe.created_by_pet_id||'"'
                                                             ||', MODIFIED_BY_PET_ID = "'||io_rt_pbe.modified_by_pet_id||'"'
                                                             ||', DELETED_BY_PET_ID = "'||io_rt_pbe.deleted_by_pet_id||'"'
                                                             ||', ADN_ID_SOURCE = "'||io_rt_pbe.adn_id_source||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module => con_proc );

   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pbe_insert_row;

function pbe_perform_update( i_pbe_id   in     pdm_package_attributes.id%type
                           , io_rt_pbe  in out pdm_package_attributes%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pbe_perform_update';
begin
   
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module(i_module => con_proc);

      begin
         update pdm_package_attributes
            set id = io_rt_pbe.id
              , adn_id = io_rt_pbe.adn_id
              , pae_id = io_rt_pbe.pae_id
              , value = io_rt_pbe.value
              , value_nr = io_rt_pbe.value_nr
              , event_time = io_rt_pbe.event_time
              , pet_id = io_rt_pbe.pet_id
              , created_by_pet_id = io_rt_pbe.created_by_pet_id
              , modified_by_pet_id = io_rt_pbe.modified_by_pet_id
              , deleted_by_pet_id = io_rt_pbe.deleted_by_pet_id
              , adn_id_source = io_rt_pbe.adn_id_source
          where id = i_pbe_id
      returning id
              , adn_id
              , pae_id
              , value
              , value_nr
              , event_time
              , pet_id
              , created_by_pet_id
              , modified_by_pet_id
              , deleted_by_pet_id
              , adn_id_source
           into io_rt_pbe.id
              , io_rt_pbe.adn_id
              , io_rt_pbe.pae_id
              , io_rt_pbe.value
              , io_rt_pbe.value_nr
              , io_rt_pbe.event_time
              , io_rt_pbe.pet_id
              , io_rt_pbe.created_by_pet_id
              , io_rt_pbe.modified_by_pet_id
              , io_rt_pbe.deleted_by_pet_id
              , io_rt_pbe.adn_id_source;

         l_rowcount := sql%rowcount;
      exception
         when others
         then
            viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                               , i_calling_procedure => con_proc
                               , i_severity          => viu_info.c_severity_error
                               , i_info_arguments    => g_con_table_name
                               , i_additional_data   => substr('ID = "'||io_rt_pbe.id||'"'
                                                             ||', ADN_ID = "'||io_rt_pbe.adn_id||'"'
                                                             ||', PAE_ID = "'||io_rt_pbe.pae_id||'"'
                                                             ||', VALUE = "'||io_rt_pbe.value||'"'
                                                             ||', VALUE_NR = "'||io_rt_pbe.value_nr||'"'
                                                             ||', EVENT_TIME = "'||io_rt_pbe.event_time||'"'
                                                             ||', PET_ID = "'||io_rt_pbe.pet_id||'"'
                                                             ||', CREATED_BY_PET_ID = "'||io_rt_pbe.created_by_pet_id||'"'
                                                             ||', MODIFIED_BY_PET_ID = "'||io_rt_pbe.modified_by_pet_id||'"'
                                                             ||', DELETED_BY_PET_ID = "'||io_rt_pbe.deleted_by_pet_id||'"'
                                                             ||', ADN_ID_SOURCE = "'||io_rt_pbe.adn_id_source||'"'                                                              , 1, 4000));
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount)||' rows updated' );

      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pbe_perform_update;

function pbe_perform_delete( i_pbe_id   in  pdm_package_attributes.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pbe_perform_delete';
begin
   
   declare
      l_found  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         delete
           from pdm_package_attributes
          where id = i_pbe_id;

         l_found := sql%found;
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => case l_found when true then 'found' else 'notfound' end );
      return l_found;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_pbe_id||'"' );
   end;                                                          
end pbe_perform_delete;

function pbe_update_row( i_pbe_id   in     pdm_package_attributes.id%type
                       , io_rt_pbe  in out pdm_package_attributes%rowtype )
return number
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pbe_update_row';
begin
   declare
      l_rowcount  number := 0;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         pbe_lock_row( i_pbe_id   =>  i_pbe_id );

         
         l_rowcount := 
            pbe_perform_update( i_pbe_id   =>  i_pbe_id
                              , io_rt_pbe  => io_rt_pbe );
      end;

      viu_module.leave_module( i_module     => con_proc
                             , i_debug_info => to_char(l_rowcount) ||' rows updated');
      return l_rowcount;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm);

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_updatefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   => substr('ID = "'||io_rt_pbe.id||'"'
                                                          ||', ADN_ID = "'||io_rt_pbe.adn_id||'"'
                                                          ||', PAE_ID = "'||io_rt_pbe.pae_id||'"'
                                                          ||', VALUE = "'||io_rt_pbe.value||'"'
                                                          ||', VALUE_NR = "'||io_rt_pbe.value_nr||'"'
                                                          ||', EVENT_TIME = "'||io_rt_pbe.event_time||'"'
                                                          ||', PET_ID = "'||io_rt_pbe.pet_id||'"'
                                                          ||', CREATED_BY_PET_ID = "'||io_rt_pbe.created_by_pet_id||'"'
                                                          ||', MODIFIED_BY_PET_ID = "'||io_rt_pbe.modified_by_pet_id||'"'
                                                          ||', DELETED_BY_PET_ID = "'||io_rt_pbe.deleted_by_pet_id||'"'
                                                          ||', ADN_ID_SOURCE = "'||io_rt_pbe.adn_id_source||'"'                                                           , 1, 4000));
   end;                                                          
end pbe_update_row;

function pbe_delete_row( i_pbe_id   in  pdm_package_attributes.id%type )
return boolean
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pbe_delete_row';
begin
   declare
      l_deleted  boolean := false;
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         
         pbe_lock_row( i_pbe_id   =>  i_pbe_id );

         
         l_deleted := pbe_perform_delete( i_pbe_id   =>  i_pbe_id );
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_deleted;
   exception
      when others
      then
         viu_module.leave_module( i_module     => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_ifo_nr            => viu_constant.c_ifo_deletefailed
                            , i_calling_procedure => con_proc
                            , i_severity          => viu_info.c_severity_error
                            , i_info_arguments    => g_con_table_name
                            , i_additional_data   =>   'ID = "'||i_pbe_id||'"' );
   end;                                                          
end pbe_delete_row;

function pbe_seq1_nextval
return pdm_package_attributes.id%type
is
   con_proc  constant     varchar2(61) := g_con_pack || '.pbe_seq1_nextval';
   l_pbe_id  pdm_package_attributes.id%type;
begin
   begin                                                         
      viu_module.enter_module( i_module => con_proc );

      begin
         select pdm_pbe_seq1.nextval 
           into l_pbe_id
           from dual;
      end;

      viu_module.leave_module( i_module => con_proc );

      return l_pbe_id;
   exception
      when others
      then
         viu_module.leave_module( i_module => con_proc
                                , i_debug_info => sqlerrm );

         viu_info.raise_info( i_calling_procedure => con_proc );
   end;                                                          
end pbe_seq1_nextval;


end pdm_pbe_tapi_pck;
/